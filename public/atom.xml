<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay Hungary</title>
  
  <subtitle>Programming is an art form</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldjune.com/"/>
  <updated>2018-03-15T12:52:16.375Z</updated>
  <id>http://coldjune.com/</id>
  
  <author>
    <name>邓小俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPython入门</title>
    <link href="http://coldjune.com/2018/03/15/IPython%E5%85%A5%E9%97%A8/"/>
    <id>http://coldjune.com/2018/03/15/IPython入门/</id>
    <published>2018-03-15T02:05:42.000Z</published>
    <updated>2018-03-15T12:52:16.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPython基础"><a href="#IPython基础" class="headerlink" title="IPython基础"></a>IPython基础</h2><p><a href="https://ipython.org/" target="_blank" rel="noopener">IPython</a>的环境需要自行安装。如果已经安装了Python，可以通过执行<code>pip install ipython</code>安装。然后只需要在命令行输入<code>ipython</code>就能启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><p>可以在IPython中执行任何Python语句，和使用Python解释器一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import numpy as np</span><br><span class="line"></span><br><span class="line">In [2]: from numpy.random import randn</span><br><span class="line"></span><br><span class="line">In [3]: data = &#123;i:randn() for i in range(10)&#125;</span><br><span class="line"></span><br><span class="line">In [4]: data</span><br><span class="line">Out[4]:</span><br><span class="line">&#123;0: -0.24193324837938815,</span><br><span class="line"> 1: 0.22563840475528563,</span><br><span class="line"> 2: 0.14465306885873513,</span><br><span class="line"> 3: 0.5076262433687561,</span><br><span class="line"> 4: 0.9067731627966235,</span><br><span class="line"> 5: 0.23827518072962814,</span><br><span class="line"> 6: 0.3233586627456586,</span><br><span class="line"> 7: 0.0327013232275763,</span><br><span class="line"> 8: -0.357340429464286,</span><br><span class="line"> 9: -1.4105691657079547&#125;</span><br><span class="line"></span><br><span class="line">In [5]:</span><br></pre></td></tr></table></figure></p><p>许多Python对象都被格式化为可读性更好的形式</p><h3 id="Tab键自动完成"><a href="#Tab键自动完成" class="headerlink" title="Tab键自动完成"></a>Tab键自动完成</h3><p>在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [5]: an_example1 = 15</span><br><span class="line"></span><br><span class="line">In [6]: an_example2 = 20</span><br><span class="line"></span><br><span class="line">In [7]: an&lt;TAB&gt;</span><br><span class="line">           an_example1               AnalogCommonProxyStub.dll</span><br><span class="line">           an_example2               and</span><br><span class="line">           any()</span><br></pre></td></tr></table></figure></p><p>也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [7]: a = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">In [8]: a.&lt;TAB&gt;</span><br><span class="line">           append()  count()   insert()  reverse()</span><br><span class="line">           clear()   extend()  pop()     sort()</span><br><span class="line">           copy()    index()   remove()</span><br></pre></td></tr></table></figure></p><p>应用在模块上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [8]: import datetime</span><br><span class="line"></span><br><span class="line">In [9]: datetime.</span><br><span class="line">                  date()        MAXYEAR       timedelta</span><br><span class="line">                  datetime      MINYEAR       timezone</span><br><span class="line">                  datetime_CAPI time()        tzinfo()</span><br></pre></td></tr></table></figure></p><p>IPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。<br>Tab键还可以找出电脑文件系统中与之匹配的东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [6]: ca&lt;TAB&gt;</span><br><span class="line">           callable()</span><br><span class="line">           %%capture</span><br><span class="line">           catchLink/</span><br></pre></td></tr></table></figure></p><p>其中 <em>catchLibk/</em> 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。</p><h3 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h3><p>在变量前面或者后面加上一个问号(<strong>?</strong>)就可以将有关该对象的一些通用信息显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [2]: b = []</span><br><span class="line"></span><br><span class="line">In [3]: b?</span><br><span class="line">Type:        list</span><br><span class="line">String form: []</span><br><span class="line">Length:      0</span><br><span class="line">Docstring:</span><br><span class="line">list() -&gt; new empty list</span><br><span class="line">list(iterable) -&gt; new list initialized from iterable&apos;s items</span><br></pre></td></tr></table></figure></p><p>如果该对象是一个函数或实例方法，则其docstring也会被显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [4]: def add_number(a,b):</span><br><span class="line">   ...:     &quot;&quot;&quot;</span><br><span class="line">   ...:     Add two numbers together</span><br><span class="line">   ...:     Returns</span><br><span class="line">   ...:     -----------------------</span><br><span class="line">   ...:     the sum: type of arguments</span><br><span class="line">   ...:     &quot;&quot;&quot;</span><br><span class="line">   ...:     return a+b</span><br><span class="line">   ...:</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [5]: add_number?</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Docstring:</span><br><span class="line">Add two numbers together</span><br><span class="line">Returns</span><br><span class="line">-----------------------</span><br><span class="line">the sum: type of arguments</span><br><span class="line">File:      d:\python\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p>使用<code>??</code>还将显示源代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [6]: add_number??</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Source:</span><br><span class="line">def add_number(a,b):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Add two numbers together</span><br><span class="line">    Returns</span><br><span class="line">    -----------------------</span><br><span class="line">    the sum: type of arguments</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return a+b</span><br><span class="line">File:      d:\python\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p><code>?</code>还可以搜索IPython的命名空间，一些字符再配以通配符(*)即可显示出所有与该通配符表达式相匹配的名称:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [7]: import numpy as np</span><br><span class="line"></span><br><span class="line">In [8]: np.*load*?</span><br><span class="line">np.__loader__</span><br><span class="line">np.load</span><br><span class="line">np.loads</span><br><span class="line">np.loadtxt</span><br><span class="line">np.pkgload</span><br></pre></td></tr></table></figure></p><h3 id="run命令"><a href="#run命令" class="headerlink" title="%run命令"></a>%run命令</h3><p>在IPython会话环境中，所有文件都可以通过<code>%run</code>命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x+y) /z</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [9]: %run ipython_script_test.py</span><br><span class="line"></span><br><span class="line">In [10]: result</span><br><span class="line">Out[10]: 1.0</span><br><span class="line"></span><br><span class="line">In [11]: a</span><br><span class="line">Out[11]: 1</span><br></pre></td></tr></table></figure></p><h3 id="中断正在执行的代码"><a href="#中断正在执行的代码" class="headerlink" title="中断正在执行的代码"></a>中断正在执行的代码</h3><p>任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。</p><h3 id="执行剪切板中的代码"><a href="#执行剪切板中的代码" class="headerlink" title="执行剪切板中的代码"></a>执行剪切板中的代码</h3><p>使用<code>%paste</code>和<code>%cpaste</code>两个魔术函数粘贴代码在shell中以整体执行：</p><ul><li>%paste</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [12]: %paste</span><br><span class="line">def f(x, y, z):</span><br><span class="line">    return (x+y) /z</span><br><span class="line"></span><br><span class="line">a = 1</span><br><span class="line">b = 2</span><br><span class="line">c = 3</span><br><span class="line">result = f(a, b, c)</span><br><span class="line">## -- End pasted text --</span><br></pre></td></tr></table></figure><ul><li>%cpaste</li></ul><p>相比于<code>%paste</code>，<code>%cpaste</code>多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [16]: %cpaste</span><br><span class="line">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class="line">:def f(x, y, z):</span><br><span class="line">:    return (x+y) /z</span><br><span class="line">:</span><br><span class="line">:a = 1</span><br><span class="line">:b = 2</span><br><span class="line">:c = 3</span><br><span class="line">:result = f(a, b, c)</span><br><span class="line">:--</span><br></pre></td></tr></table></figure></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>IPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(<strong>C指代Ctrl或control</strong>)：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">C-P或上箭头</td><td style="text-align:center">后向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-N或下箭头</td><td style="text-align:center">前向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-R</td><td style="text-align:center">按行读取的反向历史搜索(部分匹配)</td></tr><tr><td style="text-align:center">C-Shift-V/Command-Shift-V</td><td style="text-align:center">从剪切板粘贴文本</td></tr><tr><td style="text-align:center">C-C</td><td style="text-align:center">终止当前正在执行的代码</td></tr><tr><td style="text-align:center">C-A</td><td style="text-align:center">将光标移动到行首</td></tr><tr><td style="text-align:center">C-E</td><td style="text-align:center">将光标移动到行尾</td></tr><tr><td style="text-align:center">C-K</td><td style="text-align:center">删除从光标开始至行尾的文本</td></tr><tr><td style="text-align:center">C-U</td><td style="text-align:center">清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本)</td></tr><tr><td style="text-align:center">C-F</td><td style="text-align:center">将光标向前移动一个字符</td></tr><tr><td style="text-align:center">C-b</td><td style="text-align:center">将光标向后移动一个字符</td></tr><tr><td style="text-align:center">C-L</td><td style="text-align:center">清屏</td></tr></tbody></table><h3 id="异常和跟踪"><a href="#异常和跟踪" class="headerlink" title="异常和跟踪"></a>异常和跟踪</h3><p>如果<code>%run</code>某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [17]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py in &lt;module&gt;()</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py in f(x, y, z)</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><h3 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h3><p>IPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 <code>%</code> 为前缀的命令。例如通过<code>%timeit</code>检测任何Python语句的执行时间:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [41]: a = np.random.randn(100,100)</span><br><span class="line"></span><br><span class="line">In [42]: %timeit np.dot(a,a)</span><br><span class="line">237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure></p><p>魔术命令可以看做运行于IPython系统中的命令行程序，使用<code>?</code>即可查看其选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [44]: %reset?</span><br><span class="line">Docstring:</span><br><span class="line">Resets the namespace by removing all names defined by the user, if</span><br><span class="line">called without arguments, or by removing some types of objects, such</span><br><span class="line">as everything currently in IPython&apos;s In[] and Out[] containers (see</span><br><span class="line">the parameters for details).</span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">----------</span><br><span class="line">-f : force reset without asking for confirmation.</span><br><span class="line"></span><br><span class="line">-s : &apos;Soft&apos; reset: Only clears your namespace, leaving history intact.</span><br><span class="line">    References to objects may be kept. By default (without this option),</span><br><span class="line">    we do a &apos;hard&apos; reset, giving you a new session and removing all</span><br><span class="line">    references to objects from the current session.</span><br><span class="line"></span><br><span class="line">in : reset input history</span><br><span class="line"></span><br><span class="line">out : reset output history</span><br><span class="line"></span><br><span class="line">dhist : reset directory history</span><br><span class="line"></span><br><span class="line">array : reset only variables that are NumPy arrays</span><br><span class="line"></span><br><span class="line">See Also</span><br><span class="line">--------</span><br><span class="line">reset_selective : invoked as ``%reset_selective``</span><br><span class="line"></span><br><span class="line">Examples</span><br><span class="line">--------</span><br><span class="line">::</span><br><span class="line"></span><br><span class="line">  In [6]: a = 1</span><br><span class="line"></span><br><span class="line">  In [7]: a</span><br><span class="line">  Out[7]: 1</span><br><span class="line"></span><br><span class="line">  In [8]: &apos;a&apos; in _ip.user_ns</span><br><span class="line">  Out[8]: True</span><br></pre></td></tr></table></figure></p><p>魔术命令可以不带百分号使用，只要没有定义与其同名的变量。</p><ul><li>常用的魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%quickref</td><td style="text-align:center">显示Python的快速参考</td></tr><tr><td style="text-align:center">%magic</td><td style="text-align:center">显示所有魔术命令的详细文档</td></tr><tr><td style="text-align:center">%debug</td><td style="text-align:center">从最新的异常跟踪的底部进入交互式调试器</td></tr><tr><td style="text-align:center">%hist</td><td style="text-align:center">打印命令的输入(可选输出)历史</td></tr><tr><td style="text-align:center">%pdb</td><td style="text-align:center">在异常发生后自动进入调试器</td></tr><tr><td style="text-align:center">%paste</td><td style="text-align:center">执行剪切板中的Python代码</td></tr><tr><td style="text-align:center">%cpaste</td><td style="text-align:center">打开一个特殊提示符以便手工粘贴待执行的Python代码</td></tr><tr><td style="text-align:center">%reset</td><td style="text-align:center">删除interactive命名空间的全部变量/名称</td></tr><tr><td style="text-align:center">%page OBJECT</td><td style="text-align:center">通过分页器打印输出OBJECT</td></tr><tr><td style="text-align:center">%run script.py</td><td style="text-align:center">在IPython中执行一个Python脚本文件</td></tr><tr><td style="text-align:center">%prun statement</td><td style="text-align:center">通过cProfile执行statement，并打印分析器的输出结果</td></tr><tr><td style="text-align:center">%time statement</td><td style="text-align:center">报告statement的执行时间</td></tr><tr><td style="text-align:center">%timeit statement</td><td style="text-align:center">多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用</td></tr><tr><td style="text-align:center">%who、%who_is、%whos</td><td style="text-align:center">显示interactive命名空间中定义的变量，信息级别/冗余度可变</td></tr><tr><td style="text-align:center">%xdel variable</td><td style="text-align:center">删除variable，并参加过时清除其在IPython中的对象上的一切引用</td></tr></tbody></table><h3 id="matplotlib集成与pylab模式"><a href="#matplotlib集成与pylab模式" class="headerlink" title="matplotlib集成与pylab模式"></a>matplotlib集成与pylab模式</h3><p>启动IPython时加上<code>--pylab</code>标记来集成matplotlib<code>ipython --pylab</code>。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过<code>%gui</code>对此进行手工设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line">Using matplotlib backend: TkAgg</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><h2 id="使用命令历史"><a href="#使用命令历史" class="headerlink" title="使用命令历史"></a>使用命令历史</h2><p>IPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：</p><ol><li>只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令</li><li>在会话间持久化命令历史</li><li>将输入/输出历史记录到日志文件</li></ol><h3 id="搜索并重用命令历史"><a href="#搜索并重用命令历史" class="headerlink" title="搜索并重用命令历史"></a>搜索并重用命令历史</h3><p>如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。</p><h3 id="输入和输出变量"><a href="#输入和输出变量" class="headerlink" title="输入和输出变量"></a>输入和输出变量</h3><p>IPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 <code>_</code>(一个下划线)和 <code>__</code>(两个下划线)变量中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [6]: 1+1</span><br><span class="line">Out[6]: 2</span><br><span class="line"></span><br><span class="line">In [7]: _</span><br><span class="line">Out[7]: 2</span><br><span class="line"></span><br><span class="line">In [8]: _+1</span><br><span class="line">Out[8]: 3</span><br><span class="line"></span><br><span class="line">In [9]: 3+1</span><br><span class="line">Out[9]: 4</span><br><span class="line"></span><br><span class="line">In [10]: __</span><br><span class="line">Out[10]: 3</span><br></pre></td></tr></table></figure></p><p>输入的文本保存在名为<code>_ix</code>的变量中，其中 <strong>X</strong> 是输入行的行号。每个输入变量都有一个对应的输出变量<code>_x</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [11]: _i6</span><br><span class="line">Out[11]: &apos;1+1&apos;</span><br><span class="line"></span><br><span class="line">In [12]: _6</span><br><span class="line">Out[12]: 2</span><br></pre></td></tr></table></figure></p><p>由于输入变量是字符串，因此可以用Python的<code>exec()</code>方法重新执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [18]: exec(_i6)</span><br><span class="line"></span><br><span class="line">In [19]: _</span><br><span class="line">Out[19]: &apos;1+1&apos;</span><br></pre></td></tr></table></figure></p><p>有几个魔术命令可以用于控制输入和输出历史。<code>%hist</code>用于打印全部或部分输入历史，可以选择是否带行号。<code>%reset</code>用于清空interactive命名空间，并可选择是否清空输入和输出缓存。<code>%xdel</code>用于从IPython系统中移除特定对象的一切引用。</p><h3 id="记录输入和输出"><a href="#记录输入和输出" class="headerlink" title="记录输入和输出"></a>记录输入和输出</h3><p>IPython能够记录整个控制台会话，包括输入和输出。执行<code>%logstart</code>即可开始记录日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [20]: %logstart</span><br><span class="line">Activating auto-logging. Current session state plus future input saved.</span><br><span class="line">Filename       : ipython_log.py</span><br><span class="line">Mode           : rotate</span><br><span class="line">Output logging : False</span><br><span class="line">Raw input log  : False</span><br><span class="line">Timestamping   : False</span><br><span class="line">State          : active</span><br></pre></td></tr></table></figure></p><p>IPython的日志功能可以在任何时刻开启。还有与<code>%logstart</code>配套的<code>%logoff</code>、<code>%logon</code>、<code>%logstate</code>和<code>%logstop</code>，可以参考其文档。</p><h3 id="与操作系统交互"><a href="#与操作系统交互" class="headerlink" title="与操作系统交互"></a>与操作系统交互</h3><p>可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中</p><ul><li>跟系统相关的IPython魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">!cmd</td><td style="text-align:center">在系统shell中执行cmd</td></tr><tr><td style="text-align:center">output=!cmd args</td><td style="text-align:center">执行cmd，并将stout存放在output中</td></tr><tr><td style="text-align:center">%alias alias_name cmd</td><td style="text-align:center">为系统shell命令定义别名</td></tr><tr><td style="text-align:center">%bookmark</td><td style="text-align:center">使用IPython的目录书签系统</td></tr><tr><td style="text-align:center">%cd directory</td><td style="text-align:center">将系统工作目录更改为directory</td></tr><tr><td style="text-align:center">%pwd</td><td style="text-align:center">返回系统的当前工作目录</td></tr><tr><td style="text-align:center">%pushd directory</td><td style="text-align:center">将当前目录入栈，并转向目标目录</td></tr><tr><td style="text-align:center">%popd</td><td style="text-align:center">弹出栈顶目录，并转向该目录</td></tr><tr><td style="text-align:center">%dirs</td><td style="text-align:center">返回一个含有当前目录栈的列表</td></tr><tr><td style="text-align:center">%dhist</td><td style="text-align:center">打印目录访问历史</td></tr><tr><td style="text-align:center">%env</td><td style="text-align:center">以dict形式返回系统环境变量</td></tr></tbody></table><h4 id="shell命令和别名"><a href="#shell命令和别名" class="headerlink" title="shell命令和别名"></a>shell命令和别名</h4><p>在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [23]: !python</span><br><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>还可以将shell命令的控制台输出存放到变量中，只需将 <code>!</code> 开头的表达式赋值给变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [152]: ip_info = !ls</span><br><span class="line"></span><br><span class="line">In [153]: ip_info</span><br><span class="line">Out[153]: [&apos;experiment.py&apos;, &apos;ipython_bug.py&apos;, &apos;ipython_script_test.py&apos;]</span><br></pre></td></tr></table></figure></p><h2 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h2><p>IPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。</p><h3 id="交互式调试器"><a href="#交互式调试器" class="headerlink" title="交互式调试器"></a>交互式调试器</h3><p>IPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。<code>%debug</code>命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [45]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py in &lt;module&gt;()</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py in f(x, y, z)</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">In [46]: %debug</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(2)f()</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br></pre></td></tr></table></figure></p><p>在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入<code>u</code>(或up)和<code>d</code>(或down)即可在栈跟踪的各级别之间切换:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; u</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; d</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(2)f()</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br></pre></td></tr></table></figure></p><p>执行<code>%pdp</code>命令可以让IPython在出现异常之后自动调用调试器。<br>如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有<code>-d</code>选项的<code>%run</code>命令，这会在执行脚本文件中的代码之前打开调试器，然后输入<code>s</code>(或step)步进才能进入脚本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [50]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint 1 at d:\python\ipython\ipython_bug.py:1</span><br><span class="line">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(1)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(4)&lt;module&gt;()</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">----&gt; 4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(5)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">----&gt; 5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">      7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(6)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">----&gt; 6 c = 0</span><br><span class="line">      7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>通过<code>b num</code>在num行出设置断点，输入<code>c</code>(或continue)使脚本一直运行下去直到该断点时为止,然后输入<code>n</code>(或next)直到执行下一行(即step over):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [53]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint 1 at d:\python\ipython\ipython_bug.py:1</span><br><span class="line">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(1)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ipdb&gt; b 7</span><br><span class="line">Breakpoint 2 at d:\python\ipython\ipython_bug.py:7</span><br><span class="line">ipdb&gt; c</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">--Return--</span><br><span class="line">None</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><ul><li>IPython调试器命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">h(elp)</td><td style="text-align:center">显示命令列表</td></tr><tr><td style="text-align:center">help command</td><td style="text-align:center">显示command的文档</td></tr><tr><td style="text-align:center">c(ontinue)</td><td style="text-align:center">恢复程序的执行</td></tr><tr><td style="text-align:center">q(uit)</td><td style="text-align:center">退出调试器，不再执行任何代码</td></tr><tr><td style="text-align:center">b(readk) number</td><td style="text-align:center">在当前文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">b path/to/file.py:number</td><td style="text-align:center">在指定文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">s(tep)</td><td style="text-align:center">单步进入函数调用</td></tr><tr><td style="text-align:center">n(ext)</td><td style="text-align:center">执行当前行，并前进到当前级别的下一行</td></tr><tr><td style="text-align:center">u(p)/d(own)</td><td style="text-align:center">在函数调用栈中向上或向下移动</td></tr><tr><td style="text-align:center">a(rgs)</td><td style="text-align:center">显示当前函数的参数</td></tr><tr><td style="text-align:center">debug statement</td><td style="text-align:center">在新的(递归)调试器中调用语句statement</td></tr><tr><td style="text-align:center">l(ist)  statement</td><td style="text-align:center">显示当前行，以及当前栈级别的上下文参考代码</td></tr><tr><td style="text-align:center">w(here)</td><td style="text-align:center">打印当前位置的完整栈跟踪(包括上下文参考代码)</td></tr></tbody></table><h3 id="测试代码的执行时间-time和-timeit"><a href="#测试代码的执行时间-time和-timeit" class="headerlink" title="测试代码的执行时间:%time和%timeit"></a>测试代码的执行时间:%time和%timeit</h3><p><code>%time</code>一次执行一条语句，然后报告总体执行时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [56]: strings = [&apos;foo&apos;,&apos;bar&apos;,&apos;abc&apos;,&apos;foobar&apos;,&apos;python&apos;,&apos;Guide Peple&apos;]*100000</span><br><span class="line"></span><br><span class="line">In [57]: %time method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class="line">Wall time: 102 ms</span><br><span class="line"></span><br><span class="line">In [58]: %time method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class="line">Wall time: 59.2 ms</span><br></pre></td></tr></table></figure></p><p><code>%timeit</code>对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [59]: %timeit method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class="line">100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class="line"></span><br><span class="line">In [60]: %timeit method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class="line">57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br></pre></td></tr></table></figure></p><h3 id="基本性能分析：-prun和-run-p"><a href="#基本性能分析：-prun和-run-p" class="headerlink" title="基本性能分析：%prun和%run -p"></a>基本性能分析：%prun和%run -p</h3><p>代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。<code>%prun</code>分析的是Python语句而不是整个.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [141]: %cpaste</span><br><span class="line">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class="line">:def run_experiment(niter=100):</span><br><span class="line">    k = 100</span><br><span class="line">    results = []</span><br><span class="line">    for _ in range(niter):</span><br><span class="line">        mat = np.random.randn(k, k)</span><br><span class="line">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class="line">        results.append(max_eigenvalue)</span><br><span class="line">    return results:::::::</span><br><span class="line">:</span><br><span class="line">:--</span><br><span class="line"></span><br><span class="line">In [142]: %prun -l 7 -s cumulative run_experiment()</span><br><span class="line">         3804 function calls in 0.901 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced from 31 to 7 due to restriction &lt;7&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        1    0.000    0.000    0.901    0.901 &#123;built-in method builtins.exec&#125;</span><br><span class="line">        1    0.000    0.000    0.901    0.901 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class="line">        1    0.002    0.002    0.901    0.901 &lt;ipython-input-141-78ef833ef08b&gt;:1(run_experiment)</span><br><span class="line">      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)</span><br><span class="line">      100    0.060    0.001    0.060    0.001 &#123;method &apos;randn&apos; of &apos;mtrand.RandomState&apos; objects&#125;</span><br><span class="line">      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)</span><br><span class="line">      300    0.008    0.000    0.008    0.000 &#123;method &apos;reduce&apos; of &apos;numpy.ufunc&apos; objects&#125;</span><br></pre></td></tr></table></figure></p><p>执行<code>%run -p -s cumulative experiment.py</code>也能达到以上的效果，无需退出IPython:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [75]: %run -p -l 7 -s cumulative experiment.py</span><br><span class="line">Largest one we saw:11.9165340849</span><br><span class="line">         3888 function calls (3887 primitive calls) in 0.467 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced from 77 to 7 due to restriction &lt;7&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">      2/1    0.000    0.000    0.467    0.467 &#123;built-in method builtins.exec&#125;</span><br><span class="line">        1    0.000    0.000    0.467    0.467 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 experiment.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)</span><br><span class="line">      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)</span><br></pre></td></tr></table></figure></p><h2 id="ipython-html-notebook"><a href="#ipython-html-notebook" class="headerlink" title="ipython html notebook"></a>ipython html notebook</h2><p>需要安装 <em>jupyter</em> 来使用该功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure></p><p>这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。</p>]]></content>
    
    <summary type="html">
    
      IPython有一个可以直接进行绘图的GUI控制台、一个基于Web的交互式笔记本，以及一个轻量级的快速并行计算引擎。
    
    </summary>
    
      <category term="true" scheme="http://coldjune.com/categories/true/"/>
    
    
      <category term="IPython" scheme="http://coldjune.com/tags/IPython/"/>
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python文本处理</title>
    <link href="http://coldjune.com/2018/03/13/Python%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <id>http://coldjune.com/2018/03/13/Python文本处理/</id>
    <published>2018-03-13T06:48:15.000Z</published>
    <updated>2018-03-13T11:17:28.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逗号分割值-CSV"><a href="#逗号分割值-CSV" class="headerlink" title="逗号分割值(CSV)"></a>逗号分割值(CSV)</h2><h3 id="CSV简介"><a href="#CSV简介" class="headerlink" title="CSV简介"></a>CSV简介</h3><p><strong>逗号分割值(Comma-Spearated Value, CSV)</strong> 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用<code>str.splt(&#39;,&#39;)</code>来解析，因为会处理单个字段中含有逗号的情形。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment">#  创建需要导入的数据源</span></span><br><span class="line">DATA = (</span><br><span class="line">    (<span class="number">1</span>, <span class="string">'Web Clients and Servers'</span>, <span class="string">'base64,urllib'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'Web program：CGI &amp; WSGI'</span>, <span class="string">'cgi, time, wsgiref'</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'Web Services'</span>, <span class="string">'urllib,twython'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'*** WRITTING CSV DATA'</span>)</span><br><span class="line"><span class="comment"># 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> w:</span><br><span class="line">    <span class="comment"># csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象</span></span><br><span class="line">    <span class="comment"># 可以用来在打开的文件中逐行写入逗号分隔的数据。</span></span><br><span class="line">    writer = csv.writer(w)</span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> DATA:</span><br><span class="line">        writer.writerow(record)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># writer对象提供一个writerow()方法</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'****REVIEW OF SAVED DATA'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> r:</span><br><span class="line">    <span class="comment"># csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行</span></span><br><span class="line">    <span class="comment"># csv.reader()使用一个已打开文件的句柄，返回一个reader对象</span></span><br><span class="line">    <span class="comment"># 当逐行迭代数据时，CSV数据会自动解析并返回给用户</span></span><br><span class="line">    reader = csv.reader(r)</span><br><span class="line">    <span class="keyword">for</span> chap, title, modpkgs <span class="keyword">in</span> reader:</span><br><span class="line">        print(<span class="string">'Chapter %s: %r (featureing %s)'</span> % (chap, title, modpkgs))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*** WRITTING CSV DATA</span><br><span class="line">****REVIEW OF SAVED DATA</span><br><span class="line">Chapter 1: &apos;Web Clients and Servers&apos; (featureing base64,urllib)</span><br><span class="line">Chapter 2: &apos;Web program：CGI &amp; WSGI&apos; (featureing cgi, time, wsgiref)</span><br><span class="line">Chapter 3: &apos;Web Services&apos; (featureing urllib,twython)</span><br></pre></td></tr></table></figure><p>csv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。</p><ul><li>JSON和Python类型之间的区别</li></ul><table><thead><tr><th style="text-align:center">JSON</th><th style="text-align:center">Python3</th></tr></thead><tbody><tr><td style="text-align:center">object</td><td style="text-align:center">dict</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">list tuple</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">str</td></tr><tr><td style="text-align:center">number(int)</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">number(real)</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">True</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">False</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">None</td></tr></tbody></table><p>json提供了<code>dump()</code>/<code>load()</code>和<code>dumps()</code>/<code>loads()</code>。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个表示Python对象的字符串</span></span><br><span class="line"><span class="comment"># 用来美观地输出Python对象</span></span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: [<span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Jerry'</span>],</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示转储的Python字典</span></span><br><span class="line">print(<span class="string">'***RAW DICT***'</span>)</span><br><span class="line">print(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用更美观的方法输出</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED DICT***'</span>)</span><br><span class="line">pprint(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.dumps()内置的美观的输出方式，传递缩进级别</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED JSON***'</span>)</span><br><span class="line">print(dumps(Books, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">***RAW DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;title&apos;: &apos;Core&apos;, &apos;edition&apos;: 2, &apos;year&apos;: 2007&#125;, &apos;0000002&apos;: &#123;&apos;title&apos;: &apos;Python Programming&apos;, &apos;edition&apos;: 3, &apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;], &apos;year&apos;: 2009&#125;, &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;edition&apos;: 2, &apos;title&apos;: &apos;Core&apos;, &apos;year&apos;: 2007&#125;,</span><br><span class="line"> &apos;0000002&apos;: &#123;&apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;],</span><br><span class="line">             &apos;edition&apos;: 3,</span><br><span class="line">             &apos;title&apos;: &apos;Python Programming&apos;,</span><br><span class="line">             &apos;year&apos;: 2009&#125;,</span><br><span class="line"> &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED JSON***</span><br><span class="line">&#123;</span><br><span class="line">    &quot;0000001&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Core&quot;,</span><br><span class="line">        &quot;edition&quot;: 2,</span><br><span class="line">        &quot;year&quot;: 2007</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000002&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Python Programming&quot;,</span><br><span class="line">        &quot;edition&quot;: 3,</span><br><span class="line">        &quot;authors&quot;: [</span><br><span class="line">            &quot;Jack&quot;,</span><br><span class="line">            &quot;Bob&quot;,</span><br><span class="line">            &quot;Jerry&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000003&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Programming&quot;,</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。</p><ul><li><p>将字典转化为XML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, tostring</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parseString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: <span class="string">'Jack:Bob:Jerry'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶层对象</span></span><br><span class="line"><span class="comment"># 将所有其他内容添加到该节点下</span></span><br><span class="line">books = Element(<span class="string">'books'</span>)</span><br><span class="line"><span class="keyword">for</span> isbn, info <span class="keyword">in</span> Books.items():</span><br><span class="line">    <span class="comment"># 对于每一本书添加一个book子节点</span></span><br><span class="line">    <span class="comment"># 如果原字典没有提供作者和版本，则使用提供的默认值。</span></span><br><span class="line">    book = SubElement(books, <span class="string">'book'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'authors'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'edition'</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="comment"># 遍历所有键值对，将这些内容作为其他子节点添加到每个book中</span></span><br><span class="line">        SubElement(book, key).text = <span class="string">', '</span>.join(str(val).split(<span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">xml = tostring(books)</span><br><span class="line">print(<span class="string">'*** RAW XML***'</span>)</span><br><span class="line">print(xml)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***PRETTY-PRINTED XML***'</span>)</span><br><span class="line">dom = parseString(xml)</span><br><span class="line">print(dom.toprettyxml(<span class="string">'     '</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***FLAT STRUCTURE***'</span>)</span><br><span class="line"><span class="keyword">for</span> elmt <span class="keyword">in</span> books.iter():</span><br><span class="line">    print(elmt.tag, <span class="string">'-'</span>, elmt.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n***TITLE ONLY***'</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books.findall(<span class="string">'.//title'</span>):</span><br><span class="line">    print(book.text)</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">*** RAW XML***</span><br><span class="line">b&apos;&lt;books&gt;&lt;book&gt;&lt;title&gt;Core&lt;/title&gt;&lt;edition&gt;2&lt;/edition&gt;&lt;year&gt;2007&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;edition&gt;3&lt;/edition&gt;&lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;&lt;year&gt;2009&lt;/year&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Programming&lt;/title&gt;&lt;year&gt;2009&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;edition&gt;1&lt;/edition&gt;&lt;/book&gt;&lt;/books&gt;&apos;</span><br><span class="line">***PRETTY-PRINTED XML***</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Core&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;2&lt;/edition&gt;</span><br><span class="line">          &lt;year&gt;2007&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Python Programming&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;3&lt;/edition&gt;</span><br><span class="line">          &lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Programming&lt;/title&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">          &lt;edition&gt;1&lt;/edition&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br><span class="line"></span><br><span class="line">***FLAT STRUCTURE***</span><br><span class="line">books - None</span><br><span class="line">book - None</span><br><span class="line">title - Core</span><br><span class="line">edition - 2</span><br><span class="line">year - 2007</span><br><span class="line">authors - Bob</span><br><span class="line">book - None</span><br><span class="line">title - Python Programming</span><br><span class="line">edition - 3</span><br><span class="line">authors - Jack, Bob, Jerry</span><br><span class="line">year - 2009</span><br><span class="line">book - None</span><br><span class="line">title - Programming</span><br><span class="line">year - 2009</span><br><span class="line">authors - Bob</span><br><span class="line">edition - 1</span><br><span class="line"></span><br><span class="line">***TITLE ONLY***</span><br><span class="line">Core</span><br><span class="line">Python Programming</span><br><span class="line">Programming</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      无论什么类型的应用，都需要处理成可读的数据，而数据一般是文本。Python标准库有3个文本处理模块和包，它们分别可以处理csv、json、xml
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="文本处理" scheme="http://coldjune.com/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Web框架:Django</title>
    <link href="http://coldjune.com/2018/03/12/Web%E6%A1%86%E6%9E%B6-Django/"/>
    <id>http://coldjune.com/2018/03/12/Web框架-Django/</id>
    <published>2018-03-12T08:46:21.000Z</published>
    <updated>2018-03-13T11:17:28.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h2><ul><li><p>安装<br>在使用<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>开发之前，必须安装必需的组件，包括依赖组件和Django本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure></li><li><p>项目和应用<br><strong>项目</strong> 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 <strong>应用</strong>。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。</p></li></ul><ol><li><p><strong>在Django中创建项目</strong><br>Django自带有一个名为<code>django-admin.py</code>/<code>django-admin.exe</code>的工具，它可以简.<br>化任务。在POSIX平台上，一般在<code>/usr/local/bin</code>、<code>/usr/bin</code>这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如<code>E:\Python\Python36\Scripts</code>。两种系统都应该确保文件位于PATH环境变量中。<br>在项目文件加下执行命令创建项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure></li><li><p><strong>Django项目文件</strong></p></li></ol><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/用途</th></tr></thead><tbody><tr><td style="text-align:center"><strong>init</strong>.py</td><td style="text-align:center">告诉Python这是一个软件包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">全局URL配置(“URLconf”)</td></tr><tr><td style="text-align:center">setting.py</td><td style="text-align:center">项目相关的配置</td></tr><tr><td style="text-align:center">manage.py</td><td style="text-align:center">应用的命令行接口</td></tr></tbody></table><ul><li>运行开发服务器<br>Django内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：</li></ul><ol><li>可以直接运行与测试项目和应用，无需完整的生产环境</li><li>当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启</li><li>开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容</li></ol><blockquote><p>启动服务器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>在项目目录下使用如下命令创建一个应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py startapp blog</span><br></pre></td></tr></table></figure></p><p>这样就建立了一个blog目录，其中有如下内容：</p><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/目的</th></tr></thead><tbody><tr><td style="text-align:center">__init.py</td><td style="text-align:center">告诉Python这是一个包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">应用的URL配置文件(“URLconf”)，这个文件并不像项目的URLconf那样自动创建</td></tr><tr><td style="text-align:center">models.py</td><td style="text-align:center">数据模型</td></tr><tr><td style="text-align:center">views.py</td><td style="text-align:center">视图函数(即MVC中的控制器)</td></tr><tr><td style="text-align:center">tests.py</td><td style="text-align:center">单元测试</td></tr></tbody></table><p>与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 <em>settings.py</em>，将应用名称(<strong>blog</strong>)添加到元组的末尾。Django使用 <strong>INSTALLED_APPS</strong> 来配置系统的不同部分，包括自动管理应用程序和测试框架。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="创建模型添加数据库服务"><a href="#创建模型添加数据库服务" class="headerlink" title="创建模型添加数据库服务"></a>创建模型添加数据库服务</h3><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p><em>models.py</em> 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多<a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/" target="_blank" rel="noopener">字段类型</a>，用来将数据映射到应用中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br></pre></td></tr></table></figure></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在项目的<em>setting.py</em>文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):<strong>ENGINE</strong>、<strong>NAME</strong>、<strong>HOST</strong>、<strong>PORT</strong>、<strong>USER</strong>、<strong>PASSWORD</strong>。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。</p><ul><li><p>使用MySQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用mysql</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django_test'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用SQLite<br>SQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用sqlite</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>使用 <em>makemigrations</em> 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py makemigrations</span><br></pre></td></tr></table></figure></p><p>使用 <em>migrate</em> 映射到数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py migrate</span><br></pre></td></tr></table></figure></p><h3 id="Python应用Shell"><a href="#Python应用Shell" class="headerlink" title="Python应用Shell"></a>Python应用Shell</h3><h4 id="在Django中使用Python-shell"><a href="#在Django中使用Python-shell" class="headerlink" title="在Django中使用Python shell"></a>在Django中使用Python shell</h4><p>即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><p><a href="https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api" target="_blank" rel="noopener">Django shell</a>和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 <em>-i</em> 来强制使用普通解释器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell -i python</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="测试数据模型"><a href="#测试数据模型" class="headerlink" title="测试数据模型"></a>测试数据模型</h4><p>在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from datetime import datetime</span><br><span class="line"></span><br><span class="line">In [2]: from blog.models import BlogPost</span><br><span class="line"></span><br><span class="line">In [3]: BlogPost.objects.all()</span><br><span class="line">Out[3]: &lt;QuerySet [&lt;BlogPost: BlogPost object (1)&gt;, &lt;BlogPost: BlogPost object (2)&gt;, &lt;BlogPost: BlogPost object (3)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: bp = BlogPost(title=&apos;my blog&apos;, body=&apos;&apos;&apos;</span><br><span class="line">   ...: my 1st blog...</span><br><span class="line">   ...: yoooo!&apos;&apos;&apos;,</span><br><span class="line">   ...: timestamp=datetime.now())</span><br><span class="line"></span><br><span class="line">In [5]: bp</span><br><span class="line">Out[5]: &lt;BlogPost: BlogPost object (None)&gt;</span><br><span class="line"></span><br><span class="line">In [6]: bp.save()</span><br><span class="line"></span><br><span class="line">In [7]: BlogPost.objects.count()</span><br><span class="line">Out[7]: 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [9]: bp = BlogPost.objects.all()[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [11]: print(bp.title)</span><br><span class="line">test shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [13]: print(bp.body)</span><br><span class="line"></span><br><span class="line">my 1st blog post...</span><br><span class="line">yo!</span><br><span class="line"></span><br><span class="line">In [14]: bp.timestamp.ctime()</span><br><span class="line">Out[14]: &apos;Sun Mar 11 08:13:31 2018&apos;</span><br></pre></td></tr></table></figure></p><p>前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。<br>设置时区:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Django管理应用"><a href="#Django管理应用" class="headerlink" title="Django管理应用"></a>Django管理应用</h3><p>admin应用让开发者在完成完整的UI之前验证处理数据的代码。</p><h4 id="设置admin"><a href="#设置admin" class="headerlink" title="设置admin"></a>设置admin</h4><p>在 <em>setting.py</em> 的<code>INSTALLED_APP</code>中添加<code>&#39;django.contrib.admin&#39;,</code>，然后运行<code>python3 ./manage.py makemigrations</code>和<code>python3 ./manage.py migrate</code>两条命令来创建其对应的表。在admin设置完之后于 <em>urls.py</em> 中设置url路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 <em>admin.py</em> 中注册BlogPost：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(models.BlogPost)</span><br></pre></td></tr></table></figure></p><h4 id="使用admin"><a href="#使用admin" class="headerlink" title="使用admin"></a>使用admin</h4><p>使用命令<code>python3 ./manage.py runserver</code>启动服务，然后在浏览器中输入 <em><a href="http://localhost:8000/admin" target="_blank" rel="noopener">http://localhost:8000/admin</a></em> 访问admin页面。在访问之前使用<code>python3 manage.py createsuperuser</code>创建的超级用户的用户名和密码用于登录管理页面。（账号：<em>root</em>，密码：<em>Aa123456</em>）<br>为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'timestamp'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(models.BlogPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></p><h3 id="创建博客的用户界面"><a href="#创建博客的用户界面" class="headerlink" title="创建博客的用户界面"></a>创建博客的用户界面</h3><p>Django shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：</p><ol><li><strong>模板</strong>，用于显示通过Python类字典对象传入的信息</li><li><strong>视图函数</strong>，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果</li><li><strong>模式</strong>，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图</li></ol><p>Django是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：</p><ol><li>因为需要一些可观察对象，所以先创建基本的模板</li><li>设计一个简单的URL模式，让Django可以立刻访问应用</li><li>开发出一个视图函数原型，然后在此基础上迭代开发<br>在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 <em>测试驱动模型(TDD)</em> 的开发模式。</li></ol><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a><a href="https://docs.djangoproject.com/en/2.0/topics/templates/#tags" target="_blank" rel="noopener">创建模板</a></h4><ul><li><p><em>变量标签</em><br><strong>变量标签</strong> 是由 <em>花括号()</em> 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 <em>点分割标识</em> 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号”()”来表示这个函数或方法可调用。</p></li><li><p><em>过滤器</em><br><strong>过滤器</strong> 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 <em>管道符号(“|”)</em>，接着跟上过滤器名称。<code>&lt;h2&gt; { { post.title | title } } &lt;/h2&gt;</code></p></li><li><p><em>上下文</em><br><strong>上下文</strong> 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为”post”。通过上下文传入所有的博文，这样可以通过循环显示所有文章。</p></li><li><p><em>块标签</em><br><strong>块标签</strong> 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。</p></li></ul><p>将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 <strong>templates</strong> 目录下，模版名称任取，但模版目录一定是 <em>templates</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建URL模式"><a href="#创建URL模式" class="headerlink" title="创建URL模式"></a>创建URL模式</h4><ul><li>项目的URLconf<br>服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># include函数将动作推迟到其他URLconf</span></span><br><span class="line">    <span class="comment"># 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py</span></span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p><em>include()</em> 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（<em>当输入’<a href="http://localhost:8080/blog/foo/bar" target="_blank" rel="noopener">http://localhost:8080/blog/foo/bar</a>‘ 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py</em>）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 <strong>字符串</strong>，未使用include传递的是 <strong>对象</strong>。</p><ul><li>应用的URLconf<br>在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。</p><h4 id="创建视图函数"><a href="#创建视图函数" class="headerlink" title="创建视图函数"></a>创建视图函数</h4><p>一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：</p><ol><li>向数据库查询所有博客条目</li><li>载入模板文件</li><li>为模板创建上下文字典</li><li>将模板渲染到HTML中</li><li>通过HTTP响应返回HTML<br>在应用的views.py中添加如下代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader, Context</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = BlogPost.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="改进输出"><a href="#改进输出" class="headerlink" title="改进输出"></a>改进输出</h3><p>现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。</p><blockquote><p>BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。</p></blockquote><p>实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><p>为了测试限制显示数目，先启动Django shell添加数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python ./manage.py shell</span><br><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; from blog.models import BlogPost</span><br><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     bp = BlogPost(title=&apos;post $%d&apos; % i ,body=&apos;body of post $%d&apos; %d, timestamp=datetime.now())</span><br><span class="line">...     bp.save()</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后使用切片的方式获取最新的10篇(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>设置模型的默认排序方式</li></ul><p>如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 <strong>Meta</strong> 的内部类，在其中设置一个名为 <strong>ordering</strong> 的属性(models.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'-timestamp'</span>,)</span><br></pre></td></tr></table></figure></p><p>取消视图函数中的排序(views.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><ol><li><p>添加一个HTML表单，让用户可以输入数据(archive.html),为了防止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入(URL，视图)这样的URLConf项<br>使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive),</span><br><span class="line">    path(<span class="string">r'create/'</span>, blog.views.create_blogpost)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>创建视图来处理用户输入<br>在应用的views.py中添加上面定义的处理方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        BlogPost(</span><br><span class="line">            title=request.POST.get(<span class="string">'title'</span>),</span><br><span class="line">            body=request.POST.get(<span class="string">'body'</span>),</span><br><span class="line">            timestamp=datetime.now()</span><br><span class="line">        ).save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 <em>跨站点请求伪造（Cross-site Request Forgery,CSRF）</em> 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>&#123;%csrf_token%&#125;</span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;%for post in posts%&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过模板发送向这些标记请求的上下文实例，这里将<code>archive()</code>方法调用的<code>render_to_response()</code>改为<code>render</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="表单和模型表单"><a href="#表单和模型表单" class="headerlink" title="表单和模型表单"></a>表单和模型表单</h3><ul><li><p>如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。</span></span><br><span class="line">        <span class="comment"># 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。</span></span><br><span class="line">        model = BlogPost</span><br><span class="line">        exclude = (<span class="string">'timestamp'</span>,)</span><br></pre></td></tr></table></figure></li><li><p>使用ModelForm来生成HTML表单(archive.html):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/blog/create/"</span> method=<span class="string">"post"</span>&gt;&#123;%csrf_token%&#125;</span><br><span class="line">  &lt;table&gt;&#123;&#123;form&#125;&#125;&lt;/table&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &#123;%<span class="keyword">for</span> post <span class="keyword">in</span> posts%&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123;post.title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.timestamp&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.body&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中<code>create_blogpost()</code>方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        <span class="comment"># BlogPost(</span></span><br><span class="line">        <span class="comment">#     title=request.POST.get('title'),</span></span><br><span class="line">        <span class="comment">#     body=request.POST.get('body'),</span></span><br><span class="line">        <span class="comment">#     timestamp=datetime.now()</span></span><br><span class="line">        <span class="comment"># ).save()</span></span><br><span class="line">        form = BlogPostForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            post = form.save(commit=<span class="keyword">False</span>)</span><br><span class="line">            post.timestamp = datetime.now()</span><br><span class="line">            post.save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h3><p>Django通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 <em>文档测试(doctest)</em></p><blockquote><p>应用的tests.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test.client <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostTest</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># 测试方法必须以“test_”开头，方法名后面的部分随意。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_obj_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 这里仅仅通过测试确保对象成功创建，并验证标题内容</span></span><br><span class="line">        BlogPost.objects.create(</span><br><span class="line">            title=<span class="string">'raw title'</span>, body=<span class="string">'raw body'</span>, timestamp=datetime.now())</span><br><span class="line">        <span class="comment"># 如果两个参数相等则测试成功，否则该测试失败</span></span><br><span class="line">        <span class="comment"># 这里验证对象的数目和标题</span></span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'raw title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">200</span>, ))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_slash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试确认重定向</span></span><br><span class="line">        response = self.client.get(<span class="string">'/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_empty_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，</span></span><br><span class="line">        <span class="comment"># 代码应该忽略掉这个请求，然后重定向到'/blog'</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/create/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_post_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到"/blog"</span></span><br><span class="line">        response = self.client.post(<span class="string">'/blog/create/'</span>, &#123;</span><br><span class="line">            <span class="string">'title'</span>: <span class="string">'post title'</span>,</span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'post body'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'post title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/mysite" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      Web框架可以用于提供Web应用的所有相关服务，如Web服务器、数据库ORM、模板和所有需要的中间件hook
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web框架" scheme="http://coldjune.com/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Django" scheme="http://coldjune.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CGI和WSGI</title>
    <link href="http://coldjune.com/2018/03/08/CGI%E5%92%8CWSGI/"/>
    <id>http://coldjune.com/2018/03/08/CGI和WSGI/</id>
    <published>2018-03-08T01:08:11.000Z</published>
    <updated>2018-03-09T11:01:23.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用</p><h3 id="CGI简介"><a href="#CGI简介" class="headerlink" title="CGI简介"></a>CGI简介</h3><ul><li><p><strong>通用网关接口(Common Gateway Interface CGI)</strong> 在Web服务器和应用之间充当了交互作用</p><ol><li>Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序</li><li>Web服务器和客户端等待HTML页面</li><li>应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户</li><li>表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端<br>含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。<em>CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)</em></li></ol></li><li><p>CGI应用程序和和相关模块</p><ol><li><p>CGI应用程序<br>CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 <em>请求(request)</em>。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。<strong>用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间</strong>。</p></li><li><p>cgi模块<br>cgi模块有一个主要类 <em>FieldStorage</em> 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。<br>这些值有三个对象：<em>FieldStorage</em> 对象；<em>MiniFieldStorage</em> 对象用在没有文件上传或mulitple-part格式数据的情况下，<em>MiniFieldStorage</em> 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。</p></li><li><p>cgitb模块<br>cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。</p></li></ol></li></ul><h3 id="CGI应用程序"><a href="#CGI应用程序" class="headerlink" title="CGI应用程序"></a>CGI应用程序</h3><blockquote><p>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们</p></blockquote><ul><li>CGI服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> FieldStorage</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvCGI</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量</span></span><br><span class="line">    header = <span class="string">'Content-Type:text/html\n\n'</span></span><br><span class="line">    url = <span class="string">'/cgi-bin/advcgi.py'</span></span><br><span class="line">    <span class="comment"># HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素</span></span><br><span class="line">    formhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;HTML&gt;</span></span><br><span class="line"><span class="string">            &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">            &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                &lt;H2&gt;Advanced CGI Demo&lt;/H2&gt;</span></span><br><span class="line"><span class="string">                &lt;FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;My Cookie Setting&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;LI&gt;</span></span><br><span class="line"><span class="string">                        &lt;CODE&gt;&lt;B&gt;CPPuser = %s&lt;/B&gt;&lt;/CODE&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter cookie value&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=cookie value='%s'/&gt;(&lt;I&gt;optional&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter your name&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=person VALUE='%s'/&gt;(&lt;I&gt;required&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;What languages can you program in ?</span></span><br><span class="line"><span class="string">                        (&lt;I&gt;at least one required&lt;/I&gt;)  </span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter file to upload&lt;SMALL&gt;(max size 4k)&lt;/SMALL&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45&gt;</span></span><br><span class="line"><span class="string">                        &lt;P&gt;&lt;INPUT TYPE=submit /&gt;</span></span><br><span class="line"><span class="string">                    &lt;/LI&gt;</span></span><br><span class="line"><span class="string">                &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">            &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">        &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    langset = (<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'C++'</span>, <span class="string">'C'</span>, <span class="string">'JavaScript'</span>)</span><br><span class="line"></span><br><span class="line">    langItem = <span class="string">'&lt;INPUT TYPE=checkbox NAME=lang VALUE="%s"%s&gt; %s\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 通过HTTP_COOKIE访问这些值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'HTTP_COOKIE'</span> <span class="keyword">in</span> environ:</span><br><span class="line">            cookies = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> environ[<span class="string">'HTTP_COOKIE'</span>].split(<span class="string">';'</span>)]</span><br><span class="line">            <span class="keyword">for</span> eachCookie <span class="keyword">in</span> cookies:</span><br><span class="line">                <span class="comment"># 寻找以CPP开头的字符串</span></span><br><span class="line">                <span class="comment"># 只查找，名为“CPPuser”和“CPPinfo”的cookie值</span></span><br><span class="line">                <span class="keyword">if</span> len(eachCookie) &gt; <span class="number">6</span> <span class="keyword">and</span> eachCookie[:<span class="number">3</span>] == <span class="string">'CPP'</span>:</span><br><span class="line">                    <span class="comment"># 去除索引8处的值进行计算，计算结果保存到Python对象中</span></span><br><span class="line">                    tag = eachCookie[<span class="number">3</span>:<span class="number">7</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。</span></span><br><span class="line">                        self.cookies[tag] = eval(unquote(eachCookie[<span class="number">8</span>:]))</span><br><span class="line">                    <span class="keyword">except</span> (NameError, SyntaxError):</span><br><span class="line">                        self.cookies[tag] = unquote(eachCookie[<span class="number">8</span>:])</span><br><span class="line">            <span class="comment"># 如果这个cookie丢失，就给他指定一个空字符串</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'info'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'info'</span>] = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'user'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cookies[<span class="string">'info'</span>] = self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cookies[<span class="string">'info'</span>] != <span class="string">''</span>:</span><br><span class="line">            self.who, langstr, self.fn = self.cookies[<span class="string">'info'</span>].split(<span class="string">';'</span>)</span><br><span class="line">            self.langs = langstr.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.who = self.fn = <span class="string">''</span></span><br><span class="line">            self.langs = [<span class="string">'Python'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_form</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将表单显示给用户</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式</span></span><br><span class="line">        self.get_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        langstr = []</span><br><span class="line">        <span class="keyword">for</span> eachLang <span class="keyword">in</span> AdvCGI.langset:</span><br><span class="line">            langstr.append(AdvCGI.langItem % (</span><br><span class="line">                eachLang, <span class="string">' CHECKED'</span> <span class="keyword">if</span> eachLang <span class="keyword">in</span> self.langs <span class="keyword">else</span> <span class="string">''</span>, eachLang))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.formhtml % (</span><br><span class="line">            AdvCGI.url, cookstatus, usercook, self.who,</span><br><span class="line">            <span class="string">''</span>.join(langstr), self.fn)))</span><br><span class="line"></span><br><span class="line">    errhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">            &lt;HTML&gt;</span></span><br><span class="line"><span class="string">                &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                    &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">                &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;B&gt;%s&lt;/B&gt;</span></span><br><span class="line"><span class="string">                    &lt;P&gt;</span></span><br><span class="line"><span class="string">                    &lt;FORM&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE= button VALUE=Back ONCLICK="window.history.back()"&gt;&lt;/INPUT&gt;</span></span><br><span class="line"><span class="string">                    &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">                &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成错误页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.errhtml % (self.error)))</span><br><span class="line"></span><br><span class="line">    reshtml = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;HTML&gt;</span></span><br><span class="line"><span class="string">        &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">        &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">        &lt;BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;H2&gt;Your Uploaded Data&lt;/H2&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your cookie value is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your name is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;You can program in the following languages:&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;UL&gt;%s&lt;/UL&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your uploaded file...&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Name: &lt;I&gt;%s&lt;/I&gt;&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Contents:</span></span><br><span class="line"><span class="string">            &lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;PRE&gt;%s&lt;/PRE&gt;</span></span><br><span class="line"><span class="string">            Click &lt;A HREF="%s"&gt;&lt;B&gt;here&lt;/B&gt;&lt;/A&gt; to return to form.</span></span><br><span class="line"><span class="string">        &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">    &lt;/HTML&gt;'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> eachCookie <span class="keyword">in</span> self.cookies:</span><br><span class="line">            print(<span class="string">'Set-Cookie: CPP%s=%s; path=/'</span> % (</span><br><span class="line">                eachCookie, quote(self.cookies[eachCookie])))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成结果页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        MAXBYTES = <span class="number">4096</span></span><br><span class="line">        langlist = <span class="string">''</span>.join(<span class="string">'&lt;LI&gt;%s&lt;BR&gt;'</span> % eachLang <span class="keyword">for</span> eachLang <span class="keyword">in</span> self.langs)</span><br><span class="line">        filedata = self.fp.read(MAXBYTES)</span><br><span class="line">        <span class="keyword">if</span> len(filedata) == MAXBYTES <span class="keyword">and</span> f.read():</span><br><span class="line">            filedata = <span class="string">'%s%s'</span> % (filedata, <span class="string">'...&lt;B&gt;&lt;I&gt;(file truncated due to size)&lt;/I&gt;&lt;/B&gt;'</span>)</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filedata == <span class="string">''</span>:</span><br><span class="line">            filedata = <span class="string">'&lt;B&gt;&lt;I&gt;(file not give or upload error)&lt;/I&gt;&lt;/B&gt;'</span></span><br><span class="line">        filename = self.fn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'info'</span>] = <span class="string">':'</span>.join((self.who, <span class="string">','</span>.join(self.langs), filename))</span><br><span class="line">        self.set_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (</span><br><span class="line">            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cookies = &#123;&#125;</span><br><span class="line">        self.error = <span class="string">''</span></span><br><span class="line">        form = FieldStorage()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list(form.keys()):</span><br><span class="line">            self.show_form()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'person'</span> <span class="keyword">in</span> form:</span><br><span class="line">            print(form.keys())</span><br><span class="line">            self.who = form[<span class="string">'person'</span>].value.strip().title()</span><br><span class="line">            <span class="keyword">if</span> self.who == <span class="string">''</span>:</span><br><span class="line">                self.error = <span class="string">'Your name is required.(blank)'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'Your name is required.(missing)'</span></span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'user'</span>] = unquote(form[<span class="string">'cookie'</span>].value.strip())</span><br><span class="line">                                                      <span class="keyword">if</span> <span class="string">'cookie'</span> <span class="keyword">in</span> form <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'lang'</span> <span class="keyword">in</span> form:</span><br><span class="line">            lang_data = form[<span class="string">'lang'</span>]</span><br><span class="line">            <span class="keyword">if</span> isinstance(lang_data, list):</span><br><span class="line">                self.langs = [eachLang.value <span class="keyword">for</span> eachLang <span class="keyword">in</span> lang_data]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.langs = [lang_data.value]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'At least one language required'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'upfile'</span> <span class="keyword">in</span> form:</span><br><span class="line">            upfile = form[<span class="string">'upfile'</span>]</span><br><span class="line">            self.fn = upfile.filename <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> upfile.file:</span><br><span class="line">                self.fp = upfile.file</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.fp = StringIO(<span class="string">'(no data)'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.fp = StringIO(<span class="string">'(no file)'</span>)</span><br><span class="line">            self.fn = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.error:</span><br><span class="line">            self.doResult()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.show_error()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    page = AdvCGI()</span><br><span class="line">    page.go()</span><br></pre></td></tr></table></figure><ul><li>启动程序<blockquote><p>将启动程序放在启动目录中，然后执行。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> CGIHTTPRequestHandler, test</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test(CGIHTTPRequestHandler)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/web" target="_blank" rel="noopener">源代码</a></p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><em>WSGI</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是为了替代CGI而出现的。</p><h3 id="服务器集成和外部进程"><a href="#服务器集成和外部进程" class="headerlink" title="服务器集成和外部进程"></a>服务器集成和外部进程</h3><ul><li>服务器集成<br>服务器集成也叫 <strong>服务器API</strong>，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。<br>服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。</li><li>外部进程<br>外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。<br>因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。</li></ul><h3 id="WSGI简介"><a href="#WSGI简介" class="headerlink" title="WSGI简介"></a>WSGI简介</h3><p>WSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。<br>根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。</p><h3 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h3><p>在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">WSGI只是做一个简单的了解，可以结合框架一起看。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      对Python Web编程的广泛概述，从Web浏览到创建用户反馈表单，从识别URL到生成动态Web页面。本文先介绍通用网关接口CGI然后是Web服务器网关接口WSGI。
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web编程" scheme="http://coldjune.com/tags/Web%E7%BC%96%E7%A8%8B/"/>
    
      <category term="CGI" scheme="http://coldjune.com/tags/CGI/"/>
    
      <category term="WSGI" scheme="http://coldjune.com/tags/WSGI/"/>
    
  </entry>
  
  <entry>
    <title>Python Web客户端和服务器</title>
    <link href="http://coldjune.com/2018/03/06/Python-Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://coldjune.com/2018/03/06/Python-Web客户端和服务器/</id>
    <published>2018-03-06T01:20:10.000Z</published>
    <updated>2018-03-07T12:29:55.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-Web客户端工具"><a href="#Python-Web客户端工具" class="headerlink" title="Python Web客户端工具"></a>Python Web客户端工具</h2><p>浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。</p><h3 id="统一资源定位符"><a href="#统一资源定位符" class="headerlink" title="统一资源定位符"></a>统一资源定位符</h3><blockquote><p>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。</p></blockquote><p>URL使用以下格式：<br><code>post_sch://net_loc/path;parans?query#frag</code></p><ul><li>Web地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">URL组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">post_sch</td><td style="text-align:center">网络协议或下载方案</td></tr><tr><td style="text-align:center">net_loc</td><td style="text-align:center">服务器所在地(也许含有用户信息)</td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">使用斜杠(/)分割的文件或CGI应用的路径</td></tr><tr><td style="text-align:center">params</td><td style="text-align:center">可选参数</td></tr><tr><td style="text-align:center">query</td><td style="text-align:center">连接符(&amp;)分割的一系列键值对</td></tr><tr><td style="text-align:center">frag</td><td style="text-align:center">指定文档内特定锚的部分</td></tr></tbody></table><p>net_loc可以拆分为多个组件，一些可选一些必备：<br><code>user:passwd@host:port</code></p><ul><li>网络地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">用户名或登录(FTP)</td></tr><tr><td style="text-align:center">passwd</td><td style="text-align:center">用户密码(FTP)</td></tr><tr><td style="text-align:center">host</td><td style="text-align:center">运行Web服务器的计算机名称或地址(必需的)</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">端口号(如果不是默认的80)</td></tr></tbody></table><p>Python3 使用<a href="https://docs.python.org/3/library/urllib.parse.html" target="_blank" rel="noopener">urllib.parse</a>和<a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noopener">urllib.request</a>两种不同的模块分别以不同的功能和兼容性来处理URL</p><h3 id="urllib-parse模块"><a href="#urllib-parse模块" class="headerlink" title="urllib.parse模块"></a>urllib.parse模块</h3><ul><li>urllib.parse核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.parse函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</td><td style="text-align:center">将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.urlunparse(parts)</td><td style="text-align:center">将URL数据的一个元组拼成URL字符串</td></tr><tr><td style="text-align:center">urllib.parse.urljoin(base,url,allow_fragments=True)</td><td style="text-align:center">将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.quote(string,safe=’/‘,encoding=None,errors=None)</td><td style="text-align:center">对string在URL里无法使用的字符进行编码，safe中的字符无需编码</td></tr><tr><td style="text-align:center">urllib.parse.quote_plus(string,safe=’’,encoding,errors)</td><td style="text-align:center">除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似</td></tr><tr><td style="text-align:center">urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">将string编译过的字符解码</td></tr><tr><td style="text-align:center">urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">除了将加好转换为空格，其他功能与unquote()相同</td></tr><tr><td style="text-align:center">urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</td><td style="text-align:center">将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码</td></tr></tbody></table><p>下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法<br><code>from urllib.parse import *</code></p><ul><li><p><em>urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlparse(<span class="string">'http://coldjune.com/categories/'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'coldjune.com'</span>, path=<span class="string">'/categories/'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlunparse(parts)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlunparse((<span class="string">'http'</span>, <span class="string">'coldjune.com'</span>, <span class="string">'/categories/'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urljoin(base,url,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是绝对路径将整个替换除根域名以外的所有内容</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'/tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/tags/2.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对路径将会将末端文件去掉与心得url连接</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/tags/2.html'</span></span><br><span class="line">``</span><br><span class="line">* *urllib.parse.quote(string,safe=<span class="string">'/'</span>,encoding=<span class="keyword">None</span>,errors=<span class="keyword">None</span>)*</span><br><span class="line">&gt; 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)</span><br><span class="line"></span><br><span class="line">  ```Python</span><br><span class="line">  quote(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line">  <span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote(<span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.quote_plus(string,safe=’’,encoding,errors)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quote_plus(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote_plus(<span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query=&#123;<span class="string">'name'</span>:<span class="string">'coldjune'</span>,<span class="string">'search'</span>:<span class="string">'6'</span>&#125;</span><br><span class="line">urlencode(query)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'name=coldjune&amp;search=6'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="urllib-request模块-包"><a href="#urllib-request模块-包" class="headerlink" title="urllib.request模块/包"></a>urllib.request模块/包</h3><ul><li>urllib.request模块核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.request函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None)</td><td style="text-align:center">打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证</td></tr><tr><td style="text-align:center">urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)</td><td style="text-align:center">将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息</td></tr></tbody></table><ol><li><em>urllib.request.urlopen(url, data=None, [timeout,],</em><br><em>cafile=None, capath=None,cadefault=False,context=None)</em><blockquote><p>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入”file”方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用”GET”请求，向Web服务器发送的请求字符串应该是url的一部分；使用”POST”请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象</p></blockquote></li></ol><ul><li>urlopen()文件类型对象的方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">f.read([bytes])</td><td style="text-align:center">从f中读出所有或bytes个字节</td></tr><tr><td style="text-align:center">f.readline()</td><td style="text-align:center">从f中读取一行</td></tr><tr><td style="text-align:center">f.readlines()</td><td style="text-align:center">从f中读取所有行，作为列表返回</td></tr><tr><td style="text-align:center">f.close()</td><td style="text-align:center">关闭f的URL连接</td></tr><tr><td style="text-align:center">f.fileno()</td><td style="text-align:center">返回f的文件句柄</td></tr><tr><td style="text-align:center">f.info()</td><td style="text-align:center">获取f的MIME头文件</td></tr><tr><td style="text-align:center">f.geturl()</td><td style="text-align:center">返回f的真正URL</td></tr></tbody></table><ol><li><em>urllib.request.urlretrieve(url,</em><br><em>filename=None,reporthook=None,data=None)</em><blockquote><p>urlretrieve（）用于下载完整的HTML</p></blockquote></li></ol><p>如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。<code>urlretrieve()</code>返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。</p><h3 id="HTTP验证示例"><a href="#HTTP验证示例" class="headerlink" title="HTTP验证示例"></a>HTTP验证示例</h3><blockquote><p>需要先启动本地的tomcat并访问tomcat地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化过程</span></span><br><span class="line"><span class="comment"># 后续脚本使用的常量</span></span><br><span class="line">LOGIN = <span class="string">'wesly'</span></span><br><span class="line">PASSWD = <span class="string">"you'llNeverGuess"</span></span><br><span class="line">URL = <span class="string">'http://localhost:8080/docs/setup.html'</span></span><br><span class="line">REALM = <span class="string">'Secure Archive'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 分配了一个基本处理程序类，添加了验证信息。</span></span><br><span class="line">    <span class="comment"># 用该处理程序建立一个URL开启器</span></span><br><span class="line">    <span class="comment"># 安装该开启器以便所有已打开的URL都能用到这些验证信息</span></span><br><span class="line">    hdlr = urllib.request.HTTPBasicAuthHandler()</span><br><span class="line">    hdlr.add_password(REALM,</span><br><span class="line">                      urllib.parse.urlparse(url)[<span class="number">1</span>],</span><br><span class="line">                      LOGIN,</span><br><span class="line">                      PASSWD)</span><br><span class="line">    opener = urllib.request.build_opener(hdlr)</span><br><span class="line">    urllib.request.install_opener(opener=opener)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头</span></span><br><span class="line">    <span class="comment"># 该请求用来替换其中的URL字符串</span></span><br><span class="line">    <span class="keyword">from</span> base64 <span class="keyword">import</span> encodebytes</span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    b64str = encodebytes(bytes(<span class="string">'%s %s'</span> % (LOGIN, PASSWD), <span class="string">'utf-8'</span>))[:<span class="number">-1</span>]</span><br><span class="line">    req.add_header(<span class="string">"Authorization"</span>, <span class="string">'Basic %s'</span> % b64str)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> funcType <span class="keyword">in</span> (<span class="string">'handler'</span>, <span class="string">'request'</span>):</span><br><span class="line">    <span class="comment"># 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行</span></span><br><span class="line">    print(<span class="string">'***Using %s:'</span> % funcType.upper())</span><br><span class="line">    url = eval(<span class="string">'%s_version'</span> % funcType)(URL)</span><br><span class="line">    f = urllib.request.urlopen(url)</span><br><span class="line">    print(str(f.readline(), <span class="string">'utf-8'</span>))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***Using HANDLER:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br><span class="line"></span><br><span class="line">***Using REQUEST:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Web客户端"><a href="#Web客户端" class="headerlink" title="Web客户端"></a>Web客户端</h2><p>一个稍微复杂的Web客户端例子就是 <em>网络爬虫</em>。这些程序可以为了不同目的在因特网上探索和下载页面。</p><blockquote><p>通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Retriever</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入"to-do"队列。</span></span><br><span class="line"><span class="string">    __slots__变量表示实例只能拥有self.url和self.file属性</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = (<span class="string">'url'</span>, <span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建Retriever对象时调用，将get_file()返回的URL字符串和对</span></span><br><span class="line"><span class="string">        应的文件名作为实例属性存储起来</span></span><br><span class="line"><span class="string">        :param url: 需要抓取的连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.url, self.file = self.get_file(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, url, default=<span class="string">'index.html'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件</span></span><br><span class="line"><span class="string">        :param url: 指定URL获取页面</span></span><br><span class="line"><span class="string">        :param default: 默认的文件名</span></span><br><span class="line"><span class="string">        :return: 返回url和对应的文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 将URL的http://前缀移除，丢掉任何为获取主机名</span></span><br><span class="line">        <span class="comment"># 而附加的额外信息，如用户名、密码和端口号</span></span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将字符进行解码，连接域名创建文件名</span></span><br><span class="line">        filepath = <span class="string">'%s%s'</span> % (host, urllib.parse.unquote(parsed.path))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.splitext(parsed.path)[<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 如果URL没有文件扩展名后这将default文件加上</span></span><br><span class="line">            filepath = os.path.join(filepath, default)</span><br><span class="line">        <span class="comment"># 获取文件路径</span></span><br><span class="line">        linkdir = os.path.dirname(filepath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(linkdir):</span><br><span class="line">            <span class="comment"># 如果linkdir不是一个目录</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(linkdir):</span><br><span class="line">                <span class="comment"># 如果linkdir存在则删除</span></span><br><span class="line">                os.unlink(linkdir)</span><br><span class="line">            <span class="comment"># 创建同名目录</span></span><br><span class="line">            os.makedirs(linkdir)</span><br><span class="line">        <span class="keyword">return</span> url, filepath</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()</span></span><br><span class="line"><span class="string">        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串</span></span><br><span class="line"><span class="string">        :return: 文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            retval = urllib.request.urlretrieve(self.url, filename=self.file)</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            retval = ((<span class="string">'***ERROR: bad URL "%s": %s'</span> % (self.url, e)),)</span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过BeautifulSoup解析文件，查看文件包含的额外连接。</span></span><br><span class="line"><span class="string">        :return: 文件中包含连接的集合</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        soup = BeautifulSoup(data, <span class="string">'html.parser'</span>)</span><br><span class="line">        parse_links = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> x.attrs:</span><br><span class="line">                parse_links.append(x[<span class="string">'href'</span>])</span><br><span class="line">        <span class="keyword">return</span> parse_links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长</span></span><br><span class="line"><span class="string">        self.seen 是已下载连接的集合</span></span><br><span class="line"><span class="string">        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致</span></span><br><span class="line"><span class="string">        :param url: 抓取的url</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.q = [url]</span><br><span class="line">        self.seen = set()</span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        self.dom = <span class="string">'.'</span>.join(host.split(<span class="string">'.'</span>)[<span class="number">-2</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self, url, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用于下载页面并记录连接信息</span></span><br><span class="line"><span class="string">        :param url:</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实例化Retriever类并传入需要抓取的连接</span></span><br><span class="line">        <span class="comment"># 下在对应连接并取到文件名</span></span><br><span class="line">        r = Retriever(url)</span><br><span class="line">        fname = r.download()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>] == <span class="string">'*'</span>:</span><br><span class="line">            print(fname, <span class="string">'....skipping parse'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        Crawler.count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\n('</span>, Crawler.count, <span class="string">')'</span>)</span><br><span class="line">        print(<span class="string">'URL:'</span>, url)</span><br><span class="line">        print(<span class="string">'FILE:'</span>, fname)</span><br><span class="line">        self.seen.add(url)</span><br><span class="line">        <span class="comment"># 跳过所有非Web页面</span></span><br><span class="line">        ftype = os.path.splitext(fname)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ftype <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'.htm'</span>, <span class="string">'.html'</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> r.parse_links():</span><br><span class="line">            <span class="keyword">if</span> link.startswith(<span class="string">'mailto:'</span>):</span><br><span class="line">                print(<span class="string">'...discarded , mailto link'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> media:</span><br><span class="line">                ftype = os.path.splitext(link)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> ftype <span class="keyword">in</span> (<span class="string">'.mp3'</span>, <span class="string">'.mp4'</span>, <span class="string">'.m4av'</span>, <span class="string">'.wav'</span>):</span><br><span class="line">                    print(<span class="string">'... discarded, media file'</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="string">':'</span> <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                link = urllib.parse.quote(link, safe=<span class="string">'#'</span>)</span><br><span class="line">                link = urllib.parse.urljoin(url, link)</span><br><span class="line">            print(<span class="string">'*'</span>, link)</span><br><span class="line">            <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.seen:</span><br><span class="line">                <span class="keyword">if</span> self.dom <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                    print(<span class="string">'... discarded, not in domain'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有下载过并且是属于该网站就加入待下载列表</span></span><br><span class="line">                    <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.q:</span><br><span class="line">                        self.q.append(link)</span><br><span class="line">                        print(<span class="string">'...New, added to Q'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">'...discarded, already in Q'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'...discarded, already processed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理所有待下载连接</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> self.q:</span><br><span class="line">            url = self.q.pop()</span><br><span class="line">            self.get_page(url, media)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = input(<span class="string">'Enter starting URL:'</span>)</span><br><span class="line">        <span class="keyword">except</span> (KeyboardInterrupt, EOFError):</span><br><span class="line">            url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'ftp://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'https://'</span>):</span><br><span class="line">        url = <span class="string">'http://%s'</span> % url</span><br><span class="line"></span><br><span class="line">    robot = Crawler(url)</span><br><span class="line">    robot.go()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="解析Web页面"><a href="#解析Web页面" class="headerlink" title="解析Web页面"></a>解析Web页面</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup</a>是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。</p><h3 id="可编程的Web浏览"><a href="#可编程的Web浏览" class="headerlink" title="可编程的Web浏览"></a>可编程的Web浏览</h3><p>可以使用<a href="https://pypi.python.org/pypi/MechanicalSoup/" target="_blank" rel="noopener">MechanicalSoup</a>用来模拟浏览器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-Web客户端工具&quot;&gt;&lt;a href=&quot;#Python-Web客户端工具&quot; class=&quot;headerlink&quot; title=&quot;Python Web客户端工具&quot;&gt;&lt;/a&gt;Python Web客户端工具&lt;/h2&gt;&lt;p&gt;浏览器只是Web客户端的一种。任何一
      
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="Web客户端和服务器" scheme="http://coldjune.com/tags/Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OFFICE转换工具</title>
    <link href="http://coldjune.com/2018/03/06/OFFICE%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <id>http://coldjune.com/2018/03/06/OFFICE转换工具/</id>
    <published>2018-03-06T01:19:39.000Z</published>
    <updated>2018-03-06T10:39:25.452Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全双工聊天室</title>
    <link href="http://coldjune.com/2018/03/04/%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://coldjune.com/2018/03/04/全双工聊天室/</id>
    <published>2018-03-04T06:33:16.000Z</published>
    <updated>2018-03-04T06:50:00.673Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。<br><a id="more"></a></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ul><li>GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类</li><li>客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容</li><li>编程线程的通用类，使所有线程的实现都通过该类，便于统一管理</li><li>完成客户端和服务器端的代码并进行整合调试</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="GUI的基类"><a href="#GUI的基类" class="headerlink" title="GUI的基类"></a>GUI的基类</h3><blockquote><p>chat_base.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatWindowBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 窗口的基类，创建通用的窗口布局</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 创建tkinter.TK()顶层窗口</span></span><br><span class="line">        <span class="comment"># 所有主要控件都是构建在顶层窗口对象之上</span></span><br><span class="line">        <span class="comment"># 通过tkinter.TK()创建</span></span><br><span class="line">        self.top = tk.Tk()</span><br><span class="line">        <span class="comment"># 在顶层窗口上添加Label控件</span></span><br><span class="line">        self.label = tk.Label(self.top, text=<span class="string">'聊天室'</span>)</span><br><span class="line">        <span class="comment"># 通过Packer来管理和显示控件</span></span><br><span class="line">        <span class="comment"># 调用pack()方法显示布局</span></span><br><span class="line">        self.label.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过Frame控件创建子容器，用于存放其他控件</span></span><br><span class="line">        <span class="comment"># 该对象将作为单个子对象代替父对象</span></span><br><span class="line">        self.chatfm = tk.Frame(self.top)</span><br><span class="line">        <span class="comment"># Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表</span></span><br><span class="line">        self.chatsb = tk.Scrollbar(self.chatfm)</span><br><span class="line">        <span class="comment"># 将Scrollbar放置在子容器的右侧，并且是针对y轴</span></span><br><span class="line">        self.chatsb.pack(side=<span class="string">'right'</span>, fill=<span class="string">'y'</span>)</span><br><span class="line">        <span class="comment"># 在子容器中创建高为15宽为50的Listbox</span></span><br><span class="line">        <span class="comment"># 将Listbox和Scrollbar关联起来</span></span><br><span class="line">        <span class="comment"># 显示列表</span></span><br><span class="line">        <span class="comment"># 显示子容器</span></span><br><span class="line">        <span class="comment"># 控件的显示应该内部控件先显示，再显示外部控件</span></span><br><span class="line">        self.chats = tk.Listbox(self.chatfm, height=<span class="number">15</span>,</span><br><span class="line">                                width=<span class="number">50</span>, yscrollcommand=self.chatsb.set)</span><br><span class="line">        self.chatsb.config(command=self.chats.yview())</span><br><span class="line">        self.chats.pack(side=<span class="string">'left'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.chatfm.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建发送消息的子容器</span></span><br><span class="line">        self.sendfm = tk.Frame(self.top, width=<span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 创建输入框</span></span><br><span class="line">        <span class="comment"># 绑定回车键，并且绑定send方法</span></span><br><span class="line">        <span class="comment"># 绑定一个方法是指在触发一个事件时会去调用的方法</span></span><br><span class="line">        self.chatn = tk.Entry(self.sendfm, width=<span class="number">40</span>)</span><br><span class="line">        self.chatn.bind(<span class="string">'&lt;Return&gt;'</span>, self.send)</span><br><span class="line">        self.chatn.pack(side=<span class="string">'left'</span>)</span><br><span class="line">        <span class="comment"># 添加按钮控件、绑定方法</span></span><br><span class="line">        self.sendchat = tk.Button(self.sendfm, text=<span class="string">'发送'</span>, command=self.send)</span><br><span class="line">        self.sendchat.pack(side=<span class="string">'right'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.sendfm.pack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 创建发送消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建接受消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="线程的通用类"><a href="#线程的通用类" class="headerlink" title="线程的通用类"></a>线程的通用类</h3><blockquote><p>chat_thread.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 继承自threading.Thread，用于创建聊天室的通用线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        <span class="comment"># func: 方法</span></span><br><span class="line">        <span class="comment"># args：方法所需要的参数</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实现run方法，将参数传给相应的方法</span></span><br><span class="line">        self.func(*self.args)</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><blockquote><p>chat_s.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#  -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatS</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 服务器的实现类，继承自ChatWindowBase</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__()方法</span></span><br><span class="line">        super(ChatS, self).__init__()</span><br><span class="line">        self.label.configure(text=<span class="string">'服务器'</span>)</span><br><span class="line">        <span class="comment"># 设置属性</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接对象</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接地址</span></span><br><span class="line">        self.send_sock = <span class="keyword">None</span></span><br><span class="line">        self.addr = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 在服务器窗口创建时调用</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 获取输入框信息</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        ChatThread(self.send_s, (message,)).start()</span><br><span class="line">        <span class="comment"># 将输入框信息按照格式显示在Listbox</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s\n'</span> % (ctime(), self.addr))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框内容</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        <span class="comment"># 绑定地址</span></span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        <span class="comment"># 阻塞直到有链接调用，然后保存链接的客户端对象和地址</span></span><br><span class="line">        sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        sock.bind(ADDR)</span><br><span class="line">        sock.listen(<span class="number">5</span>)</span><br><span class="line">        cli_sock, addr = sock.accept()</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.send_sock = cli_sock</span><br><span class="line">        print(<span class="string">'addr'</span>, addr)</span><br><span class="line">        <span class="comment"># 有链接接入时在Listbox中显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s 上线'</span> % str(addr))</span><br><span class="line">        <span class="comment"># 更新顶层窗口</span></span><br><span class="line">        self.top.update()</span><br><span class="line">        <span class="comment"># 启动接受消息的线程</span></span><br><span class="line">        ChatThread(self.receive_s, (cli_sock, addr)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_s</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 向客户端发送消息</span></span><br><span class="line">        self.send_sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_s</span><span class="params">(self, cli_sock, addr)</span>:</span></span><br><span class="line">        <span class="comment"># 接受消息</span></span><br><span class="line">        <span class="comment"># cli_sock: 客户端sock</span></span><br><span class="line">        <span class="comment"># addr: 客户端地址</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入无限循环接受消息，并在Listbox显示消息</span></span><br><span class="line">            receiveData = cli_sock.recv(BUFSIZ)</span><br><span class="line">            print(<span class="string">'接受到消息'</span>, receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), addr))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建服务器窗口</span></span><br><span class="line">    s = ChatS()</span><br><span class="line">    <span class="comment"># 调用mainloop()运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>chat_c.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatC</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 客户端的实现类，继承子ChatWindowBase方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 在子类中必须调用父类的__init__()方法</span></span><br><span class="line">        super(ChatC, self).__init__()</span><br><span class="line">        <span class="comment"># 设置label的标题</span></span><br><span class="line">        self.label.configure(text=<span class="string">'客户端'</span>)</span><br><span class="line">        <span class="comment"># 设置属性，用于保存sock对象用于发送和接受消息</span></span><br><span class="line">        self.sock = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 在创建窗口时链接服务器，</span></span><br><span class="line">        <span class="comment"># 客户端需要比服务器后创建</span></span><br><span class="line">        <span class="comment"># 否则链接会创建失败</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类，为控件调用的方法</span></span><br><span class="line">        <span class="comment"># 获取输入框的值</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 创建发送消息的线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.send_c, (message,)).start()</span><br><span class="line">        <span class="comment"># 在Listbox中按格式显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s'</span> % (ctime(), ADDR))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框中的消息</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 通过更新顶层窗口显示消息</span></span><br><span class="line">        self.top.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.sock.connect(ADDR)</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.receive_c, (self.sock,)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_c</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 调用sock的send方法，向服务器发送消息</span></span><br><span class="line">        self.sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_c</span><span class="params">(self, sock)</span>:</span></span><br><span class="line">        <span class="comment"># 接受服务器数据的方法</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入循环，等待服务器发送的消息</span></span><br><span class="line">            data = sock.recv(BUFSIZ)</span><br><span class="line">            <span class="comment"># 将消息按照格式显示到Listbox中</span></span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), ADDR))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="comment"># 更新控件</span></span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 实例化客户端窗口</span></span><br><span class="line">    c = ChatC()</span><br><span class="line">    <span class="comment"># 调用mainloop方法运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/chat" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="GUI" scheme="http://coldjune.com/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>Python数据库编程(二)</title>
    <link href="http://coldjune.com/2018/02/28/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/28/Python数据库编程-二/</id>
    <published>2018-02-28T10:15:57.000Z</published>
    <updated>2018-03-02T11:31:40.670Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。<br><a id="more"></a></p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。</p><h3 id="python与ORM"><a href="#python与ORM" class="headerlink" title="python与ORM"></a>python与ORM</h3><p><a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a>和<a href="http://sqlobject.org/" target="_blank" rel="noopener">SQLObject</a>是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。</p><ul><li><p>安装SQLAlchemy<br><code>pip3 install sqlalchemy</code></p></li><li><p>安装SQLObject<br><code>pip3 install -U SQLObject</code></p></li></ul><p>在这里将会通过两种ORM移植上一篇的<a href="http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用">数据库适配器示例应用</a></p><h4 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h4><blockquote><p>SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先导入标准库中的模块(os.path、random)</span></span><br><span class="line"><span class="comment"># 然后是第三方或外部模块(sqlalchemy)</span></span><br><span class="line"><span class="comment"># 最后是应用的本地模块(ushuffleDB)</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> dirname</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, \</span><br><span class="line">    String, create_engine, exc, orm</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative \</span><br><span class="line">    <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span> DBNAME, NAMELEN, \</span><br><span class="line">    randName, FIELDS, tformat, cformat, setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称</span></span><br><span class="line">DSNs = &#123;</span><br><span class="line">    <span class="string">'mysql'</span>: <span class="string">'mysql+pymysql://root:root@localhost:3306/%s'</span> % DBNAME,</span><br><span class="line">    <span class="string">'sqlite'</span>: <span class="string">'sqlite:///:memory:'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SQLAlchemy的声明层</span></span><br><span class="line"><span class="comment"># 使用导入的sqlalchemy.ext.declarative.declarative_base</span></span><br><span class="line"><span class="comment"># 创建一个Base类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="comment"># 数据子类</span></span><br><span class="line">    <span class="comment"># __tablename__定义了映射的数据库表名</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    <span class="comment"># 列的属性，可以查阅文档来获取所有支持的数据类型</span></span><br><span class="line">    login = Column(String(NAMELEN))</span><br><span class="line">    userid = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    projid = Column(Integer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用于返回易于阅读的数据行的字符串格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(tformat, (self.login, self.userid, self.projid)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLAlchemyTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dsn)</span>:</span></span><br><span class="line">        <span class="comment"># 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接</span></span><br><span class="line">        <span class="comment"># 通过设置echo参数查看ORM生成的SQL语句</span></span><br><span class="line">        <span class="comment"># create_engine('sqlite:///:memory:', echo=True)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            eng = create_engine(dsn)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            eng.connect()</span><br><span class="line">        <span class="keyword">except</span> exc.OperationalError:</span><br><span class="line">            <span class="comment"># 此处连接失败是因为数据库不存在造成的</span></span><br><span class="line">            <span class="comment"># 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分</span></span><br><span class="line">            <span class="comment"># 使数据库的连接可以正常运行</span></span><br><span class="line">            <span class="comment"># 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL</span></span><br><span class="line">            eng = create_engine(dirname(dsn))</span><br><span class="line">            eng.execute(<span class="string">'CREATE DATABASE %s'</span> % DBNAME).close()</span><br><span class="line">            eng = create_engine(dsn)</span><br><span class="line">        <span class="comment"># 创建一个会话对象，用于管理单独的事务对象</span></span><br><span class="line">        <span class="comment"># 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交</span></span><br><span class="line">        <span class="comment"># 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来</span></span><br><span class="line">        <span class="comment"># 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中</span></span><br><span class="line">        Session = orm.sessionmaker(bind=eng)</span><br><span class="line">        self.ses = Session()</span><br><span class="line">        self.users = Users.__table__</span><br><span class="line">        self.eng = self.users.metadata.bind = eng</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># session.add_all()使用迭代的方式产生一系列的插入操作</span></span><br><span class="line">        self.ses.add_all(</span><br><span class="line">            Users(login=who, userid=userid, projid=rand(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            <span class="keyword">for</span> who, userid <span class="keyword">in</span> randName()</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 决定是提交还是回滚</span></span><br><span class="line">        self.ses.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 会话查询的功能，使用query.filter_by()方法进行查找</span></span><br><span class="line">        users = self.ses.query(Users).filter_by(projid=fr).all()</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.projid = to</span><br><span class="line">        self.ses.commit()</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        users = self.ses.query(Users).filter_by(projid=rm).all()</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            self.ses.delete(user)</span><br><span class="line">        self.ses.commit()</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在屏幕上显示正确的输出</span></span><br><span class="line">        print(<span class="string">'\n%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        users = self.ses.query(Users).all()</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            print(user)</span><br><span class="line">        self.ses.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="comment"># __getattr__()可以避开创建drop()和create()方法</span></span><br><span class="line">        <span class="comment"># __getattr__()只有在属性查找失败时才会被调用</span></span><br><span class="line">        <span class="comment"># 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')</span></span><br><span class="line">        <span class="comment"># 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现</span></span><br><span class="line">        <span class="comment"># slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self.users, attr)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.ses.connection().close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 入口函数</span></span><br><span class="line">    print(<span class="string">'\n***Connnect to %r database'</span> % DBNAME)</span><br><span class="line">    db = setup()</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">not</span> <span class="keyword">in</span> DSNs:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        orm = SQLAlchemyTest(DSNs[db])</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Create users table(drop old one if appl.'</span>)</span><br><span class="line">    orm.drop(checkfirst=<span class="keyword">True</span>)</span><br><span class="line">    orm.create()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Insert namse into table'</span>)</span><br><span class="line">    orm.insert()</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = orm.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d))'</span> % (num, fr, to))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Randomly delete group'</span>)</span><br><span class="line">    rm, num = orm.delete()</span><br><span class="line">    print(<span class="string">'\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Drop users table'</span>)</span><br><span class="line">    orm.drop()</span><br><span class="line">    print(<span class="string">'***Close cxns'</span>)</span><br><span class="line">    orm.finish()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>mysql输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">***Connnect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">Choose a database system:</span><br><span class="line">    (M)ySQL</span><br><span class="line">    (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Create users table(drop old one if appl.</span><br><span class="line"></span><br><span class="line">***Insert namse into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      1         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(2 users moved) from (1) to (4))</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly delete group</span><br><span class="line">(group #2; 0 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***Connnect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">Choose a database system:</span><br><span class="line">        (M)ySQL</span><br><span class="line">        (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line"></span><br><span class="line">*** Create users table(drop old one if appl.</span><br><span class="line"></span><br><span class="line">***Insert namse into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(2 users moved) from (2) to (2))</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Randomly delete group</span><br><span class="line">(group #1; 1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><h4 id="SQLObject"><a href="#SQLObject" class="headerlink" title="SQLObject"></a>SQLObject</h4><p>SQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient" target="_blank" rel="noopener">Mysqlclient</a>，选择对应的版本进行下载后执行相应的命令：<br><code>pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SQLObject代替SQLAlchemy</span></span><br><span class="line"><span class="comment"># 其余和使用SQLAlchemy的相同</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> dirname</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> sqlobject <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span>  DBNAME, NAMELEN, \</span><br><span class="line">    randName, FIELDS, tformat, cformat, setup</span><br><span class="line"></span><br><span class="line">DSNs = &#123;</span><br><span class="line">    <span class="string">'mysql'</span>: <span class="string">'mysql://root:root@127.0.0.1:3306/%s'</span> % DBNAME,</span><br><span class="line">    <span class="string">'sqlite'</span>: <span class="string">'sqlite:///:memory:'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(SQLObject)</span>:</span></span><br><span class="line">    <span class="comment"># 扩展了SQLObject.SQLObject类</span></span><br><span class="line">    <span class="comment"># 定义列</span></span><br><span class="line">    login = StringCol(length=NAMELEN)</span><br><span class="line">    userid = IntCol()</span><br><span class="line">    projid = IntCol()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 提供用于显示输出的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(tformat, (</span><br><span class="line">            self.login, self.userid, self.projid)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLObjectTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dsn)</span>:</span></span><br><span class="line">        <span class="comment"># 确保得到一个可用的数据库，然后返回连接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cxn = connectionForURI(dsn)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试对已存在的表建立连接</span></span><br><span class="line">            <span class="comment"># 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常</span></span><br><span class="line">            cxn.releaseConnection(cxn.getConnection())</span><br><span class="line">        <span class="keyword">except</span> dberrors.OperationalError:</span><br><span class="line">            <span class="comment"># 出现异常则创建表</span></span><br><span class="line">            cxn = connectionForURI(dirname(dsn))</span><br><span class="line">            cxn.query(<span class="string">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class="line">            cxn = connectionForURI(dsn)</span><br><span class="line">        <span class="comment"># 成功后在self.cxn中保存连接对象</span></span><br><span class="line">        self.cxn = sqlhub.processConnection = cxn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        <span class="keyword">for</span> who, userid <span class="keyword">in</span> randName():</span><br><span class="line">            Users(login=who, userid=userid, projid=rand(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        users = Users.selectBy(projid=fr)</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.projid = to</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 删除</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        users = Users.selectBy(projid=rm)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.destroySelf()</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'\n%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> Users.select():</span><br><span class="line">            print(user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.cxn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'***Connect to %r database'</span> % DBNAME)</span><br><span class="line">    db = setup()</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">not</span> <span class="keyword">in</span> DSNs:</span><br><span class="line">        print(<span class="string">'\nError: %r not support'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        orm = SQLObjectTest(DSNs[db])</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'\nError: %r not support'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Create users table(drop old one if appl.)'</span>)</span><br><span class="line">    Users.dropTable(<span class="keyword">True</span>)</span><br><span class="line">    Users.createTable()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Insert names into table'</span>)</span><br><span class="line">    orm.insert()</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = orm.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Randomly delete group'</span>)</span><br><span class="line">    rm, num = orm.delete()</span><br><span class="line">    print(<span class="string">'\t(group #%d;%d users removed)'</span> % (rm, num))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Drop users table'</span>)</span><br><span class="line">    <span class="comment"># 使用dropTable()方法</span></span><br><span class="line">    Users.dropTable()</span><br><span class="line">    print(<span class="string">'\n***Close cxns'</span>)</span><br><span class="line">    orm.finish()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>MySQL输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line"></span><br><span class="line">***Create users table(drop old one if appl.)</span><br><span class="line"></span><br><span class="line">*** Insert names into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Move users to a random group</span><br><span class="line">(0 users moved) from (2) to (4)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">(group #3;1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Drop users table</span><br><span class="line"></span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line"></span><br><span class="line">***Create users table(drop old one if appl.)</span><br><span class="line"></span><br><span class="line">*** Insert names into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line"></span><br><span class="line">*** Move users to a random group</span><br><span class="line">(1 users moved) from (3) to (1)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      1         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">(group #2;1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      1         </span><br><span class="line"></span><br><span class="line">*** Drop users table</span><br><span class="line"></span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>Web和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。</p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>是非常流行的文档存储非关系数据库。</p><blockquote><p>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型</p></blockquote><p>MongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。</p><h3 id="PyMongo-MongoDB和Python"><a href="#PyMongo-MongoDB和Python" class="headerlink" title="PyMongo:MongoDB和Python"></a>PyMongo:MongoDB和Python</h3><p>PyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要<a href="https://www.mongodb.com/download-center?jmp=nav#atlas" target="_blank" rel="noopener">安装MongoDB数据库</a>和PyMongo：<br><code>pip3 install pymongo</code><br>在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令<br><code>.mongod --dbpath E:\MongoDB\data</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要导入的是MongoClient对象和及其包异常errors</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient, errors</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span> DBNAME, randName, FIELDS, tformat, cformat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置了集合(“表”)名</span></span><br><span class="line">COLLECTION = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个连接，如果服务器不可达，则抛出异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cxn = MongoClient()</span><br><span class="line">        <span class="keyword">except</span> errors.AutoReconnect:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError</span><br><span class="line">        <span class="comment"># 创建并复用数据库及“users”集合</span></span><br><span class="line">        <span class="comment"># 关系数据库中的表会对列的格式进行定义，</span></span><br><span class="line">        <span class="comment"># 然后使遵循这个列定义的每条记录成为一行</span></span><br><span class="line">        <span class="comment"># 非关系数据库中集合没有任何模式的需求，</span></span><br><span class="line">        <span class="comment"># 每条记录都有其特定的文档</span></span><br><span class="line">        <span class="comment"># 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中</span></span><br><span class="line">        self.db = cxn[DBNAME]</span><br><span class="line">        self.users = self.db[COLLECTION]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 向MongoDB的集合中添加值</span></span><br><span class="line">        <span class="comment"># 使用dict()工厂函数为每条记录创建一个文档</span></span><br><span class="line">        <span class="comment"># 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法</span></span><br><span class="line">        self.users.insert(</span><br><span class="line">            dict(login=who, userid=uid, projid=rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">                 )<span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户</span></span><br><span class="line">        <span class="comment"># 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(self.users.find(&#123;<span class="string">'projid'</span>: fr&#125;)):</span><br><span class="line">            <span class="comment"># 使用$set指令可以显式地修改已存在的值</span></span><br><span class="line">            <span class="comment"># 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷</span></span><br><span class="line">            <span class="comment"># 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值</span></span><br><span class="line">            <span class="comment"># update()方法可以用来修改多个文档(将multi标志设为True)</span></span><br><span class="line">            self.users.update(user, &#123;</span><br><span class="line">                <span class="string">'$set'</span>: &#123;<span class="string">'projid'</span>: to&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除</span></span><br><span class="line">        <span class="comment"># 然后返回结果</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(self.users.find(&#123;<span class="string">'projid'</span>: rm&#125;)):</span><br><span class="line">            self.users.remove(user)</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示</span></span><br><span class="line">        print(<span class="string">'%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.users.find():</span><br><span class="line">            print(<span class="string">''</span>.join(map(tformat, (</span><br><span class="line">                user[k] <span class="keyword">for</span> k <span class="keyword">in</span> FIELDS))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'***Connect to %r database'</span> % DBNAME)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mongo = MongoTest()</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'\nERROR: MongoDB server unreadable, exit'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Insert names into table'</span>)</span><br><span class="line">    mongo.insert()</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = mongo.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Randomly delete group'</span>)</span><br><span class="line">    rm, num = mongo.delete()</span><br><span class="line">    print(<span class="string">'\tgroup #%d; %d users removed'</span> % (rm, num))</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Drop users table'</span>)</span><br><span class="line">    mongo.db.drop_collection(COLLECTION)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">***Connect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">***Insert names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(0 users moved) from (1) to (2)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">group #2; 1 users removed</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="数据库编程" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python数据库编程(一)</title>
    <link href="http://coldjune.com/2018/02/28/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/28/Python数据库编程-一/</id>
    <published>2018-02-28T01:47:18.000Z</published>
    <updated>2018-03-02T11:31:40.670Z</updated>
    
    <content type="html"><![CDATA[<p>Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过<strong>适配器</strong>的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。<br><a id="more"></a></p><h2 id="Python的DB-API"><a href="#Python的DB-API" class="headerlink" title="Python的DB-API"></a>Python的DB-API</h2><blockquote><p>DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问</p></blockquote><h3 id="模块属性"><a href="#模块属性" class="headerlink" title="模块属性"></a>模块属性</h3><h4 id="DB-API模块属性"><a href="#DB-API模块属性" class="headerlink" title="DB-API模块属性"></a>DB-API模块属性</h4><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">apilevel</td><td style="text-align:center">需要适配器兼容的DB-API版本</td></tr><tr><td style="text-align:center">threadsafety</td><td style="text-align:center">本模块的线程安全级别</td></tr><tr><td style="text-align:center">paramstyle</td><td style="text-align:center">本模块的SQL语句参数风格</td></tr><tr><td style="text-align:center">connect()</td><td style="text-align:center">Connect()函数</td></tr><tr><td style="text-align:center">(多种异常)</td></tr></tbody></table><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><ul><li><p>apilevel</p><blockquote><p>该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0</p></blockquote></li><li><p>threadsafety</p><blockquote><p>0: 不支持线程安全。线程间不能共享模块<br>1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接<br>2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标<br>3: 完整的线程安全支持：线程间可以共享模块、连接和游标</p></blockquote></li></ul><p><strong>如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的</strong></p><h4 id="参数风格"><a href="#参数风格" class="headerlink" title="参数风格"></a>参数风格</h4><ul><li>paramstyle</li></ul><table><thead><tr><th style="text-align:center">参数风格</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">numeric</td><td style="text-align:center">数值位置风格</td><td style="text-align:center">WHERE name=:1</td></tr><tr><td style="text-align:center">named</td><td style="text-align:center">命名风格</td><td style="text-align:center">WHERE name=:name</td></tr><tr><td style="text-align:center">pyformat</td><td style="text-align:center">Python字典printf()格式转换</td><td style="text-align:center">WHERE name=%(name)s</td></tr><tr><td style="text-align:center">qmark</td><td style="text-align:center">问号风格</td><td style="text-align:center">WHERE name=?</td></tr><tr><td style="text-align:center">format</td><td style="text-align:center">ANSIC的printf()格式转换</td><td style="text-align:center">WHERE name=%s</td></tr></tbody></table><h4 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h4><blockquote><p>connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象</p></blockquote><p>connect()函数使用例子：<br><code>connect(dsn=&#39;myhost:MYDB&#39;, user=&#39;root&#39;, password=&#39;root&#39;)</code></p><ul><li>connect()函数属性</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">用户名</td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">面</td></tr><tr><td style="text-align:center">host</td><td style="text-align:center">主机名</td></tr><tr><td style="text-align:center">database</td><td style="text-align:center">数据库名</td></tr><tr><td style="text-align:center">dsn</td><td style="text-align:center">数据源名</td></tr></tbody></table><p>使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><table><thead><tr><th style="text-align:center">异常</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Warning</td><td style="text-align:center">警告异常基类</td></tr><tr><td style="text-align:center">Error</td><td style="text-align:center">错误异常基类</td></tr><tr><td style="text-align:center">InterfaceError</td><td style="text-align:center">数据库接口(非数据库)错误</td></tr><tr><td style="text-align:center">DatabaseError</td><td style="text-align:center">数据库错误</td></tr><tr><td style="text-align:center">DataError</td><td style="text-align:center">处理数据时出现错误</td></tr><tr><td style="text-align:center">OperationError</td><td style="text-align:center">数据库操作执行期间出现的错误</td></tr><tr><td style="text-align:center">IntegrityError</td><td style="text-align:center">数据库关系完整性错误</td></tr><tr><td style="text-align:center">InternalError</td><td style="text-align:center">数据库内部错误</td></tr><tr><td style="text-align:center">ProgrammingError</td><td style="text-align:center">SQL命令执行失败</td></tr><tr><td style="text-align:center">NotSupportedError</td><td style="text-align:center">出现不支持的操作</td></tr></tbody></table><h3 id="Connection对象"><a href="#Connection对象" class="headerlink" title="Connection对象"></a>Connection对象</h3><blockquote><p>只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应</p></blockquote><h4 id="Connection对象方法"><a href="#Connection对象方法" class="headerlink" title="Connection对象方法"></a>Connection对象方法</h4><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭数据库连接</td></tr><tr><td style="text-align:center">commit()</td><td style="text-align:center">提交当前事务</td></tr><tr><td style="text-align:center">rollback()</td><td style="text-align:center">取消当前事务</td></tr><tr><td style="text-align:center">cursor()</td><td style="text-align:center">使用该连接创建(并返回)一个游标或类游标的对象</td></tr><tr><td style="text-align:center">errorhandler(cxn,cur,errcls,errval)</td><td style="text-align:center">作为给定连接的游标的处理程序</td></tr></tbody></table><ul><li>当使用<code>close()</code>时，这个连接将不能再使用，否则会进入到异常处理中</li><li>如果数据库不支持事务处理或启用了自动提交功能，<code>commit()</code>方法都无法使用</li><li><code>rollback()</code>只能在支持事务处理的数据库中使用。发生异常时，<code>rollback()</code>会将数据库的状态恢复到事务处理开始时。</li><li>如果RDBMS(关系数据库管理系统)不支持游标，<code>cursor()</code>会返回一个尽可能模仿真实游标的对象</li></ul><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><blockquote><p>游标可以让用户提交数据库命令，并获得查询的结果行。</p></blockquote><table><thead><tr><th style="text-align:center">对象属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">arraysize</td><td style="text-align:center">使用fetchmany()方法时，一次取出的结果行数，默认为1</td></tr><tr><td style="text-align:center">connection</td><td style="text-align:center">创建此游标的连接(可选)</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的</td></tr><tr><td style="text-align:center">lastrowid</td><td style="text-align:center">上次修改行的行ID(可选，如果不支持行ID，则返回None)</td></tr><tr><td style="text-align:center">rowcount</td><td style="text-align:center">上次execute*()方法处理或影响的行数</td></tr><tr><td style="text-align:center">callproc(func[,args])</td><td style="text-align:center">调用存储过程</td></tr><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭游标</td></tr><tr><td style="text-align:center">execute(op[,args])</td><td style="text-align:center">执行数据库查询或命令</td></tr><tr><td style="text-align:center">executemany(op,args)</td><td style="text-align:center">类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令</td></tr><tr><td style="text-align:center">fetchone()</td><td style="text-align:center">获取查询结果的下一行</td></tr><tr><td style="text-align:center">fetchmany([size=cursor,arraysize])</td><td style="text-align:center">获取查询结果的下面size行</td></tr><tr><td style="text-align:center">fetchall()</td><td style="text-align:center">获取查询结果的所有(剩余)行</td></tr><tr><td style="text-align:center"><strong>iter</strong>()</td><td style="text-align:center">为游标创建迭代器对象(可选，参考nexi())</td></tr><tr><td style="text-align:center">messages</td><td style="text-align:center">游标执行后从数据库中获得的消息列表(元组集合，可选)</td></tr><tr><td style="text-align:center">next()</td><td style="text-align:center">被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考<strong>iter</strong>())</td></tr><tr><td style="text-align:center">nextset()</td><td style="text-align:center">移动到下一个结果集合(如果支持)</td></tr><tr><td style="text-align:center">rownumber</td><td style="text-align:center">当前结果集中游标的索引(以行为单位，从0开始，可选)</td></tr><tr><td style="text-align:center">setinputsizes(sizes)</td><td style="text-align:center">设置允许的最大输入大小(必须有，但是实现是可选的)</td></tr><tr><td style="text-align:center">setoutputsize(size[,col])</td><td style="text-align:center">设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)</td></tr></tbody></table><p><strong>游标对象最重要的属性是execute<em>()和fetch</em>()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标</strong></p><h4 id="类型对象和构造函数"><a href="#类型对象和构造函数" class="headerlink" title="类型对象和构造函数"></a>类型对象和构造函数</h4><blockquote><p>创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象</p></blockquote><table><thead><tr><th style="text-align:center">类型对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Date(yr,mo,dy)</td><td style="text-align:center">日期值对象</td></tr><tr><td style="text-align:center">Time(hr,min,sec)</td><td style="text-align:center">时间值对象</td></tr><tr><td style="text-align:center">Timestamp(yr,mo,dy,hr,min,sec)</td><td style="text-align:center">时间戳值对象</td></tr><tr><td style="text-align:center">DateFromTicks(ticks)</td><td style="text-align:center">日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">TimeFromTicks(ticks)</td><td style="text-align:center">时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">TimestampFromTicks(ticks)</td><td style="text-align:center">时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">Binary(string)</td><td style="text-align:center">对应二进制(长)字符串对象</td></tr><tr><td style="text-align:center">STRING</td><td style="text-align:center">表示基于字符串列的对象，比如VARCHAR</td></tr><tr><td style="text-align:center">BINARY</td><td style="text-align:center">表示(长)二进制列的对象，比如RAW、BLOB</td></tr><tr><td style="text-align:center">NUMBER</td><td style="text-align:center">表示数值列的对象</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">表示日期/时间列的对象</td></tr><tr><td style="text-align:center">ROWID</td><td style="text-align:center">表示“行ID”列的对象</td></tr></tbody></table><p><strong>SQL的NULL值对应于Python的NULL对象None</strong></p><h4 id="数据库适配器示例应用"><a href="#数据库适配器示例应用" class="headerlink" title="数据库适配器示例应用"></a>数据库适配器示例应用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入必需的模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了全局变量</span></span><br><span class="line"><span class="comment"># 用于显示列的大小，以及支持的数据库种类</span></span><br><span class="line">COLSIZ = <span class="number">10</span></span><br><span class="line">FIELDS = (<span class="string">'login'</span>, <span class="string">'userid'</span>, <span class="string">'projid'</span>)</span><br><span class="line">RDBMSs = &#123;</span><br><span class="line">    <span class="string">'s'</span>: <span class="string">'sqlite'</span>,</span><br><span class="line">    <span class="string">'m'</span>: <span class="string">'mysql'</span>,</span><br><span class="line">&#125;</span><br><span class="line">DBNAME = <span class="string">'test'</span></span><br><span class="line">DBUSER = <span class="string">'root'</span></span><br><span class="line"><span class="comment"># 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块</span></span><br><span class="line">DB_EXC = <span class="keyword">None</span></span><br><span class="line">NAMELEN = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化字符串以显示标题</span></span><br><span class="line"><span class="comment"># 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式</span></span><br><span class="line"><span class="comment"># 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)</span></span><br><span class="line">tformat = <span class="keyword">lambda</span> s: str(s).title().ljust(COLSIZ)</span><br><span class="line">cformat = <span class="keyword">lambda</span> s: s.upper().ljust(COLSIZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RDBMSs[input(<span class="string">'''</span></span><br><span class="line"><span class="string">        Choose a database system:</span></span><br><span class="line"><span class="string">        (M)ySQL</span></span><br><span class="line"><span class="string">        (S)QLite</span></span><br><span class="line"><span class="string">        Enter choice:</span></span><br><span class="line"><span class="string">    '''</span>).strip().lower()[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(db)</span>:</span></span><br><span class="line">    <span class="comment"># 数据库一致性访问的核心</span></span><br><span class="line">    <span class="comment"># 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块</span></span><br><span class="line">    <span class="comment"># 就返回None，表示无法支持数据库系统</span></span><br><span class="line">    <span class="keyword">global</span> DB_EXC</span><br><span class="line">    dbDir = <span class="string">'%s_%s'</span> % (db, DBNAME)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> db == <span class="string">'sqlite'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试加载sqlite3模块</span></span><br><span class="line">            <span class="keyword">import</span> sqlite3</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        DB_EXC = sqlite3</span><br><span class="line">        <span class="comment"># 当对SQLite调用connect()时，会使用已存在的目录</span></span><br><span class="line">        <span class="comment"># 如果没有，则创建一个新目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dbDir):</span><br><span class="line">            os.mkdir(dbDir)</span><br><span class="line">        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))</span><br><span class="line">    <span class="keyword">elif</span> db == <span class="string">'mysql'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 由于MySQLdb不支持python3.6，所以导入pymysql</span></span><br><span class="line">            <span class="keyword">import</span> pymysql</span><br><span class="line">            <span class="keyword">import</span> pymysql.err <span class="keyword">as</span> DB_EXC</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                      user=<span class="string">"root"</span>,</span><br><span class="line">                                      password=<span class="string">"root"</span>,</span><br><span class="line">                                      port=<span class="number">3306</span>,</span><br><span class="line">                                      db=DBNAME)</span><br><span class="line">            <span class="keyword">except</span> DB_EXC.InternalError:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                          user=<span class="string">"root"</span>,</span><br><span class="line">                                          password=<span class="string">"root"</span>,</span><br><span class="line">                                          port=<span class="number">3306</span>)</span><br><span class="line">                    cxn.query(<span class="string">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class="line">                    cxn.commit()</span><br><span class="line">                    cxn.close()</span><br><span class="line">                    cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                          user=<span class="string">"root"</span>,</span><br><span class="line">                                          password=<span class="string">"root"</span>,</span><br><span class="line">                                          port=<span class="number">3306</span>,</span><br><span class="line">                                          db=DBNAME)</span><br><span class="line">                <span class="keyword">except</span> DB_EXC.InternalError:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> cxn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(cur)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个新表users</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cur.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">            CREATE  TABLE  users(</span></span><br><span class="line"><span class="string">                login VARCHAR(%d),</span></span><br><span class="line"><span class="string">                userid INTEGER,</span></span><br><span class="line"><span class="string">                projid INTEGER</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">        '''</span> % NAMELEN)</span><br><span class="line">    <span class="keyword">except</span> DB_EXC.InternalError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果发生错误，几乎总是这个表已经存在了</span></span><br><span class="line">        <span class="comment"># 删除该表，重新创建</span></span><br><span class="line">        drop(cur)</span><br><span class="line">        create(cur)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库表的函数</span></span><br><span class="line">drop = <span class="keyword">lambda</span> cur: cur.execute(<span class="string">'DROP TABLE users'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由用户名和用户ID组成的常量</span></span><br><span class="line">NAMES = (</span><br><span class="line">    (<span class="string">'bob'</span>, <span class="number">1234</span>), (<span class="string">'angela'</span>, <span class="number">4567</span>), (<span class="string">'dave'</span>, <span class="number">4523</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randName</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 生成器</span></span><br><span class="line">    pick = set(NAMES)</span><br><span class="line">    <span class="keyword">while</span> pick:</span><br><span class="line">        <span class="keyword">yield</span> pick.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(cur, db)</span>:</span></span><br><span class="line">    <span class="comment"># 插入函数</span></span><br><span class="line">    <span class="comment"># SQLite风格是qmark参数风格，而MySQL使用的是format参数风格</span></span><br><span class="line">    <span class="comment"># 对于每个用户名-用户ID对，都会被分配到一个项目卒中。</span></span><br><span class="line">    <span class="comment"># 项目ID从四个不同的组中随机选出的</span></span><br><span class="line">    <span class="keyword">if</span> db == <span class="string">'sqlite'</span>:</span><br><span class="line">        cur.executemany(<span class="string">"INSERT INTO users VALUES(?,?,?)"</span>,</span><br><span class="line">                        [(who, uid, rand(<span class="number">1</span>, <span class="number">5</span>)) <span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()])</span><br><span class="line">    <span class="keyword">elif</span> db == <span class="string">'mysql'</span>:</span><br><span class="line">        cur.executemany(<span class="string">"INSERT INTO users VALUES(%s, %s, %s)"</span>,</span><br><span class="line">                        [(who, uid, rand(<span class="number">1</span>, <span class="number">5</span>)) <span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1</span></span><br><span class="line">getRC = <span class="keyword">lambda</span> cur: cur.rowcount <span class="keyword">if</span> hasattr(cur, <span class="string">'rowcount'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># update()和delete()函数会随机选择项目组中的成员</span></span><br><span class="line"><span class="comment"># 更新操作会将其从当前组移动到另一个随机选择的组中</span></span><br><span class="line"><span class="comment"># 删除操作会将该组的成员全部删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(cur)</span>:</span></span><br><span class="line">    fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    cur.execute(<span class="string">'UPDATE users SET projid=%d WHERE projid=%d'</span> % (to, fr))</span><br><span class="line">    <span class="keyword">return</span> fr, to, getRC(cur)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(cur)</span>:</span></span><br><span class="line">    rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    cur.execute(<span class="string">'DELETE FROM users WHERE projid=%d'</span> % rm)</span><br><span class="line">    <span class="keyword">return</span> rm, getRC(cur)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(cur)</span>:</span></span><br><span class="line">    <span class="comment"># 来去所有行，将其按照打印格式进行格式化，然后显示</span></span><br><span class="line">    cur.execute(<span class="string">'SELECT * FROM users'</span>)</span><br><span class="line">    <span class="comment"># 格式化标题</span></span><br><span class="line">    print(<span class="string">'%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">        <span class="comment"># 将数据(login,userid,projid)通过map()传递给tformat()，</span></span><br><span class="line">        <span class="comment"># 是数据转化为字符串，将其格式化为标题风格</span></span><br><span class="line">        <span class="comment"># 字符串按照COLSIZ的列宽度进行左对齐</span></span><br><span class="line">        print(<span class="string">''</span>.join(map(tformat, data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    db = setup()</span><br><span class="line">    print(<span class="string">'*** Connect to %r database'</span> % db)</span><br><span class="line">    cxn = connect(db)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cxn:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported or unreadable, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    cur = cxn.cursor()</span><br><span class="line">    print(<span class="string">'***Creating users table'</span>)</span><br><span class="line">    create(cur=cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'***Inserting names into table'</span>)</span><br><span class="line">    insert(cur, db)</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Randomly moving folks'</span>)</span><br><span class="line">    fr, to, num = update(cur)</span><br><span class="line">    print(<span class="string">'(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'***Randomly choosing group'</span>)</span><br><span class="line">    rm, num = delete(cur)</span><br><span class="line">    print(<span class="string">'\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Droping users table'</span>)</span><br><span class="line">    drop(cur)</span><br><span class="line">    print(<span class="string">'\n*** Close cxns'</span>)</span><br><span class="line">    cur.close()</span><br><span class="line">    cxn.commit()</span><br><span class="line">    cxn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>MySQL数据库访问结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">        (M)ySQL</span><br><span class="line">        (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line">*** Connect to &apos;mysql&apos; database</span><br><span class="line">***Creating users table</span><br><span class="line">***Inserting names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line">Bob       1234      3         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly moving folks</span><br><span class="line">(2 users moved) from (3) to (1)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line">Bob       1234      1         </span><br><span class="line">Angela    4567      1         </span><br><span class="line">***Randomly choosing group</span><br><span class="line">(group #1; 2 users removed)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line"></span><br><span class="line">***Droping users table</span><br><span class="line"></span><br><span class="line">*** Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite数据库访问结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line">*** Connect to &apos;sqlite&apos; database</span><br><span class="line">***Creating users table</span><br><span class="line">***Inserting names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly moving folks</span><br><span class="line">(1 users moved) from (1) to (1)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      3         </span><br><span class="line">***Randomly choosing group</span><br><span class="line">(group #3; 1 users removed)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line"></span><br><span class="line">***Droping users table</span><br><span class="line"></span><br><span class="line">*** Close cxns</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过&lt;strong&gt;适配器&lt;/strong&gt;的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="数据库编程" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程(二)</title>
    <link href="http://coldjune.com/2018/02/26/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/26/Python多线程-二/</id>
    <published>2018-02-26T14:16:16.000Z</published>
    <updated>2018-02-27T13:24:43.656Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。<br><a id="more"></a></p><h2 id="多线程实践"><a href="#多线程实践" class="headerlink" title="多线程实践"></a>多线程实践</h2><p>Python虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。<br>下面的例子是通过多线程下载图书排名信息的调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-  coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配排名的正则表达式</span></span><br><span class="line"><span class="comment"># 亚马逊的网站</span></span><br><span class="line">REGEX = re.compile(<span class="string">b'#([\d,]+) in Books'</span>)</span><br><span class="line">AMZN = <span class="string">'https://www.amazon.com/dp/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ISBN编号和书名</span></span><br><span class="line">ISBNs = &#123;</span><br><span class="line">    <span class="string">'0132269937'</span>: <span class="string">'Core Python Programming'</span>,</span><br><span class="line">    <span class="string">'0132356139'</span>: <span class="string">'Python Web Development with Django'</span>,</span><br><span class="line">    <span class="string">'0137143419'</span>: <span class="string">'Python Fundamentals'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line"><span class="comment"># 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                  <span class="string">'(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ranking</span><span class="params">(isbn)</span>:</span></span><br><span class="line">    <span class="comment"># 爬取网页,获取数据</span></span><br><span class="line">    <span class="comment"># 使用str.format()格式化数据</span></span><br><span class="line">    url = <span class="string">'&#123;0&#125;&#123;1&#125;'</span>.format(AMZN, isbn)</span><br><span class="line">    <span class="comment"># 爬取网页并解析</span></span><br><span class="line">    req = urllib.request.Request(url, headers=headers)</span><br><span class="line">    page = urllib.request.urlopen(req)</span><br><span class="line">    data = page.read()</span><br><span class="line">    page.close()</span><br><span class="line">    <span class="keyword">return</span> str(REGEX.findall(data)[<span class="number">0</span>], <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_show_ranking</span><span class="params">(isbn)</span>:</span></span><br><span class="line">    <span class="comment"># 显示结果</span></span><br><span class="line">    print(<span class="string">'- %r ranked %s'</span> % (ISBNs[isbn], get_ranking(isbn)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'At'</span>, time.ctime(), <span class="string">'on Amazon...'</span>)</span><br><span class="line">    <span class="keyword">for</span> isbn <span class="keyword">in</span> ISBNs:</span><br><span class="line">        (threading.Thread(target=_show_ranking, args=(isbn,))).start()</span><br><span class="line">        <span class="comment">#_show_ranking(isbn)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 注册一个退出函数，在脚本退出先请求调用这个函数</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, time.ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">At Tue Feb 27 10:40:51 2018 on Amazon...</span><br><span class="line">- &apos;Python Fundamentals&apos; ranked 4,358,513</span><br><span class="line">- &apos;Python Web Development with Django&apos; ranked 1,354,091</span><br><span class="line">- &apos;Core Python Programming&apos; ranked 458,510</span><br><span class="line">all DONE at: Tue Feb 27 10:42:39 2018</span><br></pre></td></tr></table></figure><h3 id="锁示例"><a href="#锁示例" class="headerlink" title="锁示例"></a>锁示例</h3><p>锁有两种状态:<strong>锁定</strong> 和 <strong>未锁定</strong>。同时它也支持两个函数：<strong>获得锁</strong> 和 <strong>释放锁</strong>。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。</p><ul><li>锁和更多的随机性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span>  register</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock, current_thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CleanOutputSet</span><span class="params">(set)</span>:</span></span><br><span class="line">    <span class="comment"># 集合的子类，将默认输出改变为将其所有元素</span></span><br><span class="line">    <span class="comment"># 按照逗号分隔的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">', '</span>.join(x <span class="keyword">for</span> x <span class="keyword">in</span> self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒</span></span><br><span class="line">lock = Lock()</span><br><span class="line">loops = (randrange(<span class="number">2</span>, <span class="number">5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(randrange(<span class="number">3</span>, <span class="number">7</span>)))</span><br><span class="line">remaining = CleanOutputSet()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(sec)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前执行的线程名，然后获取锁并保存线程名</span></span><br><span class="line">    myname = current_thread().name</span><br><span class="line">    lock.acquire()</span><br><span class="line">    remaining.add(myname)</span><br><span class="line">    print(<span class="string">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class="line">    <span class="comment"># 释放锁并睡眠随机秒</span></span><br><span class="line">    lock.release()</span><br><span class="line">    sleep(sec)</span><br><span class="line">    <span class="comment"># 重新获取锁，输出后再释放锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    remaining.remove(myname)</span><br><span class="line">    print(<span class="string">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class="line">    print(<span class="string">'     (remaining: %s)'</span> % (remaining <span class="keyword">or</span> <span class="string">'NONE'</span>))</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_with</span><span class="params">(sec)</span>:</span></span><br><span class="line">    myname = current_thread().name</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        remaining.add(myname)</span><br><span class="line">        print(<span class="string">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class="line">    sleep(sec)</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        remaining.remove(myname)</span><br><span class="line">        print(<span class="string">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class="line">        print(<span class="string">'     (remaining: %s)'</span> % (remaining <span class="keyword">or</span> <span class="string">'NONE'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> pause <span class="keyword">in</span> loops:</span><br><span class="line">        <span class="comment"># Thread(target=loop, args=(pause,)).start()</span></span><br><span class="line">        Thread(target=loop_with, args=(pause,)).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p>loop方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-1</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-2</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-3</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-4</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-5</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-6</span><br><span class="line">[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)</span><br><span class="line">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)</span><br><span class="line">[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)</span><br><span class="line">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)</span><br><span class="line">     (remaining: Thread-4, Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)</span><br><span class="line">     (remaining: Thread-1)</span><br><span class="line">[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)</span><br><span class="line">     (remaining: NONE)</span><br><span class="line">all DONE at: Tue Feb 27 11:26:17 2018</span><br></pre></td></tr></table></figure></p><p>loop_with方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-1</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-2</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-3</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-4</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-5</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-6</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)</span><br><span class="line">     (remaining: Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)</span><br><span class="line">     (remaining: Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)</span><br><span class="line">     (remaining: NONE)</span><br><span class="line">all DONE at: Tue Feb 27 11:43:18 2018</span><br></pre></td></tr></table></figure></p><h3 id="信号量示例"><a href="#信号量示例" class="headerlink" title="信号量示例"></a>信号量示例</h3><p>对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。<strong>信号量</strong> 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为<code>P()</code>，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为<code>V()</code>。</p><ul><li>糖果机和信号量</li></ul><blockquote><p> 这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入相应的模块和信号量类</span></span><br><span class="line"><span class="comment"># BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值</span></span><br><span class="line"><span class="comment"># 它可以防范其中信号量释放次数多余获得次数的异常用例</span></span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> BoundedSemaphore, Lock, Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># 库存商品最大值的常量</span></span><br><span class="line"><span class="comment"># 糖果托盘</span></span><br><span class="line">lock = Lock()</span><br><span class="line">MAX = <span class="number">5</span></span><br><span class="line">candytray = BoundedSemaphore(MAX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refill</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 当虚构的糖果机所有者向库存中添加糖果时执行</span></span><br><span class="line">    <span class="comment"># 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'Refilling candy...'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        candytray.release()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">'full, skipping'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'OK'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 允许消费者获取一个单位的库存</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'Buying candy....'</span>)</span><br><span class="line">    <span class="comment"># 检测是否所有资源都已经消费完了</span></span><br><span class="line">    <span class="comment"># 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False</span></span><br><span class="line">    <span class="comment"># 指明没有更多资源</span></span><br><span class="line">    <span class="keyword">if</span> candytray.acquire(<span class="keyword">False</span>):</span><br><span class="line">        print(<span class="string">'OK'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Empty, skipping'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        refill()</span><br><span class="line">        sleep(randrange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        buy()</span><br><span class="line">        sleep(randrange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    nloops = randrange(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'THE CANDY MACHINE (full with %d bars)'</span> % MAX)</span><br><span class="line">    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+<span class="number">2</span>),)).start()</span><br><span class="line">    Thread(target=producer, args=(nloops,)).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">starting at: Tue Feb 27 14:48:31 2018</span><br><span class="line">THE CANDY MACHINE (full with 5 bars)</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">full, skipping</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">full, skipping</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">Empty, skipping</span><br><span class="line">all DONE at: Tue Feb 27 14:48:42 2018</span><br></pre></td></tr></table></figure><h2 id="生产者-消费者问题和queue模块"><a href="#生产者-消费者问题和queue模块" class="headerlink" title="生产者-消费者问题和queue模块"></a>生产者-消费者问题和queue模块</h2><p>生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。<br><a href="https://docs.python.org/3/library/queue.html" target="_blank" rel="noopener">queue模块</a>来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品</p><h3 id="queue模块常用属性"><a href="#queue模块常用属性" class="headerlink" title="queue模块常用属性"></a>queue模块常用属性</h3><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Queue(maxsize=0)</td><td style="text-align:center">创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">LifoQueue(maxsize=0)</td><td style="text-align:center">创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">PriorityQueue(maxsize)</td><td style="text-align:center">创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">queue异常</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Empty</td><td style="text-align:center">当对空队列调用get*()方法时抛出异常</td></tr><tr><td style="text-align:center">Full</td><td style="text-align:center">当对已满的队列调用put*()方法时抛出异常</td></tr><tr><td style="text-align:center">queue对象方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">qsize()</td><td style="text-align:center">返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)</td></tr><tr><td style="text-align:center">empty()</td><td style="text-align:center">如果队列为空，则返回True；否则，返回False</td></tr><tr><td style="text-align:center">full()</td><td style="text-align:center">如果队列已满，则返回True；否则，返回False</td></tr><tr><td style="text-align:center">put(item,block=True,timeout=None)</td><td style="text-align:center">将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常</td></tr><tr><td style="text-align:center">put_nowait()</td><td style="text-align:center">和put(item,False)相同</td></tr><tr><td style="text-align:center">get(block=True,timeout=None)</td><td style="text-align:center">从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止</td></tr><tr><td style="text-align:center">get_nowait()</td><td style="text-align:center">和get(False)相同</td></tr><tr><td style="text-align:center">task_done()</td><td style="text-align:center">用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:center">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td></tr></tbody></table><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p>使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用queue.Queue对象和之前的myThread.MyThread线程类</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> myThread <span class="keyword">import</span> MyThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 将一个对象放入队列中</span></span><br><span class="line">    print(<span class="string">'producing object for Q...'</span>)</span><br><span class="line">    queue.put(<span class="string">'xxx'</span>, <span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'size now'</span>, queue.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 消费队列中的一个对象</span></span><br><span class="line">    val = queue.get(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'consumed object from Q... size now'</span>, queue.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="comment"># 作为单个线程运行</span></span><br><span class="line">    <span class="comment"># 向队列中放入一个对象，等待片刻，然后重复上述步骤</span></span><br><span class="line">    <span class="comment"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        writeQ(queue)</span><br><span class="line">        <span class="comment"># 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象</span></span><br><span class="line">        sleep(randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="comment"># 作为单个线程运行</span></span><br><span class="line">    <span class="comment"># 消耗队列中一个对象，等待片刻，然后重复上述步骤</span></span><br><span class="line">    <span class="comment"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        readQ(queue)</span><br><span class="line">        sleep(randint(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置派生和执行的线程总数</span></span><br><span class="line">funcs = [writer, reader]</span><br><span class="line">nfuncs = range(len(funcs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    nloops = randint(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    q = Queue(<span class="number">32</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">starting at: Tue Feb 27 15:17:16 2018</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 1</span><br><span class="line">starting at: Tue Feb 27 15:17:16 2018</span><br><span class="line">consumed object from Q... size now 0</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 1</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 2</span><br><span class="line">done at: Tue Feb 27 15:17:20 2018</span><br><span class="line">consumed object from Q... size now 1</span><br><span class="line">consumed object from Q... size now 0</span><br><span class="line">done at: Tue Feb 27 15:17:26 2018</span><br><span class="line">all DONE</span><br></pre></td></tr></table></figure><h2 id="线程的替代方案"><a href="#线程的替代方案" class="headerlink" title="线程的替代方案"></a>线程的替代方案</h2><p><a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess" target="_blank" rel="noopener">subprocess模块</a><br><a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing" target="_blank" rel="noopener">multiprocessing模块</a><br><a href="https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures" target="_blank" rel="noopener">concurrent.futures模块</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程(一)</title>
    <link href="http://coldjune.com/2018/02/24/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/24/Python多线程-一/</id>
    <published>2018-02-24T08:13:37.000Z</published>
    <updated>2018-02-26T13:28:46.908Z</updated>
    
    <content type="html"><![CDATA[<p>多线程编程对于以下编程任务是非常理想的：</p><ul><li>本质上是异步的</li><li>需要多个并发活动</li><li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare--></li></ul><p>使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</p><ul><li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li><li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li><li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li></ul><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><ul><li><p>进程</p><blockquote><p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p></blockquote></li><li><p>线程</p><blockquote><p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p></blockquote></li></ul><h2 id="线程与Python"><a href="#线程与Python" class="headerlink" title="线程与Python"></a>线程与Python</h2><h3 id="全局解释锁"><a href="#全局解释锁" class="headerlink" title="全局解释锁"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由<strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p><ol><li>设置GIL</li><li>切换进一个线程去运行</li><li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li><li>把线程设置回睡眠状态(切换出线程)</li><li>解锁GIL</li><li>重复上述步骤</li></ol><p>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</p><h3 id="退出线程"><a href="#退出线程" class="headerlink" title="退出线程"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p><h2 id="thread模块"><a href="#thread模块" class="headerlink" title="_thread模块"></a>_thread模块</h2><p>  <a href="https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread" target="_blank" rel="noopener">_thread模块</a>提供了派生线程、基本的同步数据结构(<em>锁对象(lock object)</em>,也叫 <em>原语锁</em>、<em>简单锁</em>、<em>互斥锁</em>、<em>互斥</em> 和 <em>二进制信号量</em>)</p><ul><li>_thread模和锁对象</li></ul><table><thead><tr><th style="text-align:center">函数/方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">_thread模块的函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">start_new_thread(function, args, kwargs = None)</td><td style="text-align:center">派生一个新的线程，使用给定的args和可选的kwargs来执行function</td></tr><tr><td style="text-align:center">allocate_lock()</td><td style="text-align:center">分配LockType锁对象</td></tr><tr><td style="text-align:center">exit()</td><td style="text-align:center">给线程退出命令</td></tr><tr><td style="text-align:center">LockType锁对象的方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">acquire(wait = None)</td><td style="text-align:center">尝试获取锁对象</td></tr><tr><td style="text-align:center">locked()</td><td style="text-align:center">如果获取了锁对象则返回True，否则，返回False</td></tr><tr><td style="text-align:center">release()</td><td style="text-align:center">释放锁</td></tr></tbody></table><h3 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h3><h4 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h4><ul><li><p>程序</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_0</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start loop_0 at:'</span>, ctime())</span><br><span class="line">    sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">'loop_0 done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start loop_1 at:'</span>, ctime())</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'loop_1 done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    <span class="comment"># start_new_thread 方法即使要执行的</span></span><br><span class="line">    <span class="comment"># 函数不需要参数，也需要传递一个空元组</span></span><br><span class="line">    _thread.start_new_thread(loop_0, ())</span><br><span class="line">    _thread.start_new_thread(loop_1, ())</span><br><span class="line">    <span class="comment"># 阻止主线程的执行，保证其最后执行，</span></span><br><span class="line">    <span class="comment"># 后续去掉这种方式，引入锁的方式</span></span><br><span class="line">    sleep(<span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'all done at'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><p>  在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(<em>loop_0()</em> )的运行时间</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 08:52:10 2018</span><br><span class="line">start loop_0 at: Mon Feb 26 08:52:10 2018</span><br><span class="line">start loop_1 at: Mon Feb 26 08:52:10 2018</span><br><span class="line">loop_1 done at: Mon Feb 26 08:52:12 2018</span><br><span class="line">loop_0 done at: Mon Feb 26 08:52:14 2018</span><br><span class="line">all done at Mon Feb 26 08:52:16 2018</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用锁对象"><a href="#使用锁对象" class="headerlink" title="使用锁对象"></a>使用锁对象</h4><ul><li><p>程序</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec, lock)</span>:</span></span><br><span class="line">    <span class="comment"># nloop: 第几个线程</span></span><br><span class="line">    <span class="comment"># sec: 时间</span></span><br><span class="line">    <span class="comment"># lock: 分配的锁</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop'</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line">    <span class="comment"># 当时间到了的时候释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    locks = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 生成锁对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过allocate_lock()函数得到锁对象</span></span><br><span class="line">        <span class="comment"># 通过acquire()取到每个锁</span></span><br><span class="line">        <span class="comment"># 添加进locks列表</span></span><br><span class="line">        lock = _thread.allocate_lock()</span><br><span class="line">        lock.acquire()</span><br><span class="line">        locks.append(lock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 派生线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 传递循环号，时间、锁对象</span></span><br><span class="line">        _thread.start_new_thread(loop, (i, loops[i], locks[i]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程的锁都释放完了才执行主线程</span></span><br><span class="line">        <span class="keyword">while</span> locks[i].locked():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><p>  未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 09:37:39 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 09:37:39 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 09:37:39 2018</span><br><span class="line">loop 1 done at: Mon Feb 26 09:37:41 2018</span><br><span class="line">loop 0 done at: Mon Feb 26 09:37:43 2018</span><br><span class="line">all DONE at: Mon Feb 26 09:37:43 2018</span><br></pre></td></tr></table></figure></li></ul><h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><p><a href="https://docs.python.org/3/library/threading.html?highlight=threading#module-threading" target="_blank" rel="noopener">threading模块</a>提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制</p><ul><li>threading模块的对象</li></ul><table><thead><tr><th style="text-align:center">对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Thread</td><td style="text-align:center">表示一个执行线程的对象</td></tr><tr><td style="text-align:center">Lock</td><td style="text-align:center">锁原语对象(和thread模块中的锁一样)</td></tr><tr><td style="text-align:center">RLock</td><td style="text-align:center">可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）</td></tr><tr><td style="text-align:center">Condition</td><td style="text-align:center">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td></tr><tr><td style="text-align:center">Event</td><td style="text-align:center">条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活</td></tr><tr><td style="text-align:center">Semaphone</td><td style="text-align:center">为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td style="text-align:center">BoundSemaphone</td><td style="text-align:center">与Semaphone相似，不过它不允许超过初始值</td></tr><tr><td style="text-align:center">Timer</td><td style="text-align:center">与Thread相似，不过它要在运行前等待一段时间</td></tr><tr><td style="text-align:center">Barrier</td><td style="text-align:center">创建一个“障碍”,必须达到指定数量的线程后才可以继续</td></tr></tbody></table><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul><li>Thread对象的属性和方法</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">线程名</td></tr><tr><td style="text-align:center">ident</td><td style="text-align:center">线程的标识符</td></tr><tr><td style="text-align:center">daemon</td><td style="text-align:center">布尔标志，表示这个线程是否是守护线程</td></tr><tr><td style="text-align:center">Thread对象方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><em>init</em>(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None)</td><td style="text-align:center">实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志</td></tr><tr><td style="text-align:center">start()</td><td style="text-align:center">开始执行该线程</td></tr><tr><td style="text-align:center">run()</td><td style="text-align:center">定义线程功能的方法(通常在子类中被应用开发者重写)</td></tr><tr><td style="text-align:center">join(timeout=None)</td><td style="text-align:center">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td></tr></tbody></table><p>使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：</p><ul><li>创建Thread的实例，传给它一个函数</li><li>创建Thread的实例，传给它一个可调用的类实例</li><li>派生Thread的子类，并创建子类的实例</li></ul><h4 id="创建Thread的实例，传给它一个函数"><a href="#创建Thread的实例，传给它一个函数" class="headerlink" title="创建Thread的实例，传给它一个函数"></a>创建Thread的实例，传给它一个函数</h4><p><code>join()</code> 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。<code>join()</code>方法只有在需要等待线程完成的时候才是有用的。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop'</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        t = threading.Thread(target=loop, args=(i, loops[i]))</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程结束</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 14:29:36 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 14:29:36 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 14:29:36 2018</span><br><span class="line">loop 1 done at: Mon Feb 26 14:29:38 2018</span><br><span class="line">loop 0 done at: Mon Feb 26 14:29:40 2018</span><br><span class="line">all DONE at: Mon Feb 26 14:29:40 2018</span><br></pre></td></tr></table></figure><h4 id="创建Thread的实例，传给它一个可调用的类实例"><a href="#创建Thread的实例，传给它一个可调用的类实例" class="headerlink" title="创建Thread的实例，传给它一个可调用的类实例"></a>创建Thread的实例，传给它一个可调用的类实例</h4><p>将传递进去一个可调用类(实例)而不仅仅是一个函数</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadFunc</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Thread类的代码将调用ThreadFunc对象，此时会调用这个方法</span></span><br><span class="line">        <span class="comment"># 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop '</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 创建所有线程</span></span><br><span class="line">        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 14:47:28 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 14:47:28 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 14:47:28 2018</span><br><span class="line">loop  1 done at: Mon Feb 26 14:47:30 2018</span><br><span class="line">loop  0 done at: Mon Feb 26 14:47:32 2018</span><br><span class="line">all DONE at: Mon Feb 26 14:47:32 2018</span><br></pre></td></tr></table></figure><h4 id="派生Thread的子类，并创建子类的实例-推荐"><a href="#派生Thread的子类，并创建子类的实例-推荐" class="headerlink" title="派生Thread的子类，并创建子类的实例(推荐)"></a>派生Thread的子类，并创建子类的实例(推荐)</h4><p>将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 必须先调用基类的构造函数</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 必须重写run()方法</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop '</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 创建所有线程</span></span><br><span class="line">        t = MyThread(loop, (i, loops[i]), loop.__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 15:08:33 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 15:08:33 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 15:08:33 2018</span><br><span class="line">loop  1 done at: Mon Feb 26 15:08:35 2018</span><br><span class="line">loop  0 done at: Mon Feb 26 15:08:37 2018</span><br><span class="line">all DONE at: Mon Feb 26 15:08:37 2018</span><br></pre></td></tr></table></figure><h2 id="单线程和多线程执行的对比"><a href="#单线程和多线程执行的对比" class="headerlink" title="单线程和多线程执行的对比"></a>单线程和多线程执行的对比</h2><p>先后使用单线程和多线程执行三个独立的递归函数，代码中加入<code>sleep()</code>是为了减慢执行速度，能够更好的看到效果。</p><ul><li>myThread.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回每一次的执行结果</span></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">        self.res = self.func(*self.args)</span><br><span class="line">        print(<span class="string">'done at:'</span>, ctime())</span><br></pre></td></tr></table></figure><ul><li>compare.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myThread <span class="keyword">import</span> MyThread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 斐波拉契</span></span><br><span class="line">    sleep(<span class="number">0.005</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(x<span class="number">-2</span>)+fib(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 阶乘</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x*fac(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 累加</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x + sum(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">funcs = [fib, fac, sum]</span><br><span class="line">n = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    nfuncs = range(len(funcs))</span><br><span class="line">    print(<span class="string">'***SINGLE THREAD***'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        <span class="comment"># 单线程顺序执行</span></span><br><span class="line">        print(<span class="string">'starting'</span>, funcs[i].__name__, <span class="string">'at:'</span>, ctime())</span><br><span class="line">        print(funcs[i](n))</span><br><span class="line">        print(funcs[i].__name__, <span class="string">'finished at:'</span>, ctime(), <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n ***MULTIPLE THREADS***'</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        <span class="comment"># 多线程执行</span></span><br><span class="line">        t = MyThread(funcs[i], (n,),funcs[i].__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].join()</span><br><span class="line">        print(threads[i].get_result())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***SINGLE THREAD***</span><br><span class="line">starting fib at: Mon Feb 26 15:36:22 2018</span><br><span class="line">233</span><br><span class="line">fib finished at: Mon Feb 26 15:36:24 2018</span><br><span class="line"></span><br><span class="line">starting fac at: Mon Feb 26 15:36:24 2018</span><br><span class="line">479001600</span><br><span class="line">fac finished at: Mon Feb 26 15:36:25 2018</span><br><span class="line"></span><br><span class="line">starting sum at: Mon Feb 26 15:36:25 2018</span><br><span class="line">78</span><br><span class="line">sum finished at: Mon Feb 26 15:36:26 2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ***MULTIPLE THREADS***</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">done at: Mon Feb 26 15:36:28 2018</span><br><span class="line">done at: Mon Feb 26 15:36:28 2018</span><br><span class="line">done at: Mon Feb 26 15:36:29 2018</span><br><span class="line">233</span><br><span class="line">479001600</span><br><span class="line">78</span><br><span class="line">all DONE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多线程编程对于以下编程任务是非常理想的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是异步的&lt;/li&gt;
&lt;li&gt;需要多个并发活动&lt;/li&gt;
&lt;li&gt;每个活动的处理顺序可能是不确定的(随机、不可预测的)&lt;!--Mare--&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用多线程或者类似Queue的
      
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程(二)</title>
    <link href="http://coldjune.com/2018/02/24/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/24/Python网络编程-二/</id>
    <published>2018-02-24T01:40:06.000Z</published>
    <updated>2018-02-24T11:54:16.813Z</updated>
    
    <content type="html"><![CDATA[<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br><a id="more"></a></p><h2 id="socketserver模块"><a href="#socketserver模块" class="headerlink" title="socketserver模块"></a>socketserver模块</h2><p><a href="https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver" target="_blank" rel="noopener">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p><h3 id="socketserver模块类"><a href="#socketserver模块类" class="headerlink" title="socketserver模块类"></a>socketserver模块类</h3><table><thead><tr><th style="text-align:center">类</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">BaseServer</td><td style="text-align:center">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td></tr><tr><td style="text-align:center">TCPServer/UDPServer</td><td style="text-align:center">基础的网络同步TCP/UDP服务器</td></tr><tr><td style="text-align:center">UnixStreamServer/UnixDatagramServer</td><td style="text-align:center">基于文件的基础同步TCP/UDP服务器</td></tr><tr><td style="text-align:center">ForkingMixIn/ThreadingMixIn</td><td style="text-align:center">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td></tr><tr><td style="text-align:center">ForkingTCPServer/ForkingUDPServer</td><td style="text-align:center">ForkingMaxIn和TCPServer/UDPServer的组合</td></tr><tr><td style="text-align:center">ThreadingTCPServer/ThreadingUDPServer</td><td style="text-align:center">ThreadingMixIn和TCPServer/UDPServer的组合</td></tr><tr><td style="text-align:center">BaseRequestHandler</td><td style="text-align:center">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td></tr><tr><td style="text-align:center">StreamRequestHandler/DatagramRequestHandler</td><td style="text-align:center">实现TCP/UDP服务器的服务处理器</td></tr></tbody></table><h3 id="socketserver-TCP服务器-客户端"><a href="#socketserver-TCP服务器-客户端" class="headerlink" title="socketserver TCP服务器/客户端"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p><h4 id="TCP服务器"><a href="#TCP服务器" class="headerlink" title="TCP服务器"></a>TCP服务器</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> (TCPServer <span class="keyword">as</span> TCP,</span><br><span class="line">                          StreamRequestHandler <span class="keyword">as</span> SRH)</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandler</span><span class="params">(SRH)</span>:</span></span><br><span class="line">    <span class="comment"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class="line">        print(<span class="string">'...connected from:'</span>, self.client_address)</span><br><span class="line">        <span class="comment"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class="line">        <span class="comment"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class="line">        self.wfile.write(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">            ctime(), self.rfile.readline().decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class="line"><span class="comment"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class="line">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class="line">print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure><h4 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    tcpSocket.connect(ADDR)</span><br><span class="line">    data = input(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class="line">    <span class="comment"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class="line">    tcpSocket.send(bytes(<span class="string">'%s\r\n'</span> % data, <span class="string">'utf-8'</span>))</span><br><span class="line">    data = tcpSocket.recv(BUFSIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>).strip())</span><br><span class="line">    tcpSocket.close()</span><br></pre></td></tr></table></figure><h4 id="socketserver-TCP服务器和客户端运行结果"><a href="#socketserver-TCP服务器和客户端运行结果" class="headerlink" title="socketserver TCP服务器和客户端运行结果"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p><ul><li><p>TCP服务器运行结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">waiting for connection...</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure></li><li><p>TCP客户端运行结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">[Sat Feb 24 10:29:28 2018] hello</span><br><span class="line">&gt; hello</span><br><span class="line">[Sat Feb 24 10:29:44 2018] hello</span><br><span class="line">&gt; hi</span><br><span class="line">[Sat Feb 24 10:29:50 2018] hi</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Twisted框架的简单使用"><a href="#Twisted框架的简单使用" class="headerlink" title="Twisted框架的简单使用"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">下载</a>和安装它<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p><p>  安装成功显示<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Processing e:\迅雷下载\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class="line">Requirement already satisfied: Automat&gt;=0.3.0 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: incremental&gt;=16.10.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: constantly&gt;=15.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: attrs in e:\python\python36\lib\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: six in e:\python\python36\lib\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: setuptools in e:\python\python36\lib\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class="line">Installing collected packages: Twisted</span><br><span class="line">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p><h3 id="Twisted-Reactor-TCP-服务器-客户端"><a href="#Twisted-Reactor-TCP-服务器-客户端" class="headerlink" title="Twisted Reactor TCP 服务器/客户端"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id="TCP服务器-1"><a href="#TCP服务器-1" class="headerlink" title="TCP服务器"></a>TCP服务器</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> protocol, reactor</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWServProtocol</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="comment"># 继承Protocol类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 重写connectionMade()方法</span></span><br><span class="line">        <span class="comment"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class="line">        client = self.client = self.transport.getPeer().host</span><br><span class="line">        print(<span class="string">'...connected from:'</span>, client)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 重写dataReceived()方法</span></span><br><span class="line">        <span class="comment"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class="line">        self.transport.write(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">            ctime(), data.decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class="line"><span class="comment"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class="line"><span class="comment"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class="line">factory = protocol.Factory()</span><br><span class="line">factory.protocol = TWServProtocol</span><br><span class="line">print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">reactor.listenTCP(PORT, factory)</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h4 id="TCP客户端-1"><a href="#TCP客户端-1" class="headerlink" title="TCP客户端"></a>TCP客户端</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span>  protocol, reactor</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWClientProtocol</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 需要发送数据时调用</span></span><br><span class="line">        <span class="comment"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class="line">        data = input(<span class="string">'&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            print(<span class="string">'...send %s...'</span> % data)</span><br><span class="line">            self.transport.write(bytes(data, <span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transport.loseConnection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.sendData()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        self.sendData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWClientFactory</span><span class="params">(protocol.ClientFactory)</span>:</span></span><br><span class="line">    <span class="comment"># 创建了一个客户端工厂</span></span><br><span class="line">    protocol = TWClientProtocol</span><br><span class="line">    clientConnectionLost = clientConnectionFailed = \</span><br><span class="line">        <span class="keyword">lambda</span> self, connector, reason: reactor.stop()</span><br><span class="line"><span class="comment"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class="line"><span class="comment"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class="line"><span class="comment"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class="line"><span class="comment"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class="line">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h4 id="TCP服务器和客户端运行结果"><a href="#TCP服务器和客户端运行结果" class="headerlink" title="TCP服务器和客户端运行结果"></a>TCP服务器和客户端运行结果</h4><ul><li><p>服务器结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waiting for connection...</span><br><span class="line">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>客户端结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">...send hello...</span><br><span class="line">[Sat Feb 24 11:19:49 2018] hello</span><br><span class="line">&gt; hi</span><br><span class="line">...send hi...</span><br><span class="line">[Sat Feb 24 11:20:02 2018] hi</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">需要安装python对应的版本和位数</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程(一)</title>
    <link href="http://coldjune.com/2018/02/22/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/22/Python网络编程-一/</id>
    <published>2018-02-22T07:53:42.000Z</published>
    <updated>2018-02-24T12:09:16.189Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python的一些模块来创建网络应用程序<br><a id="more"></a></p><h2 id="socket-函数模块"><a href="#socket-函数模块" class="headerlink" title="socket()函数模块"></a>socket()函数模块</h2><p>要创建套接字，必须使用<code>socket.socket()</code>函数<code>socket(socket_family, socket_type, protocol = 0)</code>,其中<code>socket_family</code>是 <em>AF_UNIX</em>或 <em>AF_INET</em>,<code>socket_type</code>是 <em>SOCK_STREAM</em> 或 <em>SOCK_DGRAM</em>。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><code>protocol</code>通常省略，默认为0。</p><ul><li><blockquote><p>创建TCP/IP套接字</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure></li><li><blockquote><p>创建UDP/IP套接字</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure></li></ul><h3 id="套接字对象内接方法"><a href="#套接字对象内接方法" class="headerlink" title="套接字对象内接方法"></a>套接字对象内接方法</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">服务器套接字方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.bind()</td><td style="text-align:center">将地址(主机名、端口号对)绑定到套接字上</td></tr><tr><td style="text-align:center">s.listen()</td><td style="text-align:center">设置并启动TCP监听器</td></tr><tr><td style="text-align:center">s.accept()</td><td style="text-align:center">被动接受TCP客户端连接，一直等待知道连接到达(阻塞)</td></tr><tr><td style="text-align:center">客户端套接字方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.connect()</td><td style="text-align:center">主动发起TCP服务器连接</td></tr><tr><td style="text-align:center">s.connect_ex()</td><td style="text-align:center">connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常</td></tr><tr><td style="text-align:center">普通的套接字方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.recv()</td><td style="text-align:center">接受TCP消息</td></tr><tr><td style="text-align:center">s.recv_into()</td><td style="text-align:center">接受TCP消息到指定的缓冲区</td></tr><tr><td style="text-align:center">s.send()</td><td style="text-align:center">发送TCP消息</td></tr><tr><td style="text-align:center">s.sendall()</td><td style="text-align:center">完整地发送TCP消息</td></tr><tr><td style="text-align:center">s.recvfrom()</td><td style="text-align:center">接受UDP消息</td></tr><tr><td style="text-align:center">s.recvfrom_into()</td><td style="text-align:center">接受UDP消息到指定的缓冲区</td></tr><tr><td style="text-align:center">s.sendto()</td><td style="text-align:center">发送UDP消息</td></tr><tr><td style="text-align:center">s.getpeername()</td><td style="text-align:center">连接到套接字(TCP)的远程地址</td></tr><tr><td style="text-align:center">s.getsockname()</td><td style="text-align:center">当前套接字的地址</td></tr><tr><td style="text-align:center">s.getsockopt()</td><td style="text-align:center">返回给定套接字选项的值</td></tr><tr><td style="text-align:center">s.setsockopt()</td><td style="text-align:center">设置给定套接字选项的值</td></tr><tr><td style="text-align:center">s.shutdown()</td><td style="text-align:center">关闭连接</td></tr><tr><td style="text-align:center">s.close()</td><td style="text-align:center">关闭套接字</td></tr><tr><td style="text-align:center">s.detach()</td><td style="text-align:center">在未关闭文件描述符的情况下关闭套接字，返回文件描述符</td></tr><tr><td style="text-align:center">s.ioctl()</td><td style="text-align:center">控制套接字的模式(仅支持Windows)</td></tr><tr><td style="text-align:center">面向阻塞的套接字方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.setblocking()</td><td style="text-align:center">设置套接字的阻塞或非阻塞模式</td></tr><tr><td style="text-align:center">s.settimeout()</td><td style="text-align:center">设置阻塞套接字操作的超时时间</td></tr><tr><td style="text-align:center">s.gettimeout()</td><td style="text-align:center">获取阻塞套接字操作的超时时间</td></tr><tr><td style="text-align:center">面向文件的套接字方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.fileno()</td><td style="text-align:center">套接字的文件描述符</td></tr><tr><td style="text-align:center">s.makefile()</td><td style="text-align:center">创建与套接字关联的文件对象</td></tr><tr><td style="text-align:center">数据属性</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">s.family</td><td style="text-align:center">套接字家族</td></tr><tr><td style="text-align:center">s.type</td><td style="text-align:center">套接字类型</td></tr><tr><td style="text-align:center">s.proto</td><td style="text-align:center">套接字协议</td></tr></tbody></table><h3 id="socket模块属性"><a href="#socket模块属性" class="headerlink" title="socket模块属性"></a>socket模块属性</h3><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">数据属性</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC</td><td style="text-align:center">Python中支持的套接字地址家族</td></tr><tr><td style="text-align:center">SO_STREAM、SO_DGRAM</td><td style="text-align:center">套接字类型(TCP=流，UDP=数据报)</td></tr><tr><td style="text-align:center">has_ipv6</td><td style="text-align:center">指示是否支持IPv6的布尔标记</td></tr><tr><td style="text-align:center">异常</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">error</td><td style="text-align:center">套接字相关错误</td></tr><tr><td style="text-align:center">herror</td><td style="text-align:center">主机和地址相关错误</td></tr><tr><td style="text-align:center">gaierror</td><td style="text-align:center">地址相关错误</td></tr><tr><td style="text-align:center">timeout</td><td style="text-align:center">超时时间</td></tr><tr><td style="text-align:center">函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">socket()</td><td style="text-align:center">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td></tr><tr><td style="text-align:center">socketpair()</td><td style="text-align:center">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td></tr><tr><td style="text-align:center">create_connection()</td><td style="text-align:center">常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象</td></tr><tr><td style="text-align:center">fromfd()</td><td style="text-align:center">以一个打开的文件描述符创建一个套接字对象</td></tr><tr><td style="text-align:center">ssl()</td><td style="text-align:center">通过套接字启动一个安全套接字层连接；不执行证书验证</td></tr><tr><td style="text-align:center">getaddrinfo()</td><td style="text-align:center">获取一个五元组序列形式的地址信息</td></tr><tr><td style="text-align:center">getnameinfo()</td><td style="text-align:center">给定一个套接字地址，返回(主机名，端口号)二元组</td></tr><tr><td style="text-align:center">getfqdn()</td><td style="text-align:center">返回完整的域名</td></tr><tr><td style="text-align:center">gethostname()</td><td style="text-align:center">返回当前主机名</td></tr><tr><td style="text-align:center">gethostbyname()</td><td style="text-align:center">将一个主机名映射到它的IP地址</td></tr><tr><td style="text-align:center">gethostbyname_ex()</td><td style="text-align:center">gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表</td></tr><tr><td style="text-align:center">gethostbyaddr()</td><td style="text-align:center">讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组</td></tr><tr><td style="text-align:center">getprotobyname()</td><td style="text-align:center">将一个协议名(如‘TCP’)映射到一个数字</td></tr><tr><td style="text-align:center">getservbyname()/getservbyport()</td><td style="text-align:center">将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的</td></tr><tr><td style="text-align:center">ntohl()/ntohs()</td><td style="text-align:center">将来自网络的整数装换为主机字节序</td></tr><tr><td style="text-align:center">htonl()/htons()</td><td style="text-align:center">将来自主机的整数转换为网络字节序</td></tr><tr><td style="text-align:center">inet_aton()/inet_ntoa()</td><td style="text-align:center">将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)</td></tr><tr><td style="text-align:center">inet_pton()/inet_ntop()</td><td style="text-align:center">将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)</td></tr><tr><td style="text-align:center">getdefaulttimeout()/setdefaulttimeout()</td><td style="text-align:center">以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间</td></tr></tbody></table><p>详情参阅<a href="https://docs.python.org/3/library/socket.html?highlight=socket#module-socket" target="_blank" rel="noopener">socket模块文档</a></p><h2 id="创建TCP服务器-客户端"><a href="#创建TCP服务器-客户端" class="headerlink" title="创建TCP服务器/客户端"></a>创建TCP服务器/客户端</h2><h3 id="TCP服务器"><a href="#TCP服务器" class="headerlink" title="TCP服务器"></a>TCP服务器</h3><ul><li><p>下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ss = socket()                 <span class="comment">#创建服务器套接字</span></span><br><span class="line">ss.bind()                     <span class="comment">#套接字与地址绑定</span></span><br><span class="line">ss.listen()                   <span class="comment">#监听连接</span></span><br><span class="line">inf_loop:                     <span class="comment">#服务器无线循环</span></span><br><span class="line">    cs = ss.accept()          <span class="comment">#接受客户端连接</span></span><br><span class="line">    comm_loop:                <span class="comment">#通信循环</span></span><br><span class="line">        cs.recv()/cs.send()   <span class="comment">#对话(接收/发送)</span></span><br><span class="line">    cs.close()                <span class="comment">#关闭客户端套接字</span></span><br><span class="line">ss.close()                    <span class="comment">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure></li><li><p>TCP时间戳服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket模块和time.ctime()的所有属性</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址</span></span><br><span class="line"><span class="comment"># 选择一个随机的端口号</span></span><br><span class="line"><span class="comment"># 缓冲区大小为1KB</span></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配了TCP服务套接字</span></span><br><span class="line"><span class="comment"># 将套接字绑定到服务器地址</span></span><br><span class="line"><span class="comment"># 开启TCP的监听调用</span></span><br><span class="line"><span class="comment"># listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 服务器循环，等待客户端的连接的连接</span></span><br><span class="line">    print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    print(<span class="string">'...connected from:'</span>, addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 当一个连接请求出现时，进入对话循环，接收消息</span></span><br><span class="line">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="comment"># 当消息为空时，退出对话循环</span></span><br><span class="line">            <span class="comment"># 关闭客户端连接，等待下一个连接请求</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        tcpCliSock.send(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">            ctime(), data.decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    tcpCliSock.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h3><ul><li><p>下面是TCP客户端的通用伪码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cs = socket()           <span class="comment">#创建客户端套接字</span></span><br><span class="line">cs.connect()            <span class="comment">#尝试连接服务器</span></span><br><span class="line">comm_loop:              <span class="comment">#通信循环</span></span><br><span class="line">    cs.send()/cs.recv   <span class="comment">#对话(发送/接收)</span></span><br><span class="line">cs.close()              <span class="comment">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure></li><li><p>TCP时间戳客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket模块所有属性</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器的主机名</span></span><br><span class="line"><span class="comment"># 服务器的端口号,应与服务器设置的完全相同</span></span><br><span class="line"><span class="comment"># 缓冲区大小为1KB</span></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配了TCP客户端套接字</span></span><br><span class="line"><span class="comment"># 主动调用并连接到服务器</span></span><br><span class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpCliSock.connect(ADDR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 无限循环，输入消息</span></span><br><span class="line">    data = bytes(input(<span class="string">'&gt; '</span>), <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="comment"># 消息为空则退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发送输入的信息</span></span><br><span class="line">    <span class="comment"># 接收服务器返回的信息，最后打印</span></span><br><span class="line">    tcpCliSock.send(data)</span><br><span class="line">    data = tcpCliSock.recv(BUFSIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="comment"># 消息为空则退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 关闭客户端</span></span><br><span class="line">tcpCliSock.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="TCP服务器和客户端运行结果"><a href="#TCP服务器和客户端运行结果" class="headerlink" title="TCP服务器和客户端运行结果"></a>TCP服务器和客户端运行结果</h3><p>  在运行程序时，必须 <strong>首先运行服务器</strong> 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。<br>  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求</p><ul><li><p>服务器运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waiting for connection...</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 53220)</span><br><span class="line">waiting for connection...</span><br></pre></td></tr></table></figure></li><li><p>客户端运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">[Fri Feb 23 14:22:58 2018] hello</span><br><span class="line">&gt; hi</span><br><span class="line">[Fri Feb 23 14:23:02 2018] hi</span><br><span class="line">&gt; hello world</span><br><span class="line">[Fri Feb 23 14:23:09 2018] hello world</span><br><span class="line">&gt;</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建UDP服务器-客户端"><a href="#创建UDP服务器-客户端" class="headerlink" title="创建UDP服务器/客户端"></a>创建UDP服务器/客户端</h2><h3 id="UDP服务器"><a href="#UDP服务器" class="headerlink" title="UDP服务器"></a>UDP服务器</h3><ul><li><p>下面是UDP服务器的伪码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = socket()                           <span class="comment">#创建服务器套接字</span></span><br><span class="line">ss.bind()                               <span class="comment">#绑定服务器套接字</span></span><br><span class="line">inf_loop:                               <span class="comment">#服务器无线循环</span></span><br><span class="line">    cs = ss.recvfrom()/ss.sendto()      <span class="comment">#关闭(接收/发送)</span></span><br><span class="line">ss.close()                              <span class="comment">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure></li><li><p>UDP时间戳服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket模块和time.ctime()的全部属性</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与TCP相同，由于是无连接，所以没有调用监听传入连接</span></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">udpSerSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">udpSerSock.bind(ADDR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息</span></span><br><span class="line">    print(<span class="string">'waiting for message...'</span>)</span><br><span class="line">    data, addr = udpSerSock.recvfrom(BUFSIZE)</span><br><span class="line">    udpSerSock.sendto(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">        ctime(), data.decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>), addr)</span><br><span class="line">    print(<span class="string">'...received from and returned to:'</span>, addr)</span><br></pre></td></tr></table></figure></li></ul><h3 id="UDP客户端"><a href="#UDP客户端" class="headerlink" title="UDP客户端"></a>UDP客户端</h3><ul><li><p>下面是客户端的伪码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cs = socket()                         <span class="comment">#创建客户端套接字</span></span><br><span class="line">comm_loop:                            <span class="comment">#通信循环</span></span><br><span class="line">    cs.sendto()/cs.recvfrom()         <span class="comment">#对话(发送/接收)</span></span><br><span class="line">cs.close()                            <span class="comment">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure></li><li><p>UDP时间戳客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"> <span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"> HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line"> PORT = <span class="number">12345</span></span><br><span class="line"> BUFSIZE = <span class="number">1024</span></span><br><span class="line"> ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"> udpClienSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">     data = bytes(input(<span class="string">'&gt;'</span>), <span class="string">'utf-8'</span>)</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">     udpClienSock.sendto(data, ADDR)</span><br><span class="line">     data, ADDR = udpClienSock.recvfrom(BUFSIZE)</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">     print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"> udpClienSock.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="UDP服务器和客户端运行结果"><a href="#UDP服务器和客户端运行结果" class="headerlink" title="UDP服务器和客户端运行结果"></a>UDP服务器和客户端运行结果</h3><p>  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理</p><ul><li><p>服务器运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">waiting for message...</span><br><span class="line">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class="line">waiting for message...</span><br><span class="line">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class="line">waiting for message...</span><br></pre></td></tr></table></figure></li><li><p>客户端运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;hello</span><br><span class="line">[Fri Feb 23 15:23:57 2018] hello</span><br><span class="line">&gt;hi</span><br><span class="line">[Fri Feb 23 15:24:03 2018] hi</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><em>AF_UNIX</em> 是基于文件的套接字，代表 <em>地址家族(address family):UNIX</em>，<em>AF_INET</em> 是基于网络的套接字，代表 <em>地址家族：因特网</em>， <em>AF_INET6</em> 用于底6版因特网协议(IPv6)寻址。 <em>SOCK_STREAM</em> 表示面向连接的TCP套接字， <em>SOCK_DGRAM</em> 代表无连接的UDP套接字。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Python的一些模块来创建网络应用程序&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式(三)</title>
    <link href="http://coldjune.com/2018/02/12/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%89/"/>
    <id>http://coldjune.com/2018/02/12/Python正则表达式-三/</id>
    <published>2018-02-12T01:55:17.000Z</published>
    <updated>2018-02-24T11:54:16.812Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。<br><a id="more"></a></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol><li><blockquote><p>识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'bat|bit|but|hat|hit|hut'</span>)</span><br><span class="line"><span class="comment">#mode  = re.compile(r'[bh][iau]t')</span></span><br><span class="line">strs = [<span class="string">'bat'</span>, <span class="string">'bit'</span>, <span class="string">'but'</span>, <span class="string">'hat'</span>, <span class="string">'hit'</span>, <span class="string">'hut'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'bat'</span></span><br><span class="line"><span class="string">'bit'</span></span><br><span class="line"><span class="string">'but'</span></span><br><span class="line"><span class="string">'hat'</span></span><br><span class="line"><span class="string">'hit'</span></span><br><span class="line"><span class="string">'hut'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配由单个空格分隔的任意单词对，也就是姓和名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode  = re.compile(<span class="string">r'^[A-Za-z]+ [A-Za-z]+$'</span>)</span><br><span class="line">strs = [<span class="string">'david Bob'</span>, <span class="string">'D.Jone Steven'</span>, <span class="string">'Lucy D May'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'david Bob'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'[A-Za-z]+,\s[A-Za-z]+'</span>)</span><br><span class="line">strs = [<span class="string">'david, Bob'</span>, <span class="string">'D.Jone, Steven'</span>, <span class="string">'Lucy, D, May'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'david, Bob'</span></span><br><span class="line"><span class="string">'Lucy, D'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有有效Python 标识符<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'[^0-9][\w_]+'</span>)<span class="comment">#用in排除关键字</span></span><br><span class="line">strs = [<span class="string">'1var'</span>, <span class="string">'v_ar'</span>, <span class="string">'_var'</span>, <span class="string">'var'</span>, <span class="string">'var_9'</span>, <span class="string">'var_'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'v_ar'</span></span><br><span class="line"><span class="string">'_var'</span></span><br><span class="line"><span class="string">'var'</span></span><br><span class="line"><span class="string">'var_9'</span></span><br><span class="line"><span class="string">'var_'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数<br>量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux<br>Drive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz<br>Boulevard。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^\d&#123;4&#125;( [A-Z][a-z]+)+$'</span>)</span><br><span class="line">strs = [<span class="string">'1221 Bordeaux Drive'</span>, <span class="string">'54565 Bordeaux Drive'</span>, <span class="string">'Bordeaux Drive'</span>, <span class="string">'1221 Bordeaux Drive Drive'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'1221 Bordeaux Drive'</span></span><br><span class="line"><span class="string">'1221 Bordeaux Drive Drive'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。<br>选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，<br><a href="http://www.foothill.edu）。" target="_blank" rel="noopener">http://www.foothill.edu）。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^(http[s]?://)?www\.(\w+\.)+(com|net|edu)$'</span>)</span><br><span class="line">strs=[<span class="string">'https://www.baidu.com'</span>, <span class="string">'http://www.bilibili.com'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'baidu.com'</span>, <span class="string">'www.cqupt.edu'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'https://www.baidu.com'</span></span><br><span class="line"><span class="string">'http://www.bilibili.com'</span></span><br><span class="line"><span class="string">'www.baidu.com'</span></span><br><span class="line"><span class="string">'www.cqupt.edu'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有能够表示Python 整数的字符串集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^\d+[lL]?$'</span>)</span><br><span class="line">strs = [<span class="string">'123'</span>, <span class="string">'123l'</span>, <span class="string">'12312L'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="string">'123l'</span></span><br><span class="line"><span class="string">'12312L'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有能够表示Python 长整数的字符串集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^\d+[lL]$'</span>)</span><br><span class="line">strs = [<span class="string">'123'</span>, <span class="string">'123l'</span>, <span class="string">'12312L'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'123l'</span></span><br><span class="line"><span class="string">'12312L'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有能够表示Python 浮点数的字符串集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'(0|[1-9]\d*)(\.\d+)?$'</span>)</span><br><span class="line">strs = [<span class="string">'00.10'</span>, <span class="string">'0.123'</span>, <span class="string">'12.23'</span>, <span class="string">'12'</span>, <span class="string">'12.36l'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()   </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'0.123'</span></span><br><span class="line"><span class="string">'12.23'</span></span><br><span class="line"><span class="string">'12'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有能够表示Python 复数的字符串集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^((0|[1-9]\d*)(\.\d+)?\+)?((0|[1-9]\d*)(\.\d+)?j)?$'</span>)</span><br><span class="line">strs = [<span class="string">'12.3+1.2j'</span>, <span class="string">'1+2j'</span>, <span class="string">'4j'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()   </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'12.3+1.2j'</span></span><br><span class="line"><span class="string">'1+2j'</span></span><br><span class="line"><span class="string">'4j'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然<br>后尝试使它尽可能严谨，不过要保持正确的功能）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'^\w+@(\w+\.)+(com|com\.cn|net)$'</span>)</span><br><span class="line">strs = [<span class="string">'12345@qq.com'</span>, <span class="string">'sina@163.com'</span>, <span class="string">'qq@sina.com.cn'</span>, <span class="string">'net@21cn.com'</span>, <span class="string">'new123@163.sina.com'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()   </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'12345@qq.com'</span></span><br><span class="line"><span class="string">'sina@163.com'</span></span><br><span class="line"><span class="string">'qq@sina.com.cn'</span></span><br><span class="line"><span class="string">'net@21cn.com'</span></span><br><span class="line"><span class="string">'new123@163.sina.com'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic<br>类型的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'&lt;type \'(.*)\'&gt;'</span>)</span><br><span class="line">strs = [<span class="string">'&lt;type \'int\'&gt;'</span>, <span class="string">'&lt;type \'float\'&gt;'</span>, <span class="string">'&lt;type \'builtin_function_or_method\'&gt;'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'int'</span></span><br><span class="line"><span class="string">'float'</span></span><br><span class="line"><span class="string">'builtin_function_or_method'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～<br>9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'1[0-2]'</span>)</span><br><span class="line">strs = [<span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">     <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'10'</span></span><br><span class="line"><span class="string">'11'</span></span><br><span class="line"><span class="string">'12'</span></span><br></pre></td></tr></table></figure></blockquote></li><li><blockquote><p>创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号<br>码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">mode = re.compile(<span class="string">r'\d&#123;4&#125;-((\d&#123;6&#125;-\d&#123;5&#125;)|(\d&#123;4&#125;-\d&#123;4&#125;-\d&#123;4&#125;))'</span>)</span><br><span class="line">strs = [<span class="string">'1234-567890-12345'</span>, <span class="string">'1234-5678-8012-3456'</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    <span class="keyword">if</span> mode.match(s) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:mode.match(s).group()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="string">'1234-567890-12345'</span></span><br><span class="line"><span class="string">'1234-5678-8012-3456'</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">标识符有字母、数字、下划线组成，但不能由数字开头</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://coldjune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式(二)</title>
    <link href="http://coldjune.com/2018/02/10/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/10/Python正则表达式-二/</id>
    <published>2018-02-10T13:28:04.000Z</published>
    <updated>2018-02-11T11:36:30.490Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。<br>由于个人兴趣和想要专研的方向，在这里将会使用Python <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 语言进行描述。<br><a id="more"></a></p><h2 id="正则表达式和Python语言"><a href="#正则表达式和Python语言" class="headerlink" title="正则表达式和Python语言"></a>正则表达式和Python语言</h2><h3 id="re模块：核心函数和方法"><a href="#re模块：核心函数和方法" class="headerlink" title="re模块：核心函数和方法"></a>re模块：核心函数和方法</h3><table><thead><tr><th style="text-align:center">函数方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">仅仅是re函数模块</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">compile(pattern, flags=0)</td><td style="text-align:center">使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象</td></tr><tr><td style="text-align:center">re模块函数和正则表达式对象的方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">match(pattern, string, flags=0)</td><td style="text-align:center">尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None</td></tr><tr><td style="text-align:center">search(pattern, string, flags=0)</td><td style="text-align:center">使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None</td></tr><tr><td style="text-align:center">findall(pattern, string [,flags])</td><td style="text-align:center">查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表</td></tr><tr><td style="text-align:center">finditer(pattern, string[,flags])</td><td style="text-align:center">与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象</td></tr><tr><td style="text-align:center">split(pattern, string, max=0)</td><td style="text-align:center">根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)</td></tr><tr><td style="text-align:center">sub(pattern, repl, string, count=0)</td><td style="text-align:center">使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目）</td></tr><tr><td style="text-align:center">purge()</td><td style="text-align:center">清除隐式编译的正则表达式模式</td></tr><tr><td style="text-align:center">常见的匹配对象方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">group(num=0)</td><td style="text-align:center">返回整个匹配对象，或者编号为num的特定子组</td></tr><tr><td style="text-align:center">groups(default=None)</td><td style="text-align:center">返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)</td></tr><tr><td style="text-align:center">groupdict(default=None)</td><td style="text-align:center">返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)</td></tr><tr><td style="text-align:center">常用的模块属性（用于大多数正则表达式函数的标记）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">re.I,re.IGNORECASE</td><td style="text-align:center">不去分大小写的匹配</td></tr><tr><td style="text-align:center">re.L,re.LOCALE</td><td style="text-align:center">根据所使用的本地语言环境通过\w、\w、\b、\B、\s、\S实现匹配</td></tr><tr><td style="text-align:center">re.M,re.MULTILINE</td><td style="text-align:center">^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾</td></tr><tr><td style="text-align:center">re.S,re.DOTALL</td><td style="text-align:center">“.”(点号)通常匹配除了\n(换行符)之外的所有单个字符：该标记表示”.”(点号)能匹配全部字符</td></tr><tr><td style="text-align:center">re.X,re.VERBOSE</td><td style="text-align:center">通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性</td></tr></tbody></table><h3 id="部分方法总结"><a href="#部分方法总结" class="headerlink" title="部分方法总结"></a>部分方法总结</h3><ul><li><p><em>compile(pattern, flags=0)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></em></p><blockquote><p>使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以<a href="https://docs.python.org/3/library/re.html?highlight=re#module-re" target="_blank" rel="noopener">查阅文档</a>),标志位通过 （|）合并</p></blockquote></li><li><p><em>group(num=0)</em> 和 <em>groups(default=None)</em></p><blockquote><p>匹配对象<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>的两个主要方法。 <em>group()</em> 要么返回整个匹配对象，要么按要求返回特定子组。 <em>groups()</em> 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，<em>group()</em> 返回整个匹配，<em>groups()</em> 返回一个空元组。</p></blockquote></li><li><p><em>match(pattern, string, flags=0)</em></p><blockquote><p><em>match()</em> 方法试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#匹配成功</span></span><br><span class="line"> m = re.match(<span class="string">'foo'</span>, <span class="string">'foo'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"> <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:         <span class="comment">#如果匹配成功，就输出匹配内容</span></span><br><span class="line">     m.group()</span><br><span class="line"></span><br><span class="line"><span class="string">'foo'</span>                       <span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配失败</span></span><br><span class="line">m  = re.match(<span class="string">'foo'</span>, <span class="string">'Bfoo'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:           <span class="comment">#如果匹配成功，就输出匹配内容</span></span><br><span class="line">    m.group()</span><br><span class="line"></span><br><span class="line">                            <span class="comment">#因为起始字符为'B',所以匹配不成功，无任何输出</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><em>search(pattern, string, flags=0)</em></p><blockquote><p><em>search()</em> 的工作方式和 <em>match()</em> 相同，不同之处在于 <em>search()</em> 会用它的字符串参数在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次</strong>出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将上面使用match()方法匹配的串改用search()匹配</span></span><br><span class="line">m = re.search(<span class="string">'foo'</span>, <span class="string">'Bfoo'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:            <span class="comment">#如果匹配成功，就输出匹配内容</span></span><br><span class="line">    m.group()</span><br><span class="line"></span><br><span class="line"><span class="string">'foo'</span>                        <span class="comment">#可以看到就算起始位置未能匹配，也能匹配成功</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><em>findall(pattern, string[,flags])</em> 和 <em>finditer(pattern, string[,flags])</em></p><blockquote><p><em>findall()</em> 总是返回一个列表，如果没有找到匹配对象，返回一个空列表<br>  <em>finditer()</em> 是一个与 <em>findall()</em> 类似但更节省内存的变体，<em>finditer()</em> 在匹配对象中迭代<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#findall()匹配</span></span><br><span class="line">re.findall(<span class="string">'car'</span>, <span class="string">'carry the barcardi to the car'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'car'</span>, <span class="string">'car'</span>, <span class="string">'car'</span>]                              <span class="comment">#返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#finditer()匹配</span></span><br><span class="line">iter = re.finditer(<span class="string">'car'</span>, <span class="string">'carry the barcardi to the car'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter:                                            <span class="comment">#遍历迭代器</span></span><br><span class="line">    print(i.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">car</span><br><span class="line">car</span><br><span class="line">car</span><br></pre></td></tr></table></figure></blockquote></li><li><p><em>sub(pattern, repl, string, count=0)</em> 和 <em>subn(pattern, repl, string, count=0)</em></p><blockquote><p><em>sub()</em> 和 <em>subn()</em> 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 <em>sub()</em> 不同的是，<em>subn()</em> 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sub()</span></span><br><span class="line">re.sub(<span class="string">'car'</span>, <span class="string">'cat'</span>, <span class="string">'My car is not only a car.'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'My cat is not only a cat.'</span>                         <span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#subn()</span></span><br><span class="line">re.subn(<span class="string">'car'</span>, <span class="string">'cat'</span>, <span class="string">'My car is not only a car.'</span>) <span class="comment">#模式匹配字符串</span></span><br><span class="line"></span><br><span class="line">(<span class="string">'My cat is not only a cat.'</span>, <span class="number">2</span>)                   <span class="comment">#输出结果</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><em>split(pattern, string, max=0)</em></p><blockquote><p>正则表达式对象的 <em>split()</em> 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">':'</span>, <span class="string">'str1:str2:str3'</span>)               <span class="comment">#模式匹配字符串</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'str1'</span>, <span class="string">'str2'</span>, <span class="string">'str3'</span>]                      <span class="comment">#输出结果，与'str1:str2:str3'.split(':')相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#split()复杂用法</span></span><br><span class="line"><span class="comment">#使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格</span></span><br><span class="line"><span class="comment">#使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">DATA = (</span><br><span class="line">  <span class="string">'Mountain View, CA 94040'</span>,</span><br><span class="line">  <span class="string">'Sunnyvale, CA'</span>,</span><br><span class="line">  <span class="string">'Los Altos, 94023'</span>,</span><br><span class="line">  <span class="string">'Cupertino 95014'</span>,</span><br><span class="line">  <span class="string">'Palo Alto CA'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> datum <span class="keyword">in</span> DATA:</span><br><span class="line">    print(re.split(<span class="string">', |(?= (?:\d&#123;5&#125;|[A-Z]&#123;2&#125;)) '</span>, datum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">[<span class="string">'Mountain View'</span>, <span class="string">'CA'</span>, <span class="string">'94040'</span>]</span><br><span class="line">[<span class="string">'Sunnyvale'</span>, <span class="string">'CA'</span>]</span><br><span class="line">[<span class="string">'Los Altos'</span>, <span class="string">'94023'</span>]</span><br><span class="line">[<span class="string">'Cupertino'</span>, <span class="string">'95014'</span>]</span><br><span class="line">[<span class="string">'Palo Alto'</span>, <span class="string">'CA'</span>]</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="符号的使用"><a href="#符号的使用" class="headerlink" title="符号的使用"></a>符号的使用</h3><h4 id="与-和"><a href="#与-和" class="headerlink" title="| 与 . 和 []"></a><code>|</code> 与 <code>.</code> 和 <code>[]</code></h4><blockquote><p>包括择一匹配符号<code>|</code>、点号<code>.</code>，点号不匹配非字符或换行付\n（即空字符）<br>    字符集<code>[]</code>中的字符只取其一</p></blockquote><h4 id="重复、特殊字符5以及分组"><a href="#重复、特殊字符5以及分组" class="headerlink" title="重复、特殊字符5以及分组"></a>重复、特殊字符<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>以及分组</h4><blockquote><p><code>?</code>操作符表示前面的模式出现零次或一次<br><code>+</code>操作符表示前面的模式出现至少一次<br><code>*</code>操作符表示前面的模式出现任意次(包括0次)<br>分组从左起第一个括号开始算第一个分组<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">m  = re.match(<span class="string">'(\w(\w\w))-(\d\d\d)'</span>,<span class="string">'abc-123'</span>)</span><br><span class="line">m.group()                           <span class="comment">#完整匹配</span></span><br><span class="line"><span class="string">'abc-123'</span>                           <span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line">m.group(<span class="number">1</span>)                          <span class="comment">#第一组</span></span><br><span class="line"><span class="string">'abc'</span>                               <span class="comment">#输出结果    </span></span><br><span class="line"></span><br><span class="line">m.group(<span class="number">2</span>)                          <span class="comment">#第二组</span></span><br><span class="line"><span class="string">'bc'</span>                                <span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line">m.group(<span class="number">3</span>)                          <span class="comment">#第三组</span></span><br><span class="line"><span class="string">'123'</span>                               <span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line">m.groups()                          <span class="comment">#全部子组</span></span><br><span class="line">(<span class="string">'abc'</span>, <span class="string">'bc'</span>, <span class="string">'123'</span>)                <span class="comment">#输出结果</span></span><br></pre></td></tr></table></figure></p></blockquote><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">这里Python指代的是Python3.6.4</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">预编译可以提升执行效率，而 <code>re.compile()</code> 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 <code>match()</code> 和 <code>search()</code> 在执行时编译的正则表达式,还是使用 <code>compile()</code> 编译的表达式,在再次使用时都会查询缓存。但使用 <code>compile()</code> 同样可以节省查询缓存的时间</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">除了正则表达式对象之外，还有另外一个对象类型：<strong>匹配对象</strong>。这些是成功调用 <code>match()</code> 和 <code>search()</code> 返回的对象。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">如果遇到无法调用 <code>next()</code>方法，可以使用 <code>__next__()</code>方法代替。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">特殊字符的详情可以参考<a href="http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/">上一篇博文</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。&lt;br&gt;由于个人兴趣和想要专研的方向，在这里将会使用Python &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 语言进行描述。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://coldjune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式(一)</title>
    <link href="http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/09/Python正则表达式-一/</id>
    <published>2018-02-09T07:08:05.000Z</published>
    <updated>2018-02-10T09:33:37.303Z</updated>
    
    <content type="html"><![CDATA[<p>在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。<br><a id="more"></a></p><h2 id="特殊符号和字符"><a href="#特殊符号和字符" class="headerlink" title="特殊符号和字符"></a>特殊符号和字符</h2><table><thead><tr><th style="text-align:center">表示法</th><th style="text-align:center">描述</th><th style="text-align:center">正则表达式示例</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">符号</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">literal</td><td style="text-align:center">匹配文本字符串的字面值literal</td><td style="text-align:center">foo</td><td style="text-align:center">只是匹配foo，相当于取等</td></tr><tr><td style="text-align:center">re1&#124; re2</td><td style="text-align:center">匹配正则表达式re1或re2</td><td style="text-align:center">foo&#124; bar</td><td style="text-align:center">匹配foo或者bar，二选一</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任何字符(除了\n之外)</td><td style="text-align:center">a.a</td><td style="text-align:center">匹配axa、aaa、aca等，两个a中间可以是除了\n的任意字符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串起始部分</td><td style="text-align:center">^Foo</td><td style="text-align:center">匹配Foo，不匹配aFoo</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串终止部分</td><td style="text-align:center">Bar$</td><td style="text-align:center">只匹配Bar,不匹配aBar等</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配0次或者多次前面出现的正则表达式</td><td style="text-align:center">[A-Za-z0-9]*</td><td style="text-align:center">匹配任意多个字母或数字</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配1次或者多次前面出现的正则表达式</td><td style="text-align:center">[A-Za-z0-9]+</td><td style="text-align:center">匹配一到多个个字母或数字</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">匹配0次或者1次前面出现的正则表达式</td><td style="text-align:center">[A-Za-z0-9]</td><td style="text-align:center">要么有一个字母或数字要么没有</td></tr><tr><td style="text-align:center">{N}</td><td style="text-align:center">匹配N次前面出现的正则表达式</td><td style="text-align:center">[0-9]{3}</td><td style="text-align:center">匹配三个数字</td></tr><tr><td style="text-align:center">{M,N}</td><td style="text-align:center">匹配M~N次前面出现的正则表达式</td><td style="text-align:center">[0-9]{5,9}</td><td style="text-align:center">匹配5到9个数字(包括5个和9个)</td></tr><tr><td style="text-align:center">[…]</td><td style="text-align:center">匹配来自字符集的任意单一字符</td><td style="text-align:center">[aeiou]</td><td style="text-align:center">匹配一个元音字母</td></tr><tr><td style="text-align:center">[..x~y..]</td><td style="text-align:center">匹配x~y范围内的任意单一字符</td><td style="text-align:center">[A-Za-z]</td><td style="text-align:center">匹配任意一个英文字母</td></tr><tr><td style="text-align:center">[^…]</td><td style="text-align:center">不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)</td><td style="text-align:center">[\^aeiou][\^A-Za-z0-9]</td><td style="text-align:center">匹配一个非元音字母和一个非字母数字字符</td></tr><tr><td style="text-align:center">(*&#124;+&#124;?&#124;{})?</td><td style="text-align:center">用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})</td><td style="text-align:center">.*?[a-z]</td><td style="text-align:center">(非贪婪是指尽可能少的匹配)</td></tr><tr><td style="text-align:center">(…)</td><td style="text-align:center">匹配封闭的正则表达式,然后另存为子组</td><td style="text-align:center">f(oo&#124; u)bar</td><td style="text-align:center">匹配foobar,fubar</td></tr><tr><td style="text-align:center">特殊字符</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配任何十进制数字，与[0-9]一致(\D和\d相反，不匹配任何非数值型的数字)</td><td style="text-align:center">data\d+.txt</td><td style="text-align:center">匹配data1.txt、data12.txt</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配任何字母数字字符，与[A-Za-z0-9]相同(\W与之相反)</td><td style="text-align:center">[A-Za-z_]\w+</td><td style="text-align:center">匹配任意字母或_加一个或多个字母数字字符(asda,_asda)</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空格字符，与[\n\t\r\v\f]相同(\S与之相反)</td><td style="text-align:center">of\sthe</td><td style="text-align:center">匹配of the (\n:换行符&#124;\t:水平制表符&#124;\r:回车&#124;\v:垂直制表符&#124;\f:换页符)</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配任何单词边界(\B与之相反)</td><td style="text-align:center">\bThe\b</td><td style="text-align:center">匹配of The a，不匹配ofThe a</td></tr><tr><td style="text-align:center">\N</td><td style="text-align:center">匹配已保存的子组N(与上面(…)配合使用)</td><td style="text-align:center">price:\16</td><td style="text-align:center">匹配price:和前面第16个子组的值</td></tr><tr><td style="text-align:center">\c</td><td style="text-align:center">逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\为对特殊字符的转义表示)</td><td style="text-align:center">*</td><td style="text-align:center">匹配*</td></tr><tr><td style="text-align:center">\A(\Z)</td><td style="text-align:center">匹配字符串的起始(结束)(另见上面的^和$)</td><td style="text-align:center">\ADear</td><td style="text-align:center">匹配以Dear开头的</td></tr><tr><td style="text-align:center">扩展表示法</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">（?iLmsux）</td><td style="text-align:center">在正则表达式中嵌入一个或多个特殊”标记”参数(或者通过函数/方法)</td><td style="text-align:center">（?x）,(?im)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">(?:…)</td><td style="text-align:center">表示一个匹配不用保存的分组</td><td style="text-align:center">(?:\w+.)*</td><td style="text-align:center">匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组</td></tr><tr><td style="text-align:center">(?P<name>…)</name></td><td style="text-align:center">像一个仅由name标识而不是数字ID标识的正则分组匹配</td><td style="text-align:center">(?P<data>)</data></td><td style="text-align:center">给匹配的分组命名为data</td></tr><tr><td style="text-align:center">(?P=name)</td><td style="text-align:center">在同一个字符串中匹配由(?P<name>)分组之前的文本</name></td><td style="text-align:center">(?P=data)</td><td style="text-align:center">匹配名字为data的串</td></tr><tr><td style="text-align:center">(?#…)</td><td style="text-align:center">表示注释，所有内容都被忽略</td><td style="text-align:center">(?#comment)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">(?=…)</td><td style="text-align:center">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td><td style="text-align:center">(?=.com)</td><td style="text-align:center">如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串</td></tr><tr><td style="text-align:center">(?!…)</td><td style="text-align:center">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td><td style="text-align:center">(?!.net)</td><td style="text-align:center">如果一个字符串后面不是跟着“.net”，才做匹配操作</td></tr><tr><td style="text-align:center">(?&lt;=…)</td><td style="text-align:center">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td><td style="text-align:center">(?&lt;=800-)</td><td style="text-align:center">如果字符串之前为“800-”才做匹配，并不使用任何输入字符串</td></tr><tr><td style="text-align:center">(?&lt;!…)</td><td style="text-align:center">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td><td style="text-align:center">(?&lt;!192\.168\.)</td><td style="text-align:center">如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串</td></tr><tr><td style="text-align:center">(?(id/name)Y&#124;N</td><td style="text-align:center">如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项</td><td style="text-align:center">(?(1)y&#124;x)</td><td style="text-align:center">如果一个匹配组1(\1)存在就y匹配；否则，就与x匹配</td></tr></tbody></table><p>以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://coldjune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
