<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay Hungary</title>
  
  <subtitle>Programming is an art form</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldjune.com/"/>
  <updated>2018-03-22T03:27:47.873Z</updated>
  <id>http://coldjune.com/</id>
  
  <author>
    <name>邓小俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据规整化(一)</title>
    <link href="http://coldjune.com/2018/03/21/%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E5%8C%96-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/21/数据规整化-一/</id>
    <published>2018-03-21T11:30:39.000Z</published>
    <updated>2018-03-22T03:27:47.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合并数据集"><a href="#合并数据集" class="headerlink" title="合并数据集"></a>合并数据集</h2><p>pandas对象中的数据可以通过内置的方式进行合并:</p><ul><li><code>pandas.merge</code>可根据一个或多个键讲不通DataFrame中的行连接起来(数据库连接操作)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li><code>pandas.concat</code>可以沿着一条轴将多个对象堆叠到一起</li><li><p>实例方法<code>combine_first</code>可以将重复数据编接在一起，用一个对象中的值填充另一个对象的中的缺失值(先从第一个对象选值，不行就去第二个对象中选值)</p></li><li><p>merge函数的参数</p></li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">left</td><td style="text-align:center">参数合并的左侧DataFrame</td></tr><tr><td style="text-align:center">right</td><td style="text-align:center">参与合并的右侧DataFrame</td></tr><tr><td style="text-align:center">how</td><td style="text-align:center">“inner”、”outer”、”left”、”right”。默认为”inner”</td></tr><tr><td style="text-align:center">on</td><td style="text-align:center">用于连接的列名。必须存在于左右两个DataFrame对象中。如果未指定，且其他连接键也未指定，则以left和right列名的交集作为连接键</td></tr><tr><td style="text-align:center">left_on</td><td style="text-align:center">左侧DataFrame中用作连接键的列</td></tr><tr><td style="text-align:center">right_on</td><td style="text-align:center">右侧DataFrame中用作连接键的列</td></tr><tr><td style="text-align:center">left_index</td><td style="text-align:center">将左侧的行索引用作其连接键</td></tr><tr><td style="text-align:center">right_index</td><td style="text-align:center">将右侧的行索引用作其连接键</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">根据连接键合并后的数据进行排序，默认为True。处理大数据集时，禁用会获得更好的性能</td></tr><tr><td style="text-align:center">suffixes</td><td style="text-align:center">字符串值元组，用于追加到重叠列名的末尾，默认为(‘_x’,’_y’)。(如果左右两个DataFrame中都有data，则结果会出现”data_x”和”data_y”)</td></tr><tr><td style="text-align:center">copy</td><td style="text-align:center">设置为False，可以在某些特殊情况下避免将数据复制到结果数据结构中。默认总是复制</td></tr></tbody></table><h3 id="数据库风格的DataFrame合并"><a href="#数据库风格的DataFrame合并" class="headerlink" title="数据库风格的DataFrame合并"></a>数据库风格的DataFrame合并</h3><p>数据集的合并(merge)或链接(join)运算是通过一个或多个键将行链接起来。</p><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><p>df1中的数据key列中有多个被标记为a,b的行，而df2中key列的每个值仅对应一行。如果没有指定要用哪个列进行链接，<code>merge</code>就会将重叠列的列名当做键，最好通过<code>on</code>显式指定；如果两个列的列名不同可以分别使用<code>left_on</code>和<code>right_on</code>指定；默认情况下<code>merge</code>做的是<code>inner</code>链接，即结果是键的交集，所以c的数据被剔除了；外链接<code>outer</code>求的是并集，结合了左链接<code>left</code>和右链接<code>right</code>的效果，通过<code>how</code>来指定链接方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">In [14]: df1 = DataFrame(&#123;&apos;key&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [15]: df2 = DataFrame(&#123;&apos;key&apos;:list(&apos;abc&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [16]: df1</span><br><span class="line">Out[16]:</span><br><span class="line">   data1 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   a</span><br><span class="line">2      2   c</span><br><span class="line">3      3   c</span><br><span class="line">4      4   b</span><br><span class="line">5      5   b</span><br><span class="line">6      6   c</span><br><span class="line"></span><br><span class="line">In [17]: df2</span><br><span class="line">Out[17]:</span><br><span class="line">   data2 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   b</span><br><span class="line">2      2   c</span><br><span class="line"></span><br><span class="line">In [18]: pd.merge(df1,df2)</span><br><span class="line">Out[18]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br><span class="line"></span><br><span class="line">In [19]: df1.merge(df2,on=&apos;key&apos;)</span><br><span class="line">Out[19]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br><span class="line"></span><br><span class="line">In [20]: df3 = DataFrame(&#123;&apos;lkey&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [21]: df4 = DataFrame(&#123;&apos;rkey&apos;:list(&apos;abc&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [22]: pd.merge(df3,df4,left_on=&apos;lkey&apos;,right_on=&apos;rkey&apos;)</span><br><span class="line">Out[22]:</span><br><span class="line">   data1 lkey  data2 rkey</span><br><span class="line">0      0    a      0    a</span><br><span class="line">1      1    a      0    a</span><br><span class="line">2      2    c      2    c</span><br><span class="line">3      3    c      2    c</span><br><span class="line">4      6    c      2    c</span><br><span class="line">5      4    b      1    b</span><br><span class="line">6      5    b      1    b</span><br><span class="line"></span><br><span class="line">In [23]: df1.merge(df2,on=&apos;key&apos;,how=&apos;outer&apos;)</span><br><span class="line">Out[23]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br></pre></td></tr></table></figure></p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>多对多链接产生的是行的笛卡尔积，链接方式只影响出现在结果中的键；要根据多个键进行合并，传入一个由列名组成的列表即可(可以看成组合外键)；对于列名重复的问题可以通过设置<code>suffixes</code>选项指定附加到左右两个DataFrame对象列名上的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">In [29]: df1 = DataFrame(&#123;&apos;key&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [30]: df2 = DataFrame(&#123;&apos;key&apos;:list(&apos;abacd&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(5)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [31]: df1</span><br><span class="line">Out[31]:</span><br><span class="line">   data1 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   a</span><br><span class="line">2      2   c</span><br><span class="line">3      3   c</span><br><span class="line">4      4   b</span><br><span class="line">5      5   b</span><br><span class="line">6      6   c</span><br><span class="line"></span><br><span class="line">In [32]: df2</span><br><span class="line">Out[32]:</span><br><span class="line">   data2 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   b</span><br><span class="line">2      2   a</span><br><span class="line">3      3   c</span><br><span class="line">4      4   d</span><br><span class="line"></span><br><span class="line">In [33]: pd.merge(df1,df2,on=&apos;key&apos;,how=&apos;left&apos;)</span><br><span class="line">Out[33]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      0   a      2</span><br><span class="line">2      1   a      0</span><br><span class="line">3      1   a      2</span><br><span class="line">4      2   c      3</span><br><span class="line">5      3   c      3</span><br><span class="line">6      4   b      1</span><br><span class="line">7      5   b      1</span><br><span class="line">8      6   c      3</span><br><span class="line"></span><br><span class="line">In [42]: left = DataFrame(&#123;&apos;key1&apos;:[&apos;foo&apos;,&apos;foo&apos;,&apos;bar&apos;],</span><br><span class="line">    ...:                   &apos;key2&apos;:[&apos;one&apos;,&apos;two&apos;,&apos;one&apos;],</span><br><span class="line">    ...:                   &apos;lval&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [43]: right = DataFrame(&#123;&apos;key1&apos;:[&apos;bar&apos;,&apos;foo&apos;,&apos;bar&apos;,&apos;bar&apos;],</span><br><span class="line">    ...:                   &apos;key2&apos;:[&apos;one&apos;,&apos;two&apos;,&apos;one&apos;,&apos;two&apos;],</span><br><span class="line">    ...:                   &apos;lval&apos;:range(4)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [44]: left</span><br><span class="line">Out[44]:</span><br><span class="line">  key1 key2  lval</span><br><span class="line">0  foo  one     0</span><br><span class="line">1  foo  two     1</span><br><span class="line">2  bar  one     2</span><br><span class="line"></span><br><span class="line">In [45]: right</span><br><span class="line">Out[45]:</span><br><span class="line">  key1 key2  lval</span><br><span class="line">0  bar  one     0</span><br><span class="line">1  foo  two     1</span><br><span class="line">2  bar  one     2</span><br><span class="line">3  bar  two     3</span><br><span class="line"></span><br><span class="line">In [46]: left.merge(right,on=[&apos;key1&apos;,&apos;key2&apos;],how=&apos;outer&apos;)</span><br><span class="line">Out[46]:</span><br><span class="line">  key1 key2  lval_x  lval_y</span><br><span class="line">0  foo  one     0.0     NaN</span><br><span class="line">1  foo  two     1.0     1.0</span><br><span class="line">2  bar  one     2.0     0.0</span><br><span class="line">3  bar  one     2.0     2.0</span><br><span class="line">4  bar  two     NaN     3.0</span><br><span class="line"></span><br><span class="line">In [47]: left.merge(right,on=&apos;key1&apos;,how=&apos;outer&apos;)</span><br><span class="line">Out[47]:</span><br><span class="line">  key1 key2_x  lval_x key2_y  lval_y</span><br><span class="line">0  foo    one       0    two       1</span><br><span class="line">1  foo    two       1    two       1</span><br><span class="line">2  bar    one       2    one       0</span><br><span class="line">3  bar    one       2    one       2</span><br><span class="line">4  bar    one       2    two       3</span><br><span class="line"></span><br><span class="line">In [48]: left.merge(right,on=&apos;key1&apos;,how=&apos;outer&apos;,suffixes=[&apos;_left&apos;,&apos;_right&apos;])</span><br><span class="line">Out[48]:</span><br><span class="line">  key1 key2_left  lval_left key2_right  lval_right</span><br><span class="line">0  foo       one          0        two           1</span><br><span class="line">1  foo       two          1        two           1</span><br><span class="line">2  bar       one          2        one           0</span><br><span class="line">3  bar       one          2        one           2</span><br><span class="line">4  bar       one          2        two           3</span><br></pre></td></tr></table></figure></p><h3 id="索引上的合并"><a href="#索引上的合并" class="headerlink" title="索引上的合并"></a>索引上的合并</h3><p>当DataFrame中的连接键位于其索引上可以通过传入<code>left_index=True</code>和<code>right_index=True</code>来说明索引应该被用作连接键，对于层次化的索引必须以列表的形式指明用作合并键的多个列，同样可以合并双方的索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">In [3]: left1 = DataFrame(&#123;&apos;key&apos;:list(&apos;abaacb&apos;),</span><br><span class="line">   ...:                    &apos;value&apos;:range(6)&#125;)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [4]: right1 = DataFrame(&#123;&apos;group_val&apos;:[1,2]&#125;,index=[&apos;a&apos;,&apos;b&apos;])</span><br><span class="line"></span><br><span class="line">In [5]: left1</span><br><span class="line">Out[5]:</span><br><span class="line">  key  value</span><br><span class="line">0   a      0</span><br><span class="line">1   b      1</span><br><span class="line">2   a      2</span><br><span class="line">3   a      3</span><br><span class="line">4   c      4</span><br><span class="line">5   b      5</span><br><span class="line"></span><br><span class="line">In [6]: right1</span><br><span class="line">Out[6]:</span><br><span class="line">   group_val</span><br><span class="line">a          1</span><br><span class="line">b          2</span><br><span class="line"></span><br><span class="line">In [7]: pd.merge(left1,right1,left_on=&apos;key&apos;,right_index=True)</span><br><span class="line">Out[7]:</span><br><span class="line">  key  value  group_val</span><br><span class="line">0   a      0          1</span><br><span class="line">2   a      2          1</span><br><span class="line">3   a      3          1</span><br><span class="line">1   b      1          2</span><br><span class="line">5   b      5          2</span><br><span class="line"></span><br><span class="line">In [8]: pd.merge(left1,right1,left_on=&apos;key&apos;,right_index=True,how=&apos;outer&apos;)</span><br><span class="line">Out[8]:</span><br><span class="line">  key  value  group_val</span><br><span class="line">0   a      0        1.0</span><br><span class="line">2   a      2        1.0</span><br><span class="line">3   a      3        1.0</span><br><span class="line">1   b      1        2.0</span><br><span class="line">5   b      5        2.0</span><br><span class="line">4   c      4        NaN</span><br><span class="line"></span><br><span class="line">In [24]: lefth = DataFrame(&#123;&apos;key1&apos;:[&apos;row1&apos;,&apos;row1&apos;,&apos;row1&apos;,&apos;row2&apos;,&apos;row2&apos;],</span><br><span class="line">    ...:                     &apos;key2&apos;:[2001,2001,2002,2001,2002],</span><br><span class="line">    ...:                     &apos;data&apos;:range(5)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [25]: righth = DataFrame(np.arange(12).reshape((4,3)),</span><br><span class="line">    ...:                     index=[[&apos;row1&apos;,&apos;row1&apos;,&apos;row2&apos;,&apos;row2&apos;],[2001,2002,2001,2001]],</span><br><span class="line">    ...:                     columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [26]: lefth</span><br><span class="line">Out[26]:</span><br><span class="line">   data  key1  key2</span><br><span class="line">0     0  row1  2001</span><br><span class="line">1     1  row1  2001</span><br><span class="line">2     2  row1  2002</span><br><span class="line">3     3  row2  2001</span><br><span class="line">4     4  row2  2002</span><br><span class="line"></span><br><span class="line">In [27]: righth</span><br><span class="line">Out[27]:</span><br><span class="line">           col1  col2  col3</span><br><span class="line">row1 2001     0     1     2</span><br><span class="line">     2002     3     4     5</span><br><span class="line">row2 2001     6     7     8</span><br><span class="line">     2001     9    10    11</span><br><span class="line"></span><br><span class="line">In [28]: pd.merge(lefth,righth,left_on=[&apos;key1&apos;,&apos;key2&apos;],right_index=True)</span><br><span class="line">Out[28]:</span><br><span class="line">   data  key1  key2  col1  col2  col3</span><br><span class="line">0     0  row1  2001     0     1     2</span><br><span class="line">1     1  row1  2001     0     1     2</span><br><span class="line">2     2  row1  2002     3     4     5</span><br><span class="line">3     3  row2  2001     6     7     8</span><br><span class="line">3     3  row2  2001     9    10    11</span><br><span class="line"></span><br><span class="line">In [29]: left2 = DataFrame(np.arange(6).reshape((3,2)),index=list(&apos;ace&apos;),columns=[&apos;col1&apos;,&apos;col2&apos;])</span><br><span class="line"></span><br><span class="line">In [30]: right2 = DataFrame(np.arange(8).reshape((4,2)),index=list(&apos;bcde&apos;),columns=[&apos;col_1&apos;,&apos;col_2&apos;])</span><br><span class="line"></span><br><span class="line">In [31]: left2</span><br><span class="line">Out[31]:</span><br><span class="line">   col1  col2</span><br><span class="line">a     0     1</span><br><span class="line">c     2     3</span><br><span class="line">e     4     5</span><br><span class="line"></span><br><span class="line">In [32]: right2</span><br><span class="line">Out[32]:</span><br><span class="line">   col_1  col_2</span><br><span class="line">b      0      1</span><br><span class="line">c      2      3</span><br><span class="line">d      4      5</span><br><span class="line">e      6      7</span><br><span class="line"></span><br><span class="line">In [33]: pd.merge(left2,right2,how=&apos;outer&apos;,left_index=True,right_index=True)</span><br><span class="line">Out[33]:</span><br><span class="line">   col1  col2  col_1  col_2</span><br><span class="line">a   0.0   1.0    NaN    NaN</span><br><span class="line">b   NaN   NaN    0.0    1.0</span><br><span class="line">c   2.0   3.0    2.0    3.0</span><br><span class="line">d   NaN   NaN    4.0    5.0</span><br><span class="line">e   4.0   5.0    6.0    7.0</span><br></pre></td></tr></table></figure></p><p>DataFrame有一个<code>join</code>方法，它能更为方便地实现按索引合并。它还可以合并多个带有相同或相似索引的DataFrame对象，而不管它们之间有没有重叠的列；同时它也支持参数DataFrame的索引跟调用者DataFrame的某个列之间的连接，队友索引的简单合并，可以向<code>join</code>传入一组DataFrame：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">In [42]: left1</span><br><span class="line">Out[42]:</span><br><span class="line">  key  value</span><br><span class="line">0   a      0</span><br><span class="line">1   b      1</span><br><span class="line">2   a      2</span><br><span class="line">3   a      3</span><br><span class="line">4   c      4</span><br><span class="line">5   b      5</span><br><span class="line"></span><br><span class="line">In [43]: left2</span><br><span class="line">Out[43]:</span><br><span class="line">   col1  col2</span><br><span class="line">a     0     1</span><br><span class="line">c     2     3</span><br><span class="line">e     4     5</span><br><span class="line"></span><br><span class="line">In [44]: left2.join(right2,how=&apos;outer&apos;)</span><br><span class="line">Out[44]:</span><br><span class="line">   col1  col2  col_1  col_2</span><br><span class="line">a   0.0   1.0    NaN    NaN</span><br><span class="line">b   NaN   NaN    0.0    1.0</span><br><span class="line">c   2.0   3.0    2.0    3.0</span><br><span class="line">d   NaN   NaN    4.0    5.0</span><br><span class="line">e   4.0   5.0    6.0    7.0</span><br><span class="line"></span><br><span class="line">In [45]: left1</span><br><span class="line">Out[45]:</span><br><span class="line">  key  value</span><br><span class="line">0   a      0</span><br><span class="line">1   b      1</span><br><span class="line">2   a      2</span><br><span class="line">3   a      3</span><br><span class="line">4   c      4</span><br><span class="line">5   b      5</span><br><span class="line"></span><br><span class="line">In [46]: right1</span><br><span class="line">Out[46]:</span><br><span class="line">   group_val</span><br><span class="line">a          1</span><br><span class="line">b          2</span><br><span class="line"></span><br><span class="line">In [47]: left1.join(right1,on=&apos;key&apos;)</span><br><span class="line">Out[47]:</span><br><span class="line">  key  value  group_val</span><br><span class="line">0   a      0        1.0</span><br><span class="line">1   b      1        2.0</span><br><span class="line">2   a      2        1.0</span><br><span class="line">3   a      3        1.0</span><br><span class="line">4   c      4        NaN</span><br><span class="line">5   b      5        2.0</span><br><span class="line"></span><br><span class="line">In [48]: anote =DataFrame(np.arange(8).reshape((4,2)),index=[&apos;a&apos;,&apos;c&apos;,&apos;b&apos;,&apos;f&apos;],columns=[&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line"></span><br><span class="line">In [49]: anote</span><br><span class="line">Out[49]:</span><br><span class="line">   col3  col4</span><br><span class="line">a     0     1</span><br><span class="line">c     2     3</span><br><span class="line">b     4     5</span><br><span class="line">f     6     7</span><br><span class="line"></span><br><span class="line">In [50]: left2.join([right2,anote])</span><br><span class="line">Out[50]:</span><br><span class="line">   col1  col2  col_1  col_2  col3  col4</span><br><span class="line">a     0     1    NaN    NaN   0.0   1.0</span><br><span class="line">c     2     3    2.0    3.0   2.0   3.0</span><br><span class="line">e     4     5    6.0    7.0   NaN   NaN</span><br></pre></td></tr></table></figure></p><h3 id="轴向连接"><a href="#轴向连接" class="headerlink" title="轴向连接"></a>轴向连接</h3><p>另一种数据合并运算称作连接(concatenation)、绑定(binding)或堆叠(stacking)。NumPy提供了一个用于合并原始NumPy数组的<code>concatenation</code>函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [54]: np.concatenate([arr,arr], axis=1)</span><br><span class="line">Out[54]:</span><br><span class="line">array([[ 0,  1,  2,  3,  0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7,  4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11,  8,  9, 10, 11]])</span><br><span class="line"></span><br><span class="line">In [55]: np.concatenate([arr,arr], axis=0)</span><br><span class="line">Out[55]:</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br></pre></td></tr></table></figure></p><p>对于pandas对象(如Series和DataFrame)，带有标签的轴能进一步推广数组的连接运算:</p><ul><li>如果个对象其他轴上的索引不同，那些轴应该做并集还是交集</li><li>结果对象中的分组需要是否各不相同</li><li><p>用于连接的轴是否重要</p></li><li><p>concat函数的参数</p></li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">obj</td><td style="text-align:center">参与连接的pandas对象的列表或字典。唯一必需的参数</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">指明连接的轴向,默认为0</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">“inner”、”outer”其中之一，默认为”outer”。指明其他轴向上的索引时按交集(inner)还是并集(outer)进行合并</td></tr><tr><td style="text-align:center">join_axes</td><td style="text-align:center">指明用于其他n-1条轴的索引，不执行并集/交集运算</td></tr><tr><td style="text-align:center">keys</td><td style="text-align:center">与连接对象有关的值，用于形成连接轴向上的层次化索引。可以是任意值的列表或数组、元组数组、列表数组(如果将levels设置成多级数组的话)</td></tr><tr><td style="text-align:center">levels</td><td style="text-align:center">指定用作层次化索引各级别上的索引，如果设置了keys的话</td></tr><tr><td style="text-align:center">names</td><td style="text-align:center">用于创建分层级别的名称，如果设置了keys和levels的话</td></tr><tr><td style="text-align:center">verify_integrity</td><td style="text-align:center">检查结果对象新轴上的重复情况，如果发现则引发异常。默认(False)允许重复</td></tr><tr><td style="text-align:center">ignore_index</td><td style="text-align:center">不保留连接轴上的索引，产生一组新索引range(total_length)</td></tr></tbody></table><p>pandas的<code>concat</code>函数提供了解决以上问题的可靠方式，对没有重叠索引的Series调用concat可以将值和索引粘合在一起;默认情况是在<code>axis=0</code>上工作，最后产生一个新的Series。如果传入<code>axis=1</code>将会得到一个DataFrame，这种情况下从索引的有序并集可以看出另一条轴上没有重叠，可以传入<code>join=&#39;inner&#39;</code>得到交集:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">In [56]: s1 = Series([0,1],index=list(&apos;ab&apos;))</span><br><span class="line"></span><br><span class="line">In [57]: s2 = Series([2,3,4],index=list(&apos;cde&apos;))</span><br><span class="line"></span><br><span class="line">In [58]: s3 = Series([5,6,7],index=list(&apos;fgh&apos;))</span><br><span class="line"></span><br><span class="line">In [59]: pd.concat([s1,s2,s3])</span><br><span class="line">Out[59]:</span><br><span class="line">a    0</span><br><span class="line">b    1</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">e    4</span><br><span class="line">f    5</span><br><span class="line">g    6</span><br><span class="line">h    7</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [60]: pd.concat([s1,s2,s3],axis=1)</span><br><span class="line">Out[60]:</span><br><span class="line">     0    1    2</span><br><span class="line">a  0.0  NaN  NaN</span><br><span class="line">b  1.0  NaN  NaN</span><br><span class="line">c  NaN  2.0  NaN</span><br><span class="line">d  NaN  3.0  NaN</span><br><span class="line">e  NaN  4.0  NaN</span><br><span class="line">f  NaN  NaN  5.0</span><br><span class="line">g  NaN  NaN  6.0</span><br><span class="line">h  NaN  NaN  7.0</span><br><span class="line"></span><br><span class="line">In [62]: s4 = pd.concat([s1*5,s3])</span><br><span class="line"></span><br><span class="line">In [63]: s4</span><br><span class="line">Out[63]:</span><br><span class="line">a    0</span><br><span class="line">b    5</span><br><span class="line">f    5</span><br><span class="line">g    6</span><br><span class="line">h    7</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [64]: pd.concat([s1,s4],axis=1)</span><br><span class="line">Out[64]:</span><br><span class="line">     0  1</span><br><span class="line">a  0.0  0</span><br><span class="line">b  1.0  5</span><br><span class="line">f  NaN  5</span><br><span class="line">g  NaN  6</span><br><span class="line">h  NaN  7</span><br><span class="line"></span><br><span class="line">In [65]: pd.concat([s1,s4],axis=1,join=&apos;inner&apos;)</span><br><span class="line">Out[65]:</span><br><span class="line">   0  1</span><br><span class="line">a  0  0</span><br><span class="line">b  1  5</span><br></pre></td></tr></table></figure></p><p>可以通过<code>join_axes</code>指定要在其他轴上使用的索引，使用<code>keys</code>可以在连接轴上创建一个层次化索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [69]: pd.concat([s1,s4],axis=1,join_axes=[[&apos;a&apos;,&apos;c&apos;,&apos;b&apos;,&apos;e&apos;]])</span><br><span class="line">Out[69]:</span><br><span class="line">     0    1</span><br><span class="line">a  0.0  0.0</span><br><span class="line">c  NaN  NaN</span><br><span class="line">b  1.0  5.0</span><br><span class="line">e  NaN  NaN</span><br><span class="line"></span><br><span class="line">In [71]: pd.concat([s1,s1,s3],keys=[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;])</span><br><span class="line">Out[71]:</span><br><span class="line">one    a    0</span><br><span class="line">       b    1</span><br><span class="line">two    a    0</span><br><span class="line">       b    1</span><br><span class="line">three  f    5</span><br><span class="line">       g    6</span><br><span class="line">       h    7</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>若果沿着<code>axis=1</code>对Series进行合并，则<code>keys</code>就会成为DataFrame的列头，对于DataFrame效果一样；如果传入的不是列表而是一个字典，则字典的键就会被当做keys选项的值;<code>names</code>可以创建分层级别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">In [73]: df1 = DataFrame(np.arange(6).reshape(3,2),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;one&apos;,&apos;two&apos;])</span><br><span class="line"></span><br><span class="line">In [74]: df2 = DataFrame(2+np.arange(4).reshape(2,2),index=[&apos;a&apos;,&apos;c&apos;],columns=[&apos;three&apos;,&apos;four&apos;])</span><br><span class="line"></span><br><span class="line">In [75]: df1</span><br><span class="line">Out[75]:</span><br><span class="line">   one  two</span><br><span class="line">a    0    1</span><br><span class="line">b    2    3</span><br><span class="line">c    4    5</span><br><span class="line"></span><br><span class="line">In [76]: df2</span><br><span class="line">Out[76]:</span><br><span class="line">   three  four</span><br><span class="line">a      2     3</span><br><span class="line">c      4     5</span><br><span class="line"></span><br><span class="line">In [77]: pd.concat([df1,df2],axis=1,keys=[&apos;level1&apos;,&apos;level2&apos;])</span><br><span class="line">Out[77]:</span><br><span class="line">  level1     level2</span><br><span class="line">     one two  three four</span><br><span class="line">a      0   1    2.0  3.0</span><br><span class="line">b      2   3    NaN  NaN</span><br><span class="line">c      4   5    4.0  5.0</span><br><span class="line"></span><br><span class="line">In [73]: df1 = DataFrame(np.arange(6).reshape(3,2),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;one&apos;,&apos;two&apos;])</span><br><span class="line"></span><br><span class="line">In [74]: df2 = DataFrame(2+np.arange(4).reshape(2,2),index=[&apos;a&apos;,&apos;c&apos;],columns=[&apos;three&apos;,&apos;four&apos;])</span><br><span class="line"></span><br><span class="line">In [75]: df1</span><br><span class="line">Out[75]:</span><br><span class="line">   one  two</span><br><span class="line">a    0    1</span><br><span class="line">b    2    3</span><br><span class="line">c    4    5</span><br><span class="line"></span><br><span class="line">In [76]: df2</span><br><span class="line">Out[76]:</span><br><span class="line">   three  four</span><br><span class="line">a      2     3</span><br><span class="line">c      4     5</span><br><span class="line"></span><br><span class="line">In [77]: pd.concat([df1,df2],axis=1,keys=[&apos;level1&apos;,&apos;level2&apos;])</span><br><span class="line">Out[77]:</span><br><span class="line">  level1     level2</span><br><span class="line">     one two  three four</span><br><span class="line">a      0   1    2.0  3.0</span><br><span class="line">b      2   3    NaN  NaN</span><br><span class="line">c      4   5    4.0  5.0</span><br><span class="line"></span><br><span class="line">In [79]: pd.concat(&#123;&apos;level1&apos;:df1,&apos;level2&apos;:df2&#125;,axis=1,names=[&apos;upper&apos;,&apos;down&apos;])</span><br><span class="line">Out[79]:</span><br><span class="line">upper level1     level2</span><br><span class="line">down     one two  three four</span><br><span class="line">a          0   1    2.0  3.0</span><br><span class="line">b          2   3    NaN  NaN</span><br><span class="line">c          4   5    4.0  5.0</span><br></pre></td></tr></table></figure></p><p>需要排除与分析无关的行索引，传入<code>ignore_index=True</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [83]: df1</span><br><span class="line">Out[83]:</span><br><span class="line">   one  two</span><br><span class="line">a    0    1</span><br><span class="line">b    2    3</span><br><span class="line">c    4    5</span><br><span class="line"></span><br><span class="line">In [84]: df2</span><br><span class="line">Out[84]:</span><br><span class="line">   three  four</span><br><span class="line">a      2     3</span><br><span class="line">c      4     5</span><br><span class="line"></span><br><span class="line">In [85]: pd.concat([df1,df2],ignore_index=True)</span><br><span class="line">Out[85]:</span><br><span class="line">   four  one  three  two</span><br><span class="line">0   NaN  0.0    NaN  1.0</span><br><span class="line">1   NaN  2.0    NaN  3.0</span><br><span class="line">2   NaN  4.0    NaN  5.0</span><br><span class="line">3   3.0  NaN    2.0  NaN</span><br><span class="line">4   5.0  NaN    4.0  NaN</span><br></pre></td></tr></table></figure></p><h3 id="合并重叠数据"><a href="#合并重叠数据" class="headerlink" title="合并重叠数据"></a>合并重叠数据</h3><p>如果数据集的索引全部或部分重叠就不能拿用简单的合并(merge)或连接(concatenation)运算来处理了。<code>combine_first</code>实现了相同索引择一选择的功能,满足条件则选1否则选2，类似于<code>np.where(pd.isnull(a),b,a)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [91]: a = Series([np.nan,2,np.nan,3,4,np.nan],index=list(&apos;fedcba&apos;))</span><br><span class="line"></span><br><span class="line">In [92]: b = Series(np.arange(len(a)),dtype=np.float64,index=list(&apos;fedcba&apos;))</span><br><span class="line"></span><br><span class="line">In [93]: b[2:3] = np.nan</span><br><span class="line"></span><br><span class="line">In [94]: a</span><br><span class="line">Out[94]:</span><br><span class="line">f    NaN</span><br><span class="line">e    2.0</span><br><span class="line">d    NaN</span><br><span class="line">c    3.0</span><br><span class="line">b    4.0</span><br><span class="line">a    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [95]: b</span><br><span class="line">Out[95]:</span><br><span class="line">f    0.0</span><br><span class="line">e    1.0</span><br><span class="line">d    NaN</span><br><span class="line">c    3.0</span><br><span class="line">b    4.0</span><br><span class="line">a    5.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [96]: np.where(pd.isnull(a),b,a)</span><br><span class="line">Out[96]: array([  0.,   2.,  nan,   3.,   4.,   5.])</span><br><span class="line"></span><br><span class="line">In [97]: b[:-2].combine_first(a[2:])</span><br><span class="line">Out[97]:</span><br><span class="line">a    NaN</span><br><span class="line">b    4.0</span><br><span class="line">c    3.0</span><br><span class="line">d    NaN</span><br><span class="line">e    1.0</span><br><span class="line">f    0.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame，<code>combine_first</code>会在列上做同样的事，可以看做参数对象中的数据为调用者对象的缺失数据”打补丁”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [107]: df1 = DataFrame(&#123;&apos;a&apos;:[1,np.nan,5,np.nan],</span><br><span class="line">     ...:                  &apos;b&apos;:[np.nan,2,np.nan,6],</span><br><span class="line">     ...:                  &apos;c&apos;:range(2,18,4)&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [108]: df2 = DataFrame(&#123;&apos;a&apos;:[5,4,np.nan,3,7],</span><br><span class="line">     ...:                  &apos;b&apos;:[np.nan,3,4,5,9]&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [109]: df1</span><br><span class="line">Out[109]:</span><br><span class="line">     a    b   c</span><br><span class="line">0  1.0  NaN   2</span><br><span class="line">1  NaN  2.0   6</span><br><span class="line">2  5.0  NaN  10</span><br><span class="line">3  NaN  6.0  14</span><br><span class="line"></span><br><span class="line">In [110]: df2</span><br><span class="line">Out[110]:</span><br><span class="line">     a    b</span><br><span class="line">0  5.0  NaN</span><br><span class="line">1  4.0  3.0</span><br><span class="line">2  NaN  4.0</span><br><span class="line">3  3.0  5.0</span><br><span class="line">4  7.0  9.0</span><br><span class="line"></span><br><span class="line">In [111]: df1.combine_first(df2)</span><br><span class="line">Out[111]:</span><br><span class="line">     a    b     c</span><br><span class="line">0  1.0  NaN   2.0</span><br><span class="line">1  4.0  2.0   6.0</span><br><span class="line">2  5.0  4.0  10.0</span><br><span class="line">3  3.0  6.0  14.0</span><br><span class="line">4  7.0  9.0   NaN</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">可用做实例方法df1.merge(df2),df1想当于left，df2相当于right</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      数据分析和建模方面的大量编程工作都是在做数据准备:加载、清理、转换以及重塑。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据清洗" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据加载、存储与文件格式</title>
    <link href="http://coldjune.com/2018/03/21/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E3%80%81%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <id>http://coldjune.com/2018/03/21/数据加载、存储与文件格式/</id>
    <published>2018-03-21T00:43:06.000Z</published>
    <updated>2018-03-21T11:28:45.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读写文本格式的数据"><a href="#读写文本格式的数据" class="headerlink" title="读写文本格式的数据"></a>读写文本格式的数据</h2><p>pandas提供了一些用于将表格型数据读取为DataFrame对象的函数</p><ul><li>pandas中的解析函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">read_csv</td><td style="text-align:center">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td></tr><tr><td style="text-align:center">read_table</td><td style="text-align:center">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符(“\t”)</td></tr><tr><td style="text-align:center">read_fwf</td><td style="text-align:center">读取定宽列格式数据(没有分隔符)</td></tr><tr><td style="text-align:center">read_clipboard</td><td style="text-align:center">读取剪贴板中的数据，可以看做read_table的剪贴板版。将网页转换为表格时很有用</td></tr></tbody></table><p>这些函数的选项可以划分为几个大类：</p><ol><li>索引：将一个或多个列当做返回的DataFrame处理，以及是否从文件、用户获取列名</li><li>类型推断和数据转换：包括用户定义值的转换、缺失值标记列表等</li><li>日期解析： 包括组合功能，比如将分散在多个列中的日期时间信息组合成结果中的单个列</li><li>迭代：支持对大文件进行逐块迭代</li><li>不规整数据问题：跳过一些行、页脚、注释或其他一些不重要的东西</li></ol><ul><li>read_csv/read_table函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">filepath_or_buffer</td><td style="text-align:center">表示文件系统位置、URL、文件型对象的字符串或任何有read()函数的对象(file handle或StringIO)</td></tr><tr><td style="text-align:center">sep/delimiter</td><td style="text-align:center">用于对行中各字段进行拆分的字符序列或正则表达式</td></tr><tr><td style="text-align:center">header</td><td style="text-align:center">用作列名的行号。默认为0(第一行)，如果没有header行就应该设置为None</td></tr><tr><td style="text-align:center">index_col</td><td style="text-align:center">用作行索引的列编号或列名。可以是单个名称/数字或由多个名称/数字组成的列表(层次化索引)</td></tr><tr><td style="text-align:center">names</td><td style="text-align:center">用于结果的列名列表，结合header=None</td></tr><tr><td style="text-align:center">skiprows</td><td style="text-align:center">需要忽略的行数(从文件开始处算起)，或需要跳过的行号列表(从0开始)</td></tr><tr><td style="text-align:center">na_values</td><td style="text-align:center">一组用于替换NA的值</td></tr><tr><td style="text-align:center">comment</td><td style="text-align:center">用于将注释信息从行尾拆分出去的字符(一个或多个)</td></tr><tr><td style="text-align:center">parse_dates</td><td style="text-align:center">尝试将数据解析为日期，默认为False。如果为True，则尝试解析所有列。此外，还可以指定需要解析的一组列号或列名。如果列表的元素为列表或元组，就会将多个列组合到一起再进行日期解析工作(日期/时间分别位于两个列中)</td></tr><tr><td style="text-align:center">keep_data_col</td><td style="text-align:center">如果连接多列解析日期，则保持参加连接的列。默认为False</td></tr><tr><td style="text-align:center">dayfirst</td><td style="text-align:center">当解析有歧义的日期时，将其看做国际格式(7/6/2018 -&gt; June 7,2018)。默认为False</td></tr><tr><td style="text-align:center">date_parser</td><td style="text-align:center">用于解析日期的函数</td></tr><tr><td style="text-align:center">nrows</td><td style="text-align:center">需要读取的行数(从文件开始处算起)</td></tr><tr><td style="text-align:center">iterator</td><td style="text-align:center">返回一个TextParser以便逐块读取文件</td></tr><tr><td style="text-align:center">chunksize</td><td style="text-align:center">文件快的大小(用于迭代)</td></tr><tr><td style="text-align:center">skip_footer</td><td style="text-align:center">需要忽略的行数(从文件末尾处算起)</td></tr><tr><td style="text-align:center">verbose</td><td style="text-align:center">打印各种解析器输出信息，比如“非数值列中缺失值的数量”</td></tr><tr><td style="text-align:center">encoding</td><td style="text-align:center">用于unicode的文本编码格式。“utf-8”表示用UTF-8编码的文本</td></tr><tr><td style="text-align:center">squeeze</td><td style="text-align:center">如果数据经解析后仅含一列，则返回Series</td></tr><tr><td style="text-align:center">thousands</td><td style="text-align:center">千分位分隔符，如“，”或“.”</td></tr></tbody></table><p>可以使用<code>read_csv</code>和<code>read_table</code>读取一个以逗号分隔的(CSV)文本文件，使用<code>read_table</code>是指定分隔符<code>sep=&#39;,&#39;</code>；当未指定列名时，会使用第一行数据当做列名，可以通过设置<code>header=None</code>使用默认的列名，也可以使用<code>names=[]</code>自己定义列名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">In [12]: !type ex1.csv</span><br><span class="line">a,b,c,d,message</span><br><span class="line">1,2,3,4,hello</span><br><span class="line">5,6,7,8,world</span><br><span class="line">9,10,11,12,foo</span><br><span class="line">In [13]: pd.read_csv(&apos;ex1.csv&apos;)</span><br><span class="line">Out[13]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br><span class="line"></span><br><span class="line">In [14]: pd.read_table(&apos;ex1.csv&apos;,sep=&apos;,&apos;)</span><br><span class="line">Out[14]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br><span class="line"></span><br><span class="line">In [15]: pd.read_csv(&apos;ex1.csv&apos;,header=None)</span><br><span class="line">Out[15]:</span><br><span class="line">   0   1   2   3        4</span><br><span class="line">0  a   b   c   d  message</span><br><span class="line">1  1   2   3   4    hello</span><br><span class="line">2  5   6   7   8    world</span><br><span class="line">3  9  10  11  12      foo</span><br><span class="line"></span><br><span class="line">In [16]: pd.read_csv(&apos;ex1.csv&apos;,names=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line">Out[16]:</span><br><span class="line">  col1 col2 col3     col4</span><br><span class="line">a    b    c    d  message</span><br><span class="line">1    2    3    4    hello</span><br><span class="line">5    6    7    8    world</span><br><span class="line">9   10   11   12      foo</span><br><span class="line"></span><br><span class="line">In [17]: pd.read_csv(&apos;ex1.csv&apos;,names=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;,&apos;col5&apos;])</span><br><span class="line">Out[17]:</span><br><span class="line">  col1 col2 col3 col4     col5</span><br><span class="line">0    a    b    c    d  message</span><br><span class="line">1    1    2    3    4    hello</span><br><span class="line">2    5    6    7    8    world</span><br><span class="line">3    9   10   11   12      foo</span><br></pre></td></tr></table></figure></p><p>如果需要将数据指定为索引列，可以通过设置<code>index_col</code>参数指定索引列，而希望将多个列做成一个层次化索引，只需要传入列编号或列名组成的列表即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [21]: !type csv_mindex.csv</span><br><span class="line">key1,key2,value1,value2</span><br><span class="line">one,a,1,2</span><br><span class="line">one,b,3,4</span><br><span class="line">one,c,5,6</span><br><span class="line">one,d,7,8</span><br><span class="line">two,a,9,10</span><br><span class="line">two,b,11,12</span><br><span class="line">two,c,13,14</span><br><span class="line">two,d,15,16</span><br><span class="line"></span><br><span class="line">In [22]: pd.read_csv(&apos;csv_mindex.csv&apos;,index_col=&apos;key1&apos;)</span><br><span class="line">Out[22]:</span><br><span class="line">     key2  value1  value2</span><br><span class="line">key1</span><br><span class="line">one     a       1       2</span><br><span class="line">one     b       3       4</span><br><span class="line">one     c       5       6</span><br><span class="line">one     d       7       8</span><br><span class="line">two     a       9      10</span><br><span class="line">two     b      11      12</span><br><span class="line">two     c      13      14</span><br><span class="line">two     d      15      16</span><br><span class="line"></span><br><span class="line">In [23]: pd.read_csv(&apos;csv_mindex.csv&apos;,index_col=[&apos;key1&apos;,&apos;key2&apos;])</span><br><span class="line">Out[23]:</span><br><span class="line">           value1  value2</span><br><span class="line">key1 key2</span><br><span class="line">one  a          1       2</span><br><span class="line">     b          3       4</span><br><span class="line">     c          5       6</span><br><span class="line">     d          7       8</span><br><span class="line">two  a          9      10</span><br><span class="line">     b         11      12</span><br><span class="line">     c         13      14</span><br><span class="line">     d         15      16</span><br></pre></td></tr></table></figure></p><p>有些表格可能不是固定的分隔符去分隔字段的，对此可以编写一个正则表达式来作为<code>read_table</code>的分隔符:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [26]: list(open(&apos;ex3.txt&apos;))</span><br><span class="line">Out[26]:</span><br><span class="line">[&apos;            A         B         C\n&apos;,</span><br><span class="line"> &apos;aaa -0.264438 -1.026059 -0.619500\n&apos;,</span><br><span class="line"> &apos;bbb  0.927272  0.302904 -0.032399\n&apos;,</span><br><span class="line"> &apos;ccc -0.264273 -0.386314 -0.217601\n&apos;,</span><br><span class="line"> &apos;ddd -0.871858 -0.348382  1.100491\n&apos;]</span><br><span class="line"></span><br><span class="line">In [27]: pd.read_table(&apos;ex3.txt&apos;,sep=&apos;\s+&apos;)</span><br><span class="line">Out[27]:</span><br><span class="line">            A         B         C</span><br><span class="line">aaa -0.264438 -1.026059 -0.619500</span><br><span class="line">bbb  0.927272  0.302904 -0.032399</span><br><span class="line">ccc -0.264273 -0.386314 -0.217601</span><br><span class="line">ddd -0.871858 -0.348382  1.100491</span><br></pre></td></tr></table></figure></p><p>同时可以使用<code>skiprows</code>跳过指定的行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [28]: !type ex4.csv</span><br><span class="line"># hey!</span><br><span class="line">a,b,c,d,message</span><br><span class="line"># just wanted to make things more difficult for you</span><br><span class="line"># who reads CSV files with computers, anyway?</span><br><span class="line">1,2,3,4,hello</span><br><span class="line">5,6,7,8,world</span><br><span class="line">9,10,11,12,foo</span><br><span class="line">In [29]: pd.read_csv(&apos;ex4.csv&apos;,skiprows=[0,2,3])</span><br><span class="line">Out[29]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br></pre></td></tr></table></figure></p><p>默认情况pandas会用一组经常出现的标记值识别缺失值，如NA、-1.#IND以及NULL，可以使用<code>na_values</code>指定一组用于表示缺失值的字符串，可以使用一个字典为各列指定不同的NA标记值:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [30]: !type ex5.csv</span><br><span class="line">something,a,b,c,d,message</span><br><span class="line">one,1,2,3,4,NA</span><br><span class="line">two,5,6,,8,world</span><br><span class="line">three,9,10,11,12,foo</span><br><span class="line">In [31]: pd.read_csv(&apos;ex5.csv&apos;)</span><br><span class="line">Out[31]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line">0       one  1   2   3.0   4     NaN</span><br><span class="line">1       two  5   6   NaN   8   world</span><br><span class="line">2     three  9  10  11.0  12     foo</span><br><span class="line"></span><br><span class="line">In [32]: pd.read_csv(&apos;ex5.csv&apos;,na_values=[&apos;NULL&apos;])</span><br><span class="line">Out[32]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line">0       one  1   2   3.0   4     NaN</span><br><span class="line">1       two  5   6   NaN   8   world</span><br><span class="line">2     three  9  10  11.0  12     foo</span><br><span class="line"></span><br><span class="line">In [33]: pd.read_csv(&apos;ex5.csv&apos;,na_values=&#123;&apos;message&apos;:[&apos;foo&apos;,&apos;NA&apos;],&apos;something&apos;:[&apos;two&apos;]&#125;)</span><br><span class="line">Out[33]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line">0       one  1   2   3.0   4     NaN</span><br><span class="line">1       NaN  5   6   NaN   8   world</span><br><span class="line">2     three  9  10  11.0  12     NaN</span><br></pre></td></tr></table></figure></p><h3 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h3><p>在读取大文件中的参数时，只想读取文件的一小部分或逐块对文件进行迭代;<code>nrows</code>用于指定读取几行;<code>chunksize</code>用于逐块读取文件时设置行数，<code>read_csv</code>返回的TextParse对象可以根据<code>chunksize</code>对文件进行逐块迭代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [46]: pd.read_csv(&apos;ex6.csv&apos;)</span><br><span class="line">Out[46]:</span><br><span class="line">           one       two     three      four key</span><br><span class="line">0     0.467976 -0.038649 -0.295344 -1.824726   L</span><br><span class="line">1    -0.358893  1.404453  0.704965 -0.200638   B</span><br><span class="line">2    -0.501840  0.659254 -0.421691 -0.057688   G</span><br><span class="line">...        ...       ...       ...       ...  ..</span><br><span class="line">9998 -0.362559  0.598894 -1.843201  0.887292   G</span><br><span class="line">9999 -0.096376 -1.012999 -0.657431 -0.573315   0</span><br><span class="line"></span><br><span class="line">[10000 rows x 5 columns]</span><br><span class="line"></span><br><span class="line">In [47]: chunk = pd.read_csv(&apos;ex6.csv&apos;,chunksize=1000)</span><br><span class="line"></span><br><span class="line">In [48]: tot = Series([])</span><br><span class="line"></span><br><span class="line">In [49]: for piece in chunk:</span><br><span class="line">    ...:     tot = tot.add(piece[&apos;key&apos;].value_counts(),fill_value=0)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [50]: tot = tot.sort_values(ascending=False)</span><br><span class="line"></span><br><span class="line">In [51]: tot[:10]</span><br><span class="line">Out[51]:</span><br><span class="line">E    368.0</span><br><span class="line">X    364.0</span><br><span class="line">L    346.0</span><br><span class="line">O    343.0</span><br><span class="line">Q    340.0</span><br><span class="line">M    338.0</span><br><span class="line">J    337.0</span><br><span class="line">F    335.0</span><br><span class="line">K    334.0</span><br><span class="line">H    330.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="将数据写出到文本格式"><a href="#将数据写出到文本格式" class="headerlink" title="将数据写出到文本格式"></a>将数据写出到文本格式</h3><p>利用DataFrame的<code>to_csv</code>方法可以将数据写到一个以逗号分隔的文件中，可以是<code>sep</code>参数指定其他的分隔符；缺失值在输出结果空会被表示为空字符串，可以使用<code>na_rep</code>设置别的标记值；如果没有设置其他选项，则会写出行和列的标签，可以通过<code>index=False</code>和<code>header=False</code>设置禁用；可以通过设置<code>columns</code>来指定顺序排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [52]: data = pd.read_csv(&apos;ex5.csv&apos;)</span><br><span class="line"></span><br><span class="line">In [53]: data</span><br><span class="line">Out[53]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line">0       one  1   2   3.0   4     NaN</span><br><span class="line">1       two  5   6   NaN   8   world</span><br><span class="line">2     three  9  10  11.0  12     foo</span><br><span class="line"></span><br><span class="line">In [54]: data.to_csv(&apos;out.csv&apos;)</span><br><span class="line"></span><br><span class="line">In [55]: !type out.csv</span><br><span class="line">,something,a,b,c,d,message</span><br><span class="line">0,one,1,2,3.0,4,</span><br><span class="line">1,two,5,6,,8,world</span><br><span class="line">2,three,9,10,11.0,12,foo</span><br><span class="line"></span><br><span class="line">In [56]: data.to_csv(sys.stdout,sep=&apos;|&apos;)</span><br><span class="line">|something|a|b|c|d|message</span><br><span class="line">0|one|1|2|3.0|4|</span><br><span class="line">1|two|5|6||8|world</span><br><span class="line">2|three|9|10|11.0|12|foo</span><br><span class="line"></span><br><span class="line">In [57]: data.to_csv(sys.stdout,na_rep=&apos;NULL&apos;)</span><br><span class="line">,something,a,b,c,d,message</span><br><span class="line">0,one,1,2,3.0,4,NULL</span><br><span class="line">1,two,5,6,NULL,8,world</span><br><span class="line">2,three,9,10,11.0,12,foo</span><br><span class="line"></span><br><span class="line">In [58]: data.to_csv(sys.stdout,index=False,header=False)</span><br><span class="line">one,1,2,3.0,4,</span><br><span class="line">two,5,6,,8,world</span><br><span class="line">three,9,10,11.0,12,foo</span><br><span class="line"></span><br><span class="line">In [60]: data.to_csv(sys.stdout,index=False,columns=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">a,b,c</span><br><span class="line">1,2,3.0</span><br><span class="line">5,6,</span><br><span class="line">9,10,11.0</span><br></pre></td></tr></table></figure></p><p>Series也有<code>ro_csv</code>方法，同时Series可以使用<code>from_csv</code>读取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [61]: Series.from_csv(&apos;tseries.csv&apos;,parse_dates=True)</span><br><span class="line">Out[61]:</span><br><span class="line">2000-01-01    0</span><br><span class="line">2000-01-02    1</span><br><span class="line">2000-01-03    2</span><br><span class="line">2000-01-04    3</span><br><span class="line">2000-01-05    4</span><br><span class="line">2000-01-06    5</span><br><span class="line">2000-01-07    6</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="手工处理分隔符格式"><a href="#手工处理分隔符格式" class="headerlink" title="手工处理分隔符格式"></a>手工处理分隔符格式</h3><ul><li>CSV语支选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">delimiter</td><td style="text-align:center">用于分隔字段的单字符字符串。默认为”,”</td></tr><tr><td style="text-align:center">lineterminator</td><td style="text-align:center">用于写操作的行结束符，默认为”\r\n”。读操作将忽略此选项，它能认出跨平台的行结束符</td></tr><tr><td style="text-align:center">quotechar</td><td style="text-align:center">用于带有特殊字符(如分隔符)的字段的引用符号。默认为“””</td></tr><tr><td style="text-align:center">quoting</td><td style="text-align:center">引用约定。可选值包括csv.QUOTE_ALL(引用所有字段)、csv.QUOTE_MINIMAL(只应用带有诸如分隔符之类的特殊字符的字段)、csv.QUOTE_NONNUMERIC以及csv.QUOTE_NON(不引用)。默认为QUOTE_MINIMAL</td></tr><tr><td style="text-align:center">skipinitialspace</td><td style="text-align:center">忽略分隔符后面的空白符。默认为False</td></tr><tr><td style="text-align:center">doublequote</td><td style="text-align:center">如何处理字段内的引用符号。如果为True，则双写。</td></tr><tr><td style="text-align:center">escapechar</td><td style="text-align:center">用于调分隔符进行转义的字符串(如果quoting被设置为csv.QUOIE_NONE)。默认禁用</td></tr></tbody></table><p>对于单字符分隔符文件，可以使用Python内置<code>csv</code>模块，将任意已打开的文件或文件型对象传给<code>csv.reader</code>,对这个reader进行迭代将会为每一行产生去除引号的列表，为了是数据合乎要求，可以做一些整理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [66]: !type ex7.csv</span><br><span class="line">&quot;a&quot;,&quot;b&quot;,&quot;c&quot;</span><br><span class="line">&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</span><br><span class="line">&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</span><br><span class="line"></span><br><span class="line">In [67]: import csv</span><br><span class="line"></span><br><span class="line">In [68]: f = open(&apos;ex7.csv&apos;)</span><br><span class="line"></span><br><span class="line">In [69]: reader=csv.reader(f)</span><br><span class="line"></span><br><span class="line">In [70]: for line in reader:</span><br><span class="line">    ...:     print(line)</span><br><span class="line">    ...:</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line"></span><br><span class="line">In [66]: !type ex7.csv</span><br><span class="line">&quot;a&quot;,&quot;b&quot;,&quot;c&quot;</span><br><span class="line">&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</span><br><span class="line">&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</span><br><span class="line"></span><br><span class="line">In [67]: import csv</span><br><span class="line"></span><br><span class="line">In [68]: f = open(&apos;ex7.csv&apos;)</span><br><span class="line"></span><br><span class="line">In [69]: reader=csv.reader(f)</span><br><span class="line"></span><br><span class="line">In [70]: for line in reader:</span><br><span class="line">    ...:     print(line)</span><br><span class="line">    ...:</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br></pre></td></tr></table></figure></p><p>csv的文件有很多，可以定义<code>csv.Dialect</code>的子类定义出新格式(专门的分隔符、字符串引用约定、行结束符等)，CSV语支的参数也可以以关键字的形式提供给<code>csv.reader</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [84]: class my_dialect(csv.Dialect):</span><br><span class="line">    ...:     lineterminator = &apos;\n&apos;</span><br><span class="line">    ...:     delimiter = &apos;;&apos;</span><br><span class="line">    ...:     quotechar = &apos;&quot;&apos;</span><br><span class="line">    ...:     quoting = csv.QUOTE_MINIMAL</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [85]: reader = csv.reader(f, dialect=my_dialect)</span><br><span class="line"></span><br><span class="line">In [86]: reader = csv.reader(f,delimiter=&apos;|&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="JSON、XML和HTML"><a href="#JSON、XML和HTML" class="headerlink" title="JSON、XML和HTML"></a>JSON、XML和HTML</h3><p>关于此类文件解析可查看<a href="http://coldjune.com/2018/03/13/Python%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/">Python文本处理</a></p><h2 id="二进制数据格式"><a href="#二进制数据格式" class="headerlink" title="二进制数据格式"></a>二进制数据格式</h2><p>可以使用Python内置的pickle序列化来实现数据的二进制存储可以使用<code>pandas.read_pickle</code>函数将数据读回到Python：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [91]: frame.to_pickle(&apos;frame&apos;)</span><br><span class="line"></span><br><span class="line">In [92]: pd.read_pickle(&apos;frame&apos;)</span><br><span class="line">Out[92]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br></pre></td></tr></table></figure></p><h3 id="使用HDF5格式"><a href="#使用HDF5格式" class="headerlink" title="使用HDF5格式"></a>使用HDF5格式</h3><p>HDF5能实现高效读取磁盘上以二进制格式存储的科学依据。HDF5中HDF指的是层次性数据格式。每个HDF5文件都含有一个文件系统式的节点结构，能够存储多个数据集并支持元数据。HDF5支持多种压缩器的及时压缩，还能更高效地存储重复模式数据。对于那些非常大的无法直接放入内存的数据集，它可以高效地分块读写。Python的HDF5库有两个接口(PyTables和h5py)。</p><ul><li><p>PyTables</p><blockquote><p>PyTables抽象了HDF5的许多细节以提供多种灵活的数据容器、表索引、查询功能以及对核外计算技术的支持。</p></blockquote></li><li><p>h5py</p><blockquote><p>h5py提供了一种直接而高级的HDF5 API访问接口。</p></blockquote></li></ul><p>使用SDFStore类需要先下载<code>tables</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tables</span><br></pre></td></tr></table></figure></p><p>然后通过PyTables存储pandas对象，HDF5文件中的对象可以通过与字典一样的方式进行获取:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [101]: store[&apos;obj1&apos;] = frame</span><br><span class="line"></span><br><span class="line">In [102]: store</span><br><span class="line">Out[102]:</span><br><span class="line">&lt;class &apos;pandas.io.pytables.HDFStore&apos;&gt;</span><br><span class="line">File path: mydata.h5</span><br><span class="line">/obj1            frame        (shape-&gt;[3,5])</span><br><span class="line"></span><br><span class="line">In [103]: store[&apos;obj1&apos;]</span><br><span class="line">Out[103]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br></pre></td></tr></table></figure></p><h3 id="读取Microsoft-Excel文件"><a href="#读取Microsoft-Excel文件" class="headerlink" title="读取Microsoft Excel文件"></a>读取Microsoft Excel文件</h3><p>pandas的ExcelFile类支持读取存储在Excel 2003(或更高版本)中的表格型数据。由于ExcelFile用到了xlrd和openpyxl包，所以需要安装它们:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [104]: !pip3 install xlrd</span><br><span class="line">In [105]: !pip3 install openpyxl</span><br></pre></td></tr></table></figure></p><p>通过传入一个xls或xlsx的路径创建一个ExcelFile实例然后将存放在工作表中的数据读取到DataFrame中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [112]: xls_file = pd.ExcelFile(&apos;ex1.xlsx&apos;)</span><br><span class="line"></span><br><span class="line">In [113]: table = xls_file.parse(&apos;Sheet1&apos;)</span><br><span class="line"></span><br><span class="line">In [114]: table</span><br><span class="line">Out[114]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line">0  1   2   3   4   hello</span><br><span class="line">1  5   6   7   8   world</span><br><span class="line">2  9  10  11  12     foo</span><br></pre></td></tr></table></figure></p><h2 id="HTML和Web-API"><a href="#HTML和Web-API" class="headerlink" title="HTML和Web API"></a>HTML和Web API</h2><p>HTML和Web API相关内容查看<a href="http://coldjune.com/2018/03/06/Python-Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/">Python-We客户端和服务器</a></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库相关内容查看<a href="http://coldjune.com/2018/02/28/Python数据库编程-一/">Python数据库编程</a></p>]]></content>
    
    <summary type="html">
    
      输入输出分为几个大类：读取文本文件和其他更高效的磁盘存储格式、加载数据库中的数据，利用Web API操作网络资源
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="输入输出" scheme="http://coldjune.com/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(四)</title>
    <link href="http://coldjune.com/2018/03/20/pandas%E5%85%A5%E9%97%A8-%E5%9B%9B/"/>
    <id>http://coldjune.com/2018/03/20/pandas入门-四/</id>
    <published>2018-03-20T07:43:20.000Z</published>
    <updated>2018-03-21T11:28:45.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层次化索引"><a href="#层次化索引" class="headerlink" title="层次化索引"></a>层次化索引</h2><p>层次化索引能在一个轴上拥有多个(两个以上)索引级别，能以低纬度形式处理高纬度数据。在创建Series时，可以使用一个由列表或数组组成的列表作为索引。对于一个层次化索引的对象，选取数据子集的操作同样很简单，有时可以在”内层”中进行选取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [206]: data = Series(np.random.randn(10),index=[list(&apos;aaabbbvvdd&apos;),</span><br><span class="line">     ...:            [&apos;in1&apos;,&apos;in2&apos;,&apos;in3&apos;,&apos;in1&apos;,&apos;in2&apos;,&apos;in3&apos;,&apos;in1&apos;,&apos;in2&apos;,&apos;in2&apos;,&apos;in3&apos;]])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [207]: data</span><br><span class="line">Out[207]:</span><br><span class="line">a  in1    0.837994</span><br><span class="line">   in2    0.360445</span><br><span class="line">   in3   -0.657047</span><br><span class="line">b  in1    0.017681</span><br><span class="line">   in2   -0.577803</span><br><span class="line">   in3    0.080992</span><br><span class="line">v  in1   -0.158913</span><br><span class="line">   in2   -0.011517</span><br><span class="line">d  in2    0.632189</span><br><span class="line">   in3   -1.181628</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [208]: data[&apos;a&apos;]</span><br><span class="line">Out[208]:</span><br><span class="line">in1    0.837994</span><br><span class="line">in2    0.360445</span><br><span class="line">in3   -0.657047</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [209]: data[:,&apos;in1&apos;]</span><br><span class="line">Out[209]:</span><br><span class="line">a    0.837994</span><br><span class="line">b    0.017681</span><br><span class="line">v   -0.158913</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>层次化索引在数据重塑和基于分组的操作中非常重要，使用<code>unstack</code>方法可以将Series多层索引安排到一个DataFrame中,<code>statck</code>是其逆运算:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [210]: data.unstack()</span><br><span class="line">Out[210]:</span><br><span class="line">        in1       in2       in3</span><br><span class="line">a  0.837994  0.360445 -0.657047</span><br><span class="line">b  0.017681 -0.577803  0.080992</span><br><span class="line">d       NaN  0.632189 -1.181628</span><br><span class="line">v -0.158913 -0.011517       NaN</span><br><span class="line"></span><br><span class="line">In [211]: data.unstack().stack()</span><br><span class="line">Out[211]:</span><br><span class="line">a  in1    0.837994</span><br><span class="line">   in2    0.360445</span><br><span class="line">   in3   -0.657047</span><br><span class="line">b  in1    0.017681</span><br><span class="line">   in2   -0.577803</span><br><span class="line">   in3    0.080992</span><br><span class="line">d  in2    0.632189</span><br><span class="line">   in3   -1.181628</span><br><span class="line">v  in1   -0.158913</span><br><span class="line">   in2   -0.011517</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于一个DataFrame，每条轴都可以有分层索引，各层都可以有名字；有了列索引后可以通过其选取列分组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [213]: df = DataFrame(np.arange(16).reshape(4,4),</span><br><span class="line">     ...:                 index = [[&apos;row1&apos;,&apos;row1&apos;,&apos;row2&apos;,&apos;row2&apos;],[1,2,1,2]],</span><br><span class="line">     ...:                 columns=[[&apos;col1&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col2&apos;],[&apos;red&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;blue&apos;]])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [214]: df</span><br><span class="line">Out[214]:</span><br><span class="line">       col1      col2</span><br><span class="line">        red blue  red blue</span><br><span class="line">row1 1    0    1    2    3</span><br><span class="line">     2    4    5    6    7</span><br><span class="line">row2 1    8    9   10   11</span><br><span class="line">     2   12   13   14   15</span><br><span class="line"></span><br><span class="line">In [215]: df.index.names=[&apos;rowname1&apos;,&apos;rowname2&apos;]</span><br><span class="line"></span><br><span class="line">In [216]: df.columns.names=[&apos;colname1&apos;,&apos;colname2&apos;]</span><br><span class="line"></span><br><span class="line">In [217]: df</span><br><span class="line">Out[217]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     1           0    1    2    3</span><br><span class="line">         2           4    5    6    7</span><br><span class="line">row2     1           8    9   10   11</span><br><span class="line">         2          12   13   14   15</span><br><span class="line"></span><br><span class="line">In [218]: df[&apos;col1&apos;]</span><br><span class="line">Out[218]:</span><br><span class="line">colname2           red  blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     1           0     1</span><br><span class="line">         2           4     5</span><br><span class="line">row2     1           8     9</span><br><span class="line">         2          12    13</span><br></pre></td></tr></table></figure></p><h3 id="重排分级顺序"><a href="#重排分级顺序" class="headerlink" title="重排分级顺序"></a>重排分级顺序</h3><ul><li><p><strong>swaplevel</strong><br><code>swaplevel</code>接收两个级别编号或名称，并返回一个互换了级别的新对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [219]: df</span><br><span class="line">Out[219]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     1           0    1    2    3</span><br><span class="line">         2           4    5    6    7</span><br><span class="line">row2     1           8    9   10   11</span><br><span class="line">         2          12   13   14   15</span><br><span class="line"></span><br><span class="line">In [220]: df.swaplevel(&apos;rowname1&apos;,&apos;rowname2&apos;)</span><br><span class="line">Out[220]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line">1        row1        0    1    2    3</span><br><span class="line">2        row1        4    5    6    7</span><br><span class="line">1        row2        8    9   10   11</span><br><span class="line">2        row2       12   13   14   15</span><br></pre></td></tr></table></figure></li><li><p><strong>sort_index(level=)</strong><br><code>sort_index(level=)</code>根据单个级别中的值对数据进行排序(稳定的):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [225]: df.sort_index(level=1)</span><br><span class="line">Out[225]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     1           0    1    2    3</span><br><span class="line">row2     1           8    9   10   11</span><br><span class="line">row1     2           4    5    6    7</span><br><span class="line">row2     2          12   13   14   15</span><br><span class="line"></span><br><span class="line">In [226]: df.swaplevel(0,1).sort_index(level=0)</span><br><span class="line">Out[226]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line">1        row1        0    1    2    3</span><br><span class="line">         row2        8    9   10   11</span><br><span class="line">2        row1        4    5    6    7</span><br><span class="line">         row2       12   13   14   15</span><br></pre></td></tr></table></figure></li></ul><h3 id="根据级别汇总统计"><a href="#根据级别汇总统计" class="headerlink" title="根据级别汇总统计"></a>根据级别汇总统计</h3><p>许多对于DataFrame和Series的描述和汇总统计都有一个level选项，用于指定在某条轴上求和的级别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [225]: df.sort_index(level=1)</span><br><span class="line">Out[225]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     1           0    1    2    3</span><br><span class="line">row2     1           8    9   10   11</span><br><span class="line">row1     2           4    5    6    7</span><br><span class="line">row2     2          12   13   14   15</span><br><span class="line"></span><br><span class="line">In [226]: df.swaplevel(0,1).sort_index(level=0)</span><br><span class="line">Out[226]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line">1        row1        0    1    2    3</span><br><span class="line">         row2        8    9   10   11</span><br><span class="line">2        row1        4    5    6    7</span><br><span class="line">         row2       12   13   14   15</span><br></pre></td></tr></table></figure></p><h3 id="使用DataFrame的列"><a href="#使用DataFrame的列" class="headerlink" title="使用DataFrame的列"></a>使用DataFrame的列</h3><ul><li><p><strong>set_index</strong><br><code>set_index</code>函数将一个或多个列转换为行索引，并创建一个新的DataFrame，默认情况下用于创建索引的列会被移除，可以通过设置<code>drop=False</code>保留：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [231]: frame = DataFrame(&#123;&apos;a&apos;:range(7),&apos;b&apos;:range(7,0,-1),</span><br><span class="line">     ...:                 &apos;c&apos;:[&apos;one&apos;,&apos;one&apos;,&apos;one&apos;,&apos;two&apos;,&apos;two&apos;,&apos;two&apos;,&apos;two&apos;],</span><br><span class="line">     ...:                 &apos;d&apos;:[0,1,2,0,1,2,3]&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [232]: frame</span><br><span class="line">Out[232]:</span><br><span class="line">   a  b    c  d</span><br><span class="line">0  0  7  one  0</span><br><span class="line">1  1  6  one  1</span><br><span class="line">2  2  5  one  2</span><br><span class="line">3  3  4  two  0</span><br><span class="line">4  4  3  two  1</span><br><span class="line">5  5  2  two  2</span><br><span class="line">6  6  1  two  3</span><br><span class="line"></span><br><span class="line">In [233]: frame.set_index([&apos;c&apos;,&apos;d&apos;])</span><br><span class="line">Out[233]:</span><br><span class="line">       a  b</span><br><span class="line">c   d</span><br><span class="line">one 0  0  7</span><br><span class="line">    1  1  6</span><br><span class="line">    2  2  5</span><br><span class="line">two 0  3  4</span><br><span class="line">    1  4  3</span><br><span class="line">    2  5  2</span><br><span class="line">    3  6  1</span><br><span class="line"></span><br><span class="line">In [234]: frame.set_index([&apos;c&apos;,&apos;d&apos;],drop=False)</span><br><span class="line">Out[234]:</span><br><span class="line">       a  b    c  d</span><br><span class="line">c   d</span><br><span class="line">one 0  0  7  one  0</span><br><span class="line">    1  1  6  one  1</span><br><span class="line">    2  2  5  one  2</span><br><span class="line">two 0  3  4  two  0</span><br><span class="line">    1  4  3  two  1</span><br><span class="line">    2  5  2  two  2</span><br><span class="line">    3  6  1  two  3</span><br></pre></td></tr></table></figure></li><li><p><strong>reset_index</strong><br><code>reset_index</code>将层次化索引的级别转移到列里面，和<code>set_index</code>相反:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [236]: frame2</span><br><span class="line">Out[236]:</span><br><span class="line">       a  b</span><br><span class="line">c   d</span><br><span class="line">one 0  0  7</span><br><span class="line">    1  1  6</span><br><span class="line">    2  2  5</span><br><span class="line">two 0  3  4</span><br><span class="line">    1  4  3</span><br><span class="line">    2  5  2</span><br><span class="line">    3  6  1</span><br><span class="line"></span><br><span class="line">In [237]: frame2.reset_index()</span><br><span class="line">Out[237]:</span><br><span class="line">     c  d  a  b</span><br><span class="line">0  one  0  0  7</span><br><span class="line">1  one  1  1  6</span><br><span class="line">2  one  2  2  5</span><br><span class="line">3  two  0  3  4</span><br><span class="line">4  two  1  4  3</span><br><span class="line">5  two  2  5  2</span><br><span class="line">6  two  3  6  1</span><br></pre></td></tr></table></figure></li></ul><h2 id="整数索引"><a href="#整数索引" class="headerlink" title="整数索引"></a>整数索引</h2><p>当一个pandas对象含有类似0、1、2的索引时，很难推断出需要的是基于标签或位置的索引，为了保证良好的一致性，如果轴索引含有索引器，那么根据整数进行数据选取的操作将总是面向标签的；如果需要可靠地、不考虑索引类型的、基于位置的索引，可以使用<code>loc</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [271]: obj = Series(np.arange(3))</span><br><span class="line"></span><br><span class="line">In [272]: obj.loc[:1]</span><br><span class="line">Out[272]:</span><br><span class="line">0    0</span><br><span class="line">1    1</span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [273]: frame = DataFrame(np.arange(9).reshape(3,3),index=[2,0,1])</span><br><span class="line"></span><br><span class="line">In [274]: frame.loc[0,:]</span><br><span class="line">Out[274]:</span><br><span class="line">0    3</span><br><span class="line">1    4</span><br><span class="line">2    5</span><br><span class="line">Name: 0, dtype: int32</span><br><span class="line"></span><br><span class="line">In [275]: frame.loc[:,0]</span><br><span class="line">Out[275]:</span><br><span class="line">2    0</span><br><span class="line">0    3</span><br><span class="line">1    6</span><br><span class="line">Name: 0, dtype: int32</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      pandas入门主题的最后一点内容，关于层次化索引和整数索引及面板数据
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(三)</title>
    <link href="http://coldjune.com/2018/03/20/pandas%E5%85%A5%E9%97%A8-%E4%B8%89/"/>
    <id>http://coldjune.com/2018/03/20/pandas入门-三/</id>
    <published>2018-03-20T01:14:48.000Z</published>
    <updated>2018-03-21T11:28:45.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h2><p>pandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。</p><ul><li>约简方法的选项</li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">axis</td><td style="text-align:center">约简的轴。DataFrame的行用0，列用1</td></tr><tr><td style="text-align:center">skipna</td><td style="text-align:center">排除缺失值，默认值为True</td></tr><tr><td style="text-align:center">level</td><td style="text-align:center">如果轴是层次化索引的(即MultiIndex)，则根据level分组约简</td></tr></tbody></table><ul><li>描述和汇总统计</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">非NA值的数量</td></tr><tr><td style="text-align:center">describe</td><td style="text-align:center">针对Series或各DataFrame列计算汇总统计</td></tr><tr><td style="text-align:center">min、max</td><td style="text-align:center">计算最小值和最大值</td></tr><tr><td style="text-align:center">argmin、argmax</td><td style="text-align:center">计算能够获取到最小值和最大值的索引位置(整数)</td></tr><tr><td style="text-align:center">idxmin、idmax</td><td style="text-align:center">计算能够获取到最小值和最大值的索引值</td></tr><tr><td style="text-align:center">quantile</td><td style="text-align:center">计算样本的分位数(0到1)</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">值的总和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">值的平均值</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">指的算术中位数</td></tr><tr><td style="text-align:center">mad</td><td style="text-align:center">根据平均值计算平均绝对离差</td></tr><tr><td style="text-align:center">var</td><td style="text-align:center">样本值的方差</td></tr><tr><td style="text-align:center">std</td><td style="text-align:center">样本值的标准差</td></tr><tr><td style="text-align:center">skew</td><td style="text-align:center">样本值的偏度(三阶矩)</td></tr><tr><td style="text-align:center">kurt</td><td style="text-align:center">样本值的峰度(四阶矩)</td></tr><tr><td style="text-align:center">cumsum</td><td style="text-align:center">样本值的累计和</td></tr><tr><td style="text-align:center">cummin、cummax</td><td style="text-align:center">样本值的累计最小值和累计最大值</td></tr><tr><td style="text-align:center">cumprod</td><td style="text-align:center">样本值的累计积</td></tr><tr><td style="text-align:center">diff</td><td style="text-align:center">计算一阶差分(对时间序列有用)_</td></tr><tr><td style="text-align:center">pct_change</td><td style="text-align:center">计算百分数变化</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">In [33]: df = DataFrame([[1,np.nan],[2,3],[np.nan,np.nan],[4,5]],</span><br><span class="line">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class="line">    ...:                 columns=[&apos;one&apos;,&apos;two&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [34]: df</span><br><span class="line">Out[34]:</span><br><span class="line">   one  two</span><br><span class="line">a  1.0  NaN</span><br><span class="line">b  2.0  3.0</span><br><span class="line">c  NaN  NaN</span><br><span class="line">d  4.0  5.0</span><br><span class="line"></span><br><span class="line">In [35]: df.sum()</span><br><span class="line">Out[35]:</span><br><span class="line">one    7.0</span><br><span class="line">two    8.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [36]: df.sum(axis=1)</span><br><span class="line">Out[36]:</span><br><span class="line">a    1.0</span><br><span class="line">b    5.0</span><br><span class="line">c    NaN</span><br><span class="line">d    9.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [37]: df.mean(axis=1,skipna=False)</span><br><span class="line">Out[37]:</span><br><span class="line">a    NaN</span><br><span class="line">b    2.5</span><br><span class="line">c    NaN</span><br><span class="line">d    4.5</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [38]: df.idxmax()</span><br><span class="line">Out[38]:</span><br><span class="line">one    d</span><br><span class="line">two    d</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [39]: df.cumsum()</span><br><span class="line">Out[39]:</span><br><span class="line">   one  two</span><br><span class="line">a  1.0  NaN</span><br><span class="line">b  3.0  3.0</span><br><span class="line">c  NaN  NaN</span><br><span class="line">d  7.0  8.0</span><br></pre></td></tr></table></figure><p><code>describe</code>用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [40]: df.describe()</span><br><span class="line">Out[40]:</span><br><span class="line">            one       two</span><br><span class="line">count  3.000000  2.000000</span><br><span class="line">mean   2.333333  4.000000</span><br><span class="line">std    1.527525  1.414214</span><br><span class="line">min    1.000000  3.000000</span><br><span class="line">25%    1.500000  3.500000</span><br><span class="line">50%    2.000000  4.000000</span><br><span class="line">75%    3.000000  4.500000</span><br><span class="line">max    4.000000  5.000000</span><br><span class="line"></span><br><span class="line">In [41]: obj =Series(list(&apos;aabc&apos;)*4)</span><br><span class="line"></span><br><span class="line">In [42]: obj.describe()</span><br><span class="line">Out[42]:</span><br><span class="line">count     16</span><br><span class="line">unique     3</span><br><span class="line">top        a</span><br><span class="line">freq       8</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><h3 id="相关系数和协方差"><a href="#相关系数和协方差" class="headerlink" title="相关系数和协方差"></a>相关系数和协方差</h3><p>Series的<code>corr</code>方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用<code>cov</code>计算协方差：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [46]: obj = Series([1,2,3,4],index=list(&apos;abcd&apos;))</span><br><span class="line"></span><br><span class="line">In [47]: obj2 = Series([1,np.nan,5,6,7],index=list(&apos;acdse&apos;))</span><br><span class="line"></span><br><span class="line">In [48]: obj.corr(obj2)</span><br><span class="line">Out[48]: 1.0</span><br><span class="line"></span><br><span class="line">In [49]: obj.cov(obj2)</span><br><span class="line">Out[49]: 6.0</span><br></pre></td></tr></table></figure></p><p>DataFrame的<code>corr</code>和<code>cov</code>方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [60]: df = DataFrame(np.arange(16).reshape(4,4),</span><br><span class="line">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class="line">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [61]: df2 = DataFrame(np.arange(25).reshape(5,5),</span><br><span class="line">    ...:                 index=list(&apos;abcde&apos;),</span><br><span class="line">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;,&apos;col5&apos;])</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [62]: df</span><br><span class="line">Out[62]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     0     1     2     3</span><br><span class="line">b     4     5     6     7</span><br><span class="line">c     8     9    10    11</span><br><span class="line">d    12    13    14    15</span><br><span class="line"></span><br><span class="line">In [63]: df2</span><br><span class="line">Out[63]:</span><br><span class="line">   col1  col2  col3  col4  col5</span><br><span class="line">a     0     1     2     3     4</span><br><span class="line">b     5     6     7     8     9</span><br><span class="line">c    10    11    12    13    14</span><br><span class="line">d    15    16    17    18    19</span><br><span class="line">e    20    21    22    23    24</span><br><span class="line"></span><br><span class="line">In [64]: df.corr()</span><br><span class="line">Out[64]:</span><br><span class="line">      col1  col2  col3  col4</span><br><span class="line">col1   1.0   1.0   1.0   1.0</span><br><span class="line">col2   1.0   1.0   1.0   1.0</span><br><span class="line">col3   1.0   1.0   1.0   1.0</span><br><span class="line">col4   1.0   1.0   1.0   1.0</span><br><span class="line"></span><br><span class="line">In [65]: df.cov()</span><br><span class="line">Out[65]:</span><br><span class="line">           col1       col2       col3       col4</span><br><span class="line">col1  26.666667  26.666667  26.666667  26.666667</span><br><span class="line">col2  26.666667  26.666667  26.666667  26.666667</span><br><span class="line">col3  26.666667  26.666667  26.666667  26.666667</span><br><span class="line">col4  26.666667  26.666667  26.666667  26.666667</span><br></pre></td></tr></table></figure></p><p>利用DataFrame的<code>corrwith</code>方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [66]: df.corrwith(df2)</span><br><span class="line">Out[66]:</span><br><span class="line">col1    1.0</span><br><span class="line">col2    1.0</span><br><span class="line">col3    1.0</span><br><span class="line">col4    1.0</span><br><span class="line">col5    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [69]: df.corrwith(df2.col1)</span><br><span class="line">Out[69]:</span><br><span class="line">col1    1.0</span><br><span class="line">col2    1.0</span><br><span class="line">col3    1.0</span><br><span class="line">col4    1.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>###唯一值、值计数以及成员资格</p><ul><li>唯一值、值计数、成员资格方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">isin</td><td style="text-align:center">计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">计算Series中的唯一值数组，按发现顺序返回</td></tr><tr><td style="text-align:center">value_counts</td><td style="text-align:center">返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列</td></tr></tbody></table><p><code>unique</code>可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(<code>unique().sort()</code>)。<code>value_counts</code>用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。<code>value_counts</code>是一个顶级pandas方法，可以用于任何数组或序列；<code>isin</code>用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [78]: obj = Series(list(&apos;abbddc&apos;))</span><br><span class="line"></span><br><span class="line">In [79]: sor  = obj.unique()</span><br><span class="line"></span><br><span class="line">In [80]: sor</span><br><span class="line">Out[80]: array([&apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;], dtype=object)</span><br><span class="line"></span><br><span class="line">In [81]: sor.sort()</span><br><span class="line"></span><br><span class="line">In [82]: sor</span><br><span class="line">Out[82]: array([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=object)</span><br><span class="line"></span><br><span class="line">In [83]: obj.value_counts()</span><br><span class="line">Out[83]:</span><br><span class="line">b    2</span><br><span class="line">d    2</span><br><span class="line">c    1</span><br><span class="line">a    1</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [84]: pd.value_counts(obj.values, sort=False)</span><br><span class="line">Out[84]:</span><br><span class="line">d    2</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    1</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [85]: mask = obj.isin([&apos;a&apos;,&apos;c&apos;])</span><br><span class="line"></span><br><span class="line">In [86]: mask</span><br><span class="line">Out[86]:</span><br><span class="line">0     True</span><br><span class="line">1    False</span><br><span class="line">2    False</span><br><span class="line">3    False</span><br><span class="line">4    False</span><br><span class="line">5     True</span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [87]: obj[mask]</span><br><span class="line">Out[87]:</span><br><span class="line">0    a</span><br><span class="line">5    c</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><p>可以将<code>pandas.value_counts</code>传递给DataFrame的<code>aplly</code>函数得到DataFrame中多个相关列的柱状图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [89]: data = DataFrame(&#123;&apos;Q1&apos;:[1,3,4,4,5],</span><br><span class="line">    ...:                    &apos;Q2&apos;:[2,3,4,2,1],</span><br><span class="line">    ...:                     &apos;Q3&apos;:[4,1,4,5,6]&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [90]: data</span><br><span class="line">Out[90]:</span><br><span class="line">   Q1  Q2  Q3</span><br><span class="line">0   1   2   4</span><br><span class="line">1   3   3   1</span><br><span class="line">2   4   4   4</span><br><span class="line">3   4   2   5</span><br><span class="line">4   5   1   6</span><br><span class="line"></span><br><span class="line">In [91]: result = data.apply(pd.value_counts).fillna(0)</span><br><span class="line"></span><br><span class="line">In [92]: result</span><br><span class="line">Out[92]:</span><br><span class="line">    Q1   Q2   Q3</span><br><span class="line">1  1.0  1.0  1.0</span><br><span class="line">2  0.0  2.0  0.0</span><br><span class="line">3  1.0  1.0  0.0</span><br><span class="line">4  2.0  1.0  2.0</span><br><span class="line">5  1.0  0.0  1.0</span><br><span class="line">6  0.0  0.0  1.0</span><br></pre></td></tr></table></figure></p><h2 id="处理缺失数据"><a href="#处理缺失数据" class="headerlink" title="处理缺失数据"></a>处理缺失数据</h2><p>缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理</p><ul><li>NA处理方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">dropna</td><td style="text-align:center">根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度</td></tr><tr><td style="text-align:center">fillna</td><td style="text-align:center">用指定值或插值方法(如ffill或bfill)填充缺失数据</td></tr><tr><td style="text-align:center">isnull</td><td style="text-align:center">返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样</td></tr><tr><td style="text-align:center">notnull</td><td style="text-align:center">isnull的否定式</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [99]: obj = Series([1,np.nan,2,np.nan,4])</span><br><span class="line"></span><br><span class="line">In [100]: obj.isnull()</span><br><span class="line">Out[100]:</span><br><span class="line">0    False</span><br><span class="line">1     True</span><br><span class="line">2    False</span><br><span class="line">3     True</span><br><span class="line">4    False</span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [101]: obj[0]=None</span><br><span class="line"></span><br><span class="line">In [102]: obj.isnull()</span><br><span class="line">Out[102]:</span><br><span class="line">0     True</span><br><span class="line">1     True</span><br><span class="line">2    False</span><br><span class="line">3     True</span><br><span class="line">4    False</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h3 id="滤除缺失数据"><a href="#滤除缺失数据" class="headerlink" title="滤除缺失数据"></a>滤除缺失数据</h3><p>对于Series，<code>dropna</code>返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [104]: obj</span><br><span class="line">Out[104]:</span><br><span class="line">0    NaN</span><br><span class="line">1    NaN</span><br><span class="line">2    2.0</span><br><span class="line">3    NaN</span><br><span class="line">4    4.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [105]: obj.dropna()</span><br><span class="line">Out[105]:</span><br><span class="line">2    2.0</span><br><span class="line">4    4.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [106]: obj[obj.notnull()]</span><br><span class="line">Out[106]:</span><br><span class="line">2    2.0</span><br><span class="line">4    4.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame对象，<code>dropna</code>默认丢弃任何含有缺失值的行，传入<code>how=&#39;all&#39;</code>将只丢弃全为NA的那些行，要丢弃列需要传入<code>axis=1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [108]: data = DataFrame([[1,4,5],[1,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,2,3]])</span><br><span class="line"></span><br><span class="line">In [109]: data</span><br><span class="line">Out[109]:</span><br><span class="line">     0    1    2</span><br><span class="line">0  1.0  4.0  5.0</span><br><span class="line">1  1.0  NaN  NaN</span><br><span class="line">2  NaN  NaN  NaN</span><br><span class="line">3  NaN  2.0  3.0</span><br><span class="line"></span><br><span class="line">In [110]: data.dropna()</span><br><span class="line">Out[110]:</span><br><span class="line">     0    1    2</span><br><span class="line">0  1.0  4.0  5.0</span><br><span class="line"></span><br><span class="line">In [111]: data.dropna(how=&apos;all&apos;)</span><br><span class="line">Out[111]:</span><br><span class="line">     0    1    2</span><br><span class="line">0  1.0  4.0  5.0</span><br><span class="line">1  1.0  NaN  NaN</span><br><span class="line">3  NaN  2.0  3.0</span><br><span class="line"></span><br><span class="line">In [112]: data[3]=np.nan</span><br><span class="line"></span><br><span class="line">In [113]: data</span><br><span class="line">Out[113]:</span><br><span class="line">     0    1    2   3</span><br><span class="line">0  1.0  4.0  5.0 NaN</span><br><span class="line">1  1.0  NaN  NaN NaN</span><br><span class="line">2  NaN  NaN  NaN NaN</span><br><span class="line">3  NaN  2.0  3.0 NaN</span><br><span class="line"></span><br><span class="line">In [114]: data.dropna(axis=1,how=&apos;all&apos;)</span><br><span class="line">Out[114]:</span><br><span class="line">     0    1    2</span><br><span class="line">0  1.0  4.0  5.0</span><br><span class="line">1  1.0  NaN  NaN</span><br><span class="line">2  NaN  NaN  NaN</span><br><span class="line">3  NaN  2.0  3.0</span><br></pre></td></tr></table></figure></p><p><code>thresh</code>参数移除非NA个数小于设定值的行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [123]: df = DataFrame(np.random.randn(7,3))</span><br><span class="line"></span><br><span class="line">In [124]: df.loc[:3,1] = np.nan</span><br><span class="line"></span><br><span class="line">In [125]: df.loc[:2,2] = np.nan</span><br><span class="line"></span><br><span class="line">In [126]: df.dropna(thresh=2)</span><br><span class="line">Out[126]:</span><br><span class="line">          0         1         2</span><br><span class="line">3  0.620445       NaN -0.379638</span><br><span class="line">4 -0.642811  0.033634  0.700009</span><br><span class="line">5  0.510774  1.458027  1.247687</span><br><span class="line">6  0.614596 -1.986715 -0.378179</span><br></pre></td></tr></table></figure></p><h3 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h3><p><code>fillna</code>方法是填充缺失数据的主要函数。通过一个常数调用<code>fillna</code>将会将缺失值替换为那个常数值；通过字典调用<code>fillna</code>可以实现对不同的列填充不同的值；<code>fillna</code>默认会返回新对象，通过设置<code>inplace=True</code>可以对现有对象进行就地修改，对<code>reindex</code>有效的插值方法也可用于<code>fillna</code>:</p><ul><li>fillna函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">用于填充缺失值的标量值或字典对象</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">插值方式。如果函数调用时未指定其他参数的话，默认为“ffill”</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">待填充的轴，默认axis=0</td></tr><tr><td style="text-align:center">inplace</td><td style="text-align:center">修改调用者对象而不产生副本</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">(对于前向和后向填充)可以连续填充的最大数量</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">In [127]: df</span><br><span class="line">Out[127]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -0.293799       NaN       NaN</span><br><span class="line">1  0.728953       NaN       NaN</span><br><span class="line">2  0.573023       NaN       NaN</span><br><span class="line">3  0.620445       NaN -0.379638</span><br><span class="line">4 -0.642811  0.033634  0.700009</span><br><span class="line">5  0.510774  1.458027  1.247687</span><br><span class="line">6  0.614596 -1.986715 -0.378179</span><br><span class="line"></span><br><span class="line">In [128]: df.fillna(0)</span><br><span class="line">Out[128]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -0.293799  0.000000  0.000000</span><br><span class="line">1  0.728953  0.000000  0.000000</span><br><span class="line">2  0.573023  0.000000  0.000000</span><br><span class="line">3  0.620445  0.000000 -0.379638</span><br><span class="line">4 -0.642811  0.033634  0.700009</span><br><span class="line">5  0.510774  1.458027  1.247687</span><br><span class="line">6  0.614596 -1.986715 -0.378179</span><br><span class="line"></span><br><span class="line">In [129]: df.fillna(&#123;1:0.5, 3:-1&#125;)</span><br><span class="line">Out[129]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -0.293799  0.500000       NaN</span><br><span class="line">1  0.728953  0.500000       NaN</span><br><span class="line">2  0.573023  0.500000       NaN</span><br><span class="line">3  0.620445  0.500000 -0.379638</span><br><span class="line">4 -0.642811  0.033634  0.700009</span><br><span class="line">5  0.510774  1.458027  1.247687</span><br><span class="line">6  0.614596 -1.986715 -0.378179</span><br><span class="line"></span><br><span class="line">In [130]: _  = df.fillna(0,inplace=True)</span><br><span class="line"></span><br><span class="line">In [131]: df</span><br><span class="line">Out[131]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -0.293799  0.000000  0.000000</span><br><span class="line">1  0.728953  0.000000  0.000000</span><br><span class="line">2  0.573023  0.000000  0.000000</span><br><span class="line">3  0.620445  0.000000 -0.379638</span><br><span class="line">4 -0.642811  0.033634  0.700009</span><br><span class="line">5  0.510774  1.458027  1.247687</span><br><span class="line">6  0.614596 -1.986715 -0.378179</span><br><span class="line"></span><br><span class="line">In [138]: df = DataFrame(np.random.randn(7,3))</span><br><span class="line"></span><br><span class="line">In [139]: df.loc[3:,1] = np.nan</span><br><span class="line"></span><br><span class="line">In [140]: df.loc[2:,2] = np.nan</span><br><span class="line"></span><br><span class="line">In [141]: df</span><br><span class="line">Out[141]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -1.741073 -0.993316 -1.030055</span><br><span class="line">1  0.139948 -1.446029  0.797856</span><br><span class="line">2 -0.373251  0.505183       NaN</span><br><span class="line">3  1.179879       NaN       NaN</span><br><span class="line">4  0.764752       NaN       NaN</span><br><span class="line">5  1.405856       NaN       NaN</span><br><span class="line">6 -1.053222       NaN       NaN</span><br><span class="line"></span><br><span class="line">In [142]: df.fillna(method=&apos;ffill&apos;)</span><br><span class="line">Out[142]:</span><br><span class="line">          0         1         2</span><br><span class="line">0 -1.741073 -0.993316 -1.030055</span><br><span class="line">1  0.139948 -1.446029  0.797856</span><br><span class="line">2 -0.373251  0.505183  0.797856</span><br><span class="line">3  1.179879  0.505183  0.797856</span><br><span class="line">4  0.764752  0.505183  0.797856</span><br><span class="line">5  1.405856  0.505183  0.797856</span><br><span class="line">6 -1.053222  0.505183  0.797856</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      更高级的数学及数据处理方法
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(二)</title>
    <link href="http://coldjune.com/2018/03/19/pandas%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/03/19/pandas入门-二/</id>
    <published>2018-03-19T08:51:47.000Z</published>
    <updated>2018-03-21T11:28:45.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h3><ul><li>reindex的(插值)method选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">fffill或pad</td><td style="text-align:center">前向填充(或搬运)值</td></tr><tr><td style="text-align:center">bfill或backfill</td><td style="text-align:center">后向填充(或搬运)值</td></tr></tbody></table><ul><li>reindex函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">index</td><td style="text-align:center">用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">插值(填充)方式</td></tr><tr><td style="text-align:center">fill_value</td><td style="text-align:center">再重新索引的过程中，需要引入缺失值时使用的替代值</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">前向或后向填充时的最大填充量</td></tr><tr><td style="text-align:center">level</td><td style="text-align:center">在MultiIndex的指定级别上匹配简单索引，否则选取其子集</td></tr><tr><td style="text-align:center">copy</td><td style="text-align:center">默认为True，无论如何都复制；如果为False，则新旧相等就不复制</td></tr></tbody></table><p>pandas对象的<code>reindex</code>方法用于创建一个适应新索引的新对象，<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。<code>method</code>选项可以在重新索引时做一些插值处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">In [86]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line"></span><br><span class="line">In [87]: obj</span><br><span class="line">Out[87]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [88]: obj2 = obj.reindex([&apos;q&apos;,&apos;w&apos;,&apos;e&apos;,&apos;r&apos;])</span><br><span class="line"></span><br><span class="line">In [89]: obj2</span><br><span class="line">Out[89]:</span><br><span class="line">q   NaN</span><br><span class="line">w   NaN</span><br><span class="line">e   NaN</span><br><span class="line">r   NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [90]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;])</span><br><span class="line"></span><br><span class="line">In [91]: obj2</span><br><span class="line">Out[91]:</span><br><span class="line">a    1.0</span><br><span class="line">b    2.0</span><br><span class="line">c    3.0</span><br><span class="line">d    4.0</span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [94]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;],fill_value=0)</span><br><span class="line"></span><br><span class="line">In [95]: obj2</span><br><span class="line">Out[95]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">e    0</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [98]: obj3 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;e&apos;,&apos;f&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;)</span><br><span class="line"></span><br><span class="line">In [99]: obj3</span><br><span class="line">Out[99]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">e    4</span><br><span class="line">f    4</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame,<code>reindex</code>可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用<code>columns</code>关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [105]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class="line"></span><br><span class="line">In [106]: frame2 = frame.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line"></span><br><span class="line">In [107]: frame2</span><br><span class="line">Out[107]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">a   0.0   1.0   2.0</span><br><span class="line">b   3.0   4.0   5.0</span><br><span class="line">c   6.0   7.0   8.0</span><br><span class="line">d   NaN   NaN   NaN</span><br><span class="line"></span><br><span class="line">In [108]: frame.reindex(columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class="line">Out[108]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a    NaN     0     1     2</span><br><span class="line">b    NaN     3     4     5</span><br><span class="line">c    NaN     6     7     8</span><br><span class="line"></span><br><span class="line">In [109]: frame.reindex(index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;,columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class="line">Out[109]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a      2     0     1     2</span><br><span class="line">b      5     3     4     5</span><br><span class="line">c      8     6     7     8</span><br><span class="line">d      8     6     7     8</span><br></pre></td></tr></table></figure></p><p>利用ix的标签索引功能重新索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [111]: frame.ix[[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;]]</span><br><span class="line">Out[111]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a    NaN   0.0   1.0   2.0</span><br><span class="line">b    NaN   3.0   4.0   5.0</span><br><span class="line">c    NaN   6.0   7.0   8.0</span><br><span class="line">d    NaN   NaN   NaN   NaN</span><br></pre></td></tr></table></figure></p><h3 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h3><p>使用<code>drop</code>方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [112]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line"></span><br><span class="line">In [113]: obj.drop(&apos;a&apos;)</span><br><span class="line">Out[113]:</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [114]: obj.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class="line">Out[114]:</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [115]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class="line"></span><br><span class="line">In [116]: frame.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class="line">Out[116]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">c     6     7     8</span><br><span class="line"></span><br><span class="line">In [117]: frame.drop([&apos;col1&apos;,&apos;col2&apos;],axis=1)</span><br><span class="line">Out[117]:</span><br><span class="line">   col3</span><br><span class="line">a     2</span><br><span class="line">b     5</span><br><span class="line">c     8</span><br></pre></td></tr></table></figure></p><h3 id="索引、选取和过滤"><a href="#索引、选取和过滤" class="headerlink" title="索引、选取和过滤"></a>索引、选取和过滤</h3><p>Series索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 <strong>末端时包含的(封闭)</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">In [3]: obj = Series(np.arange(4), index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line"></span><br><span class="line">In [4]: obj</span><br><span class="line">Out[4]:</span><br><span class="line">a    0</span><br><span class="line">b    1</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [5]: obj[&apos;a&apos;]</span><br><span class="line">Out[5]: 0</span><br><span class="line"></span><br><span class="line">In [6]: obj[2:4]</span><br><span class="line">Out[6]:</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [7]: obj[&apos;c&apos;:&apos;d&apos;]</span><br><span class="line">Out[7]:</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [8]: obj[[&apos;a&apos;,&apos;d&apos;]]</span><br><span class="line">Out[8]:</span><br><span class="line">a    0</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [9]: obj[&apos;b&apos;:&apos;c&apos;]=5</span><br><span class="line"></span><br><span class="line">In [10]: obj</span><br><span class="line">Out[10]:</span><br><span class="line">a    0</span><br><span class="line">b    5</span><br><span class="line">c    5</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">In [15]: data = DataFrame(np.arange(16).reshape(4,4),</span><br><span class="line">    ...:                 index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class="line">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [16]: data</span><br><span class="line">Out[16]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     0     1     2     3</span><br><span class="line">b     4     5     6     7</span><br><span class="line">c     8     9    10    11</span><br><span class="line">d    12    13    14    15</span><br><span class="line"></span><br><span class="line">In [17]: data[&apos;col1&apos;]</span><br><span class="line">Out[17]:</span><br><span class="line">a     0</span><br><span class="line">b     4</span><br><span class="line">c     8</span><br><span class="line">d    12</span><br><span class="line">Name: col1, dtype: int64</span><br><span class="line"></span><br><span class="line">In [18]: data[[&apos;col1&apos;,&apos;col4&apos;]]</span><br><span class="line">Out[18]:</span><br><span class="line">   col1  col4</span><br><span class="line">a     0     3</span><br><span class="line">b     4     7</span><br><span class="line">c     8    11</span><br><span class="line">d    12    15</span><br><span class="line"></span><br><span class="line">In [19]: data[:2]</span><br><span class="line">Out[19]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     0     1     2     3</span><br><span class="line">b     4     5     6     7</span><br><span class="line"></span><br><span class="line">In [20]: data[data[&apos;col3&apos;]&gt;5]</span><br><span class="line">Out[20]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">b     4     5     6     7</span><br><span class="line">c     8     9    10    11</span><br><span class="line">d    12    13    14    15</span><br><span class="line"></span><br><span class="line">In [21]: data&lt;5</span><br><span class="line">Out[21]:</span><br><span class="line">    col1   col2   col3   col4</span><br><span class="line">a   True   True   True   True</span><br><span class="line">b   True  False  False  False</span><br><span class="line">c  False  False  False  False</span><br><span class="line">d  False  False  False  False</span><br><span class="line"></span><br><span class="line">In [22]: data[data&lt;5] = -5</span><br><span class="line"></span><br><span class="line">In [23]: data</span><br><span class="line">Out[23]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a    -5    -5    -5    -5</span><br><span class="line">b    -5     5     6     7</span><br><span class="line">c     8     9    10    11</span><br><span class="line">d    12    13    14    15</span><br></pre></td></tr></table></figure></p><p>为了在DataFrame的行上进行标签索引，可以通过<code>loc</code>进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [48]: data.loc[&apos;a&apos;,[&apos;col1&apos;,&apos;col2&apos;]]</span><br><span class="line">Out[48]:</span><br><span class="line">col1   -5</span><br><span class="line">col2   -5</span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"></span><br><span class="line">In [49]: data.loc[[&apos;a&apos;,&apos;d&apos;],[&apos;col1&apos;,&apos;col3&apos;]]</span><br><span class="line">Out[49]:</span><br><span class="line">   col1  col3</span><br><span class="line">a    -5    -5</span><br><span class="line">d    12    14</span><br><span class="line"></span><br><span class="line">In [50]: data.loc[data.col3&gt;5,:&apos;col3&apos;]</span><br><span class="line">Out[50]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">b    -5     5     6</span><br><span class="line">c     8     9    10</span><br><span class="line">d    12    13    14</span><br></pre></td></tr></table></figure></p><h3 id="算术运算和数据对齐"><a href="#算术运算和数据对齐" class="headerlink" title="算术运算和数据对齐"></a>算术运算和数据对齐</h3><p>pandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [55]: s1 = Series(np.arange(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line"></span><br><span class="line">In [56]: s2 = Series(np.arange(3,9),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;])</span><br><span class="line"></span><br><span class="line">In [57]: s1</span><br><span class="line">Out[57]:</span><br><span class="line">a    0</span><br><span class="line">b    1</span><br><span class="line">c    2</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [58]: s2</span><br><span class="line">Out[58]:</span><br><span class="line">a    3</span><br><span class="line">b    4</span><br><span class="line">c    5</span><br><span class="line">d    6</span><br><span class="line">e    7</span><br><span class="line">f    8</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [59]: s1+s2</span><br><span class="line">Out[59]:</span><br><span class="line">a    3.0</span><br><span class="line">b    5.0</span><br><span class="line">c    7.0</span><br><span class="line">d    NaN</span><br><span class="line">e    NaN</span><br><span class="line">f    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [65]: df1 = DataFrame(np.arange(9).reshape(3,3),columns=list(&apos;abc&apos;),</span><br><span class="line">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [66]: df2 = DataFrame(np.arange(16).reshape(4,4),columns=list(&apos;abcd&apos;),</span><br><span class="line">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [67]: df1</span><br><span class="line">Out[67]:</span><br><span class="line">      a  b  c</span><br><span class="line">row1  0  1  2</span><br><span class="line">row2  3  4  5</span><br><span class="line">row3  6  7  8</span><br><span class="line"></span><br><span class="line">In [68]: df2</span><br><span class="line">Out[68]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   0   1   2   3</span><br><span class="line">row2   4   5   6   7</span><br><span class="line">row3   8   9  10  11</span><br><span class="line">row4  12  13  14  15</span><br><span class="line"></span><br><span class="line">In [69]: df1+df2</span><br><span class="line">Out[69]:</span><br><span class="line">         a     b     c   d</span><br><span class="line">row1   0.0   2.0   4.0 NaN</span><br><span class="line">row2   7.0   9.0  11.0 NaN</span><br><span class="line">row3  14.0  16.0  18.0 NaN</span><br><span class="line">row4   NaN   NaN   NaN NaN</span><br></pre></td></tr></table></figure></p><h4 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h4><ul><li>灵活的算术方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">add</td><td style="text-align:center">用于加法(+)的方法</td></tr><tr><td style="text-align:center">sub</td><td style="text-align:center">用于减法(-)的方法</td></tr><tr><td style="text-align:center">div</td><td style="text-align:center">用于除法(/)的方法</td></tr><tr><td style="text-align:center">mul</td><td style="text-align:center">用于乘法(*)的方法</td></tr></tbody></table><p>对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [76]: df2.add(df1,fill_value=0)</span><br><span class="line">Out[76]:</span><br><span class="line">         a     b     c     d</span><br><span class="line">row1   0.0   2.0   4.0   3.0</span><br><span class="line">row2   7.0   9.0  11.0   7.0</span><br><span class="line">row3  14.0  16.0  18.0  11.0</span><br><span class="line">row4  12.0  13.0  14.0  15.0</span><br><span class="line"></span><br><span class="line">In [77]: df1.reindex(columns=df2.columns,fill_value=0)</span><br><span class="line">Out[77]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">row1  0  1  2  0</span><br><span class="line">row2  3  4  5  0</span><br><span class="line">row3  6  7  8  0</span><br></pre></td></tr></table></figure></p><h4 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h4><p>默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">In [94]: s1 = df2.loc[&apos;row1&apos;]</span><br><span class="line"></span><br><span class="line">In [95]: df2</span><br><span class="line">Out[95]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   0   1   2   3</span><br><span class="line">row2   4   5   6   7</span><br><span class="line">row3   8   9  10  11</span><br><span class="line">row4  12  13  14  15</span><br><span class="line"></span><br><span class="line">In [96]: s1</span><br><span class="line">Out[96]:</span><br><span class="line">a    0</span><br><span class="line">b    1</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">Name: row1, dtype: int64</span><br><span class="line"></span><br><span class="line">In [97]: df2-s1</span><br><span class="line">Out[97]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   0   0   0   0</span><br><span class="line">row2   4   4   4   4</span><br><span class="line">row3   8   8   8   8</span><br><span class="line">row4  12  12  12  12</span><br><span class="line"></span><br><span class="line">In [98]: s2 = Series(range(3),index=list(&apos;abf&apos;))</span><br><span class="line"></span><br><span class="line">In [99]: df2-s2</span><br><span class="line">Out[99]:</span><br><span class="line">         a     b   c   d   f</span><br><span class="line">row1   0.0   0.0 NaN NaN NaN</span><br><span class="line">row2   4.0   4.0 NaN NaN NaN</span><br><span class="line">row3   8.0   8.0 NaN NaN NaN</span><br><span class="line">row4  12.0  12.0 NaN NaN NaN</span><br><span class="line"></span><br><span class="line">In [100]: s3  = df2[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line">Out[101]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">row1  0  1  2  3</span><br><span class="line">row2  0  1  2  3</span><br><span class="line">row3  0  1  2  3</span><br><span class="line">row4  0  1  2  3</span><br></pre></td></tr></table></figure></p><h3 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h3><p>NumPy的<a href="http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0">ufuncs</a>(元素级数组方法)也可用于操作pandas对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [102]: frame = DataFrame(np.random.randn(4,3),columns=list(&apos;abc&apos;),</span><br><span class="line">     ...:                   index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [103]: frame</span><br><span class="line">Out[103]:</span><br><span class="line">             a         b         c</span><br><span class="line">row1  0.755289  0.886977 -0.984527</span><br><span class="line">row2  0.460170 -0.514393  0.180462</span><br><span class="line">row3  0.828386 -0.545317 -1.176786</span><br><span class="line">row4  0.860822 -1.659938  0.952070</span><br><span class="line"></span><br><span class="line">In [104]: np.abs(frame)</span><br><span class="line">Out[104]:</span><br><span class="line">             a         b         c</span><br><span class="line">row1  0.755289  0.886977  0.984527</span><br><span class="line">row2  0.460170  0.514393  0.180462</span><br><span class="line">row3  0.828386  0.545317  1.176786</span><br><span class="line">row4  0.860822  1.659938  0.952070</span><br></pre></td></tr></table></figure></p><p><code>apply</code>方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用<code>apply</code>方法；除标量外，传递给<code>apply</code>的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用<code>applymap</code>得到frame中各个浮点值的格式化字符串:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [112]: f = lambda x:x.max() -x.min()</span><br><span class="line"></span><br><span class="line">In [113]: frame.apply(f)</span><br><span class="line">Out[113]:</span><br><span class="line">a    0.400653</span><br><span class="line">b    2.546915</span><br><span class="line">c    2.128856</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [114]: def f(x):</span><br><span class="line">     ...:     return Series([x.min(),x.max()],index=[&apos;min&apos;,&apos;max&apos;])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [115]: frame.apply(f)</span><br><span class="line">Out[115]:</span><br><span class="line">            a         b         c</span><br><span class="line">min  0.460170 -1.659938 -1.176786</span><br><span class="line">max  0.860822  0.886977  0.952070</span><br><span class="line"></span><br><span class="line">In [116]: format = lambda x: &apos;%.2f&apos; % x</span><br><span class="line"></span><br><span class="line">In [117]: frame.applymap(format)</span><br><span class="line">Out[117]:</span><br><span class="line">         a      b      c</span><br><span class="line">row1  0.76   0.89  -0.98</span><br><span class="line">row2  0.46  -0.51   0.18</span><br><span class="line">row3  0.83  -0.55  -1.18</span><br><span class="line">row4  0.86  -1.66   0.95</span><br><span class="line"></span><br><span class="line">In [118]: frame[&apos;a&apos;].map(format)</span><br><span class="line">Out[118]:</span><br><span class="line">row1    0.76</span><br><span class="line">row2    0.46</span><br><span class="line">row3    0.83</span><br><span class="line">row4    0.86</span><br><span class="line">Name: a, dtype: object</span><br></pre></td></tr></table></figure></p><h3 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>使用<code>sort_index</code>方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置<code>ascending=False</code>来降序排序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [134]: obj = Series(range(4), index=list(&apos;dabc&apos;))</span><br><span class="line"></span><br><span class="line">In [135]: obj.sort_index()</span><br><span class="line">Out[135]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    0</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [136]: frame = DataFrame(np.arange(8).reshape((2,4)),index=[&apos;col2&apos;,&apos;col1&apos;],</span><br><span class="line">     ...:                    columns=list(&apos;badc&apos;))</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [137]: frame.sort_index()</span><br><span class="line">Out[137]:</span><br><span class="line">      b  a  d  c</span><br><span class="line">col1  4  5  6  7</span><br><span class="line">col2  0  1  2  3</span><br><span class="line"></span><br><span class="line">In [138]: frame.sort_index(axis=1)</span><br><span class="line">Out[138]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">col2  1  0  3  2</span><br><span class="line">col1  5  4  7  6</span><br><span class="line"></span><br><span class="line">In [139]: frame.sort_index(axis=1, ascending=False)</span><br><span class="line">Out[139]:</span><br><span class="line">      d  c  b  a</span><br><span class="line">col2  2  3  0  1</span><br><span class="line">col1  6  7  4  5</span><br></pre></td></tr></table></figure></p><p><code>sort_values</code>方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [144]: obj.sort_values()</span><br><span class="line">Out[144]:</span><br><span class="line">4   -3.0</span><br><span class="line">5    2.0</span><br><span class="line">0    4.0</span><br><span class="line">2    7.0</span><br><span class="line">1    NaN</span><br><span class="line">3    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [150]: frame  = DataFrame(&#123;&apos;b&apos;:[2,5,0,1],&apos;a&apos;:[0,1,0,1]&#125;)</span><br><span class="line"></span><br><span class="line">In [151]: frame</span><br><span class="line">Out[151]:</span><br><span class="line">   a  b</span><br><span class="line">0  0  2</span><br><span class="line">1  1  5</span><br><span class="line">2  0  0</span><br><span class="line">3  1  1</span><br><span class="line"></span><br><span class="line">In [152]: frame.sort_values(by=&apos;b&apos;)</span><br><span class="line">Out[152]:</span><br><span class="line">   a  b</span><br><span class="line">2  0  0</span><br><span class="line">3  1  1</span><br><span class="line">0  0  2</span><br><span class="line">1  1  5</span><br><span class="line"></span><br><span class="line">In [153]: frame.sort_values(by=[&apos;a&apos;,&apos;b&apos;])</span><br><span class="line">Out[153]:</span><br><span class="line">   a  b</span><br><span class="line">2  0  0</span><br><span class="line">0  0  2</span><br><span class="line">3  1  1</span><br><span class="line">1  1  5</span><br></pre></td></tr></table></figure></p><h4 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h4><p>排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；<code>rank</code>是通过“为各组分配一个平均排名”的方式破坏平级关系<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><ul><li>排名用于破坏平级关系的method的选项</li></ul><table><thead><tr><th style="text-align:center">method</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">‘average’</td><td style="text-align:center">默认：在相等分组中，为各个值分配平均排名</td></tr><tr><td style="text-align:center">‘min’</td><td style="text-align:center">使用整个分组的最小排名</td></tr><tr><td style="text-align:center">‘max’</td><td style="text-align:center">使用整个分组的最大排名</td></tr><tr><td style="text-align:center">‘first’</td><td style="text-align:center">按值在原始数据中的出现顺序分配排名</td></tr></tbody></table><p>按降序进行排名使用<code>ascending=False</code>，其他的相似:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class="line"></span><br><span class="line">In [10]: obj.rank()</span><br><span class="line">Out[10]:</span><br><span class="line">0    6.5</span><br><span class="line">1    5.0</span><br><span class="line">2    6.5</span><br><span class="line">3    4.0</span><br><span class="line">4    2.5</span><br><span class="line">5    2.5</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class="line">Out[11]:</span><br><span class="line">0    6.0</span><br><span class="line">1    5.0</span><br><span class="line">2    6.0</span><br><span class="line">3    4.0</span><br><span class="line">4    2.0</span><br><span class="line">5    2.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class="line">Out[12]:</span><br><span class="line">0    7.0</span><br><span class="line">1    5.0</span><br><span class="line">2    7.0</span><br><span class="line">3    4.0</span><br><span class="line">4    3.0</span><br><span class="line">5    3.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class="line">Out[13]:</span><br><span class="line">0    6.0</span><br><span class="line">1    5.0</span><br><span class="line">2    7.0</span><br><span class="line">3    4.0</span><br><span class="line">4    2.0</span><br><span class="line">5    3.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class="line"></span><br><span class="line">In [10]: obj.rank()</span><br><span class="line">Out[10]:</span><br><span class="line">0    6.5</span><br><span class="line">1    5.0</span><br><span class="line">2    6.5</span><br><span class="line">3    4.0</span><br><span class="line">4    2.5</span><br><span class="line">5    2.5</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class="line">Out[11]:</span><br><span class="line">0    6.0</span><br><span class="line">1    5.0</span><br><span class="line">2    6.0</span><br><span class="line">3    4.0</span><br><span class="line">4    2.0</span><br><span class="line">5    2.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class="line">Out[12]:</span><br><span class="line">0    7.0</span><br><span class="line">1    5.0</span><br><span class="line">2    7.0</span><br><span class="line">3    4.0</span><br><span class="line">4    3.0</span><br><span class="line">5    3.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class="line">Out[13]:</span><br><span class="line">0    6.0</span><br><span class="line">1    5.0</span><br><span class="line">2    7.0</span><br><span class="line">3    4.0</span><br><span class="line">4    2.0</span><br><span class="line">5    3.0</span><br><span class="line">6    1.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>DataFrame可以在行或列上计算排名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [15]: frame = DataFrame(&#123;&apos;b&apos;:[1,3,-1],&apos;a&apos;:[2,-1,-2],&apos;c&apos;:[1,2,3]&#125;)</span><br><span class="line"></span><br><span class="line">In [16]: frame</span><br><span class="line">Out[16]:</span><br><span class="line">   a  b  c</span><br><span class="line">0  2  1  1</span><br><span class="line">1 -1  3  2</span><br><span class="line">2 -2 -1  3</span><br><span class="line"></span><br><span class="line">In [17]: frame.rank(axis=0)</span><br><span class="line">Out[17]:</span><br><span class="line">     a    b    c</span><br><span class="line">0  3.0  2.0  1.0</span><br><span class="line">1  2.0  3.0  2.0</span><br><span class="line">2  1.0  1.0  3.0</span><br><span class="line"></span><br><span class="line">In [18]: frame.rank(axis=1)</span><br><span class="line">Out[18]:</span><br><span class="line">     a    b    c</span><br><span class="line">0  3.0  1.5  1.5</span><br><span class="line">1  1.0  3.0  2.0</span><br><span class="line">2  1.0  2.0  3.0</span><br></pre></td></tr></table></figure></p><h3 id="带有重复值的轴索引"><a href="#带有重复值的轴索引" class="headerlink" title="带有重复值的轴索引"></a>带有重复值的轴索引</h3><p>带有重复索引值的Series和DataFrame可以使用<code>is_unique</code>属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [19]: obj = Series(range(5),index=list(&apos;abbvd&apos;))</span><br><span class="line"></span><br><span class="line">In [20]: obj</span><br><span class="line">Out[20]:</span><br><span class="line">a    0</span><br><span class="line">b    1</span><br><span class="line">b    2</span><br><span class="line">v    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [21]: obj.index.is_unique</span><br><span class="line">Out[21]: False</span><br><span class="line"></span><br><span class="line">In [22]: obj[&apos;a&apos;]</span><br><span class="line">Out[22]: 0</span><br><span class="line"></span><br><span class="line">In [23]: obj[&apos;b&apos;]</span><br><span class="line">Out[23]:</span><br><span class="line">b    1</span><br><span class="line">b    2</span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [24]: df = DataFrame(np.random.randn(4,3),index=[&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line"></span><br><span class="line">In [26]: df</span><br><span class="line">Out[26]:</span><br><span class="line">          0         1         2</span><br><span class="line">a  2.139973  0.102242  0.366141</span><br><span class="line">a -0.999559  0.324575 -0.808672</span><br><span class="line">b  1.121435  1.508694  1.151597</span><br><span class="line">c  0.610592  1.623871 -1.331131</span><br><span class="line"></span><br><span class="line">In [27]: df.loc[&apos;c&apos;]</span><br><span class="line">Out[27]:</span><br><span class="line">0    0.610592</span><br><span class="line">1    1.623871</span><br><span class="line">2   -1.331131</span><br><span class="line">Name: c, dtype: float64</span><br><span class="line"></span><br><span class="line">In [28]: df.loc[&apos;a&apos;]</span><br><span class="line">Out[28]:</span><br><span class="line">          0         1         2</span><br><span class="line">a  2.139973  0.102242  0.366141</span><br><span class="line">a -0.999559  0.324575 -0.808672</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      主要记录操作Series和DataFrame中的数据的基本手段。后面将更深入地挖掘pandas在数据分析和处理方面的功能
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(一)</title>
    <link href="http://coldjune.com/2018/03/19/pandas%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/19/pandas入门-一/</id>
    <published>2018-03-19T02:48:58.000Z</published>
    <updated>2018-03-21T11:28:45.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p><strong>Series</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过<code>index</code>参数指定索引来代替自动生成的索引:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [4]: ser1 = Series([1,2,2,3])</span><br><span class="line"></span><br><span class="line">In [5]: ser1</span><br><span class="line">Out[5]:</span><br><span class="line">0    1</span><br><span class="line">1    2</span><br><span class="line">2    2</span><br><span class="line">3    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [6]: ser2 = Series([1,2,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line"></span><br><span class="line">In [7]: ser2</span><br><span class="line">Out[7]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [8]: ser2[&apos;a&apos;]</span><br><span class="line">Out[8]: 1</span><br><span class="line"></span><br><span class="line">In [9]: ser2[[&apos;a&apos;,&apos;b&apos;]]</span><br><span class="line">Out[9]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [10]: ser2*2</span><br><span class="line">Out[10]:</span><br><span class="line">a    2</span><br><span class="line">b    4</span><br><span class="line">c    4</span><br><span class="line">d    6</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [11]: ser2[ser2&gt;=2]</span><br><span class="line">Out[11]:</span><br><span class="line">b    2</span><br><span class="line">c    2</span><br><span class="line">d    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [12]: &apos;a&apos; in ser2</span><br><span class="line">Out[12]: True</span><br><span class="line"></span><br><span class="line">In [13]: &apos;g&apos; in ser2</span><br><span class="line">Out[13]: False</span><br></pre></td></tr></table></figure></p><p>可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用<code>NA</code>表示缺失数据,pandas的<code>isnull</code>和<code>notnull</code>函数可用于检测缺失数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [14]: dic = &#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;</span><br><span class="line"></span><br><span class="line">In [15]: dics = Series(dic)</span><br><span class="line"></span><br><span class="line">In [16]: dics</span><br><span class="line">Out[16]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [17]: states = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line">In [18]: dicstates = Series(dic,index=states)</span><br><span class="line"></span><br><span class="line">In [19]: dicstates</span><br><span class="line">Out[19]:</span><br><span class="line">a    1.0</span><br><span class="line">b    2.0</span><br><span class="line">c    3.0</span><br><span class="line">d    NaN</span><br></pre></td></tr></table></figure></p><p><strong>Series在算数运算中会自动对齐不同索引的数据</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [20]: dics</span><br><span class="line">Out[20]:</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [21]: dicstates</span><br><span class="line">Out[21]:</span><br><span class="line">a    1.0</span><br><span class="line">b    2.0</span><br><span class="line">c    3.0</span><br><span class="line">d    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [22]: dics+dicstates</span><br><span class="line">Out[22]:</span><br><span class="line">a    2.0</span><br><span class="line">b    4.0</span><br><span class="line">c    6.0</span><br><span class="line">d    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>Series本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [23]: dics.name=&apos;dics&apos;</span><br><span class="line"></span><br><span class="line">In [24]: dics.index.name=&apos;letter&apos;</span><br><span class="line"></span><br><span class="line">In [25]: dics</span><br><span class="line">Out[25]:</span><br><span class="line">letter</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">Name: dics, dtype: int64</span><br><span class="line"></span><br><span class="line">In [26]: dics.index=[&apos;z&apos;,&apos;x&apos;,&apos;y&apos;]</span><br><span class="line"></span><br><span class="line">In [27]: dics</span><br><span class="line">Out[27]:</span><br><span class="line">z    1</span><br><span class="line">x    2</span><br><span class="line">y    3</span><br><span class="line">Name: dics, dtype: int64</span><br></pre></td></tr></table></figure></p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><h3 id="构造DataFrame"><a href="#构造DataFrame" class="headerlink" title="构造DataFrame"></a>构造DataFrame</h3><ul><li>可以输入给DataFrame构造器的数据</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">二维ndarray</td><td style="text-align:center">数据矩阵，还可以传入行标和列标</td></tr><tr><td style="text-align:center">由数组、列标或元组组成的字典</td><td style="text-align:center">每个序列会变成DataFrame的一列，所有序列的长度必须相同</td></tr><tr><td style="text-align:center">NumPy的结构化/记录数组</td><td style="text-align:center">类似于“由数组组成的字典”</td></tr><tr><td style="text-align:center">由Series组成的字典</td><td style="text-align:center">每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引</td></tr><tr><td style="text-align:center">由字典组成的字典</td><td style="text-align:center">各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样</td></tr><tr><td style="text-align:center">字典或Series的列表</td><td style="text-align:center">各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标</td></tr><tr><td style="text-align:center">另一个DataFrame</td><td style="text-align:center">该DataFrame的索引将会被沿用，除非显式指定了其他索引</td></tr><tr><td style="text-align:center">NumPy的MaskedArray</td><td style="text-align:center">类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值</td></tr></tbody></table><p><strong>DataFrame</strong> 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。<br>构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [30]: data =&#123;&apos;state&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class="line">    ...: &apos;year&apos;:[2000,2001,2002,2003],</span><br><span class="line">    ...: &apos;pop&apos;:[1,2,3,4]&#125;</span><br><span class="line"></span><br><span class="line">In [31]: frame = DataFrame(data)</span><br><span class="line"></span><br><span class="line">In [32]: frame</span><br><span class="line">Out[32]:</span><br><span class="line">   pop state  year</span><br><span class="line">0    1     a  2000</span><br><span class="line">1    2     b  2001</span><br><span class="line">2    3     c  2002</span><br><span class="line">3    4     d  2003</span><br><span class="line"></span><br><span class="line">In [34]: DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class="line">Out[34]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  2000    1     a  NaN</span><br><span class="line">i2  2001    2     b  NaN</span><br><span class="line">i3  2002    3     c  NaN</span><br><span class="line">i4  2003    4     d  NaN</span><br><span class="line"></span><br><span class="line">In [35]: frame.columns</span><br><span class="line">Out[35]: Index([&apos;pop&apos;, &apos;state&apos;, &apos;year&apos;], dtype=&apos;object&apos;)</span><br></pre></td></tr></table></figure></p><p>可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其<code>name</code>属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [40]: frame.state</span><br><span class="line">Out[40]:</span><br><span class="line">0    a</span><br><span class="line">1    b</span><br><span class="line">2    c</span><br><span class="line">3    d</span><br><span class="line">Name: state, dtype: object</span><br><span class="line"></span><br><span class="line">In [41]: frame[&apos;year&apos;]</span><br><span class="line">Out[41]:</span><br><span class="line">0    2000</span><br><span class="line">1    2001</span><br><span class="line">2    2002</span><br><span class="line">3    2003</span><br><span class="line">Name: year, dtype: int64</span><br><span class="line"></span><br><span class="line">In [42]: frame.ix[1]</span><br><span class="line">Out[42]:</span><br><span class="line">pop         2</span><br><span class="line">state       b</span><br><span class="line">year     2001</span><br><span class="line">Name: 1, dtype: object</span><br></pre></td></tr></table></figure></p><p>列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字<code>del</code>可以删除列:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">In [49]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class="line"></span><br><span class="line">In [50]: frame2</span><br><span class="line">Out[50]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  2000    1     a  NaN</span><br><span class="line">i2  2001    2     b  NaN</span><br><span class="line">i3  2002    3     c  NaN</span><br><span class="line">i4  2003    4     d  NaN</span><br><span class="line"></span><br><span class="line">In [51]: frame2[&apos;debt&apos;]=np.arange(4.)</span><br><span class="line"></span><br><span class="line">In [52]: frame2</span><br><span class="line">Out[52]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  2000    1     a   0.0</span><br><span class="line">i2  2001    2     b   1.0</span><br><span class="line">i3  2002    3     c   2.0</span><br><span class="line">i4  2003    4     d   3.0</span><br><span class="line"></span><br><span class="line">In [53]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class="line"></span><br><span class="line">In [54]: frame2</span><br><span class="line">Out[54]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  2000    1     a  NaN</span><br><span class="line">i2  2001    2     b  NaN</span><br><span class="line">i3  2002    3     c  NaN</span><br><span class="line">i4  2003    4     d  NaN</span><br><span class="line"></span><br><span class="line">In [55]: val = Series([-1,-2,-3],index=[&apos;i1&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class="line"></span><br><span class="line">In [56]: frame2[&apos;debt&apos;]=val</span><br><span class="line"></span><br><span class="line">In [57]: frame2</span><br><span class="line">Out[57]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  2000    1     a  -1.0</span><br><span class="line">i2  2001    2     b   NaN</span><br><span class="line">i3  2002    3     c  -2.0</span><br><span class="line">i4  2003    4     d  -3.0</span><br><span class="line"></span><br><span class="line">In [58]: frame2[&apos;big&apos;]= frame2[&apos;pop&apos;]&gt;=3</span><br><span class="line"></span><br><span class="line">In [59]: frame2</span><br><span class="line">Out[59]:</span><br><span class="line">    year  pop state  debt    big</span><br><span class="line">i1  2000    1     a  -1.0  False</span><br><span class="line">i2  2001    2     b   NaN  False</span><br><span class="line">i3  2002    3     c  -2.0   True</span><br><span class="line">i4  2003    4     d  -3.0   True</span><br><span class="line"></span><br><span class="line">In [60]: del frame2[&apos;big&apos;]</span><br><span class="line"></span><br><span class="line">In [61]: frame2</span><br><span class="line">Out[61]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  2000    1     a  -1.0</span><br><span class="line">i2  2001    2     b   NaN</span><br><span class="line">i3  2002    3     c  -2.0</span><br><span class="line">i4  2003    4     d  -3.0</span><br></pre></td></tr></table></figure></p><p>嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过<code>T</code>进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [63]: pop = &#123;&apos;out1&apos;:&#123;2002:1.1,2001:1.2&#125;,</span><br><span class="line">    ...: &apos;out2&apos;:&#123;2001:1.3,2004:1.4&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [64]: frame3 = DataFrame(pop)</span><br><span class="line"></span><br><span class="line">In [65]: frame3</span><br><span class="line">Out[65]:</span><br><span class="line">      out1  out2</span><br><span class="line">2001   1.2   1.3</span><br><span class="line">2002   1.1   NaN</span><br><span class="line">2004   NaN   1.4</span><br><span class="line"></span><br><span class="line">In [66]: frame3.T</span><br><span class="line">Out[66]:</span><br><span class="line">      2001  2002  2004</span><br><span class="line">out1   1.2   1.1   NaN</span><br><span class="line">out2   1.3   NaN   1.4</span><br><span class="line"></span><br><span class="line">In [67]: DataFrame(pop,index=[2002,2001,2004])</span><br><span class="line">Out[67]:</span><br><span class="line">      out1  out2</span><br><span class="line">2002   1.1   NaN</span><br><span class="line">2001   1.2   1.3</span><br><span class="line">2004   NaN   1.4</span><br><span class="line"></span><br><span class="line">In [68]: sData = &#123;&apos;out1&apos;:frame3[&apos;out1&apos;][:-1],</span><br><span class="line">    ...: &apos;out2&apos;:frame3[&apos;out2&apos;][:-1]&#125;</span><br><span class="line"></span><br><span class="line">In [69]: DataFrame(sData)</span><br><span class="line">Out[69]:</span><br><span class="line">      out1  out2</span><br><span class="line">2001   1.2   1.3</span><br><span class="line">2002   1.1   NaN</span><br></pre></td></tr></table></figure></p><p>设置了DataFrame的<code>index</code>和<code>columns</code>的<code>name</code>属性，这些信息将会被显示出来，<code>values</code>属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [70]: frame3.index.name=&apos;year&apos;</span><br><span class="line"></span><br><span class="line">In [71]: frame3.columns.name=&apos;state&apos;</span><br><span class="line"></span><br><span class="line">In [72]: frame3</span><br><span class="line">Out[72]:</span><br><span class="line">state  out1  out2</span><br><span class="line">year</span><br><span class="line">2001    1.2   1.3</span><br><span class="line">2002    1.1   NaN</span><br><span class="line">2004    NaN   1.4</span><br><span class="line"></span><br><span class="line">In [73]: frame3.values</span><br><span class="line">Out[73]:</span><br><span class="line">array([[ 1.2,  1.3],</span><br><span class="line">       [ 1.1,  nan],</span><br><span class="line">       [ nan,  1.4]])</span><br><span class="line"></span><br><span class="line">In [74]: frame2.values</span><br><span class="line">Out[74]:</span><br><span class="line">array([[2000, 1, &apos;a&apos;, -1.0],</span><br><span class="line">       [2001, 2, &apos;b&apos;, nan],</span><br><span class="line">       [2002, 3, &apos;c&apos;, -2.0],</span><br><span class="line">       [2003, 4, &apos;d&apos;, -3.0]], dtype=object)</span><br></pre></td></tr></table></figure></p><h3 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h3><p>pandas的索引对象负责管理轴标签和其他元数据。</p><ul><li>pandas中主要的Index对象</li></ul><table><thead><tr><th style="text-align:center">类</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Index</td><td style="text-align:center">最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组</td></tr><tr><td style="text-align:center">Int64Index</td><td style="text-align:center">针对整数的特殊Index</td></tr><tr><td style="text-align:center">MultiIndex</td><td style="text-align:center">“层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组</td></tr><tr><td style="text-align:center">DatetimeIndex</td><td style="text-align:center">存储纳秒级时间戳(用NumPy的datetime64类型表示)</td></tr><tr><td style="text-align:center">PeriodIndex</td><td style="text-align:center">针对Period数据(时间间隔)的特殊Index</td></tr></tbody></table><ul><li>Index的方法和属性</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">append</td><td style="text-align:center">连接另一个Index对象，产生一个新的Index</td></tr><tr><td style="text-align:center">diff</td><td style="text-align:center">计算差集，并得到一个Index</td></tr><tr><td style="text-align:center">intersection</td><td style="text-align:center">计算交集</td></tr><tr><td style="text-align:center">union</td><td style="text-align:center">计算并集</td></tr><tr><td style="text-align:center">isin</td><td style="text-align:center">计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td style="text-align:center">delete</td><td style="text-align:center">删除索引i处的元素，并得到新的Index</td></tr><tr><td style="text-align:center">drop</td><td style="text-align:center">删除传入的值，并得到新的Index</td></tr><tr><td style="text-align:center">insert</td><td style="text-align:center">将元素插入到索引i处，并得到新的Index</td></tr><tr><td style="text-align:center">is_monotonic</td><td style="text-align:center">当各元素均大于等于前一个元素时，返回True</td></tr><tr><td style="text-align:center">is_unique</td><td style="text-align:center">当Index没有重复值时，返回True</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">计算Index中唯一值的数组</td></tr></tbody></table><p>构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 <strong>不可修改的</strong>，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [76]: obj = Series(range(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line"></span><br><span class="line">In [77]: index =obj.index</span><br><span class="line"></span><br><span class="line">In [78]: index</span><br><span class="line">Out[78]: Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], dtype=&apos;object&apos;)</span><br><span class="line"></span><br><span class="line">In [79]: index[:-1]</span><br><span class="line">Out[79]: Index([&apos;a&apos;, &apos;b&apos;], dtype=&apos;object&apos;)</span><br><span class="line"></span><br><span class="line">In [80]: inde=pd.Index(np.arange(3))</span><br><span class="line"></span><br><span class="line">In [81]: obj2=Series([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],index=inde)</span><br><span class="line"></span><br><span class="line">In [82]: obj2.index is inde</span><br><span class="line">Out[82]: True</span><br><span class="line"></span><br><span class="line">In [83]: frame3</span><br><span class="line">Out[83]:</span><br><span class="line">state  out1  out2</span><br><span class="line">year</span><br><span class="line">2001    1.2   1.3</span><br><span class="line">2002    1.1   NaN</span><br><span class="line">2004    NaN   1.4</span><br><span class="line"></span><br><span class="line">In [84]: &apos;out1&apos; in frame3.columns</span><br><span class="line">Out[84]: True</span><br><span class="line"></span><br><span class="line">In [85]: 2005 in frame3.index</span><br><span class="line">Out[85]: False</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      pandas含有使数据分析工作变得更快更简单的高级数据结构和操作工具。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>numpy基础(二)</title>
    <link href="http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/03/17/numpy基础-二/</id>
    <published>2018-03-17T03:33:50.000Z</published>
    <updated>2018-03-21T11:28:45.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。</p><ul><li>一元ufunc</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">abs、fabs</td><td style="text-align:center">计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs</td></tr><tr><td style="text-align:center">sqrt</td><td style="text-align:center">计算各元素的平方根。相当于arr**0.5</td></tr><tr><td style="text-align:center">square</td><td style="text-align:center">计算各元素的平方。相当于arr**2</td></tr><tr><td style="text-align:center">exp</td><td style="text-align:center">计算各元素的指数e^x</td></tr><tr><td style="text-align:center">log、log10、log2、log1p</td><td style="text-align:center">分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)</td></tr><tr><td style="text-align:center">sign</td><td style="text-align:center">计算各元素的正负号:1(正数)、0(零)、-1(负数)</td></tr><tr><td style="text-align:center">ceil</td><td style="text-align:center">计算各元素的ceiling值，即大于等于该值的最小整数</td></tr><tr><td style="text-align:center">floor</td><td style="text-align:center">计算各元素的floor值，即小于等于该值的最大整数</td></tr><tr><td style="text-align:center">rint</td><td style="text-align:center">将各元素四舍五入到最接近的整数，保留dtype</td></tr><tr><td style="text-align:center">modf</td><td style="text-align:center">将数组的小数和整数部分以独立数组的形式返回</td></tr><tr><td style="text-align:center">isnan</td><td style="text-align:center">返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组</td></tr><tr><td style="text-align:center">isfinite、isinf</td><td style="text-align:center">分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组</td></tr><tr><td style="text-align:center">cos、cosh、sin、sinh、tan、tanh</td><td style="text-align:center">普通型和双曲型三角函数</td></tr><tr><td style="text-align:center">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td><td style="text-align:center">反三角函数</td></tr><tr><td style="text-align:center">logical_not</td><td style="text-align:center">计算各元素not x的真值。相当于-arr</td></tr></tbody></table><ul><li>二元ufunc</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">add</td><td style="text-align:center">将数组中对应的元素相加</td></tr><tr><td style="text-align:center">subtract</td><td style="text-align:center">从第一个数组中减去第二个数组中的元素</td></tr><tr><td style="text-align:center">multiply</td><td style="text-align:center">数组元素相乘</td></tr><tr><td style="text-align:center">divide、floor_divide</td><td style="text-align:center">除法或向下圆整除法(丢弃余数)</td></tr><tr><td style="text-align:center">power</td><td style="text-align:center">对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B</td></tr><tr><td style="text-align:center">maximum、fmax</td><td style="text-align:center">元素级的最大值计算。fmax将忽略NaN</td></tr><tr><td style="text-align:center">minimum、fmin</td><td style="text-align:center">元素级的最小值计算。fmin将忽略NaN</td></tr><tr><td style="text-align:center">mod</td><td style="text-align:center">元素级的求模计算(除法的余数)</td></tr><tr><td style="text-align:center">copysign</td><td style="text-align:center">将第二个数组中的值的符号复制给第一个数组中的值</td></tr><tr><td style="text-align:center">greater、greater_equal、less、less_equal、equal、not_equal</td><td style="text-align:center">执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td style="text-align:center">logical_and、logical_or、logical_xor</td><td style="text-align:center">执行元素级的真值逻辑运算。相当于中缀运算符&amp;、&#124;、^</td></tr></tbody></table><p>许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [2]: arr  = np.arange(10)</span><br><span class="line"></span><br><span class="line">In [3]: arr</span><br><span class="line">Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">In [4]: np.sqrt(arr)</span><br><span class="line">Out[4]:</span><br><span class="line">array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,</span><br><span class="line">       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])</span><br><span class="line"></span><br><span class="line">In [5]: np.exp(arr)</span><br><span class="line">Out[5]:</span><br><span class="line">array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,</span><br><span class="line">       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,</span><br><span class="line">       2.98095799e+03, 8.10308393e+03])</span><br><span class="line"></span><br><span class="line">In [6]: x = randn(5)</span><br><span class="line"></span><br><span class="line">In [7]: y = randn(5)</span><br><span class="line"></span><br><span class="line">In [8]: x</span><br><span class="line">Out[8]:</span><br><span class="line">array([-9.27415622e-01, -1.67964296e-03, -1.91023663e+00, -1.31307986e-01,</span><br><span class="line">       -1.17927352e+00])</span><br><span class="line"></span><br><span class="line">In [9]: y</span><br><span class="line">Out[9]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br><span class="line"></span><br><span class="line">In [10]: np.maximum(x,y)</span><br><span class="line">Out[10]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br></pre></td></tr></table></figure></p><h2 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h2><p><strong>矢量化</strong>将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [11]: points = np.arange(-5, 5, 0.01)</span><br><span class="line"></span><br><span class="line">In [12]: xs, ys = np.meshgrid(points,points)</span><br><span class="line"></span><br><span class="line">In [13]: xs</span><br><span class="line">Out[13]:</span><br><span class="line">array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class="line">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class="line">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class="line">       ...,</span><br><span class="line">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class="line">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class="line">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])</span><br><span class="line"></span><br><span class="line">In [14]: z = np.sqrt(np.square(xs)+np.square(ys))</span><br><span class="line"></span><br><span class="line">In [15]: z</span><br><span class="line">Out[15]:</span><br><span class="line">array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,</span><br><span class="line">        7.06400028],</span><br><span class="line">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class="line">        7.05692568],</span><br><span class="line">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class="line">        7.04985815],</span><br><span class="line">       ...,</span><br><span class="line">       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,</span><br><span class="line">        7.04279774],</span><br><span class="line">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class="line">        7.04985815],</span><br><span class="line">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class="line">        7.05692568]])</span><br></pre></td></tr></table></figure></p><h3 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h3><p><code>np.where</code>是三元表达式<code>x if condition else y</code>的矢量化版本。<code>np.wehere</code>接受三个参数<code>cond、xarr、yarr</code>,当判定<code>cond</code>为true时选择执行<code>xarr</code>否则执行<code>yarr</code>。因此<code>np.where</code>也可以嵌套使用。<code>np.where</code>的第二个和第三个参数不必时数组，可以是标量值。<code>where</code>通常用于根据另一个数组产生新的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [23]: xarr = np.array([0.1,0.2,0.3])</span><br><span class="line"></span><br><span class="line">In [24]: yarr = np.array([1.1,1.2,1.3])</span><br><span class="line"></span><br><span class="line">In [25]: cond = np.array([True,False,True])</span><br><span class="line"></span><br><span class="line">In [26]: result = np.where(cond,xarr,yarr)</span><br><span class="line"></span><br><span class="line">In [27]: result</span><br><span class="line">Out[27]: array([0.1, 1.2, 0.3])</span><br><span class="line"></span><br><span class="line">In [28]: arr = randn(4,4)</span><br><span class="line"></span><br><span class="line">In [29]: arr</span><br><span class="line">Out[29]:</span><br><span class="line">array([[ 0.17276546, -1.27954884, -0.07326268, -2.40995669],</span><br><span class="line">       [-0.15796552, -1.85102248,  0.53499154, -0.1332765 ],</span><br><span class="line">       [ 0.81853502,  1.35768841,  1.55543773,  1.01407613],</span><br><span class="line">       [-1.05967769,  0.39289449,  0.13509303, -0.68143339]])</span><br><span class="line"></span><br><span class="line">In [30]: np.where(arr&gt;0,1,-1)</span><br><span class="line">Out[30]:</span><br><span class="line">array([[ 1, -1, -1, -1],</span><br><span class="line">       [-1, -1,  1, -1],</span><br><span class="line">       [ 1,  1,  1,  1],</span><br><span class="line">       [-1,  1,  1, -1]])</span><br><span class="line"></span><br><span class="line">In [31]: np.where(arr&gt;0,1,arr)</span><br><span class="line">Out[31]:</span><br><span class="line">array([[ 1.        , -1.27954884, -0.07326268, -2.40995669],</span><br><span class="line">       [-0.15796552, -1.85102248,  1.        , -0.1332765 ],</span><br><span class="line">       [ 1.        ,  1.        ,  1.        ,  1.        ],</span><br><span class="line">       [-1.05967769,  1.        ,  1.        , -0.68143339]])</span><br><span class="line"></span><br><span class="line">In [32]: cond2 = np.array([False,False,True])</span><br><span class="line"></span><br><span class="line">In [33]: np.where(cond&amp;cond2,0,np.where(cond,1,np.where(cond,2,3)))</span><br><span class="line">Out[33]: array([1, 3, 0])</span><br></pre></td></tr></table></figure></p><h3 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h3><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。<code>sum</code>、<code>mean</code>以及标准差<code>std</code>等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p><ul><li>基本数组统计方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">sum</td><td style="text-align:center">对数组中全部或某轴向的元素求和。零长度的数组的sum为0</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">算数平均数。零长度的数组的mean为NaN</td></tr><tr><td style="text-align:center">std、var</td><td style="text-align:center">分别为标准差和方差，自由度可调(默认为n)</td></tr><tr><td style="text-align:center">argmin、argmax</td><td style="text-align:center">分别为最大和最小元素的索引</td></tr><tr><td style="text-align:center">cumsum</td><td style="text-align:center">所有元素的累计和</td></tr><tr><td style="text-align:center">cumprod</td><td style="text-align:center">所有元素的累计积</td></tr></tbody></table><p><code>mean</code>和<code>sum</code>这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [36]: arr =  np.random.randn(5,4)</span><br><span class="line"></span><br><span class="line">In [37]: arr</span><br><span class="line">Out[37]:</span><br><span class="line">array([[-0.00502805,  0.23545272,  0.04886622, -0.46971953],</span><br><span class="line">       [-1.08918278,  1.19958904, -0.54808552, -1.60148873],</span><br><span class="line">       [-0.60059372, -0.9743709 ,  1.39660621, -0.97132217],</span><br><span class="line">       [-0.11917925,  1.99922758, -1.58943388,  1.60237969],</span><br><span class="line">       [-0.28361465, -2.57463163, -0.96786527, -0.00376026]])</span><br><span class="line"></span><br><span class="line">In [38]: arr.mean()</span><br><span class="line">Out[38]: -0.26580774446749256</span><br><span class="line"></span><br><span class="line">In [39]: np.mean(arr)</span><br><span class="line">Out[39]: -0.26580774446749256</span><br><span class="line"></span><br><span class="line">In [40]: arr.mean(axis=1)</span><br><span class="line">Out[40]: array([-0.04760716, -0.509792  , -0.28742014,  0.47324854, -0.95746796])</span><br></pre></td></tr></table></figure></p><p><code>cumsum</code>和<code>cumprod</code>之类的方法不聚合，而是产生一个由中间结果组成的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [47]: arr = np.array([[0,1,2],[3,4,5],[6,7,8]])</span><br><span class="line"></span><br><span class="line">In [48]: arr.cumsum(0)</span><br><span class="line">Out[48]:</span><br><span class="line">array([[ 0,  1,  2],</span><br><span class="line">       [ 3,  5,  7],</span><br><span class="line">       [ 9, 12, 15]])</span><br><span class="line"></span><br><span class="line">In [49]: arr.cumsum(1)</span><br><span class="line">Out[49]:</span><br><span class="line">array([[ 0,  1,  3],</span><br><span class="line">       [ 3,  7, 12],</span><br><span class="line">       [ 6, 13, 21]])</span><br><span class="line"></span><br><span class="line">In [50]: arr.cumprod(0)</span><br><span class="line">Out[50]:</span><br><span class="line">array([[ 0,  1,  2],</span><br><span class="line">       [ 0,  4, 10],</span><br><span class="line">       [ 0, 28, 80]])</span><br><span class="line"></span><br><span class="line">In [51]: arr.cumprod(1)</span><br><span class="line">Out[51]:</span><br><span class="line">array([[  0,   0,   0],</span><br><span class="line">       [  3,  12,  60],</span><br><span class="line">       [  6,  42, 336]])</span><br></pre></td></tr></table></figure></p><h3 id="用于布尔型数组的方法"><a href="#用于布尔型数组的方法" class="headerlink" title="用于布尔型数组的方法"></a>用于布尔型数组的方法</h3><p>上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以<code>sum</code>可以用来对布尔型数组中的True值计数。而<code>any</code>方法用来测试数组中是否存在一个或多个True，<code>all</code>用来检查数组中所有值是否都是True：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [52]: arr = randn(20)</span><br><span class="line"></span><br><span class="line">In [53]: (arr &gt; 0).sum()</span><br><span class="line">Out[53]: 11</span><br><span class="line"></span><br><span class="line">In [54]: bools=np.array([False,True,False])</span><br><span class="line"></span><br><span class="line">In [55]: bools.any()</span><br><span class="line">Out[55]: True</span><br><span class="line"></span><br><span class="line">In [56]: np.all(bools)</span><br><span class="line">Out[56]: False</span><br></pre></td></tr></table></figure></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>NumPy数组通过<code>sort</code>方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给<code>sort</code>。顶级方法<code>np.sort</code>返回的是数组的已排序副本，而就地排序则会修改数组本身：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [57]: arr = randn(6)</span><br><span class="line"></span><br><span class="line">In [58]: arr</span><br><span class="line">Out[58]:</span><br><span class="line">array([ 0.20563118, -0.6733116 , -1.44713961,  0.49352122,  0.73564391,</span><br><span class="line">        1.71627219])</span><br><span class="line"></span><br><span class="line">In [59]: arr.sort()</span><br><span class="line"></span><br><span class="line">In [60]: arr</span><br><span class="line">Out[60]:</span><br><span class="line">array([-1.44713961, -0.6733116 ,  0.20563118,  0.49352122,  0.73564391,</span><br><span class="line">        1.71627219])</span><br><span class="line"></span><br><span class="line">In [61]: arr = rand(5,3)</span><br><span class="line"></span><br><span class="line">In [62]: arr</span><br><span class="line">Out[62]:</span><br><span class="line">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class="line">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class="line">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class="line">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class="line">       [0.85118943, 0.18928544, 0.23857278]])</span><br><span class="line"></span><br><span class="line">In [63]: np.sort(arr,1)</span><br><span class="line">Out[63]:</span><br><span class="line">array([[0.10766187, 0.18125744, 0.46160903],</span><br><span class="line">       [0.06096776, 0.28353683, 0.34363544],</span><br><span class="line">       [0.13756835, 0.52424935, 0.78614215],</span><br><span class="line">       [0.09078996, 0.12944147, 0.95273729],</span><br><span class="line">       [0.18928544, 0.23857278, 0.85118943]])</span><br><span class="line"></span><br><span class="line">In [64]: arr</span><br><span class="line">Out[64]:</span><br><span class="line">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class="line">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class="line">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class="line">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class="line">       [0.85118943, 0.18928544, 0.23857278]])</span><br></pre></td></tr></table></figure></p><h3 id="唯一化及其他集合逻辑"><a href="#唯一化及其他集合逻辑" class="headerlink" title="唯一化及其他集合逻辑"></a>唯一化及其他集合逻辑</h3><p>NumPy提供了一些针对一维ndarray的基本集合运算。</p><ul><li>数组的集合运算</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">unique(x)</td><td style="text-align:center">计算x中的唯一元素，并返回有序结果</td></tr><tr><td style="text-align:center">intersect1d(x,y)</td><td style="text-align:center">计算x和y中的公共元素，并返回有序结果</td></tr><tr><td style="text-align:center">union1d(x,y)</td><td style="text-align:center">计算x和y的并集，并返回有序结果</td></tr><tr><td style="text-align:center">in1d(x,y)</td><td style="text-align:center">得到一个表示“x的元素是否包含于y”的布尔型数组</td></tr><tr><td style="text-align:center">setdiff1d(x,y)</td><td style="text-align:center">集合的差，即元素在x中且不在y中</td></tr><tr><td style="text-align:center">setxor1d(x,y)</td><td style="text-align:center">集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [66]: np.unique(names)</span><br><span class="line">Out[66]: array([&apos;Jim&apos;, &apos;Tom&apos;, &apos;bob&apos;], dtype=&apos;&lt;U3&apos;)</span><br></pre></td></tr></table></figure><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><h3 id="将数组以二进制格式保存到磁盘"><a href="#将数组以二进制格式保存到磁盘" class="headerlink" title="将数组以二进制格式保存到磁盘"></a>将数组以二进制格式保存到磁盘</h3><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 <em>.npy</em>的文件中。<code>np.savez</code>可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 <em>.npz</em>文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [68]: arr = np.arange(10)</span><br><span class="line"></span><br><span class="line">In [69]: np.save(&apos;arr&apos;,arr)</span><br><span class="line"></span><br><span class="line">In [70]: np.load(&apos;arr.npy&apos;)</span><br><span class="line">Out[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">In [71]: np.savez(&apos;arr_more&apos;,a=arr,b=arr)</span><br><span class="line"></span><br><span class="line">In [72]: arr_more = np.load(&apos;arr_more.npz&apos;)</span><br><span class="line"></span><br><span class="line">In [73]: arr_more[&apos;a&apos;]</span><br><span class="line">Out[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></pre></td></tr></table></figure></p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><ul><li>numpy.linalg函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">diag</td><td style="text-align:center">以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0)</td></tr><tr><td style="text-align:center">dot</td><td style="text-align:center">矩阵乘法</td></tr><tr><td style="text-align:center">trace</td><td style="text-align:center">计算对角线的和</td></tr><tr><td style="text-align:center">det</td><td style="text-align:center">计算矩阵行列式</td></tr><tr><td style="text-align:center">eig</td><td style="text-align:center">计算方阵的特征值和特征向量</td></tr><tr><td style="text-align:center">inv</td><td style="text-align:center">计算方阵的逆</td></tr><tr><td style="text-align:center">pinv</td><td style="text-align:center">计算矩阵的Moore-Penrose伪逆</td></tr><tr><td style="text-align:center">qr</td><td style="text-align:center">计算QR分解</td></tr><tr><td style="text-align:center">svd</td><td style="text-align:center">计算奇异值分解(SVD)</td></tr><tr><td style="text-align:center">solve</td><td style="text-align:center">解线性方程组Ax=b，其中A为一个方阵</td></tr><tr><td style="text-align:center">lstsq</td><td style="text-align:center">计算Ax=b的最小二乘解</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [83]: x = randn(3,3)</span><br><span class="line"></span><br><span class="line">In [84]: x</span><br><span class="line">Out[84]:</span><br><span class="line">array([[ 0.45880764, -0.90269718, -1.62963467],</span><br><span class="line">       [-0.76727739,  2.24799683,  0.65118256],</span><br><span class="line">       [ 0.43217346, -2.47319723, -0.48442667]])</span><br><span class="line"></span><br><span class="line">In [85]: mat = x.T.dot(x)</span><br><span class="line"></span><br><span class="line">In [86]: mat</span><br><span class="line">Out[86]:</span><br><span class="line">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class="line">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class="line">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class="line"></span><br><span class="line">In [87]: inv(mat)</span><br><span class="line">Out[87]:</span><br><span class="line">array([[16.03043111,  3.2650856 ,  2.97386734],</span><br><span class="line">       [ 3.2650856 ,  0.8114194 ,  0.42317945],</span><br><span class="line">       [ 2.97386734,  0.42317945,  1.08102824]])</span><br><span class="line"></span><br><span class="line">In [88]: mat</span><br><span class="line">Out[88]:</span><br><span class="line">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class="line">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class="line">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class="line"></span><br><span class="line">In [89]: mat.dot(inv(mat))</span><br><span class="line">Out[89]:</span><br><span class="line">array([[ 1.00000000e+00, -1.71619808e-16,  2.22044605e-16],</span><br><span class="line">       [ 1.06801676e-14,  1.00000000e+00,  0.00000000e+00],</span><br><span class="line">       [ 3.55271368e-15,  8.88178420e-16,  1.00000000e+00]])</span><br><span class="line"></span><br><span class="line">In [90]: q,r = qr(mat)</span><br><span class="line"></span><br><span class="line">In [91]: r</span><br><span class="line">Out[91]:</span><br><span class="line">array([[-3.65847231, 13.01900838,  5.33621718],</span><br><span class="line">       [ 0.        , -1.23249681,  1.27109691],</span><br><span class="line">       [ 0.        ,  0.        ,  0.31324131]])</span><br></pre></td></tr></table></figure><h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><ul><li>部分numpy.random函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">seed</td><td style="text-align:center">确定随机数生成器的种子</td></tr><tr><td style="text-align:center">permutation</td><td style="text-align:center">返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td style="text-align:center">shuffle</td><td style="text-align:center">对一个序列就地随机排序</td></tr><tr><td style="text-align:center">rand</td><td style="text-align:center">产生均匀分布的样本值</td></tr><tr><td style="text-align:center">randint</td><td style="text-align:center">从给定的上下限范围内随机选取整数</td></tr><tr><td style="text-align:center">randn</td><td style="text-align:center">产生正态分布(平均值为0，标准差为1)的样本值</td></tr><tr><td style="text-align:center">normal</td><td style="text-align:center">产生正态(高斯)分布的样本值</td></tr><tr><td style="text-align:center">binomial</td><td style="text-align:center">产生二项分布的样本值</td></tr><tr><td style="text-align:center">beta</td><td style="text-align:center">产生Beta分布的样本值</td></tr><tr><td style="text-align:center">chisquare</td><td style="text-align:center">产生卡方分布的样本值</td></tr><tr><td style="text-align:center">gamma</td><td style="text-align:center">产生Gamma分布的样本值</td></tr><tr><td style="text-align:center">uniform</td><td style="text-align:center">产生在[0,1）中均匀分布的样本值</td></tr></tbody></table><h3 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h3><p>使用<code>np.random</code>模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [96]: nsteps = 1000</span><br><span class="line"></span><br><span class="line">In [97]: draws = np.random.randint(0, 2, size=nsteps)</span><br><span class="line"></span><br><span class="line">In [98]: steps = np.where(draws&gt;0,1,-1)</span><br><span class="line"></span><br><span class="line">In [99]: walk = steps.cumsum()</span><br><span class="line"></span><br><span class="line">In [101]: walk.min()</span><br><span class="line">Out[101]: -24</span><br><span class="line"></span><br><span class="line">In [102]: walk.max()</span><br><span class="line">Out[102]: 9</span><br></pre></td></tr></table></figure></p><p>然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用<code>np.abs(walk)&gt;=10</code>得到一个布尔型数组，它表示的距离是否达到或超过10，使用<code>argmax</code>(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [103]: (np.abs(walk)&gt;=10).argmax()</span><br><span class="line">Out[103]: 107</span><br></pre></td></tr></table></figure></p><h3 id="一次模拟多个随机漫步"><a href="#一次模拟多个随机漫步" class="headerlink" title="一次模拟多个随机漫步"></a>一次模拟多个随机漫步</h3><p>通过给<code>numpy.random</code>函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用<code>any</code>进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用<code>argmax</code>在轴1上获取穿越时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [104]: nwalks = 5000</span><br><span class="line"></span><br><span class="line">In [105]: nsteps = 5000</span><br><span class="line"></span><br><span class="line">In [106]: draws = np.random.randint(0,2,size=(nwalks,nsteps))</span><br><span class="line"></span><br><span class="line">In [107]: steps = np.where(draws&gt;0,1,-1)</span><br><span class="line"></span><br><span class="line">In [108]: walks = steps.cumsum(1)</span><br><span class="line"></span><br><span class="line">In [109]: walks</span><br><span class="line">Out[109]:</span><br><span class="line">array([[  -1,   -2,   -1, ...,   20,   19,   18],</span><br><span class="line">       [  -1,    0,    1, ...,   16,   17,   18],</span><br><span class="line">       [  -1,    0,    1, ...,   80,   79,   78],</span><br><span class="line">       ...,</span><br><span class="line">       [   1,    2,    3, ...,    6,    5,    6],</span><br><span class="line">       [   1,    0,   -1, ..., -130, -131, -132],</span><br><span class="line">       [   1,    0,    1, ...,  -16,  -17,  -16]])</span><br><span class="line"></span><br><span class="line">In [110]: walks.max()</span><br><span class="line">Out[110]: 255</span><br><span class="line"></span><br><span class="line">In [111]: walks.min()</span><br><span class="line">Out[111]: -235</span><br><span class="line"></span><br><span class="line">In [112]: hits30 = (np.abs(walks)&gt;=30).any(1)</span><br><span class="line"></span><br><span class="line">In [113]: hits30</span><br><span class="line">Out[113]: array([ True,  True,  True, ...,  True,  True,  True])</span><br><span class="line"></span><br><span class="line">In [115]: hits30.sum()</span><br><span class="line">Out[115]: 4992</span><br><span class="line"></span><br><span class="line">In [117]: crossing_time  =(np.abs(walks[hits30])&gt;=30).argmax(1)</span><br><span class="line"></span><br><span class="line">In [118]: crossing_time.mean()</span><br><span class="line">Out[118]: 883.0564903846154</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通用函数&quot;&gt;&lt;a href=&quot;#通用函数&quot; class=&quot;headerlink&quot; title=&quot;通用函数&quot;&gt;&lt;/a&gt;通用函数&lt;/h2&gt;&lt;p&gt;通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或
      
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="http://coldjune.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>numpy基础(一)</title>
    <link href="http://coldjune.com/2018/03/16/numpy%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/16/numpy基础-一/</id>
    <published>2018-03-16T00:38:29.000Z</published>
    <updated>2018-03-21T11:28:45.105Z</updated>
    
    <content type="html"><![CDATA[<p>NumPy<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的部分功能如下：</p><ul><li>ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组</li><li>用于对数组数据进行快速运算的标准数学函数</li><li>线性代数、随机数生成及傅里叶变换功能</li><li>用于集成C、C++、Fortran等语言编写的代码的工具</li></ul><p>对于大部分数据分析应用，关注的功能集中在：</p><ul><li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算</li><li>常用的数组算法，如排序、唯一化、集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)</li><li>数据的分组运算(聚合、转换、函数应用等)</li></ul><h2 id="多维数组对象-ndarray"><a href="#多维数组对象-ndarray" class="headerlink" title="多维数组对象(ndarray)"></a>多维数组对象(ndarray)</h2><p>N维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [4]: data = np.array([[1,2,3],[3,4,5]])</span><br><span class="line"></span><br><span class="line">In [5]: data</span><br><span class="line">Out[5]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [3, 4, 5]])</span><br><span class="line"></span><br><span class="line">In [6]: data*10</span><br><span class="line">Out[6]:</span><br><span class="line">array([[10, 20, 30],</span><br><span class="line">       [30, 40, 50]])</span><br><span class="line"></span><br><span class="line">In [7]: data+data</span><br><span class="line">Out[7]:</span><br><span class="line">array([[ 2,  4,  6],</span><br><span class="line">       [ 6,  8, 10]])</span><br></pre></td></tr></table></figure></p><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><p>array函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。</p><ul><li>数组创建函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">array</td><td style="text-align:center">将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据</td></tr><tr><td style="text-align:center">asarray</td><td style="text-align:center">将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制</td></tr><tr><td style="text-align:center">arange</td><td style="text-align:center">类似于内置的range，但返回的是一个ndarray而不是列表</td></tr><tr><td style="text-align:center">ones、ones_like</td><td style="text-align:center">根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组</td></tr><tr><td style="text-align:center">zeros、zeros_like</td><td style="text-align:center">类似于ones、ones_like，产生全0数组</td></tr><tr><td style="text-align:center">empty、empty_like</td><td style="text-align:center">创建新数组，只分配内存空间但不填充任何值</td></tr><tr><td style="text-align:center">eye、identity</td><td style="text-align:center">创建一个正方的NXN单位矩阵(对角线为1，其余为0)</td></tr></tbody></table><ul><li>列表转换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [8]: arr1 = np.array([1,2,3])</span><br><span class="line"></span><br><span class="line">In [9]: arr1</span><br><span class="line">Out[9]: array([1, 2, 3])</span><br></pre></td></tr></table></figure><ul><li>嵌套序列将会被转换为一个多维数组:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [10]: arr2 = np.array([[1,2,3],[1,2,3]])</span><br><span class="line"></span><br><span class="line">In [11]: arr2</span><br><span class="line">Out[11]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [1, 2, 3]])</span><br></pre></td></tr></table></figure><p>除非显式说明，<code>np.array</code>会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [12]: arr1.dtype</span><br><span class="line">Out[12]: dtype(&apos;int32&apos;)</span><br></pre></td></tr></table></figure></p><p>除了<code>np.array</code>之外，<code>zeros</code>和<code>ones</code>可以创建指定长度或形状的全0或全1数组。<code>empty</code>可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [15]: np.zeros(10)</span><br><span class="line">Out[15]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])</span><br><span class="line"></span><br><span class="line">In [16]: np.zeros((3,2))</span><br><span class="line">Out[16]:</span><br><span class="line">array([[ 0.,  0.],</span><br><span class="line">       [ 0.,  0.],</span><br><span class="line">       [ 0.,  0.]])</span><br><span class="line"></span><br><span class="line">In [17]: np.empty((3,2,3))</span><br><span class="line">Out[17]:</span><br><span class="line">array([[[  6.23042070e-307,   4.67296746e-307,   1.69121096e-306],</span><br><span class="line">        [  1.33511290e-306,   1.15711989e-306,   1.42418987e-306]],</span><br><span class="line"></span><br><span class="line">       [[  1.37961641e-306,   1.60220528e-306,   1.24611266e-306],</span><br><span class="line">        [  9.34598925e-307,   1.24612081e-306,   1.11260755e-306]],</span><br><span class="line"></span><br><span class="line">       [[  1.60220393e-306,   1.51320640e-306,   9.34609790e-307],</span><br><span class="line">        [  1.86921279e-306,   1.24610723e-306,   0.00000000e+000]]])</span><br></pre></td></tr></table></figure></p><p><strong>使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0</strong><br><code>arange</code>是Python内置函数<code>range</code>的数组版:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [18]: np.arange(5)</span><br><span class="line">Out[18]: array([0, 1, 2, 3, 4])</span><br></pre></td></tr></table></figure></p><h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><ul><li>NumPy的数据类型</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">类型代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">int8、uint8</td><td style="text-align:center">i1、u1</td><td style="text-align:center">有符号和无符号的8位(1个字节)整型</td></tr><tr><td style="text-align:center">int16、uint16</td><td style="text-align:center">i2、u2</td><td style="text-align:center">有符号和无符号的18位(2个字节)整型</td></tr><tr><td style="text-align:center">int32、uint32</td><td style="text-align:center">i4、u4</td><td style="text-align:center">有符号和无符号的32位(4个字节)整型</td></tr><tr><td style="text-align:center">int64、uint64</td><td style="text-align:center">i8、u8</td><td style="text-align:center">有符号和无符号的64位(8个字节)整型</td></tr><tr><td style="text-align:center">float16</td><td style="text-align:center">f2</td><td style="text-align:center">半精度浮点数</td></tr><tr><td style="text-align:center">float32</td><td style="text-align:center">f4或f</td><td style="text-align:center">标准的单精度浮点数。与C的float兼容</td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">f8或d</td><td style="text-align:center">标准的双精度浮点数。与C的double和Python的float对象兼容</td></tr><tr><td style="text-align:center">float128</td><td style="text-align:center">f16或g</td><td style="text-align:center">扩展精度浮点数</td></tr><tr><td style="text-align:center">complex64、complex128、complex256</td><td style="text-align:center">c32</td><td style="text-align:center">复数</td></tr><tr><td style="text-align:center">bool</td><td style="text-align:center">?</td><td style="text-align:center">存储True和False的布尔类型</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">O</td><td style="text-align:center">Python对象类型</td></tr><tr><td style="text-align:center">string_</td><td style="text-align:center">S</td><td style="text-align:center">固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10</td></tr><tr><td style="text-align:center">unicode_</td><td style="text-align:center">U</td><td style="text-align:center">固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)</td></tr></tbody></table><p>可以再创建array对象时使用<code>dtype</code>参数设定数据类型，也可以通过<code>astype</code>方法显示转换其<code>dtype</code>,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用<code>astype</code>将其转换为数值形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [19]: arr = np.array([1.2,-3.4,5.6], dtype=&apos;f8&apos;)</span><br><span class="line"></span><br><span class="line">In [20]: arr.dtype</span><br><span class="line">Out[20]: dtype(&apos;float64&apos;)</span><br><span class="line"></span><br><span class="line">In [21]: arr.astype(np.int32)</span><br><span class="line">Out[21]: array([ 1, -3,  5])</span><br><span class="line"></span><br><span class="line">In [22]: numeric_string = np.array([&apos;1.5&apos;,&apos;2.5&apos;,&apos;1.1&apos;],dtype=np.string_)</span><br><span class="line"></span><br><span class="line">In [23]: numeric_string.astype(np.float64)</span><br><span class="line">Out[23]: array([ 1.5,  2.5,  1.1])</span><br></pre></td></tr></table></figure></p><h3 id="数组和标量之间的运算"><a href="#数组和标量之间的运算" class="headerlink" title="数组和标量之间的运算"></a>数组和标量之间的运算</h3><p><strong>矢量化</strong> 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [24]: arr = np.array([[1,1,1],[2,2,2]])</span><br><span class="line"></span><br><span class="line">In [25]: arr*arr</span><br><span class="line">Out[25]:</span><br><span class="line">array([[1, 1, 1],</span><br><span class="line">       [4, 4, 4]])</span><br><span class="line"></span><br><span class="line">In [26]: arr+arr</span><br><span class="line">Out[26]:</span><br><span class="line">array([[2, 2, 2],</span><br><span class="line">       [4, 4, 4]])</span><br></pre></td></tr></table></figure></p><p>数组和标量的运算会将标量值传播到各个元素:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [27]: 1/arr</span><br><span class="line">Out[27]:</span><br><span class="line">array([[ 1. ,  1. ,  1. ],</span><br><span class="line">       [ 0.5,  0.5,  0.5]])</span><br><span class="line"></span><br><span class="line">In [28]: arr ** 0.5</span><br><span class="line">Out[28]:</span><br><span class="line">array([[ 1.        ,  1.        ,  1.        ],</span><br><span class="line">       [ 1.41421356,  1.41421356,  1.41421356]])</span><br></pre></td></tr></table></figure></p><h3 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h3><p>将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [35]: arr = np.arange(10)</span><br><span class="line"></span><br><span class="line">In [36]: arr</span><br><span class="line">Out[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">In [37]: arr_slice = arr[2:5]</span><br><span class="line"></span><br><span class="line">In [38]: arr_slice</span><br><span class="line">Out[38]: array([2, 3, 4])</span><br><span class="line"></span><br><span class="line">In [39]: arr_slice[1:2] = 1000</span><br><span class="line"></span><br><span class="line">In [40]: arr</span><br><span class="line">Out[40]: array([   0,    1,    2, 1000,    4,    5,    6,    7,    8,    9])</span><br><span class="line"></span><br><span class="line">In [41]: arr_slice</span><br><span class="line">Out[41]: array([   2, 1000,    4])</span><br></pre></td></tr></table></figure><p>对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [42]: arr = np.array([[1,2,3],[4,5,6]])</span><br><span class="line"></span><br><span class="line">In [43]: arr</span><br><span class="line">Out[43]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [4, 5, 6]])</span><br><span class="line"></span><br><span class="line">In [44]: arr[0]</span><br><span class="line">Out[44]: array([1, 2, 3])</span><br><span class="line"></span><br><span class="line">In [45]: arr[0][1]</span><br><span class="line">Out[45]: 2</span><br><span class="line"></span><br><span class="line">In [46]: arr[0,2]</span><br><span class="line">Out[46]: 3</span><br></pre></td></tr></table></figure></p><p>对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [47]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class="line"></span><br><span class="line">In [48]: arr</span><br><span class="line">Out[48]:</span><br><span class="line">array([[[ 1,  2,  3],</span><br><span class="line">        [ 4,  5,  6]],</span><br><span class="line"></span><br><span class="line">       [[ 7,  8,  9],</span><br><span class="line">        [10, 11, 12]]])</span><br><span class="line"></span><br><span class="line">In [49]: arr[0]</span><br><span class="line">Out[49]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [4, 5, 6]])</span><br><span class="line"></span><br><span class="line">In [50]: arr[0,1]</span><br><span class="line">Out[50]: array([4, 5, 6])</span><br></pre></td></tr></table></figure></p><p>标量和数组都可以赋值给原数组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [67]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class="line"></span><br><span class="line">In [68]: arr</span><br><span class="line">Out[68]:</span><br><span class="line">array([[[ 1,  2,  3],</span><br><span class="line">        [ 4,  5,  6]],</span><br><span class="line"></span><br><span class="line">       [[ 7,  8,  9],</span><br><span class="line">        [10, 11, 12]]])</span><br><span class="line"></span><br><span class="line">In [69]: old_arr = arr[0].copy()</span><br><span class="line"></span><br><span class="line">In [70]: old_arr</span><br><span class="line">Out[70]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [4, 5, 6]])</span><br><span class="line"></span><br><span class="line">In [71]: arr[0]= 1</span><br><span class="line"></span><br><span class="line">In [72]: arr</span><br><span class="line">Out[72]:</span><br><span class="line">array([[[ 1,  1,  1],</span><br><span class="line">        [ 1,  1,  1]],</span><br><span class="line"></span><br><span class="line">       [[ 7,  8,  9],</span><br><span class="line">        [10, 11, 12]]])</span><br><span class="line"></span><br><span class="line">In [73]: arr[0] = old_arr</span><br><span class="line"></span><br><span class="line">In [74]: arr</span><br><span class="line">Out[74]:</span><br><span class="line">array([[[ 1,  2,  3],</span><br><span class="line">        [ 4,  5,  6]],</span><br><span class="line"></span><br><span class="line">       [[ 7,  8,  9],</span><br><span class="line">        [10, 11, 12]]])</span><br></pre></td></tr></table></figure></p><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><p>ndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [75]: arr2d = np.array([[1,2,3],[3,4,5]])</span><br><span class="line"></span><br><span class="line">In [76]: arr2d</span><br><span class="line">Out[76]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [3, 4, 5]])</span><br><span class="line"></span><br><span class="line">In [77]: arr2d[:2]</span><br><span class="line">Out[77]:</span><br><span class="line">array([[1, 2, 3],</span><br><span class="line">       [3, 4, 5]])</span><br><span class="line"></span><br><span class="line">In [78]: arr2d[:2,:1]</span><br><span class="line">Out[78]:</span><br><span class="line">array([[1],</span><br><span class="line">       [3]])</span><br></pre></td></tr></table></figure></p><p>同时传入索引和切片可以得到低纬度的切片:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [80]: arr2d[1,:1]</span><br><span class="line">Out[80]: array([3])</span><br></pre></td></tr></table></figure></p><p>只有<code>:</code>表示选取整个轴，可以通过这个对高纬度的进行切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [81]: arr2d[:,:1]</span><br><span class="line">Out[81]:</span><br><span class="line">array([[1],</span><br><span class="line">       [3]])</span><br></pre></td></tr></table></figure></p><p>同时对切片表达式的赋值也会扩展到整个选区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [82]: arr2d[:,:1] = 0</span><br><span class="line"></span><br><span class="line">In [83]: arr2d</span><br><span class="line">Out[83]:</span><br><span class="line">array([[0, 2, 3],</span><br><span class="line">       [0, 4, 5]])</span><br></pre></td></tr></table></figure></p><h4 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h4><p>可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回<code>True</code>对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [84]: names = np.array([&apos;bob&apos;,&apos;john&apos;,&apos;tom&apos;])</span><br><span class="line"></span><br><span class="line">In [85]: data = randn(3,6)</span><br><span class="line"></span><br><span class="line">In [86]: names</span><br><span class="line">Out[86]:</span><br><span class="line">array([&apos;bob&apos;, &apos;john&apos;, &apos;tom&apos;],</span><br><span class="line">      dtype=&apos;&lt;U4&apos;)</span><br><span class="line"></span><br><span class="line">In [87]: data</span><br><span class="line">Out[87]:</span><br><span class="line">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class="line">         0.13621489],</span><br><span class="line">       [-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class="line">        -0.48010419],</span><br><span class="line">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class="line">        -0.06341261]])</span><br><span class="line"></span><br><span class="line">In [88]: names == &apos;bob&apos;</span><br><span class="line">Out[88]: array([ True, False, False], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [90]: data[names == &apos;bob&apos;]</span><br><span class="line">Out[90]:</span><br><span class="line">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class="line">         0.13621489]])</span><br></pre></td></tr></table></figure></p><p>布尔型数组还可以和切片、整数(或整数序列)混合使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [91]: data[names == &apos;bob&apos;,2:]</span><br><span class="line">Out[91]: array([[-0.83396793,  2.53149852, -0.55033656,  0.13621489]])</span><br><span class="line"></span><br><span class="line">In [92]: data[names == &apos;bob&apos;,2]</span><br><span class="line">Out[92]: array([-0.83396793])</span><br></pre></td></tr></table></figure></p><p>要选取除某个元素以外的值，可以使用不等号(<code>!=</code>)，也可以通过<code>~</code>对条件进行否定；同时也可以使用<code>&amp;</code>(和)、<code>|</code>(或)之类的布尔运算符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [93]: data[names != &apos;bob&apos;]</span><br><span class="line">Out[93]:</span><br><span class="line">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class="line">        -0.48010419],</span><br><span class="line">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class="line">        -0.06341261]])</span><br><span class="line"></span><br><span class="line">In [95]: data[~(names == &apos;bob&apos;)]</span><br><span class="line">Out[95]:</span><br><span class="line">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class="line">        -0.48010419],</span><br><span class="line">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class="line">        -0.06341261]])</span><br><span class="line"></span><br><span class="line">In [97]: data[(names == &apos;bob&apos;)| (names==&apos;tom&apos;)]</span><br><span class="line">Out[97]:</span><br><span class="line">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class="line">         0.13621489],</span><br><span class="line">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class="line">        -0.06341261]])</span><br><span class="line"></span><br><span class="line">In [98]: data[(names == &apos;bob&apos;)&amp; (names==&apos;tom&apos;)]</span><br><span class="line">Out[98]: array([], shape=(0, 6), dtype=float64)</span><br></pre></td></tr></table></figure></p><p>通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。</p><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [102]: arr = np.empty((7,4))</span><br><span class="line"></span><br><span class="line">In [103]: for i in range(7):</span><br><span class="line">     ...:     arr[i]=i</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [104]: arr</span><br><span class="line">Out[104]:</span><br><span class="line">array([[ 0.,  0.,  0.,  0.],</span><br><span class="line">       [ 1.,  1.,  1.,  1.],</span><br><span class="line">       [ 2.,  2.,  2.,  2.],</span><br><span class="line">       [ 3.,  3.,  3.,  3.],</span><br><span class="line">       [ 4.,  4.,  4.,  4.],</span><br><span class="line">       [ 5.,  5.,  5.,  5.],</span><br><span class="line">       [ 6.,  6.,  6.,  6.]])</span><br><span class="line"></span><br><span class="line">In [105]: arr[[4,3,1,2]]</span><br><span class="line">Out[105]:</span><br><span class="line">array([[ 4.,  4.,  4.,  4.],</span><br><span class="line">       [ 3.,  3.,  3.,  3.],</span><br><span class="line">       [ 1.,  1.,  1.,  1.],</span><br><span class="line">       [ 2.,  2.,  2.,  2.]])</span><br></pre></td></tr></table></figure></p><p>使用负数索引将会从末尾开始选取行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [106]: arr[[-4,-3,-1,-2]]</span><br><span class="line">Out[106]:</span><br><span class="line">array([[ 3.,  3.,  3.,  3.],</span><br><span class="line">       [ 4.,  4.,  4.,  4.],</span><br><span class="line">       [ 6.,  6.,  6.,  6.],</span><br><span class="line">       [ 5.,  5.,  5.,  5.]])</span><br></pre></td></tr></table></figure></p><p>一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [107]: arr = np.arange(32).reshape((8,4))</span><br><span class="line"></span><br><span class="line">In [108]: arr</span><br><span class="line">Out[108]:</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15],</span><br><span class="line">       [16, 17, 18, 19],</span><br><span class="line">       [20, 21, 22, 23],</span><br><span class="line">       [24, 25, 26, 27],</span><br><span class="line">       [28, 29, 30, 31]])</span><br><span class="line"></span><br><span class="line">In [109]: arr[[1,2,3,4],[1,2,3,4]]</span><br><span class="line"></span><br><span class="line">In [110]: arr[[1,2,3,4],[0,1,2,3]]</span><br><span class="line">Out[110]: array([ 4,  9, 14, 19])</span><br></pre></td></tr></table></figure></p><p>其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [111]: arr[[1,2,3,4]][:,[0,1,2,3]]</span><br><span class="line">Out[111]:</span><br><span class="line">array([[ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15],</span><br><span class="line">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p><p>选取矩阵的另一个方法是使用<code>np.ix_</code>函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [112]: arr[np.ix_([1,2,3,4],[0,1,2,3])]</span><br><span class="line">Out[112]:</span><br><span class="line">array([[ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15],</span><br><span class="line">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p><p>花式索引总是将数据复制到新数组中。</p><h3 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h3><p>转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有<code>transpose</code>方法，还有一个特殊的<code>T</code>属性，在计算内积的时候经常需要用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [114]: arr.T</span><br><span class="line">Out[114]:</span><br><span class="line">array([[ 0,  4,  8, 12, 16, 20, 24, 28],</span><br><span class="line">       [ 1,  5,  9, 13, 17, 21, 25, 29],</span><br><span class="line">       [ 2,  6, 10, 14, 18, 22, 26, 30],</span><br><span class="line">       [ 3,  7, 11, 15, 19, 23, 27, 31]])</span><br><span class="line"></span><br><span class="line">In [115]: np.dot(arr.T, arr)</span><br><span class="line">Out[115]:</span><br><span class="line">array([[2240, 2352, 2464, 2576],</span><br><span class="line">       [2352, 2472, 2592, 2712],</span><br><span class="line">       [2464, 2592, 2720, 2848],</span><br><span class="line">       [2576, 2712, 2848, 2984]])</span><br></pre></td></tr></table></figure></p><p><code>transpose</code>需要得到一个由轴编号组成的元组才能对这些轴进行转置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [126]: arr</span><br><span class="line">Out[126]:</span><br><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">        [ 3,  4,  5]],</span><br><span class="line"></span><br><span class="line">       [[ 6,  7,  8],</span><br><span class="line">        [ 9, 10, 11]]])</span><br><span class="line"></span><br><span class="line">In [127]: arr.shape</span><br><span class="line">Out[127]: (2, 2, 3)</span><br><span class="line"></span><br><span class="line">In [128]: arr.transpose((1,2,0))</span><br><span class="line">Out[128]:</span><br><span class="line">array([[[ 0,  6],</span><br><span class="line">        [ 1,  7],</span><br><span class="line">        [ 2,  8]],</span><br><span class="line"></span><br><span class="line">       [[ 3,  9],</span><br><span class="line">        [ 4, 10],</span><br><span class="line">        [ 5, 11]]])</span><br><span class="line"></span><br><span class="line">In [129]: arr.transpose((1,0,2))</span><br><span class="line">Out[129]:</span><br><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">        [ 6,  7,  8]],</span><br><span class="line"></span><br><span class="line">       [[ 3,  4,  5],</span><br><span class="line">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p><p>上面<code>arr.shape</code>返回的结果是<em>(2,2,3)</em> 表明这是一个三维数组，形状为2x2x3,执行<code>arr.transpose((1,2,0))</code>对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[[(0,0,0), (0,0,1), (0,0,2)],</span><br><span class="line">  [(0,1,0), (0,1,1), (0,1,2)]],</span><br><span class="line">  [[(1,0,0), (1,0,1), (1,0,2)],</span><br><span class="line">  [(1,1,0), (1,1,1),(1,1,2)]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>进行轴变换之后的原下标变为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(0,0,0)-&gt;(0,0,0)</span><br><span class="line">(0,0,1)-&gt;(0,1,0)</span><br><span class="line">(0,0,2)-&gt;(0,2,0)</span><br><span class="line"></span><br><span class="line">(0,1,0)-&gt;(1,0,0)</span><br><span class="line">(0,1,1)-&gt;(1,1,0)</span><br><span class="line">(0,1,2)-&gt;(1,2,0)</span><br><span class="line"></span><br><span class="line">(1,0,0)-&gt;(0,0,1)</span><br><span class="line">(1,0,1)-&gt;(0,1,1)</span><br><span class="line">(1,0,2)-&gt;(0,2,1)</span><br><span class="line"></span><br><span class="line">(1,1,0)-&gt;(1,0,1)</span><br><span class="line">(1,1,1)-&gt;(1,1,1)</span><br><span class="line">(1,1,2)-&gt;(1,2,1)</span><br></pre></td></tr></table></figure></p><p>将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[[(0,0,0), (0,0,1)],    -&gt;  (0,0,0) ,(1,0,0) -&gt; 0,6</span><br><span class="line">  [(0,1,0), (0,1,1)],    -&gt;  (0,0,1) ,(1,0,1) -&gt; 1,7</span><br><span class="line">  [(0,2,0), (0,2,1)]],   -&gt;  (0,0,2) ,(1,0,2) -&gt; 2,8</span><br><span class="line"> [[(1,0,0), (1,0,1)],    -&gt;  (0,1,0) ,(1,1,0) -&gt; 3,9</span><br><span class="line">  [(1,1,0), (1,1,1)],    -&gt;  (0,1,1) ,(1,1,1) -&gt; 4,10</span><br><span class="line">  [(1,2,0), (1,2,1)]]    -&gt;  (0,1,2) ,(1,1,2) -&gt; 5, 11</span><br></pre></td></tr></table></figure></p><p>所以最后的数组变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[[ 0,  6],</span><br><span class="line">        [ 1,  7],</span><br><span class="line">        [ 2,  8]],</span><br><span class="line"></span><br><span class="line">       [[ 3,  9],</span><br><span class="line">        [ 4, 10],</span><br><span class="line">        [ 5, 11]]])</span><br></pre></td></tr></table></figure></p><p><code>swapaxes</code>方法需要接受一对轴编号,其返回的事源数据的视图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">        [ 3,  4,  5]],</span><br><span class="line"></span><br><span class="line">       [[ 6,  7,  8],</span><br><span class="line">        [ 9, 10, 11]]])</span><br><span class="line"></span><br><span class="line">In [138]: arr.swapaxes(0,1)</span><br><span class="line">Out[138]:</span><br><span class="line">array([[[ 0,  1,  2],</span><br><span class="line">        [ 6,  7,  8]],</span><br><span class="line"></span><br><span class="line">       [[ 3,  4,  5],</span><br><span class="line">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">NumPy将通过语句<code>import numpy as np</code>导入</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">使用副本需要显式地进行复制操作，<code>arr[1:4].copy()</code></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      NumPy(Numerical Python的简称)是高性能科学计算和数据分析的基础包。NumPy本身并没有提供多么高级的数据分析功能，理解NumPy数组及面向数组的计算将在使用Pandas之类的工具时更加高效。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="http://coldjune.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>IPython入门</title>
    <link href="http://coldjune.com/2018/03/15/IPython%E5%85%A5%E9%97%A8/"/>
    <id>http://coldjune.com/2018/03/15/IPython入门/</id>
    <published>2018-03-15T02:05:42.000Z</published>
    <updated>2018-03-21T11:28:45.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPython基础"><a href="#IPython基础" class="headerlink" title="IPython基础"></a>IPython基础</h2><p><a href="https://ipython.org/" target="_blank" rel="noopener">IPython</a>的环境需要自行安装。如果已经安装了Python，可以通过执行<code>pip install ipython</code>安装。然后只需要在命令行输入<code>ipython</code>就能启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><p>可以在IPython中执行任何Python语句，和使用Python解释器一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import numpy as np</span><br><span class="line"></span><br><span class="line">In [2]: from numpy.random import randn</span><br><span class="line"></span><br><span class="line">In [3]: data = &#123;i:randn() for i in range(10)&#125;</span><br><span class="line"></span><br><span class="line">In [4]: data</span><br><span class="line">Out[4]:</span><br><span class="line">&#123;0: -0.24193324837938815,</span><br><span class="line"> 1: 0.22563840475528563,</span><br><span class="line"> 2: 0.14465306885873513,</span><br><span class="line"> 3: 0.5076262433687561,</span><br><span class="line"> 4: 0.9067731627966235,</span><br><span class="line"> 5: 0.23827518072962814,</span><br><span class="line"> 6: 0.3233586627456586,</span><br><span class="line"> 7: 0.0327013232275763,</span><br><span class="line"> 8: -0.357340429464286,</span><br><span class="line"> 9: -1.4105691657079547&#125;</span><br><span class="line"></span><br><span class="line">In [5]:</span><br></pre></td></tr></table></figure></p><p>许多Python对象都被格式化为可读性更好的形式</p><h3 id="Tab键自动完成"><a href="#Tab键自动完成" class="headerlink" title="Tab键自动完成"></a>Tab键自动完成</h3><p>在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [5]: an_example1 = 15</span><br><span class="line"></span><br><span class="line">In [6]: an_example2 = 20</span><br><span class="line"></span><br><span class="line">In [7]: an&lt;TAB&gt;</span><br><span class="line">           an_example1               AnalogCommonProxyStub.dll</span><br><span class="line">           an_example2               and</span><br><span class="line">           any()</span><br></pre></td></tr></table></figure></p><p>也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [7]: a = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">In [8]: a.&lt;TAB&gt;</span><br><span class="line">           append()  count()   insert()  reverse()</span><br><span class="line">           clear()   extend()  pop()     sort()</span><br><span class="line">           copy()    index()   remove()</span><br></pre></td></tr></table></figure></p><p>应用在模块上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [8]: import datetime</span><br><span class="line"></span><br><span class="line">In [9]: datetime.</span><br><span class="line">                  date()        MAXYEAR       timedelta</span><br><span class="line">                  datetime      MINYEAR       timezone</span><br><span class="line">                  datetime_CAPI time()        tzinfo()</span><br></pre></td></tr></table></figure></p><p>IPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。<br>Tab键还可以找出电脑文件系统中与之匹配的东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [6]: ca&lt;TAB&gt;</span><br><span class="line">           callable()</span><br><span class="line">           %%capture</span><br><span class="line">           catchLink/</span><br></pre></td></tr></table></figure></p><p>其中 <em>catchLibk/</em> 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。</p><h3 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h3><p>在变量前面或者后面加上一个问号(<strong>?</strong>)就可以将有关该对象的一些通用信息显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [2]: b = []</span><br><span class="line"></span><br><span class="line">In [3]: b?</span><br><span class="line">Type:        list</span><br><span class="line">String form: []</span><br><span class="line">Length:      0</span><br><span class="line">Docstring:</span><br><span class="line">list() -&gt; new empty list</span><br><span class="line">list(iterable) -&gt; new list initialized from iterable&apos;s items</span><br></pre></td></tr></table></figure></p><p>如果该对象是一个函数或实例方法，则其docstring也会被显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [4]: def add_number(a,b):</span><br><span class="line">   ...:     &quot;&quot;&quot;</span><br><span class="line">   ...:     Add two numbers together</span><br><span class="line">   ...:     Returns</span><br><span class="line">   ...:     -----------------------</span><br><span class="line">   ...:     the sum: type of arguments</span><br><span class="line">   ...:     &quot;&quot;&quot;</span><br><span class="line">   ...:     return a+b</span><br><span class="line">   ...:</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [5]: add_number?</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Docstring:</span><br><span class="line">Add two numbers together</span><br><span class="line">Returns</span><br><span class="line">-----------------------</span><br><span class="line">the sum: type of arguments</span><br><span class="line">File:      d:\python\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p>使用<code>??</code>还将显示源代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [6]: add_number??</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Source:</span><br><span class="line">def add_number(a,b):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Add two numbers together</span><br><span class="line">    Returns</span><br><span class="line">    -----------------------</span><br><span class="line">    the sum: type of arguments</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return a+b</span><br><span class="line">File:      d:\python\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p><code>?</code>还可以搜索IPython的命名空间，一些字符再配以通配符(*)即可显示出所有与该通配符表达式相匹配的名称:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [7]: import numpy as np</span><br><span class="line"></span><br><span class="line">In [8]: np.*load*?</span><br><span class="line">np.__loader__</span><br><span class="line">np.load</span><br><span class="line">np.loads</span><br><span class="line">np.loadtxt</span><br><span class="line">np.pkgload</span><br></pre></td></tr></table></figure></p><h3 id="run命令"><a href="#run命令" class="headerlink" title="%run命令"></a>%run命令</h3><p>在IPython会话环境中，所有文件都可以通过<code>%run</code>命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x+y) /z</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [9]: %run ipython_script_test.py</span><br><span class="line"></span><br><span class="line">In [10]: result</span><br><span class="line">Out[10]: 1.0</span><br><span class="line"></span><br><span class="line">In [11]: a</span><br><span class="line">Out[11]: 1</span><br></pre></td></tr></table></figure></p><h3 id="中断正在执行的代码"><a href="#中断正在执行的代码" class="headerlink" title="中断正在执行的代码"></a>中断正在执行的代码</h3><p>任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。</p><h3 id="执行剪切板中的代码"><a href="#执行剪切板中的代码" class="headerlink" title="执行剪切板中的代码"></a>执行剪切板中的代码</h3><p>使用<code>%paste</code>和<code>%cpaste</code>两个魔术函数粘贴代码在shell中以整体执行：</p><ul><li>%paste</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [12]: %paste</span><br><span class="line">def f(x, y, z):</span><br><span class="line">    return (x+y) /z</span><br><span class="line"></span><br><span class="line">a = 1</span><br><span class="line">b = 2</span><br><span class="line">c = 3</span><br><span class="line">result = f(a, b, c)</span><br><span class="line">## -- End pasted text --</span><br></pre></td></tr></table></figure><ul><li>%cpaste</li></ul><p>相比于<code>%paste</code>，<code>%cpaste</code>多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [16]: %cpaste</span><br><span class="line">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class="line">:def f(x, y, z):</span><br><span class="line">:    return (x+y) /z</span><br><span class="line">:</span><br><span class="line">:a = 1</span><br><span class="line">:b = 2</span><br><span class="line">:c = 3</span><br><span class="line">:result = f(a, b, c)</span><br><span class="line">:--</span><br></pre></td></tr></table></figure></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>IPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(<strong>C指代Ctrl或control</strong>)：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">C-P或上箭头</td><td style="text-align:center">后向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-N或下箭头</td><td style="text-align:center">前向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-R</td><td style="text-align:center">按行读取的反向历史搜索(部分匹配)</td></tr><tr><td style="text-align:center">C-Shift-V/Command-Shift-V</td><td style="text-align:center">从剪切板粘贴文本</td></tr><tr><td style="text-align:center">C-C</td><td style="text-align:center">终止当前正在执行的代码</td></tr><tr><td style="text-align:center">C-A</td><td style="text-align:center">将光标移动到行首</td></tr><tr><td style="text-align:center">C-E</td><td style="text-align:center">将光标移动到行尾</td></tr><tr><td style="text-align:center">C-K</td><td style="text-align:center">删除从光标开始至行尾的文本</td></tr><tr><td style="text-align:center">C-U</td><td style="text-align:center">清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本)</td></tr><tr><td style="text-align:center">C-F</td><td style="text-align:center">将光标向前移动一个字符</td></tr><tr><td style="text-align:center">C-b</td><td style="text-align:center">将光标向后移动一个字符</td></tr><tr><td style="text-align:center">C-L</td><td style="text-align:center">清屏</td></tr></tbody></table><h3 id="异常和跟踪"><a href="#异常和跟踪" class="headerlink" title="异常和跟踪"></a>异常和跟踪</h3><p>如果<code>%run</code>某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [17]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py in &lt;module&gt;()</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py in f(x, y, z)</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><h3 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h3><p>IPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 <code>%</code> 为前缀的命令。例如通过<code>%timeit</code>检测任何Python语句的执行时间:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [41]: a = np.random.randn(100,100)</span><br><span class="line"></span><br><span class="line">In [42]: %timeit np.dot(a,a)</span><br><span class="line">237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure></p><p>魔术命令可以看做运行于IPython系统中的命令行程序，使用<code>?</code>即可查看其选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [44]: %reset?</span><br><span class="line">Docstring:</span><br><span class="line">Resets the namespace by removing all names defined by the user, if</span><br><span class="line">called without arguments, or by removing some types of objects, such</span><br><span class="line">as everything currently in IPython&apos;s In[] and Out[] containers (see</span><br><span class="line">the parameters for details).</span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">----------</span><br><span class="line">-f : force reset without asking for confirmation.</span><br><span class="line"></span><br><span class="line">-s : &apos;Soft&apos; reset: Only clears your namespace, leaving history intact.</span><br><span class="line">    References to objects may be kept. By default (without this option),</span><br><span class="line">    we do a &apos;hard&apos; reset, giving you a new session and removing all</span><br><span class="line">    references to objects from the current session.</span><br><span class="line"></span><br><span class="line">in : reset input history</span><br><span class="line"></span><br><span class="line">out : reset output history</span><br><span class="line"></span><br><span class="line">dhist : reset directory history</span><br><span class="line"></span><br><span class="line">array : reset only variables that are NumPy arrays</span><br><span class="line"></span><br><span class="line">See Also</span><br><span class="line">--------</span><br><span class="line">reset_selective : invoked as ``%reset_selective``</span><br><span class="line"></span><br><span class="line">Examples</span><br><span class="line">--------</span><br><span class="line">::</span><br><span class="line"></span><br><span class="line">  In [6]: a = 1</span><br><span class="line"></span><br><span class="line">  In [7]: a</span><br><span class="line">  Out[7]: 1</span><br><span class="line"></span><br><span class="line">  In [8]: &apos;a&apos; in _ip.user_ns</span><br><span class="line">  Out[8]: True</span><br></pre></td></tr></table></figure></p><p>魔术命令可以不带百分号使用，只要没有定义与其同名的变量。</p><ul><li>常用的魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%quickref</td><td style="text-align:center">显示Python的快速参考</td></tr><tr><td style="text-align:center">%magic</td><td style="text-align:center">显示所有魔术命令的详细文档</td></tr><tr><td style="text-align:center">%debug</td><td style="text-align:center">从最新的异常跟踪的底部进入交互式调试器</td></tr><tr><td style="text-align:center">%hist</td><td style="text-align:center">打印命令的输入(可选输出)历史</td></tr><tr><td style="text-align:center">%pdb</td><td style="text-align:center">在异常发生后自动进入调试器</td></tr><tr><td style="text-align:center">%paste</td><td style="text-align:center">执行剪切板中的Python代码</td></tr><tr><td style="text-align:center">%cpaste</td><td style="text-align:center">打开一个特殊提示符以便手工粘贴待执行的Python代码</td></tr><tr><td style="text-align:center">%reset</td><td style="text-align:center">删除interactive命名空间的全部变量/名称</td></tr><tr><td style="text-align:center">%page OBJECT</td><td style="text-align:center">通过分页器打印输出OBJECT</td></tr><tr><td style="text-align:center">%run script.py</td><td style="text-align:center">在IPython中执行一个Python脚本文件</td></tr><tr><td style="text-align:center">%prun statement</td><td style="text-align:center">通过cProfile执行statement，并打印分析器的输出结果</td></tr><tr><td style="text-align:center">%time statement</td><td style="text-align:center">报告statement的执行时间</td></tr><tr><td style="text-align:center">%timeit statement</td><td style="text-align:center">多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用</td></tr><tr><td style="text-align:center">%who、%who_is、%whos</td><td style="text-align:center">显示interactive命名空间中定义的变量，信息级别/冗余度可变</td></tr><tr><td style="text-align:center">%xdel variable</td><td style="text-align:center">删除variable，并参加过时清除其在IPython中的对象上的一切引用</td></tr></tbody></table><h3 id="matplotlib集成与pylab模式"><a href="#matplotlib集成与pylab模式" class="headerlink" title="matplotlib集成与pylab模式"></a>matplotlib集成与pylab模式</h3><p>启动IPython时加上<code>--pylab</code>标记来集成matplotlib<code>ipython --pylab</code>。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过<code>%gui</code>对此进行手工设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line">Using matplotlib backend: TkAgg</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><h2 id="使用命令历史"><a href="#使用命令历史" class="headerlink" title="使用命令历史"></a>使用命令历史</h2><p>IPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：</p><ol><li>只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令</li><li>在会话间持久化命令历史</li><li>将输入/输出历史记录到日志文件</li></ol><h3 id="搜索并重用命令历史"><a href="#搜索并重用命令历史" class="headerlink" title="搜索并重用命令历史"></a>搜索并重用命令历史</h3><p>如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。</p><h3 id="输入和输出变量"><a href="#输入和输出变量" class="headerlink" title="输入和输出变量"></a>输入和输出变量</h3><p>IPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 <code>_</code>(一个下划线)和 <code>__</code>(两个下划线)变量中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [6]: 1+1</span><br><span class="line">Out[6]: 2</span><br><span class="line"></span><br><span class="line">In [7]: _</span><br><span class="line">Out[7]: 2</span><br><span class="line"></span><br><span class="line">In [8]: _+1</span><br><span class="line">Out[8]: 3</span><br><span class="line"></span><br><span class="line">In [9]: 3+1</span><br><span class="line">Out[9]: 4</span><br><span class="line"></span><br><span class="line">In [10]: __</span><br><span class="line">Out[10]: 3</span><br></pre></td></tr></table></figure></p><p>输入的文本保存在名为<code>_ix</code>的变量中，其中 <strong>X</strong> 是输入行的行号。每个输入变量都有一个对应的输出变量<code>_x</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [11]: _i6</span><br><span class="line">Out[11]: &apos;1+1&apos;</span><br><span class="line"></span><br><span class="line">In [12]: _6</span><br><span class="line">Out[12]: 2</span><br></pre></td></tr></table></figure></p><p>由于输入变量是字符串，因此可以用Python的<code>exec()</code>方法重新执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [18]: exec(_i6)</span><br><span class="line"></span><br><span class="line">In [19]: _</span><br><span class="line">Out[19]: &apos;1+1&apos;</span><br></pre></td></tr></table></figure></p><p>有几个魔术命令可以用于控制输入和输出历史。<code>%hist</code>用于打印全部或部分输入历史，可以选择是否带行号。<code>%reset</code>用于清空interactive命名空间，并可选择是否清空输入和输出缓存。<code>%xdel</code>用于从IPython系统中移除特定对象的一切引用。</p><h3 id="记录输入和输出"><a href="#记录输入和输出" class="headerlink" title="记录输入和输出"></a>记录输入和输出</h3><p>IPython能够记录整个控制台会话，包括输入和输出。执行<code>%logstart</code>即可开始记录日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [20]: %logstart</span><br><span class="line">Activating auto-logging. Current session state plus future input saved.</span><br><span class="line">Filename       : ipython_log.py</span><br><span class="line">Mode           : rotate</span><br><span class="line">Output logging : False</span><br><span class="line">Raw input log  : False</span><br><span class="line">Timestamping   : False</span><br><span class="line">State          : active</span><br></pre></td></tr></table></figure></p><p>IPython的日志功能可以在任何时刻开启。还有与<code>%logstart</code>配套的<code>%logoff</code>、<code>%logon</code>、<code>%logstate</code>和<code>%logstop</code>，可以参考其文档。</p><h3 id="与操作系统交互"><a href="#与操作系统交互" class="headerlink" title="与操作系统交互"></a>与操作系统交互</h3><p>可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中</p><ul><li>跟系统相关的IPython魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">!cmd</td><td style="text-align:center">在系统shell中执行cmd</td></tr><tr><td style="text-align:center">output=!cmd args</td><td style="text-align:center">执行cmd，并将stout存放在output中</td></tr><tr><td style="text-align:center">%alias alias_name cmd</td><td style="text-align:center">为系统shell命令定义别名</td></tr><tr><td style="text-align:center">%bookmark</td><td style="text-align:center">使用IPython的目录书签系统</td></tr><tr><td style="text-align:center">%cd directory</td><td style="text-align:center">将系统工作目录更改为directory</td></tr><tr><td style="text-align:center">%pwd</td><td style="text-align:center">返回系统的当前工作目录</td></tr><tr><td style="text-align:center">%pushd directory</td><td style="text-align:center">将当前目录入栈，并转向目标目录</td></tr><tr><td style="text-align:center">%popd</td><td style="text-align:center">弹出栈顶目录，并转向该目录</td></tr><tr><td style="text-align:center">%dirs</td><td style="text-align:center">返回一个含有当前目录栈的列表</td></tr><tr><td style="text-align:center">%dhist</td><td style="text-align:center">打印目录访问历史</td></tr><tr><td style="text-align:center">%env</td><td style="text-align:center">以dict形式返回系统环境变量</td></tr></tbody></table><h4 id="shell命令和别名"><a href="#shell命令和别名" class="headerlink" title="shell命令和别名"></a>shell命令和别名</h4><p>在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [23]: !python</span><br><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>还可以将shell命令的控制台输出存放到变量中，只需将 <code>!</code> 开头的表达式赋值给变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [152]: ip_info = !ls</span><br><span class="line"></span><br><span class="line">In [153]: ip_info</span><br><span class="line">Out[153]: [&apos;experiment.py&apos;, &apos;ipython_bug.py&apos;, &apos;ipython_script_test.py&apos;]</span><br></pre></td></tr></table></figure></p><h2 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h2><p>IPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。</p><h3 id="交互式调试器"><a href="#交互式调试器" class="headerlink" title="交互式调试器"></a>交互式调试器</h3><p>IPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。<code>%debug</code>命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [45]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py in &lt;module&gt;()</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py in f(x, y, z)</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">In [46]: %debug</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(2)f()</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br></pre></td></tr></table></figure></p><p>在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入<code>u</code>(或up)和<code>d</code>(或down)即可在栈跟踪的各级别之间切换:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; u</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; d</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(2)f()</span><br><span class="line">      1 def f(x, y, z):</span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br></pre></td></tr></table></figure></p><p>执行<code>%pdp</code>命令可以让IPython在出现异常之后自动调用调试器。<br>如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有<code>-d</code>选项的<code>%run</code>命令，这会在执行脚本文件中的代码之前打开调试器，然后输入<code>s</code>(或step)步进才能进入脚本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [50]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint 1 at d:\python\ipython\ipython_bug.py:1</span><br><span class="line">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(1)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(4)&lt;module&gt;()</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">----&gt; 4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(5)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">----&gt; 5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">      7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(6)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">----&gt; 6 c = 0</span><br><span class="line">      7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>通过<code>b num</code>在num行出设置断点，输入<code>c</code>(或continue)使脚本一直运行下去直到该断点时为止,然后输入<code>n</code>(或next)直到执行下一行(即step over):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [53]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint 1 at d:\python\ipython\ipython_bug.py:1</span><br><span class="line">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(1)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      2     return (x+y) /z</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line"></span><br><span class="line">ipdb&gt; b 7</span><br><span class="line">Breakpoint 2 at d:\python\ipython\ipython_bug.py:7</span><br><span class="line">ipdb&gt; c</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">--Return--</span><br><span class="line">None</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(7)&lt;module&gt;()</span><br><span class="line">      3</span><br><span class="line">      4 a = 1</span><br><span class="line">      5 b = 2</span><br><span class="line">      6 c = 0</span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><ul><li>IPython调试器命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">h(elp)</td><td style="text-align:center">显示命令列表</td></tr><tr><td style="text-align:center">help command</td><td style="text-align:center">显示command的文档</td></tr><tr><td style="text-align:center">c(ontinue)</td><td style="text-align:center">恢复程序的执行</td></tr><tr><td style="text-align:center">q(uit)</td><td style="text-align:center">退出调试器，不再执行任何代码</td></tr><tr><td style="text-align:center">b(readk) number</td><td style="text-align:center">在当前文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">b path/to/file.py:number</td><td style="text-align:center">在指定文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">s(tep)</td><td style="text-align:center">单步进入函数调用</td></tr><tr><td style="text-align:center">n(ext)</td><td style="text-align:center">执行当前行，并前进到当前级别的下一行</td></tr><tr><td style="text-align:center">u(p)/d(own)</td><td style="text-align:center">在函数调用栈中向上或向下移动</td></tr><tr><td style="text-align:center">a(rgs)</td><td style="text-align:center">显示当前函数的参数</td></tr><tr><td style="text-align:center">debug statement</td><td style="text-align:center">在新的(递归)调试器中调用语句statement</td></tr><tr><td style="text-align:center">l(ist)  statement</td><td style="text-align:center">显示当前行，以及当前栈级别的上下文参考代码</td></tr><tr><td style="text-align:center">w(here)</td><td style="text-align:center">打印当前位置的完整栈跟踪(包括上下文参考代码)</td></tr></tbody></table><h3 id="测试代码的执行时间-time和-timeit"><a href="#测试代码的执行时间-time和-timeit" class="headerlink" title="测试代码的执行时间:%time和%timeit"></a>测试代码的执行时间:%time和%timeit</h3><p><code>%time</code>一次执行一条语句，然后报告总体执行时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [56]: strings = [&apos;foo&apos;,&apos;bar&apos;,&apos;abc&apos;,&apos;foobar&apos;,&apos;python&apos;,&apos;Guide Peple&apos;]*100000</span><br><span class="line"></span><br><span class="line">In [57]: %time method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class="line">Wall time: 102 ms</span><br><span class="line"></span><br><span class="line">In [58]: %time method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class="line">Wall time: 59.2 ms</span><br></pre></td></tr></table></figure></p><p><code>%timeit</code>对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [59]: %timeit method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class="line">100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class="line"></span><br><span class="line">In [60]: %timeit method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class="line">57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br></pre></td></tr></table></figure></p><h3 id="基本性能分析：-prun和-run-p"><a href="#基本性能分析：-prun和-run-p" class="headerlink" title="基本性能分析：%prun和%run -p"></a>基本性能分析：%prun和%run -p</h3><p>代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。<code>%prun</code>分析的是Python语句而不是整个.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [141]: %cpaste</span><br><span class="line">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class="line">:def run_experiment(niter=100):</span><br><span class="line">    k = 100</span><br><span class="line">    results = []</span><br><span class="line">    for _ in range(niter):</span><br><span class="line">        mat = np.random.randn(k, k)</span><br><span class="line">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class="line">        results.append(max_eigenvalue)</span><br><span class="line">    return results:::::::</span><br><span class="line">:</span><br><span class="line">:--</span><br><span class="line"></span><br><span class="line">In [142]: %prun -l 7 -s cumulative run_experiment()</span><br><span class="line">         3804 function calls in 0.901 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced from 31 to 7 due to restriction &lt;7&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        1    0.000    0.000    0.901    0.901 &#123;built-in method builtins.exec&#125;</span><br><span class="line">        1    0.000    0.000    0.901    0.901 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class="line">        1    0.002    0.002    0.901    0.901 &lt;ipython-input-141-78ef833ef08b&gt;:1(run_experiment)</span><br><span class="line">      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)</span><br><span class="line">      100    0.060    0.001    0.060    0.001 &#123;method &apos;randn&apos; of &apos;mtrand.RandomState&apos; objects&#125;</span><br><span class="line">      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)</span><br><span class="line">      300    0.008    0.000    0.008    0.000 &#123;method &apos;reduce&apos; of &apos;numpy.ufunc&apos; objects&#125;</span><br></pre></td></tr></table></figure></p><p>执行<code>%run -p -s cumulative experiment.py</code>也能达到以上的效果，无需退出IPython:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [75]: %run -p -l 7 -s cumulative experiment.py</span><br><span class="line">Largest one we saw:11.9165340849</span><br><span class="line">         3888 function calls (3887 primitive calls) in 0.467 seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced from 77 to 7 due to restriction &lt;7&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">      2/1    0.000    0.000    0.467    0.467 &#123;built-in method builtins.exec&#125;</span><br><span class="line">        1    0.000    0.000    0.467    0.467 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)</span><br><span class="line">        1    0.000    0.000    0.467    0.467 experiment.py:1(&lt;module&gt;)</span><br><span class="line">        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)</span><br><span class="line">      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)</span><br></pre></td></tr></table></figure></p><h2 id="ipython-html-notebook"><a href="#ipython-html-notebook" class="headerlink" title="ipython html notebook"></a>ipython html notebook</h2><p>需要安装 <em>jupyter</em> 来使用该功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure></p><p>这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。</p>]]></content>
    
    <summary type="html">
    
      IPython有一个可以直接进行绘图的GUI控制台、一个基于Web的交互式笔记本，以及一个轻量级的快速并行计算引擎。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="IPython" scheme="http://coldjune.com/tags/IPython/"/>
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python文本处理</title>
    <link href="http://coldjune.com/2018/03/13/Python%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <id>http://coldjune.com/2018/03/13/Python文本处理/</id>
    <published>2018-03-13T06:48:15.000Z</published>
    <updated>2018-03-21T11:28:45.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逗号分割值-CSV"><a href="#逗号分割值-CSV" class="headerlink" title="逗号分割值(CSV)"></a>逗号分割值(CSV)</h2><h3 id="CSV简介"><a href="#CSV简介" class="headerlink" title="CSV简介"></a>CSV简介</h3><p><strong>逗号分割值(Comma-Spearated Value, CSV)</strong> 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用<code>str.splt(&#39;,&#39;)</code>来解析，因为会处理单个字段中含有逗号的情形。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment">#  创建需要导入的数据源</span></span><br><span class="line">DATA = (</span><br><span class="line">    (<span class="number">1</span>, <span class="string">'Web Clients and Servers'</span>, <span class="string">'base64,urllib'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'Web program：CGI &amp; WSGI'</span>, <span class="string">'cgi, time, wsgiref'</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'Web Services'</span>, <span class="string">'urllib,twython'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'*** WRITTING CSV DATA'</span>)</span><br><span class="line"><span class="comment"># 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> w:</span><br><span class="line">    <span class="comment"># csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象</span></span><br><span class="line">    <span class="comment"># 可以用来在打开的文件中逐行写入逗号分隔的数据。</span></span><br><span class="line">    writer = csv.writer(w)</span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> DATA:</span><br><span class="line">        writer.writerow(record)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># writer对象提供一个writerow()方法</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'****REVIEW OF SAVED DATA'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> r:</span><br><span class="line">    <span class="comment"># csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行</span></span><br><span class="line">    <span class="comment"># csv.reader()使用一个已打开文件的句柄，返回一个reader对象</span></span><br><span class="line">    <span class="comment"># 当逐行迭代数据时，CSV数据会自动解析并返回给用户</span></span><br><span class="line">    reader = csv.reader(r)</span><br><span class="line">    <span class="keyword">for</span> chap, title, modpkgs <span class="keyword">in</span> reader:</span><br><span class="line">        print(<span class="string">'Chapter %s: %r (featureing %s)'</span> % (chap, title, modpkgs))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*** WRITTING CSV DATA</span><br><span class="line">****REVIEW OF SAVED DATA</span><br><span class="line">Chapter 1: &apos;Web Clients and Servers&apos; (featureing base64,urllib)</span><br><span class="line">Chapter 2: &apos;Web program：CGI &amp; WSGI&apos; (featureing cgi, time, wsgiref)</span><br><span class="line">Chapter 3: &apos;Web Services&apos; (featureing urllib,twython)</span><br></pre></td></tr></table></figure><p>csv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。</p><ul><li>JSON和Python类型之间的区别</li></ul><table><thead><tr><th style="text-align:center">JSON</th><th style="text-align:center">Python3</th></tr></thead><tbody><tr><td style="text-align:center">object</td><td style="text-align:center">dict</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">list tuple</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">str</td></tr><tr><td style="text-align:center">number(int)</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">number(real)</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">True</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">False</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">None</td></tr></tbody></table><p>json提供了<code>dump()</code>/<code>load()</code>和<code>dumps()</code>/<code>loads()</code>。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个表示Python对象的字符串</span></span><br><span class="line"><span class="comment"># 用来美观地输出Python对象</span></span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: [<span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Jerry'</span>],</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示转储的Python字典</span></span><br><span class="line">print(<span class="string">'***RAW DICT***'</span>)</span><br><span class="line">print(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用更美观的方法输出</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED DICT***'</span>)</span><br><span class="line">pprint(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.dumps()内置的美观的输出方式，传递缩进级别</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED JSON***'</span>)</span><br><span class="line">print(dumps(Books, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">***RAW DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;title&apos;: &apos;Core&apos;, &apos;edition&apos;: 2, &apos;year&apos;: 2007&#125;, &apos;0000002&apos;: &#123;&apos;title&apos;: &apos;Python Programming&apos;, &apos;edition&apos;: 3, &apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;], &apos;year&apos;: 2009&#125;, &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;edition&apos;: 2, &apos;title&apos;: &apos;Core&apos;, &apos;year&apos;: 2007&#125;,</span><br><span class="line"> &apos;0000002&apos;: &#123;&apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;],</span><br><span class="line">             &apos;edition&apos;: 3,</span><br><span class="line">             &apos;title&apos;: &apos;Python Programming&apos;,</span><br><span class="line">             &apos;year&apos;: 2009&#125;,</span><br><span class="line"> &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED JSON***</span><br><span class="line">&#123;</span><br><span class="line">    &quot;0000001&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Core&quot;,</span><br><span class="line">        &quot;edition&quot;: 2,</span><br><span class="line">        &quot;year&quot;: 2007</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000002&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Python Programming&quot;,</span><br><span class="line">        &quot;edition&quot;: 3,</span><br><span class="line">        &quot;authors&quot;: [</span><br><span class="line">            &quot;Jack&quot;,</span><br><span class="line">            &quot;Bob&quot;,</span><br><span class="line">            &quot;Jerry&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000003&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Programming&quot;,</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。</p><ul><li><p>将字典转化为XML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, tostring</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parseString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: <span class="string">'Jack:Bob:Jerry'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶层对象</span></span><br><span class="line"><span class="comment"># 将所有其他内容添加到该节点下</span></span><br><span class="line">books = Element(<span class="string">'books'</span>)</span><br><span class="line"><span class="keyword">for</span> isbn, info <span class="keyword">in</span> Books.items():</span><br><span class="line">    <span class="comment"># 对于每一本书添加一个book子节点</span></span><br><span class="line">    <span class="comment"># 如果原字典没有提供作者和版本，则使用提供的默认值。</span></span><br><span class="line">    book = SubElement(books, <span class="string">'book'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'authors'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'edition'</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="comment"># 遍历所有键值对，将这些内容作为其他子节点添加到每个book中</span></span><br><span class="line">        SubElement(book, key).text = <span class="string">', '</span>.join(str(val).split(<span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">xml = tostring(books)</span><br><span class="line">print(<span class="string">'*** RAW XML***'</span>)</span><br><span class="line">print(xml)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***PRETTY-PRINTED XML***'</span>)</span><br><span class="line">dom = parseString(xml)</span><br><span class="line">print(dom.toprettyxml(<span class="string">'     '</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***FLAT STRUCTURE***'</span>)</span><br><span class="line"><span class="keyword">for</span> elmt <span class="keyword">in</span> books.iter():</span><br><span class="line">    print(elmt.tag, <span class="string">'-'</span>, elmt.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n***TITLE ONLY***'</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books.findall(<span class="string">'.//title'</span>):</span><br><span class="line">    print(book.text)</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">*** RAW XML***</span><br><span class="line">b&apos;&lt;books&gt;&lt;book&gt;&lt;title&gt;Core&lt;/title&gt;&lt;edition&gt;2&lt;/edition&gt;&lt;year&gt;2007&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;edition&gt;3&lt;/edition&gt;&lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;&lt;year&gt;2009&lt;/year&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Programming&lt;/title&gt;&lt;year&gt;2009&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;edition&gt;1&lt;/edition&gt;&lt;/book&gt;&lt;/books&gt;&apos;</span><br><span class="line">***PRETTY-PRINTED XML***</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Core&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;2&lt;/edition&gt;</span><br><span class="line">          &lt;year&gt;2007&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Python Programming&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;3&lt;/edition&gt;</span><br><span class="line">          &lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Programming&lt;/title&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">          &lt;edition&gt;1&lt;/edition&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br><span class="line"></span><br><span class="line">***FLAT STRUCTURE***</span><br><span class="line">books - None</span><br><span class="line">book - None</span><br><span class="line">title - Core</span><br><span class="line">edition - 2</span><br><span class="line">year - 2007</span><br><span class="line">authors - Bob</span><br><span class="line">book - None</span><br><span class="line">title - Python Programming</span><br><span class="line">edition - 3</span><br><span class="line">authors - Jack, Bob, Jerry</span><br><span class="line">year - 2009</span><br><span class="line">book - None</span><br><span class="line">title - Programming</span><br><span class="line">year - 2009</span><br><span class="line">authors - Bob</span><br><span class="line">edition - 1</span><br><span class="line"></span><br><span class="line">***TITLE ONLY***</span><br><span class="line">Core</span><br><span class="line">Python Programming</span><br><span class="line">Programming</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      无论什么类型的应用，都需要处理成可读的数据，而数据一般是文本。Python标准库有3个文本处理模块和包，它们分别可以处理csv、json、xml
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="文本处理" scheme="http://coldjune.com/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Web框架:Django</title>
    <link href="http://coldjune.com/2018/03/12/Web%E6%A1%86%E6%9E%B6-Django/"/>
    <id>http://coldjune.com/2018/03/12/Web框架-Django/</id>
    <published>2018-03-12T08:46:21.000Z</published>
    <updated>2018-03-21T11:28:45.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h2><ul><li><p>安装<br>在使用<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>开发之前，必须安装必需的组件，包括依赖组件和Django本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure></li><li><p>项目和应用<br><strong>项目</strong> 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 <strong>应用</strong>。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。</p></li></ul><ol><li><p><strong>在Django中创建项目</strong><br>Django自带有一个名为<code>django-admin.py</code>/<code>django-admin.exe</code>的工具，它可以简.<br>化任务。在POSIX平台上，一般在<code>/usr/local/bin</code>、<code>/usr/bin</code>这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如<code>E:\Python\Python36\Scripts</code>。两种系统都应该确保文件位于PATH环境变量中。<br>在项目文件加下执行命令创建项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure></li><li><p><strong>Django项目文件</strong></p></li></ol><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/用途</th></tr></thead><tbody><tr><td style="text-align:center"><strong>init</strong>.py</td><td style="text-align:center">告诉Python这是一个软件包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">全局URL配置(“URLconf”)</td></tr><tr><td style="text-align:center">setting.py</td><td style="text-align:center">项目相关的配置</td></tr><tr><td style="text-align:center">manage.py</td><td style="text-align:center">应用的命令行接口</td></tr></tbody></table><ul><li>运行开发服务器<br>Django内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：</li></ul><ol><li>可以直接运行与测试项目和应用，无需完整的生产环境</li><li>当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启</li><li>开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容</li></ol><blockquote><p>启动服务器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>在项目目录下使用如下命令创建一个应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py startapp blog</span><br></pre></td></tr></table></figure></p><p>这样就建立了一个blog目录，其中有如下内容：</p><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/目的</th></tr></thead><tbody><tr><td style="text-align:center">__init.py</td><td style="text-align:center">告诉Python这是一个包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">应用的URL配置文件(“URLconf”)，这个文件并不像项目的URLconf那样自动创建</td></tr><tr><td style="text-align:center">models.py</td><td style="text-align:center">数据模型</td></tr><tr><td style="text-align:center">views.py</td><td style="text-align:center">视图函数(即MVC中的控制器)</td></tr><tr><td style="text-align:center">tests.py</td><td style="text-align:center">单元测试</td></tr></tbody></table><p>与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 <em>settings.py</em>，将应用名称(<strong>blog</strong>)添加到元组的末尾。Django使用 <strong>INSTALLED_APPS</strong> 来配置系统的不同部分，包括自动管理应用程序和测试框架。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="创建模型添加数据库服务"><a href="#创建模型添加数据库服务" class="headerlink" title="创建模型添加数据库服务"></a>创建模型添加数据库服务</h3><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p><em>models.py</em> 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多<a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/" target="_blank" rel="noopener">字段类型</a>，用来将数据映射到应用中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br></pre></td></tr></table></figure></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在项目的<em>setting.py</em>文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):<strong>ENGINE</strong>、<strong>NAME</strong>、<strong>HOST</strong>、<strong>PORT</strong>、<strong>USER</strong>、<strong>PASSWORD</strong>。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。</p><ul><li><p>使用MySQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用mysql</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django_test'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用SQLite<br>SQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用sqlite</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>使用 <em>makemigrations</em> 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py makemigrations</span><br></pre></td></tr></table></figure></p><p>使用 <em>migrate</em> 映射到数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py migrate</span><br></pre></td></tr></table></figure></p><h3 id="Python应用Shell"><a href="#Python应用Shell" class="headerlink" title="Python应用Shell"></a>Python应用Shell</h3><h4 id="在Django中使用Python-shell"><a href="#在Django中使用Python-shell" class="headerlink" title="在Django中使用Python shell"></a>在Django中使用Python shell</h4><p>即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><p><a href="https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api" target="_blank" rel="noopener">Django shell</a>和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 <em>-i</em> 来强制使用普通解释器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell -i python</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="测试数据模型"><a href="#测试数据模型" class="headerlink" title="测试数据模型"></a>测试数据模型</h4><p>在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from datetime import datetime</span><br><span class="line"></span><br><span class="line">In [2]: from blog.models import BlogPost</span><br><span class="line"></span><br><span class="line">In [3]: BlogPost.objects.all()</span><br><span class="line">Out[3]: &lt;QuerySet [&lt;BlogPost: BlogPost object (1)&gt;, &lt;BlogPost: BlogPost object (2)&gt;, &lt;BlogPost: BlogPost object (3)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: bp = BlogPost(title=&apos;my blog&apos;, body=&apos;&apos;&apos;</span><br><span class="line">   ...: my 1st blog...</span><br><span class="line">   ...: yoooo!&apos;&apos;&apos;,</span><br><span class="line">   ...: timestamp=datetime.now())</span><br><span class="line"></span><br><span class="line">In [5]: bp</span><br><span class="line">Out[5]: &lt;BlogPost: BlogPost object (None)&gt;</span><br><span class="line"></span><br><span class="line">In [6]: bp.save()</span><br><span class="line"></span><br><span class="line">In [7]: BlogPost.objects.count()</span><br><span class="line">Out[7]: 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [9]: bp = BlogPost.objects.all()[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [11]: print(bp.title)</span><br><span class="line">test shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [13]: print(bp.body)</span><br><span class="line"></span><br><span class="line">my 1st blog post...</span><br><span class="line">yo!</span><br><span class="line"></span><br><span class="line">In [14]: bp.timestamp.ctime()</span><br><span class="line">Out[14]: &apos;Sun Mar 11 08:13:31 2018&apos;</span><br></pre></td></tr></table></figure></p><p>前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。<br>设置时区:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Django管理应用"><a href="#Django管理应用" class="headerlink" title="Django管理应用"></a>Django管理应用</h3><p>admin应用让开发者在完成完整的UI之前验证处理数据的代码。</p><h4 id="设置admin"><a href="#设置admin" class="headerlink" title="设置admin"></a>设置admin</h4><p>在 <em>setting.py</em> 的<code>INSTALLED_APP</code>中添加<code>&#39;django.contrib.admin&#39;,</code>，然后运行<code>python3 ./manage.py makemigrations</code>和<code>python3 ./manage.py migrate</code>两条命令来创建其对应的表。在admin设置完之后于 <em>urls.py</em> 中设置url路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 <em>admin.py</em> 中注册BlogPost：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(models.BlogPost)</span><br></pre></td></tr></table></figure></p><h4 id="使用admin"><a href="#使用admin" class="headerlink" title="使用admin"></a>使用admin</h4><p>使用命令<code>python3 ./manage.py runserver</code>启动服务，然后在浏览器中输入 <em><a href="http://localhost:8000/admin" target="_blank" rel="noopener">http://localhost:8000/admin</a></em> 访问admin页面。在访问之前使用<code>python3 manage.py createsuperuser</code>创建的超级用户的用户名和密码用于登录管理页面。（账号：<em>root</em>，密码：<em>Aa123456</em>）<br>为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'timestamp'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(models.BlogPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></p><h3 id="创建博客的用户界面"><a href="#创建博客的用户界面" class="headerlink" title="创建博客的用户界面"></a>创建博客的用户界面</h3><p>Django shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：</p><ol><li><strong>模板</strong>，用于显示通过Python类字典对象传入的信息</li><li><strong>视图函数</strong>，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果</li><li><strong>模式</strong>，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图</li></ol><p>Django是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：</p><ol><li>因为需要一些可观察对象，所以先创建基本的模板</li><li>设计一个简单的URL模式，让Django可以立刻访问应用</li><li>开发出一个视图函数原型，然后在此基础上迭代开发<br>在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 <em>测试驱动模型(TDD)</em> 的开发模式。</li></ol><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a><a href="https://docs.djangoproject.com/en/2.0/topics/templates/#tags" target="_blank" rel="noopener">创建模板</a></h4><ul><li><p><em>变量标签</em><br><strong>变量标签</strong> 是由 <em>花括号()</em> 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 <em>点分割标识</em> 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号”()”来表示这个函数或方法可调用。</p></li><li><p><em>过滤器</em><br><strong>过滤器</strong> 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 <em>管道符号(“|”)</em>，接着跟上过滤器名称。<code>&lt;h2&gt; { { post.title | title } } &lt;/h2&gt;</code></p></li><li><p><em>上下文</em><br><strong>上下文</strong> 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为”post”。通过上下文传入所有的博文，这样可以通过循环显示所有文章。</p></li><li><p><em>块标签</em><br><strong>块标签</strong> 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。</p></li></ul><p>将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 <strong>templates</strong> 目录下，模版名称任取，但模版目录一定是 <em>templates</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建URL模式"><a href="#创建URL模式" class="headerlink" title="创建URL模式"></a>创建URL模式</h4><ul><li>项目的URLconf<br>服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># include函数将动作推迟到其他URLconf</span></span><br><span class="line">    <span class="comment"># 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py</span></span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p><em>include()</em> 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（<em>当输入’<a href="http://localhost:8080/blog/foo/bar" target="_blank" rel="noopener">http://localhost:8080/blog/foo/bar</a>‘ 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py</em>）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 <strong>字符串</strong>，未使用include传递的是 <strong>对象</strong>。</p><ul><li>应用的URLconf<br>在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。</p><h4 id="创建视图函数"><a href="#创建视图函数" class="headerlink" title="创建视图函数"></a>创建视图函数</h4><p>一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：</p><ol><li>向数据库查询所有博客条目</li><li>载入模板文件</li><li>为模板创建上下文字典</li><li>将模板渲染到HTML中</li><li>通过HTTP响应返回HTML<br>在应用的views.py中添加如下代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader, Context</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = BlogPost.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="改进输出"><a href="#改进输出" class="headerlink" title="改进输出"></a>改进输出</h3><p>现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。</p><blockquote><p>BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。</p></blockquote><p>实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><p>为了测试限制显示数目，先启动Django shell添加数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python ./manage.py shell</span><br><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; from blog.models import BlogPost</span><br><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     bp = BlogPost(title=&apos;post $%d&apos; % i ,body=&apos;body of post $%d&apos; %d, timestamp=datetime.now())</span><br><span class="line">...     bp.save()</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后使用切片的方式获取最新的10篇(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>设置模型的默认排序方式</li></ul><p>如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 <strong>Meta</strong> 的内部类，在其中设置一个名为 <strong>ordering</strong> 的属性(models.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'-timestamp'</span>,)</span><br></pre></td></tr></table></figure></p><p>取消视图函数中的排序(views.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><ol><li><p>添加一个HTML表单，让用户可以输入数据(archive.html),为了防止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入(URL，视图)这样的URLConf项<br>使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive),</span><br><span class="line">    path(<span class="string">r'create/'</span>, blog.views.create_blogpost)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>创建视图来处理用户输入<br>在应用的views.py中添加上面定义的处理方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        BlogPost(</span><br><span class="line">            title=request.POST.get(<span class="string">'title'</span>),</span><br><span class="line">            body=request.POST.get(<span class="string">'body'</span>),</span><br><span class="line">            timestamp=datetime.now()</span><br><span class="line">        ).save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 <em>跨站点请求伪造（Cross-site Request Forgery,CSRF）</em> 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>&#123;%csrf_token%&#125;</span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;%for post in posts%&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过模板发送向这些标记请求的上下文实例，这里将<code>archive()</code>方法调用的<code>render_to_response()</code>改为<code>render</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="表单和模型表单"><a href="#表单和模型表单" class="headerlink" title="表单和模型表单"></a>表单和模型表单</h3><ul><li><p>如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。</span></span><br><span class="line">        <span class="comment"># 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。</span></span><br><span class="line">        model = BlogPost</span><br><span class="line">        exclude = (<span class="string">'timestamp'</span>,)</span><br></pre></td></tr></table></figure></li><li><p>使用ModelForm来生成HTML表单(archive.html):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/blog/create/"</span> method=<span class="string">"post"</span>&gt;&#123;%csrf_token%&#125;</span><br><span class="line">  &lt;table&gt;&#123;&#123;form&#125;&#125;&lt;/table&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &#123;%<span class="keyword">for</span> post <span class="keyword">in</span> posts%&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123;post.title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.timestamp&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.body&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中<code>create_blogpost()</code>方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        <span class="comment"># BlogPost(</span></span><br><span class="line">        <span class="comment">#     title=request.POST.get('title'),</span></span><br><span class="line">        <span class="comment">#     body=request.POST.get('body'),</span></span><br><span class="line">        <span class="comment">#     timestamp=datetime.now()</span></span><br><span class="line">        <span class="comment"># ).save()</span></span><br><span class="line">        form = BlogPostForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            post = form.save(commit=<span class="keyword">False</span>)</span><br><span class="line">            post.timestamp = datetime.now()</span><br><span class="line">            post.save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h3><p>Django通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 <em>文档测试(doctest)</em></p><blockquote><p>应用的tests.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test.client <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostTest</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># 测试方法必须以“test_”开头，方法名后面的部分随意。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_obj_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 这里仅仅通过测试确保对象成功创建，并验证标题内容</span></span><br><span class="line">        BlogPost.objects.create(</span><br><span class="line">            title=<span class="string">'raw title'</span>, body=<span class="string">'raw body'</span>, timestamp=datetime.now())</span><br><span class="line">        <span class="comment"># 如果两个参数相等则测试成功，否则该测试失败</span></span><br><span class="line">        <span class="comment"># 这里验证对象的数目和标题</span></span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'raw title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">200</span>, ))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_slash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试确认重定向</span></span><br><span class="line">        response = self.client.get(<span class="string">'/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_empty_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，</span></span><br><span class="line">        <span class="comment"># 代码应该忽略掉这个请求，然后重定向到'/blog'</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/create/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_post_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到"/blog"</span></span><br><span class="line">        response = self.client.post(<span class="string">'/blog/create/'</span>, &#123;</span><br><span class="line">            <span class="string">'title'</span>: <span class="string">'post title'</span>,</span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'post body'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'post title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/mysite" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      Web框架可以用于提供Web应用的所有相关服务，如Web服务器、数据库ORM、模板和所有需要的中间件hook
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web框架" scheme="http://coldjune.com/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Django" scheme="http://coldjune.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CGI和WSGI</title>
    <link href="http://coldjune.com/2018/03/08/CGI%E5%92%8CWSGI/"/>
    <id>http://coldjune.com/2018/03/08/CGI和WSGI/</id>
    <published>2018-03-08T01:08:11.000Z</published>
    <updated>2018-03-21T11:28:45.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用</p><h3 id="CGI简介"><a href="#CGI简介" class="headerlink" title="CGI简介"></a>CGI简介</h3><ul><li><p><strong>通用网关接口(Common Gateway Interface CGI)</strong> 在Web服务器和应用之间充当了交互作用</p><ol><li>Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序</li><li>Web服务器和客户端等待HTML页面</li><li>应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户</li><li>表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端<br>含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。<em>CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)</em></li></ol></li><li><p>CGI应用程序和和相关模块</p><ol><li><p>CGI应用程序<br>CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 <em>请求(request)</em>。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。<strong>用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间</strong>。</p></li><li><p>cgi模块<br>cgi模块有一个主要类 <em>FieldStorage</em> 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。<br>这些值有三个对象：<em>FieldStorage</em> 对象；<em>MiniFieldStorage</em> 对象用在没有文件上传或mulitple-part格式数据的情况下，<em>MiniFieldStorage</em> 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。</p></li><li><p>cgitb模块<br>cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。</p></li></ol></li></ul><h3 id="CGI应用程序"><a href="#CGI应用程序" class="headerlink" title="CGI应用程序"></a>CGI应用程序</h3><blockquote><p>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们</p></blockquote><ul><li>CGI服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> FieldStorage</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvCGI</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量</span></span><br><span class="line">    header = <span class="string">'Content-Type:text/html\n\n'</span></span><br><span class="line">    url = <span class="string">'/cgi-bin/advcgi.py'</span></span><br><span class="line">    <span class="comment"># HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素</span></span><br><span class="line">    formhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;HTML&gt;</span></span><br><span class="line"><span class="string">            &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">            &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                &lt;H2&gt;Advanced CGI Demo&lt;/H2&gt;</span></span><br><span class="line"><span class="string">                &lt;FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;My Cookie Setting&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;LI&gt;</span></span><br><span class="line"><span class="string">                        &lt;CODE&gt;&lt;B&gt;CPPuser = %s&lt;/B&gt;&lt;/CODE&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter cookie value&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=cookie value='%s'/&gt;(&lt;I&gt;optional&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter your name&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=person VALUE='%s'/&gt;(&lt;I&gt;required&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;What languages can you program in ?</span></span><br><span class="line"><span class="string">                        (&lt;I&gt;at least one required&lt;/I&gt;)  </span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter file to upload&lt;SMALL&gt;(max size 4k)&lt;/SMALL&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45&gt;</span></span><br><span class="line"><span class="string">                        &lt;P&gt;&lt;INPUT TYPE=submit /&gt;</span></span><br><span class="line"><span class="string">                    &lt;/LI&gt;</span></span><br><span class="line"><span class="string">                &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">            &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">        &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    langset = (<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'C++'</span>, <span class="string">'C'</span>, <span class="string">'JavaScript'</span>)</span><br><span class="line"></span><br><span class="line">    langItem = <span class="string">'&lt;INPUT TYPE=checkbox NAME=lang VALUE="%s"%s&gt; %s\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 通过HTTP_COOKIE访问这些值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'HTTP_COOKIE'</span> <span class="keyword">in</span> environ:</span><br><span class="line">            cookies = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> environ[<span class="string">'HTTP_COOKIE'</span>].split(<span class="string">';'</span>)]</span><br><span class="line">            <span class="keyword">for</span> eachCookie <span class="keyword">in</span> cookies:</span><br><span class="line">                <span class="comment"># 寻找以CPP开头的字符串</span></span><br><span class="line">                <span class="comment"># 只查找，名为“CPPuser”和“CPPinfo”的cookie值</span></span><br><span class="line">                <span class="keyword">if</span> len(eachCookie) &gt; <span class="number">6</span> <span class="keyword">and</span> eachCookie[:<span class="number">3</span>] == <span class="string">'CPP'</span>:</span><br><span class="line">                    <span class="comment"># 去除索引8处的值进行计算，计算结果保存到Python对象中</span></span><br><span class="line">                    tag = eachCookie[<span class="number">3</span>:<span class="number">7</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。</span></span><br><span class="line">                        self.cookies[tag] = eval(unquote(eachCookie[<span class="number">8</span>:]))</span><br><span class="line">                    <span class="keyword">except</span> (NameError, SyntaxError):</span><br><span class="line">                        self.cookies[tag] = unquote(eachCookie[<span class="number">8</span>:])</span><br><span class="line">            <span class="comment"># 如果这个cookie丢失，就给他指定一个空字符串</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'info'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'info'</span>] = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'user'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cookies[<span class="string">'info'</span>] = self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cookies[<span class="string">'info'</span>] != <span class="string">''</span>:</span><br><span class="line">            self.who, langstr, self.fn = self.cookies[<span class="string">'info'</span>].split(<span class="string">';'</span>)</span><br><span class="line">            self.langs = langstr.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.who = self.fn = <span class="string">''</span></span><br><span class="line">            self.langs = [<span class="string">'Python'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_form</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将表单显示给用户</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式</span></span><br><span class="line">        self.get_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        langstr = []</span><br><span class="line">        <span class="keyword">for</span> eachLang <span class="keyword">in</span> AdvCGI.langset:</span><br><span class="line">            langstr.append(AdvCGI.langItem % (</span><br><span class="line">                eachLang, <span class="string">' CHECKED'</span> <span class="keyword">if</span> eachLang <span class="keyword">in</span> self.langs <span class="keyword">else</span> <span class="string">''</span>, eachLang))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.formhtml % (</span><br><span class="line">            AdvCGI.url, cookstatus, usercook, self.who,</span><br><span class="line">            <span class="string">''</span>.join(langstr), self.fn)))</span><br><span class="line"></span><br><span class="line">    errhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">            &lt;HTML&gt;</span></span><br><span class="line"><span class="string">                &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                    &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">                &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;B&gt;%s&lt;/B&gt;</span></span><br><span class="line"><span class="string">                    &lt;P&gt;</span></span><br><span class="line"><span class="string">                    &lt;FORM&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE= button VALUE=Back ONCLICK="window.history.back()"&gt;&lt;/INPUT&gt;</span></span><br><span class="line"><span class="string">                    &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">                &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成错误页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.errhtml % (self.error)))</span><br><span class="line"></span><br><span class="line">    reshtml = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;HTML&gt;</span></span><br><span class="line"><span class="string">        &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">        &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">        &lt;BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;H2&gt;Your Uploaded Data&lt;/H2&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your cookie value is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your name is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;You can program in the following languages:&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;UL&gt;%s&lt;/UL&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your uploaded file...&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Name: &lt;I&gt;%s&lt;/I&gt;&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Contents:</span></span><br><span class="line"><span class="string">            &lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;PRE&gt;%s&lt;/PRE&gt;</span></span><br><span class="line"><span class="string">            Click &lt;A HREF="%s"&gt;&lt;B&gt;here&lt;/B&gt;&lt;/A&gt; to return to form.</span></span><br><span class="line"><span class="string">        &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">    &lt;/HTML&gt;'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> eachCookie <span class="keyword">in</span> self.cookies:</span><br><span class="line">            print(<span class="string">'Set-Cookie: CPP%s=%s; path=/'</span> % (</span><br><span class="line">                eachCookie, quote(self.cookies[eachCookie])))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成结果页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        MAXBYTES = <span class="number">4096</span></span><br><span class="line">        langlist = <span class="string">''</span>.join(<span class="string">'&lt;LI&gt;%s&lt;BR&gt;'</span> % eachLang <span class="keyword">for</span> eachLang <span class="keyword">in</span> self.langs)</span><br><span class="line">        filedata = self.fp.read(MAXBYTES)</span><br><span class="line">        <span class="keyword">if</span> len(filedata) == MAXBYTES <span class="keyword">and</span> f.read():</span><br><span class="line">            filedata = <span class="string">'%s%s'</span> % (filedata, <span class="string">'...&lt;B&gt;&lt;I&gt;(file truncated due to size)&lt;/I&gt;&lt;/B&gt;'</span>)</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filedata == <span class="string">''</span>:</span><br><span class="line">            filedata = <span class="string">'&lt;B&gt;&lt;I&gt;(file not give or upload error)&lt;/I&gt;&lt;/B&gt;'</span></span><br><span class="line">        filename = self.fn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'info'</span>] = <span class="string">':'</span>.join((self.who, <span class="string">','</span>.join(self.langs), filename))</span><br><span class="line">        self.set_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (</span><br><span class="line">            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cookies = &#123;&#125;</span><br><span class="line">        self.error = <span class="string">''</span></span><br><span class="line">        form = FieldStorage()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list(form.keys()):</span><br><span class="line">            self.show_form()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'person'</span> <span class="keyword">in</span> form:</span><br><span class="line">            print(form.keys())</span><br><span class="line">            self.who = form[<span class="string">'person'</span>].value.strip().title()</span><br><span class="line">            <span class="keyword">if</span> self.who == <span class="string">''</span>:</span><br><span class="line">                self.error = <span class="string">'Your name is required.(blank)'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'Your name is required.(missing)'</span></span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'user'</span>] = unquote(form[<span class="string">'cookie'</span>].value.strip())</span><br><span class="line">                                                      <span class="keyword">if</span> <span class="string">'cookie'</span> <span class="keyword">in</span> form <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'lang'</span> <span class="keyword">in</span> form:</span><br><span class="line">            lang_data = form[<span class="string">'lang'</span>]</span><br><span class="line">            <span class="keyword">if</span> isinstance(lang_data, list):</span><br><span class="line">                self.langs = [eachLang.value <span class="keyword">for</span> eachLang <span class="keyword">in</span> lang_data]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.langs = [lang_data.value]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'At least one language required'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'upfile'</span> <span class="keyword">in</span> form:</span><br><span class="line">            upfile = form[<span class="string">'upfile'</span>]</span><br><span class="line">            self.fn = upfile.filename <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> upfile.file:</span><br><span class="line">                self.fp = upfile.file</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.fp = StringIO(<span class="string">'(no data)'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.fp = StringIO(<span class="string">'(no file)'</span>)</span><br><span class="line">            self.fn = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.error:</span><br><span class="line">            self.doResult()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.show_error()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    page = AdvCGI()</span><br><span class="line">    page.go()</span><br></pre></td></tr></table></figure><ul><li>启动程序<blockquote><p>将启动程序放在启动目录中，然后执行。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> CGIHTTPRequestHandler, test</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test(CGIHTTPRequestHandler)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/web" target="_blank" rel="noopener">源代码</a></p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><em>WSGI</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是为了替代CGI而出现的。</p><h3 id="服务器集成和外部进程"><a href="#服务器集成和外部进程" class="headerlink" title="服务器集成和外部进程"></a>服务器集成和外部进程</h3><ul><li>服务器集成<br>服务器集成也叫 <strong>服务器API</strong>，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。<br>服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。</li><li>外部进程<br>外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。<br>因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。</li></ul><h3 id="WSGI简介"><a href="#WSGI简介" class="headerlink" title="WSGI简介"></a>WSGI简介</h3><p>WSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。<br>根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。</p><h3 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h3><p>在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">WSGI只是做一个简单的了解，可以结合框架一起看。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      对Python Web编程的广泛概述，从Web浏览到创建用户反馈表单，从识别URL到生成动态Web页面。本文先介绍通用网关接口CGI然后是Web服务器网关接口WSGI。
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web编程" scheme="http://coldjune.com/tags/Web%E7%BC%96%E7%A8%8B/"/>
    
      <category term="CGI" scheme="http://coldjune.com/tags/CGI/"/>
    
      <category term="WSGI" scheme="http://coldjune.com/tags/WSGI/"/>
    
  </entry>
  
  <entry>
    <title>Python Web客户端和服务器</title>
    <link href="http://coldjune.com/2018/03/06/Python-Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://coldjune.com/2018/03/06/Python-Web客户端和服务器/</id>
    <published>2018-03-06T01:20:10.000Z</published>
    <updated>2018-03-21T11:28:45.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-Web客户端工具"><a href="#Python-Web客户端工具" class="headerlink" title="Python Web客户端工具"></a>Python Web客户端工具</h2><p>浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。</p><h3 id="统一资源定位符"><a href="#统一资源定位符" class="headerlink" title="统一资源定位符"></a>统一资源定位符</h3><blockquote><p>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。</p></blockquote><p>URL使用以下格式：<br><code>post_sch://net_loc/path;parans?query#frag</code></p><ul><li>Web地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">URL组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">post_sch</td><td style="text-align:center">网络协议或下载方案</td></tr><tr><td style="text-align:center">net_loc</td><td style="text-align:center">服务器所在地(也许含有用户信息)</td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">使用斜杠(/)分割的文件或CGI应用的路径</td></tr><tr><td style="text-align:center">params</td><td style="text-align:center">可选参数</td></tr><tr><td style="text-align:center">query</td><td style="text-align:center">连接符(&amp;)分割的一系列键值对</td></tr><tr><td style="text-align:center">frag</td><td style="text-align:center">指定文档内特定锚的部分</td></tr></tbody></table><p>net_loc可以拆分为多个组件，一些可选一些必备：<br><code>user:passwd@host:port</code></p><ul><li>网络地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">用户名或登录(FTP)</td></tr><tr><td style="text-align:center">passwd</td><td style="text-align:center">用户密码(FTP)</td></tr><tr><td style="text-align:center">host</td><td style="text-align:center">运行Web服务器的计算机名称或地址(必需的)</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">端口号(如果不是默认的80)</td></tr></tbody></table><p>Python3 使用<a href="https://docs.python.org/3/library/urllib.parse.html" target="_blank" rel="noopener">urllib.parse</a>和<a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noopener">urllib.request</a>两种不同的模块分别以不同的功能和兼容性来处理URL</p><h3 id="urllib-parse模块"><a href="#urllib-parse模块" class="headerlink" title="urllib.parse模块"></a>urllib.parse模块</h3><ul><li>urllib.parse核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.parse函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</td><td style="text-align:center">将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.urlunparse(parts)</td><td style="text-align:center">将URL数据的一个元组拼成URL字符串</td></tr><tr><td style="text-align:center">urllib.parse.urljoin(base,url,allow_fragments=True)</td><td style="text-align:center">将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.quote(string,safe=’/‘,encoding=None,errors=None)</td><td style="text-align:center">对string在URL里无法使用的字符进行编码，safe中的字符无需编码</td></tr><tr><td style="text-align:center">urllib.parse.quote_plus(string,safe=’’,encoding,errors)</td><td style="text-align:center">除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似</td></tr><tr><td style="text-align:center">urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">将string编译过的字符解码</td></tr><tr><td style="text-align:center">urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">除了将加好转换为空格，其他功能与unquote()相同</td></tr><tr><td style="text-align:center">urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</td><td style="text-align:center">将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码</td></tr></tbody></table><p>下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法<br><code>from urllib.parse import *</code></p><ul><li><p><em>urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlparse(<span class="string">'http://coldjune.com/categories/'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'coldjune.com'</span>, path=<span class="string">'/categories/'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlunparse(parts)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlunparse((<span class="string">'http'</span>, <span class="string">'coldjune.com'</span>, <span class="string">'/categories/'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urljoin(base,url,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是绝对路径将整个替换除根域名以外的所有内容</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'/tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/tags/2.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对路径将会将末端文件去掉与心得url连接</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/tags/2.html'</span></span><br><span class="line">``</span><br><span class="line">* *urllib.parse.quote(string,safe=<span class="string">'/'</span>,encoding=<span class="keyword">None</span>,errors=<span class="keyword">None</span>)*</span><br><span class="line">&gt; 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)</span><br><span class="line"></span><br><span class="line">  ```Python</span><br><span class="line">  quote(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line">  <span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote(<span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.quote_plus(string,safe=’’,encoding,errors)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quote_plus(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote_plus(<span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query=&#123;<span class="string">'name'</span>:<span class="string">'coldjune'</span>,<span class="string">'search'</span>:<span class="string">'6'</span>&#125;</span><br><span class="line">urlencode(query)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'name=coldjune&amp;search=6'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="urllib-request模块-包"><a href="#urllib-request模块-包" class="headerlink" title="urllib.request模块/包"></a>urllib.request模块/包</h3><ul><li>urllib.request模块核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.request函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None)</td><td style="text-align:center">打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证</td></tr><tr><td style="text-align:center">urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)</td><td style="text-align:center">将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息</td></tr></tbody></table><ol><li><em>urllib.request.urlopen(url, data=None, [timeout,],</em><br><em>cafile=None, capath=None,cadefault=False,context=None)</em><blockquote><p>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入”file”方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用”GET”请求，向Web服务器发送的请求字符串应该是url的一部分；使用”POST”请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象</p></blockquote></li></ol><ul><li>urlopen()文件类型对象的方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">f.read([bytes])</td><td style="text-align:center">从f中读出所有或bytes个字节</td></tr><tr><td style="text-align:center">f.readline()</td><td style="text-align:center">从f中读取一行</td></tr><tr><td style="text-align:center">f.readlines()</td><td style="text-align:center">从f中读取所有行，作为列表返回</td></tr><tr><td style="text-align:center">f.close()</td><td style="text-align:center">关闭f的URL连接</td></tr><tr><td style="text-align:center">f.fileno()</td><td style="text-align:center">返回f的文件句柄</td></tr><tr><td style="text-align:center">f.info()</td><td style="text-align:center">获取f的MIME头文件</td></tr><tr><td style="text-align:center">f.geturl()</td><td style="text-align:center">返回f的真正URL</td></tr></tbody></table><ol><li><em>urllib.request.urlretrieve(url,</em><br><em>filename=None,reporthook=None,data=None)</em><blockquote><p>urlretrieve（）用于下载完整的HTML</p></blockquote></li></ol><p>如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。<code>urlretrieve()</code>返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。</p><h3 id="HTTP验证示例"><a href="#HTTP验证示例" class="headerlink" title="HTTP验证示例"></a>HTTP验证示例</h3><blockquote><p>需要先启动本地的tomcat并访问tomcat地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化过程</span></span><br><span class="line"><span class="comment"># 后续脚本使用的常量</span></span><br><span class="line">LOGIN = <span class="string">'wesly'</span></span><br><span class="line">PASSWD = <span class="string">"you'llNeverGuess"</span></span><br><span class="line">URL = <span class="string">'http://localhost:8080/docs/setup.html'</span></span><br><span class="line">REALM = <span class="string">'Secure Archive'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 分配了一个基本处理程序类，添加了验证信息。</span></span><br><span class="line">    <span class="comment"># 用该处理程序建立一个URL开启器</span></span><br><span class="line">    <span class="comment"># 安装该开启器以便所有已打开的URL都能用到这些验证信息</span></span><br><span class="line">    hdlr = urllib.request.HTTPBasicAuthHandler()</span><br><span class="line">    hdlr.add_password(REALM,</span><br><span class="line">                      urllib.parse.urlparse(url)[<span class="number">1</span>],</span><br><span class="line">                      LOGIN,</span><br><span class="line">                      PASSWD)</span><br><span class="line">    opener = urllib.request.build_opener(hdlr)</span><br><span class="line">    urllib.request.install_opener(opener=opener)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头</span></span><br><span class="line">    <span class="comment"># 该请求用来替换其中的URL字符串</span></span><br><span class="line">    <span class="keyword">from</span> base64 <span class="keyword">import</span> encodebytes</span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    b64str = encodebytes(bytes(<span class="string">'%s %s'</span> % (LOGIN, PASSWD), <span class="string">'utf-8'</span>))[:<span class="number">-1</span>]</span><br><span class="line">    req.add_header(<span class="string">"Authorization"</span>, <span class="string">'Basic %s'</span> % b64str)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> funcType <span class="keyword">in</span> (<span class="string">'handler'</span>, <span class="string">'request'</span>):</span><br><span class="line">    <span class="comment"># 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行</span></span><br><span class="line">    print(<span class="string">'***Using %s:'</span> % funcType.upper())</span><br><span class="line">    url = eval(<span class="string">'%s_version'</span> % funcType)(URL)</span><br><span class="line">    f = urllib.request.urlopen(url)</span><br><span class="line">    print(str(f.readline(), <span class="string">'utf-8'</span>))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***Using HANDLER:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br><span class="line"></span><br><span class="line">***Using REQUEST:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Web客户端"><a href="#Web客户端" class="headerlink" title="Web客户端"></a>Web客户端</h2><p>一个稍微复杂的Web客户端例子就是 <em>网络爬虫</em>。这些程序可以为了不同目的在因特网上探索和下载页面。</p><blockquote><p>通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Retriever</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入"to-do"队列。</span></span><br><span class="line"><span class="string">    __slots__变量表示实例只能拥有self.url和self.file属性</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = (<span class="string">'url'</span>, <span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建Retriever对象时调用，将get_file()返回的URL字符串和对</span></span><br><span class="line"><span class="string">        应的文件名作为实例属性存储起来</span></span><br><span class="line"><span class="string">        :param url: 需要抓取的连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.url, self.file = self.get_file(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, url, default=<span class="string">'index.html'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件</span></span><br><span class="line"><span class="string">        :param url: 指定URL获取页面</span></span><br><span class="line"><span class="string">        :param default: 默认的文件名</span></span><br><span class="line"><span class="string">        :return: 返回url和对应的文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 将URL的http://前缀移除，丢掉任何为获取主机名</span></span><br><span class="line">        <span class="comment"># 而附加的额外信息，如用户名、密码和端口号</span></span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将字符进行解码，连接域名创建文件名</span></span><br><span class="line">        filepath = <span class="string">'%s%s'</span> % (host, urllib.parse.unquote(parsed.path))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.splitext(parsed.path)[<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 如果URL没有文件扩展名后这将default文件加上</span></span><br><span class="line">            filepath = os.path.join(filepath, default)</span><br><span class="line">        <span class="comment"># 获取文件路径</span></span><br><span class="line">        linkdir = os.path.dirname(filepath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(linkdir):</span><br><span class="line">            <span class="comment"># 如果linkdir不是一个目录</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(linkdir):</span><br><span class="line">                <span class="comment"># 如果linkdir存在则删除</span></span><br><span class="line">                os.unlink(linkdir)</span><br><span class="line">            <span class="comment"># 创建同名目录</span></span><br><span class="line">            os.makedirs(linkdir)</span><br><span class="line">        <span class="keyword">return</span> url, filepath</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()</span></span><br><span class="line"><span class="string">        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串</span></span><br><span class="line"><span class="string">        :return: 文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            retval = urllib.request.urlretrieve(self.url, filename=self.file)</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            retval = ((<span class="string">'***ERROR: bad URL "%s": %s'</span> % (self.url, e)),)</span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过BeautifulSoup解析文件，查看文件包含的额外连接。</span></span><br><span class="line"><span class="string">        :return: 文件中包含连接的集合</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        soup = BeautifulSoup(data, <span class="string">'html.parser'</span>)</span><br><span class="line">        parse_links = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> x.attrs:</span><br><span class="line">                parse_links.append(x[<span class="string">'href'</span>])</span><br><span class="line">        <span class="keyword">return</span> parse_links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长</span></span><br><span class="line"><span class="string">        self.seen 是已下载连接的集合</span></span><br><span class="line"><span class="string">        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致</span></span><br><span class="line"><span class="string">        :param url: 抓取的url</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.q = [url]</span><br><span class="line">        self.seen = set()</span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        self.dom = <span class="string">'.'</span>.join(host.split(<span class="string">'.'</span>)[<span class="number">-2</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self, url, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用于下载页面并记录连接信息</span></span><br><span class="line"><span class="string">        :param url:</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实例化Retriever类并传入需要抓取的连接</span></span><br><span class="line">        <span class="comment"># 下在对应连接并取到文件名</span></span><br><span class="line">        r = Retriever(url)</span><br><span class="line">        fname = r.download()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>] == <span class="string">'*'</span>:</span><br><span class="line">            print(fname, <span class="string">'....skipping parse'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        Crawler.count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\n('</span>, Crawler.count, <span class="string">')'</span>)</span><br><span class="line">        print(<span class="string">'URL:'</span>, url)</span><br><span class="line">        print(<span class="string">'FILE:'</span>, fname)</span><br><span class="line">        self.seen.add(url)</span><br><span class="line">        <span class="comment"># 跳过所有非Web页面</span></span><br><span class="line">        ftype = os.path.splitext(fname)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ftype <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'.htm'</span>, <span class="string">'.html'</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> r.parse_links():</span><br><span class="line">            <span class="keyword">if</span> link.startswith(<span class="string">'mailto:'</span>):</span><br><span class="line">                print(<span class="string">'...discarded , mailto link'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> media:</span><br><span class="line">                ftype = os.path.splitext(link)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> ftype <span class="keyword">in</span> (<span class="string">'.mp3'</span>, <span class="string">'.mp4'</span>, <span class="string">'.m4av'</span>, <span class="string">'.wav'</span>):</span><br><span class="line">                    print(<span class="string">'... discarded, media file'</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="string">':'</span> <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                link = urllib.parse.quote(link, safe=<span class="string">'#'</span>)</span><br><span class="line">                link = urllib.parse.urljoin(url, link)</span><br><span class="line">            print(<span class="string">'*'</span>, link)</span><br><span class="line">            <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.seen:</span><br><span class="line">                <span class="keyword">if</span> self.dom <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                    print(<span class="string">'... discarded, not in domain'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有下载过并且是属于该网站就加入待下载列表</span></span><br><span class="line">                    <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.q:</span><br><span class="line">                        self.q.append(link)</span><br><span class="line">                        print(<span class="string">'...New, added to Q'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">'...discarded, already in Q'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'...discarded, already processed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理所有待下载连接</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> self.q:</span><br><span class="line">            url = self.q.pop()</span><br><span class="line">            self.get_page(url, media)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = input(<span class="string">'Enter starting URL:'</span>)</span><br><span class="line">        <span class="keyword">except</span> (KeyboardInterrupt, EOFError):</span><br><span class="line">            url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'ftp://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'https://'</span>):</span><br><span class="line">        url = <span class="string">'http://%s'</span> % url</span><br><span class="line"></span><br><span class="line">    robot = Crawler(url)</span><br><span class="line">    robot.go()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="解析Web页面"><a href="#解析Web页面" class="headerlink" title="解析Web页面"></a>解析Web页面</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup</a>是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。</p><h3 id="可编程的Web浏览"><a href="#可编程的Web浏览" class="headerlink" title="可编程的Web浏览"></a>可编程的Web浏览</h3><p>可以使用<a href="https://pypi.python.org/pypi/MechanicalSoup/" target="_blank" rel="noopener">MechanicalSoup</a>用来模拟浏览器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-Web客户端工具&quot;&gt;&lt;a href=&quot;#Python-Web客户端工具&quot; class=&quot;headerlink&quot; title=&quot;Python Web客户端工具&quot;&gt;&lt;/a&gt;Python Web客户端工具&lt;/h2&gt;&lt;p&gt;浏览器只是Web客户端的一种。任何一
      
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="Web客户端和服务器" scheme="http://coldjune.com/tags/Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OFFICE转换工具</title>
    <link href="http://coldjune.com/2018/03/06/OFFICE%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <id>http://coldjune.com/2018/03/06/OFFICE转换工具/</id>
    <published>2018-03-06T01:19:39.000Z</published>
    <updated>2018-03-21T11:28:45.089Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全双工聊天室</title>
    <link href="http://coldjune.com/2018/03/04/%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://coldjune.com/2018/03/04/全双工聊天室/</id>
    <published>2018-03-04T06:33:16.000Z</published>
    <updated>2018-03-21T11:28:45.112Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。<br><a id="more"></a></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ul><li>GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类</li><li>客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容</li><li>编程线程的通用类，使所有线程的实现都通过该类，便于统一管理</li><li>完成客户端和服务器端的代码并进行整合调试</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="GUI的基类"><a href="#GUI的基类" class="headerlink" title="GUI的基类"></a>GUI的基类</h3><blockquote><p>chat_base.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatWindowBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 窗口的基类，创建通用的窗口布局</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 创建tkinter.TK()顶层窗口</span></span><br><span class="line">        <span class="comment"># 所有主要控件都是构建在顶层窗口对象之上</span></span><br><span class="line">        <span class="comment"># 通过tkinter.TK()创建</span></span><br><span class="line">        self.top = tk.Tk()</span><br><span class="line">        <span class="comment"># 在顶层窗口上添加Label控件</span></span><br><span class="line">        self.label = tk.Label(self.top, text=<span class="string">'聊天室'</span>)</span><br><span class="line">        <span class="comment"># 通过Packer来管理和显示控件</span></span><br><span class="line">        <span class="comment"># 调用pack()方法显示布局</span></span><br><span class="line">        self.label.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过Frame控件创建子容器，用于存放其他控件</span></span><br><span class="line">        <span class="comment"># 该对象将作为单个子对象代替父对象</span></span><br><span class="line">        self.chatfm = tk.Frame(self.top)</span><br><span class="line">        <span class="comment"># Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表</span></span><br><span class="line">        self.chatsb = tk.Scrollbar(self.chatfm)</span><br><span class="line">        <span class="comment"># 将Scrollbar放置在子容器的右侧，并且是针对y轴</span></span><br><span class="line">        self.chatsb.pack(side=<span class="string">'right'</span>, fill=<span class="string">'y'</span>)</span><br><span class="line">        <span class="comment"># 在子容器中创建高为15宽为50的Listbox</span></span><br><span class="line">        <span class="comment"># 将Listbox和Scrollbar关联起来</span></span><br><span class="line">        <span class="comment"># 显示列表</span></span><br><span class="line">        <span class="comment"># 显示子容器</span></span><br><span class="line">        <span class="comment"># 控件的显示应该内部控件先显示，再显示外部控件</span></span><br><span class="line">        self.chats = tk.Listbox(self.chatfm, height=<span class="number">15</span>,</span><br><span class="line">                                width=<span class="number">50</span>, yscrollcommand=self.chatsb.set)</span><br><span class="line">        self.chatsb.config(command=self.chats.yview())</span><br><span class="line">        self.chats.pack(side=<span class="string">'left'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.chatfm.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建发送消息的子容器</span></span><br><span class="line">        self.sendfm = tk.Frame(self.top, width=<span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 创建输入框</span></span><br><span class="line">        <span class="comment"># 绑定回车键，并且绑定send方法</span></span><br><span class="line">        <span class="comment"># 绑定一个方法是指在触发一个事件时会去调用的方法</span></span><br><span class="line">        self.chatn = tk.Entry(self.sendfm, width=<span class="number">40</span>)</span><br><span class="line">        self.chatn.bind(<span class="string">'&lt;Return&gt;'</span>, self.send)</span><br><span class="line">        self.chatn.pack(side=<span class="string">'left'</span>)</span><br><span class="line">        <span class="comment"># 添加按钮控件、绑定方法</span></span><br><span class="line">        self.sendchat = tk.Button(self.sendfm, text=<span class="string">'发送'</span>, command=self.send)</span><br><span class="line">        self.sendchat.pack(side=<span class="string">'right'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.sendfm.pack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 创建发送消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建接受消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="线程的通用类"><a href="#线程的通用类" class="headerlink" title="线程的通用类"></a>线程的通用类</h3><blockquote><p>chat_thread.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 继承自threading.Thread，用于创建聊天室的通用线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        <span class="comment"># func: 方法</span></span><br><span class="line">        <span class="comment"># args：方法所需要的参数</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实现run方法，将参数传给相应的方法</span></span><br><span class="line">        self.func(*self.args)</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><blockquote><p>chat_s.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#  -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatS</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 服务器的实现类，继承自ChatWindowBase</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__()方法</span></span><br><span class="line">        super(ChatS, self).__init__()</span><br><span class="line">        self.label.configure(text=<span class="string">'服务器'</span>)</span><br><span class="line">        <span class="comment"># 设置属性</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接对象</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接地址</span></span><br><span class="line">        self.send_sock = <span class="keyword">None</span></span><br><span class="line">        self.addr = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 在服务器窗口创建时调用</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 获取输入框信息</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        ChatThread(self.send_s, (message,)).start()</span><br><span class="line">        <span class="comment"># 将输入框信息按照格式显示在Listbox</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s\n'</span> % (ctime(), self.addr))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框内容</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        <span class="comment"># 绑定地址</span></span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        <span class="comment"># 阻塞直到有链接调用，然后保存链接的客户端对象和地址</span></span><br><span class="line">        sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        sock.bind(ADDR)</span><br><span class="line">        sock.listen(<span class="number">5</span>)</span><br><span class="line">        cli_sock, addr = sock.accept()</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.send_sock = cli_sock</span><br><span class="line">        print(<span class="string">'addr'</span>, addr)</span><br><span class="line">        <span class="comment"># 有链接接入时在Listbox中显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s 上线'</span> % str(addr))</span><br><span class="line">        <span class="comment"># 更新顶层窗口</span></span><br><span class="line">        self.top.update()</span><br><span class="line">        <span class="comment"># 启动接受消息的线程</span></span><br><span class="line">        ChatThread(self.receive_s, (cli_sock, addr)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_s</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 向客户端发送消息</span></span><br><span class="line">        self.send_sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_s</span><span class="params">(self, cli_sock, addr)</span>:</span></span><br><span class="line">        <span class="comment"># 接受消息</span></span><br><span class="line">        <span class="comment"># cli_sock: 客户端sock</span></span><br><span class="line">        <span class="comment"># addr: 客户端地址</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入无限循环接受消息，并在Listbox显示消息</span></span><br><span class="line">            receiveData = cli_sock.recv(BUFSIZ)</span><br><span class="line">            print(<span class="string">'接受到消息'</span>, receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), addr))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建服务器窗口</span></span><br><span class="line">    s = ChatS()</span><br><span class="line">    <span class="comment"># 调用mainloop()运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>chat_c.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatC</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 客户端的实现类，继承子ChatWindowBase方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 在子类中必须调用父类的__init__()方法</span></span><br><span class="line">        super(ChatC, self).__init__()</span><br><span class="line">        <span class="comment"># 设置label的标题</span></span><br><span class="line">        self.label.configure(text=<span class="string">'客户端'</span>)</span><br><span class="line">        <span class="comment"># 设置属性，用于保存sock对象用于发送和接受消息</span></span><br><span class="line">        self.sock = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 在创建窗口时链接服务器，</span></span><br><span class="line">        <span class="comment"># 客户端需要比服务器后创建</span></span><br><span class="line">        <span class="comment"># 否则链接会创建失败</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类，为控件调用的方法</span></span><br><span class="line">        <span class="comment"># 获取输入框的值</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 创建发送消息的线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.send_c, (message,)).start()</span><br><span class="line">        <span class="comment"># 在Listbox中按格式显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s'</span> % (ctime(), ADDR))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框中的消息</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 通过更新顶层窗口显示消息</span></span><br><span class="line">        self.top.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.sock.connect(ADDR)</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.receive_c, (self.sock,)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_c</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 调用sock的send方法，向服务器发送消息</span></span><br><span class="line">        self.sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_c</span><span class="params">(self, sock)</span>:</span></span><br><span class="line">        <span class="comment"># 接受服务器数据的方法</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入循环，等待服务器发送的消息</span></span><br><span class="line">            data = sock.recv(BUFSIZ)</span><br><span class="line">            <span class="comment"># 将消息按照格式显示到Listbox中</span></span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), ADDR))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="comment"># 更新控件</span></span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 实例化客户端窗口</span></span><br><span class="line">    c = ChatC()</span><br><span class="line">    <span class="comment"># 调用mainloop方法运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/chat" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="GUI" scheme="http://coldjune.com/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>Python数据库编程(二)</title>
    <link href="http://coldjune.com/2018/02/28/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/28/Python数据库编程-二/</id>
    <published>2018-02-28T10:15:57.000Z</published>
    <updated>2018-03-21T11:28:45.096Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。<br><a id="more"></a></p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。</p><h3 id="python与ORM"><a href="#python与ORM" class="headerlink" title="python与ORM"></a>python与ORM</h3><p><a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a>和<a href="http://sqlobject.org/" target="_blank" rel="noopener">SQLObject</a>是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。</p><ul><li><p>安装SQLAlchemy<br><code>pip3 install sqlalchemy</code></p></li><li><p>安装SQLObject<br><code>pip3 install -U SQLObject</code></p></li></ul><p>在这里将会通过两种ORM移植上一篇的<a href="http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用">数据库适配器示例应用</a></p><h4 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h4><blockquote><p>SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先导入标准库中的模块(os.path、random)</span></span><br><span class="line"><span class="comment"># 然后是第三方或外部模块(sqlalchemy)</span></span><br><span class="line"><span class="comment"># 最后是应用的本地模块(ushuffleDB)</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> dirname</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, \</span><br><span class="line">    String, create_engine, exc, orm</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative \</span><br><span class="line">    <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span> DBNAME, NAMELEN, \</span><br><span class="line">    randName, FIELDS, tformat, cformat, setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称</span></span><br><span class="line">DSNs = &#123;</span><br><span class="line">    <span class="string">'mysql'</span>: <span class="string">'mysql+pymysql://root:root@localhost:3306/%s'</span> % DBNAME,</span><br><span class="line">    <span class="string">'sqlite'</span>: <span class="string">'sqlite:///:memory:'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SQLAlchemy的声明层</span></span><br><span class="line"><span class="comment"># 使用导入的sqlalchemy.ext.declarative.declarative_base</span></span><br><span class="line"><span class="comment"># 创建一个Base类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="comment"># 数据子类</span></span><br><span class="line">    <span class="comment"># __tablename__定义了映射的数据库表名</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    <span class="comment"># 列的属性，可以查阅文档来获取所有支持的数据类型</span></span><br><span class="line">    login = Column(String(NAMELEN))</span><br><span class="line">    userid = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    projid = Column(Integer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用于返回易于阅读的数据行的字符串格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(tformat, (self.login, self.userid, self.projid)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLAlchemyTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dsn)</span>:</span></span><br><span class="line">        <span class="comment"># 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接</span></span><br><span class="line">        <span class="comment"># 通过设置echo参数查看ORM生成的SQL语句</span></span><br><span class="line">        <span class="comment"># create_engine('sqlite:///:memory:', echo=True)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            eng = create_engine(dsn)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            eng.connect()</span><br><span class="line">        <span class="keyword">except</span> exc.OperationalError:</span><br><span class="line">            <span class="comment"># 此处连接失败是因为数据库不存在造成的</span></span><br><span class="line">            <span class="comment"># 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分</span></span><br><span class="line">            <span class="comment"># 使数据库的连接可以正常运行</span></span><br><span class="line">            <span class="comment"># 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL</span></span><br><span class="line">            eng = create_engine(dirname(dsn))</span><br><span class="line">            eng.execute(<span class="string">'CREATE DATABASE %s'</span> % DBNAME).close()</span><br><span class="line">            eng = create_engine(dsn)</span><br><span class="line">        <span class="comment"># 创建一个会话对象，用于管理单独的事务对象</span></span><br><span class="line">        <span class="comment"># 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交</span></span><br><span class="line">        <span class="comment"># 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来</span></span><br><span class="line">        <span class="comment"># 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中</span></span><br><span class="line">        Session = orm.sessionmaker(bind=eng)</span><br><span class="line">        self.ses = Session()</span><br><span class="line">        self.users = Users.__table__</span><br><span class="line">        self.eng = self.users.metadata.bind = eng</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># session.add_all()使用迭代的方式产生一系列的插入操作</span></span><br><span class="line">        self.ses.add_all(</span><br><span class="line">            Users(login=who, userid=userid, projid=rand(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            <span class="keyword">for</span> who, userid <span class="keyword">in</span> randName()</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 决定是提交还是回滚</span></span><br><span class="line">        self.ses.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 会话查询的功能，使用query.filter_by()方法进行查找</span></span><br><span class="line">        users = self.ses.query(Users).filter_by(projid=fr).all()</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.projid = to</span><br><span class="line">        self.ses.commit()</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        users = self.ses.query(Users).filter_by(projid=rm).all()</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            self.ses.delete(user)</span><br><span class="line">        self.ses.commit()</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在屏幕上显示正确的输出</span></span><br><span class="line">        print(<span class="string">'\n%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        users = self.ses.query(Users).all()</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            print(user)</span><br><span class="line">        self.ses.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="comment"># __getattr__()可以避开创建drop()和create()方法</span></span><br><span class="line">        <span class="comment"># __getattr__()只有在属性查找失败时才会被调用</span></span><br><span class="line">        <span class="comment"># 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')</span></span><br><span class="line">        <span class="comment"># 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现</span></span><br><span class="line">        <span class="comment"># slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self.users, attr)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.ses.connection().close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 入口函数</span></span><br><span class="line">    print(<span class="string">'\n***Connnect to %r database'</span> % DBNAME)</span><br><span class="line">    db = setup()</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">not</span> <span class="keyword">in</span> DSNs:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        orm = SQLAlchemyTest(DSNs[db])</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Create users table(drop old one if appl.'</span>)</span><br><span class="line">    orm.drop(checkfirst=<span class="keyword">True</span>)</span><br><span class="line">    orm.create()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Insert namse into table'</span>)</span><br><span class="line">    orm.insert()</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = orm.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d))'</span> % (num, fr, to))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Randomly delete group'</span>)</span><br><span class="line">    rm, num = orm.delete()</span><br><span class="line">    print(<span class="string">'\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Drop users table'</span>)</span><br><span class="line">    orm.drop()</span><br><span class="line">    print(<span class="string">'***Close cxns'</span>)</span><br><span class="line">    orm.finish()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>mysql输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">***Connnect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">Choose a database system:</span><br><span class="line">    (M)ySQL</span><br><span class="line">    (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Create users table(drop old one if appl.</span><br><span class="line"></span><br><span class="line">***Insert namse into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      1         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(2 users moved) from (1) to (4))</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly delete group</span><br><span class="line">(group #2; 0 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***Connnect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">Choose a database system:</span><br><span class="line">        (M)ySQL</span><br><span class="line">        (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line"></span><br><span class="line">*** Create users table(drop old one if appl.</span><br><span class="line"></span><br><span class="line">***Insert namse into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(2 users moved) from (2) to (2))</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Randomly delete group</span><br><span class="line">(group #1; 1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><h4 id="SQLObject"><a href="#SQLObject" class="headerlink" title="SQLObject"></a>SQLObject</h4><p>SQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient" target="_blank" rel="noopener">Mysqlclient</a>，选择对应的版本进行下载后执行相应的命令：<br><code>pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SQLObject代替SQLAlchemy</span></span><br><span class="line"><span class="comment"># 其余和使用SQLAlchemy的相同</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> dirname</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> sqlobject <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span>  DBNAME, NAMELEN, \</span><br><span class="line">    randName, FIELDS, tformat, cformat, setup</span><br><span class="line"></span><br><span class="line">DSNs = &#123;</span><br><span class="line">    <span class="string">'mysql'</span>: <span class="string">'mysql://root:root@127.0.0.1:3306/%s'</span> % DBNAME,</span><br><span class="line">    <span class="string">'sqlite'</span>: <span class="string">'sqlite:///:memory:'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(SQLObject)</span>:</span></span><br><span class="line">    <span class="comment"># 扩展了SQLObject.SQLObject类</span></span><br><span class="line">    <span class="comment"># 定义列</span></span><br><span class="line">    login = StringCol(length=NAMELEN)</span><br><span class="line">    userid = IntCol()</span><br><span class="line">    projid = IntCol()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 提供用于显示输出的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(tformat, (</span><br><span class="line">            self.login, self.userid, self.projid)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLObjectTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dsn)</span>:</span></span><br><span class="line">        <span class="comment"># 确保得到一个可用的数据库，然后返回连接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cxn = connectionForURI(dsn)</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试对已存在的表建立连接</span></span><br><span class="line">            <span class="comment"># 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常</span></span><br><span class="line">            cxn.releaseConnection(cxn.getConnection())</span><br><span class="line">        <span class="keyword">except</span> dberrors.OperationalError:</span><br><span class="line">            <span class="comment"># 出现异常则创建表</span></span><br><span class="line">            cxn = connectionForURI(dirname(dsn))</span><br><span class="line">            cxn.query(<span class="string">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class="line">            cxn = connectionForURI(dsn)</span><br><span class="line">        <span class="comment"># 成功后在self.cxn中保存连接对象</span></span><br><span class="line">        self.cxn = sqlhub.processConnection = cxn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        <span class="keyword">for</span> who, userid <span class="keyword">in</span> randName():</span><br><span class="line">            Users(login=who, userid=userid, projid=rand(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        users = Users.selectBy(projid=fr)</span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.projid = to</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 删除</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        users = Users.selectBy(projid=rm)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(users):</span><br><span class="line">            user.destroySelf()</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'\n%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> Users.select():</span><br><span class="line">            print(user)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.cxn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'***Connect to %r database'</span> % DBNAME)</span><br><span class="line">    db = setup()</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">not</span> <span class="keyword">in</span> DSNs:</span><br><span class="line">        print(<span class="string">'\nError: %r not support'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        orm = SQLObjectTest(DSNs[db])</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'\nError: %r not support'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Create users table(drop old one if appl.)'</span>)</span><br><span class="line">    Users.dropTable(<span class="keyword">True</span>)</span><br><span class="line">    Users.createTable()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Insert names into table'</span>)</span><br><span class="line">    orm.insert()</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = orm.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Randomly delete group'</span>)</span><br><span class="line">    rm, num = orm.delete()</span><br><span class="line">    print(<span class="string">'\t(group #%d;%d users removed)'</span> % (rm, num))</span><br><span class="line">    orm.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Drop users table'</span>)</span><br><span class="line">    <span class="comment"># 使用dropTable()方法</span></span><br><span class="line">    Users.dropTable()</span><br><span class="line">    print(<span class="string">'\n***Close cxns'</span>)</span><br><span class="line">    orm.finish()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>MySQL输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line"></span><br><span class="line">***Create users table(drop old one if appl.)</span><br><span class="line"></span><br><span class="line">*** Insert names into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Move users to a random group</span><br><span class="line">(0 users moved) from (2) to (4)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">(group #3;1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      1         </span><br><span class="line"></span><br><span class="line">*** Drop users table</span><br><span class="line"></span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line"></span><br><span class="line">***Create users table(drop old one if appl.)</span><br><span class="line"></span><br><span class="line">*** Insert names into table</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      3         </span><br><span class="line"></span><br><span class="line">*** Move users to a random group</span><br><span class="line">(1 users moved) from (3) to (1)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      1         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">(group #2;1 users removed)</span><br><span class="line"></span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Angela    4567      4         </span><br><span class="line">Dave      4523      1         </span><br><span class="line"></span><br><span class="line">*** Drop users table</span><br><span class="line"></span><br><span class="line">***Close cxns</span><br></pre></td></tr></table></figure><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>Web和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。</p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>是非常流行的文档存储非关系数据库。</p><blockquote><p>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型</p></blockquote><p>MongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。</p><h3 id="PyMongo-MongoDB和Python"><a href="#PyMongo-MongoDB和Python" class="headerlink" title="PyMongo:MongoDB和Python"></a>PyMongo:MongoDB和Python</h3><p>PyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要<a href="https://www.mongodb.com/download-center?jmp=nav#atlas" target="_blank" rel="noopener">安装MongoDB数据库</a>和PyMongo：<br><code>pip3 install pymongo</code><br>在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令<br><code>.mongod --dbpath E:\MongoDB\data</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要导入的是MongoClient对象和及其包异常errors</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient, errors</span><br><span class="line"><span class="keyword">from</span> ushuffleDB <span class="keyword">import</span> DBNAME, randName, FIELDS, tformat, cformat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置了集合(“表”)名</span></span><br><span class="line">COLLECTION = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个连接，如果服务器不可达，则抛出异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cxn = MongoClient()</span><br><span class="line">        <span class="keyword">except</span> errors.AutoReconnect:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError</span><br><span class="line">        <span class="comment"># 创建并复用数据库及“users”集合</span></span><br><span class="line">        <span class="comment"># 关系数据库中的表会对列的格式进行定义，</span></span><br><span class="line">        <span class="comment"># 然后使遵循这个列定义的每条记录成为一行</span></span><br><span class="line">        <span class="comment"># 非关系数据库中集合没有任何模式的需求，</span></span><br><span class="line">        <span class="comment"># 每条记录都有其特定的文档</span></span><br><span class="line">        <span class="comment"># 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中</span></span><br><span class="line">        self.db = cxn[DBNAME]</span><br><span class="line">        self.users = self.db[COLLECTION]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 向MongoDB的集合中添加值</span></span><br><span class="line">        <span class="comment"># 使用dict()工厂函数为每条记录创建一个文档</span></span><br><span class="line">        <span class="comment"># 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法</span></span><br><span class="line">        self.users.insert(</span><br><span class="line">            dict(login=who, userid=uid, projid=rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">                 )<span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项</span></span><br><span class="line">        fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户</span></span><br><span class="line">        <span class="comment"># 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(self.users.find(&#123;<span class="string">'projid'</span>: fr&#125;)):</span><br><span class="line">            <span class="comment"># 使用$set指令可以显式地修改已存在的值</span></span><br><span class="line">            <span class="comment"># 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷</span></span><br><span class="line">            <span class="comment"># 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值</span></span><br><span class="line">            <span class="comment"># update()方法可以用来修改多个文档(将multi标志设为True)</span></span><br><span class="line">            self.users.update(user, &#123;</span><br><span class="line">                <span class="string">'$set'</span>: &#123;<span class="string">'projid'</span>: to&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> fr, to, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除</span></span><br><span class="line">        <span class="comment"># 然后返回结果</span></span><br><span class="line">        rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, user <span class="keyword">in</span> enumerate(self.users.find(&#123;<span class="string">'projid'</span>: rm&#125;)):</span><br><span class="line">            self.users.remove(user)</span><br><span class="line">        <span class="keyword">return</span> rm, i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示</span></span><br><span class="line">        print(<span class="string">'%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.users.find():</span><br><span class="line">            print(<span class="string">''</span>.join(map(tformat, (</span><br><span class="line">                user[k] <span class="keyword">for</span> k <span class="keyword">in</span> FIELDS))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'***Connect to %r database'</span> % DBNAME)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mongo = MongoTest()</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        print(<span class="string">'\nERROR: MongoDB server unreadable, exit'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Insert names into table'</span>)</span><br><span class="line">    mongo.insert()</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Move users to a random group'</span>)</span><br><span class="line">    fr, to, num = mongo.update()</span><br><span class="line">    print(<span class="string">'\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n*** Randomly delete group'</span>)</span><br><span class="line">    rm, num = mongo.delete()</span><br><span class="line">    print(<span class="string">'\tgroup #%d; %d users removed'</span> % (rm, num))</span><br><span class="line">    mongo.dbDump()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Drop users table'</span>)</span><br><span class="line">    mongo.db.drop_collection(COLLECTION)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">***Connect to &apos;test&apos; database</span><br><span class="line"></span><br><span class="line">***Insert names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">***Move users to a random group</span><br><span class="line">(0 users moved) from (1) to (2)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line">Angela    4567      2         </span><br><span class="line"></span><br><span class="line">*** Randomly delete group</span><br><span class="line">group #2; 1 users removed</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      4         </span><br><span class="line">Bob       1234      4         </span><br><span class="line"></span><br><span class="line">***Drop users table</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="数据库编程" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python数据库编程(一)</title>
    <link href="http://coldjune.com/2018/02/28/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/28/Python数据库编程-一/</id>
    <published>2018-02-28T01:47:18.000Z</published>
    <updated>2018-03-21T11:28:45.094Z</updated>
    
    <content type="html"><![CDATA[<p>Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过<strong>适配器</strong>的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。<br><a id="more"></a></p><h2 id="Python的DB-API"><a href="#Python的DB-API" class="headerlink" title="Python的DB-API"></a>Python的DB-API</h2><blockquote><p>DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问</p></blockquote><h3 id="模块属性"><a href="#模块属性" class="headerlink" title="模块属性"></a>模块属性</h3><h4 id="DB-API模块属性"><a href="#DB-API模块属性" class="headerlink" title="DB-API模块属性"></a>DB-API模块属性</h4><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">apilevel</td><td style="text-align:center">需要适配器兼容的DB-API版本</td></tr><tr><td style="text-align:center">threadsafety</td><td style="text-align:center">本模块的线程安全级别</td></tr><tr><td style="text-align:center">paramstyle</td><td style="text-align:center">本模块的SQL语句参数风格</td></tr><tr><td style="text-align:center">connect()</td><td style="text-align:center">Connect()函数</td></tr><tr><td style="text-align:center">(多种异常)</td></tr></tbody></table><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><ul><li><p>apilevel</p><blockquote><p>该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0</p></blockquote></li><li><p>threadsafety</p><blockquote><p>0: 不支持线程安全。线程间不能共享模块<br>1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接<br>2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标<br>3: 完整的线程安全支持：线程间可以共享模块、连接和游标</p></blockquote></li></ul><p><strong>如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的</strong></p><h4 id="参数风格"><a href="#参数风格" class="headerlink" title="参数风格"></a>参数风格</h4><ul><li>paramstyle</li></ul><table><thead><tr><th style="text-align:center">参数风格</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">numeric</td><td style="text-align:center">数值位置风格</td><td style="text-align:center">WHERE name=:1</td></tr><tr><td style="text-align:center">named</td><td style="text-align:center">命名风格</td><td style="text-align:center">WHERE name=:name</td></tr><tr><td style="text-align:center">pyformat</td><td style="text-align:center">Python字典printf()格式转换</td><td style="text-align:center">WHERE name=%(name)s</td></tr><tr><td style="text-align:center">qmark</td><td style="text-align:center">问号风格</td><td style="text-align:center">WHERE name=?</td></tr><tr><td style="text-align:center">format</td><td style="text-align:center">ANSIC的printf()格式转换</td><td style="text-align:center">WHERE name=%s</td></tr></tbody></table><h4 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h4><blockquote><p>connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象</p></blockquote><p>connect()函数使用例子：<br><code>connect(dsn=&#39;myhost:MYDB&#39;, user=&#39;root&#39;, password=&#39;root&#39;)</code></p><ul><li>connect()函数属性</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">用户名</td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">面</td></tr><tr><td style="text-align:center">host</td><td style="text-align:center">主机名</td></tr><tr><td style="text-align:center">database</td><td style="text-align:center">数据库名</td></tr><tr><td style="text-align:center">dsn</td><td style="text-align:center">数据源名</td></tr></tbody></table><p>使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><table><thead><tr><th style="text-align:center">异常</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Warning</td><td style="text-align:center">警告异常基类</td></tr><tr><td style="text-align:center">Error</td><td style="text-align:center">错误异常基类</td></tr><tr><td style="text-align:center">InterfaceError</td><td style="text-align:center">数据库接口(非数据库)错误</td></tr><tr><td style="text-align:center">DatabaseError</td><td style="text-align:center">数据库错误</td></tr><tr><td style="text-align:center">DataError</td><td style="text-align:center">处理数据时出现错误</td></tr><tr><td style="text-align:center">OperationError</td><td style="text-align:center">数据库操作执行期间出现的错误</td></tr><tr><td style="text-align:center">IntegrityError</td><td style="text-align:center">数据库关系完整性错误</td></tr><tr><td style="text-align:center">InternalError</td><td style="text-align:center">数据库内部错误</td></tr><tr><td style="text-align:center">ProgrammingError</td><td style="text-align:center">SQL命令执行失败</td></tr><tr><td style="text-align:center">NotSupportedError</td><td style="text-align:center">出现不支持的操作</td></tr></tbody></table><h3 id="Connection对象"><a href="#Connection对象" class="headerlink" title="Connection对象"></a>Connection对象</h3><blockquote><p>只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应</p></blockquote><h4 id="Connection对象方法"><a href="#Connection对象方法" class="headerlink" title="Connection对象方法"></a>Connection对象方法</h4><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭数据库连接</td></tr><tr><td style="text-align:center">commit()</td><td style="text-align:center">提交当前事务</td></tr><tr><td style="text-align:center">rollback()</td><td style="text-align:center">取消当前事务</td></tr><tr><td style="text-align:center">cursor()</td><td style="text-align:center">使用该连接创建(并返回)一个游标或类游标的对象</td></tr><tr><td style="text-align:center">errorhandler(cxn,cur,errcls,errval)</td><td style="text-align:center">作为给定连接的游标的处理程序</td></tr></tbody></table><ul><li>当使用<code>close()</code>时，这个连接将不能再使用，否则会进入到异常处理中</li><li>如果数据库不支持事务处理或启用了自动提交功能，<code>commit()</code>方法都无法使用</li><li><code>rollback()</code>只能在支持事务处理的数据库中使用。发生异常时，<code>rollback()</code>会将数据库的状态恢复到事务处理开始时。</li><li>如果RDBMS(关系数据库管理系统)不支持游标，<code>cursor()</code>会返回一个尽可能模仿真实游标的对象</li></ul><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><blockquote><p>游标可以让用户提交数据库命令，并获得查询的结果行。</p></blockquote><table><thead><tr><th style="text-align:center">对象属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">arraysize</td><td style="text-align:center">使用fetchmany()方法时，一次取出的结果行数，默认为1</td></tr><tr><td style="text-align:center">connection</td><td style="text-align:center">创建此游标的连接(可选)</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的</td></tr><tr><td style="text-align:center">lastrowid</td><td style="text-align:center">上次修改行的行ID(可选，如果不支持行ID，则返回None)</td></tr><tr><td style="text-align:center">rowcount</td><td style="text-align:center">上次execute*()方法处理或影响的行数</td></tr><tr><td style="text-align:center">callproc(func[,args])</td><td style="text-align:center">调用存储过程</td></tr><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭游标</td></tr><tr><td style="text-align:center">execute(op[,args])</td><td style="text-align:center">执行数据库查询或命令</td></tr><tr><td style="text-align:center">executemany(op,args)</td><td style="text-align:center">类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令</td></tr><tr><td style="text-align:center">fetchone()</td><td style="text-align:center">获取查询结果的下一行</td></tr><tr><td style="text-align:center">fetchmany([size=cursor,arraysize])</td><td style="text-align:center">获取查询结果的下面size行</td></tr><tr><td style="text-align:center">fetchall()</td><td style="text-align:center">获取查询结果的所有(剩余)行</td></tr><tr><td style="text-align:center"><strong>iter</strong>()</td><td style="text-align:center">为游标创建迭代器对象(可选，参考nexi())</td></tr><tr><td style="text-align:center">messages</td><td style="text-align:center">游标执行后从数据库中获得的消息列表(元组集合，可选)</td></tr><tr><td style="text-align:center">next()</td><td style="text-align:center">被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考<strong>iter</strong>())</td></tr><tr><td style="text-align:center">nextset()</td><td style="text-align:center">移动到下一个结果集合(如果支持)</td></tr><tr><td style="text-align:center">rownumber</td><td style="text-align:center">当前结果集中游标的索引(以行为单位，从0开始，可选)</td></tr><tr><td style="text-align:center">setinputsizes(sizes)</td><td style="text-align:center">设置允许的最大输入大小(必须有，但是实现是可选的)</td></tr><tr><td style="text-align:center">setoutputsize(size[,col])</td><td style="text-align:center">设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)</td></tr></tbody></table><p><strong>游标对象最重要的属性是execute<em>()和fetch</em>()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标</strong></p><h4 id="类型对象和构造函数"><a href="#类型对象和构造函数" class="headerlink" title="类型对象和构造函数"></a>类型对象和构造函数</h4><blockquote><p>创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象</p></blockquote><table><thead><tr><th style="text-align:center">类型对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Date(yr,mo,dy)</td><td style="text-align:center">日期值对象</td></tr><tr><td style="text-align:center">Time(hr,min,sec)</td><td style="text-align:center">时间值对象</td></tr><tr><td style="text-align:center">Timestamp(yr,mo,dy,hr,min,sec)</td><td style="text-align:center">时间戳值对象</td></tr><tr><td style="text-align:center">DateFromTicks(ticks)</td><td style="text-align:center">日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">TimeFromTicks(ticks)</td><td style="text-align:center">时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">TimestampFromTicks(ticks)</td><td style="text-align:center">时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td></tr><tr><td style="text-align:center">Binary(string)</td><td style="text-align:center">对应二进制(长)字符串对象</td></tr><tr><td style="text-align:center">STRING</td><td style="text-align:center">表示基于字符串列的对象，比如VARCHAR</td></tr><tr><td style="text-align:center">BINARY</td><td style="text-align:center">表示(长)二进制列的对象，比如RAW、BLOB</td></tr><tr><td style="text-align:center">NUMBER</td><td style="text-align:center">表示数值列的对象</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">表示日期/时间列的对象</td></tr><tr><td style="text-align:center">ROWID</td><td style="text-align:center">表示“行ID”列的对象</td></tr></tbody></table><p><strong>SQL的NULL值对应于Python的NULL对象None</strong></p><h4 id="数据库适配器示例应用"><a href="#数据库适配器示例应用" class="headerlink" title="数据库适配器示例应用"></a>数据库适配器示例应用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入必需的模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange <span class="keyword">as</span> rand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了全局变量</span></span><br><span class="line"><span class="comment"># 用于显示列的大小，以及支持的数据库种类</span></span><br><span class="line">COLSIZ = <span class="number">10</span></span><br><span class="line">FIELDS = (<span class="string">'login'</span>, <span class="string">'userid'</span>, <span class="string">'projid'</span>)</span><br><span class="line">RDBMSs = &#123;</span><br><span class="line">    <span class="string">'s'</span>: <span class="string">'sqlite'</span>,</span><br><span class="line">    <span class="string">'m'</span>: <span class="string">'mysql'</span>,</span><br><span class="line">&#125;</span><br><span class="line">DBNAME = <span class="string">'test'</span></span><br><span class="line">DBUSER = <span class="string">'root'</span></span><br><span class="line"><span class="comment"># 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块</span></span><br><span class="line">DB_EXC = <span class="keyword">None</span></span><br><span class="line">NAMELEN = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化字符串以显示标题</span></span><br><span class="line"><span class="comment"># 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式</span></span><br><span class="line"><span class="comment"># 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)</span></span><br><span class="line">tformat = <span class="keyword">lambda</span> s: str(s).title().ljust(COLSIZ)</span><br><span class="line">cformat = <span class="keyword">lambda</span> s: s.upper().ljust(COLSIZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RDBMSs[input(<span class="string">'''</span></span><br><span class="line"><span class="string">        Choose a database system:</span></span><br><span class="line"><span class="string">        (M)ySQL</span></span><br><span class="line"><span class="string">        (S)QLite</span></span><br><span class="line"><span class="string">        Enter choice:</span></span><br><span class="line"><span class="string">    '''</span>).strip().lower()[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(db)</span>:</span></span><br><span class="line">    <span class="comment"># 数据库一致性访问的核心</span></span><br><span class="line">    <span class="comment"># 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块</span></span><br><span class="line">    <span class="comment"># 就返回None，表示无法支持数据库系统</span></span><br><span class="line">    <span class="keyword">global</span> DB_EXC</span><br><span class="line">    dbDir = <span class="string">'%s_%s'</span> % (db, DBNAME)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> db == <span class="string">'sqlite'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试加载sqlite3模块</span></span><br><span class="line">            <span class="keyword">import</span> sqlite3</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        DB_EXC = sqlite3</span><br><span class="line">        <span class="comment"># 当对SQLite调用connect()时，会使用已存在的目录</span></span><br><span class="line">        <span class="comment"># 如果没有，则创建一个新目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dbDir):</span><br><span class="line">            os.mkdir(dbDir)</span><br><span class="line">        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))</span><br><span class="line">    <span class="keyword">elif</span> db == <span class="string">'mysql'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 由于MySQLdb不支持python3.6，所以导入pymysql</span></span><br><span class="line">            <span class="keyword">import</span> pymysql</span><br><span class="line">            <span class="keyword">import</span> pymysql.err <span class="keyword">as</span> DB_EXC</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                      user=<span class="string">"root"</span>,</span><br><span class="line">                                      password=<span class="string">"root"</span>,</span><br><span class="line">                                      port=<span class="number">3306</span>,</span><br><span class="line">                                      db=DBNAME)</span><br><span class="line">            <span class="keyword">except</span> DB_EXC.InternalError:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                          user=<span class="string">"root"</span>,</span><br><span class="line">                                          password=<span class="string">"root"</span>,</span><br><span class="line">                                          port=<span class="number">3306</span>)</span><br><span class="line">                    cxn.query(<span class="string">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class="line">                    cxn.commit()</span><br><span class="line">                    cxn.close()</span><br><span class="line">                    cxn = pymysql.connect(host=<span class="string">"localhost"</span>,</span><br><span class="line">                                          user=<span class="string">"root"</span>,</span><br><span class="line">                                          password=<span class="string">"root"</span>,</span><br><span class="line">                                          port=<span class="number">3306</span>,</span><br><span class="line">                                          db=DBNAME)</span><br><span class="line">                <span class="keyword">except</span> DB_EXC.InternalError:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> cxn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(cur)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个新表users</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cur.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">            CREATE  TABLE  users(</span></span><br><span class="line"><span class="string">                login VARCHAR(%d),</span></span><br><span class="line"><span class="string">                userid INTEGER,</span></span><br><span class="line"><span class="string">                projid INTEGER</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">        '''</span> % NAMELEN)</span><br><span class="line">    <span class="keyword">except</span> DB_EXC.InternalError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果发生错误，几乎总是这个表已经存在了</span></span><br><span class="line">        <span class="comment"># 删除该表，重新创建</span></span><br><span class="line">        drop(cur)</span><br><span class="line">        create(cur)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库表的函数</span></span><br><span class="line">drop = <span class="keyword">lambda</span> cur: cur.execute(<span class="string">'DROP TABLE users'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由用户名和用户ID组成的常量</span></span><br><span class="line">NAMES = (</span><br><span class="line">    (<span class="string">'bob'</span>, <span class="number">1234</span>), (<span class="string">'angela'</span>, <span class="number">4567</span>), (<span class="string">'dave'</span>, <span class="number">4523</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randName</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 生成器</span></span><br><span class="line">    pick = set(NAMES)</span><br><span class="line">    <span class="keyword">while</span> pick:</span><br><span class="line">        <span class="keyword">yield</span> pick.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(cur, db)</span>:</span></span><br><span class="line">    <span class="comment"># 插入函数</span></span><br><span class="line">    <span class="comment"># SQLite风格是qmark参数风格，而MySQL使用的是format参数风格</span></span><br><span class="line">    <span class="comment"># 对于每个用户名-用户ID对，都会被分配到一个项目卒中。</span></span><br><span class="line">    <span class="comment"># 项目ID从四个不同的组中随机选出的</span></span><br><span class="line">    <span class="keyword">if</span> db == <span class="string">'sqlite'</span>:</span><br><span class="line">        cur.executemany(<span class="string">"INSERT INTO users VALUES(?,?,?)"</span>,</span><br><span class="line">                        [(who, uid, rand(<span class="number">1</span>, <span class="number">5</span>)) <span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()])</span><br><span class="line">    <span class="keyword">elif</span> db == <span class="string">'mysql'</span>:</span><br><span class="line">        cur.executemany(<span class="string">"INSERT INTO users VALUES(%s, %s, %s)"</span>,</span><br><span class="line">                        [(who, uid, rand(<span class="number">1</span>, <span class="number">5</span>)) <span class="keyword">for</span> who, uid <span class="keyword">in</span> randName()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1</span></span><br><span class="line">getRC = <span class="keyword">lambda</span> cur: cur.rowcount <span class="keyword">if</span> hasattr(cur, <span class="string">'rowcount'</span>) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># update()和delete()函数会随机选择项目组中的成员</span></span><br><span class="line"><span class="comment"># 更新操作会将其从当前组移动到另一个随机选择的组中</span></span><br><span class="line"><span class="comment"># 删除操作会将该组的成员全部删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(cur)</span>:</span></span><br><span class="line">    fr = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    to = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    cur.execute(<span class="string">'UPDATE users SET projid=%d WHERE projid=%d'</span> % (to, fr))</span><br><span class="line">    <span class="keyword">return</span> fr, to, getRC(cur)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(cur)</span>:</span></span><br><span class="line">    rm = rand(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    cur.execute(<span class="string">'DELETE FROM users WHERE projid=%d'</span> % rm)</span><br><span class="line">    <span class="keyword">return</span> rm, getRC(cur)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbDump</span><span class="params">(cur)</span>:</span></span><br><span class="line">    <span class="comment"># 来去所有行，将其按照打印格式进行格式化，然后显示</span></span><br><span class="line">    cur.execute(<span class="string">'SELECT * FROM users'</span>)</span><br><span class="line">    <span class="comment"># 格式化标题</span></span><br><span class="line">    print(<span class="string">'%s'</span> % <span class="string">''</span>.join(map(cformat, FIELDS)))</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">        <span class="comment"># 将数据(login,userid,projid)通过map()传递给tformat()，</span></span><br><span class="line">        <span class="comment"># 是数据转化为字符串，将其格式化为标题风格</span></span><br><span class="line">        <span class="comment"># 字符串按照COLSIZ的列宽度进行左对齐</span></span><br><span class="line">        print(<span class="string">''</span>.join(map(tformat, data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    db = setup()</span><br><span class="line">    print(<span class="string">'*** Connect to %r database'</span> % db)</span><br><span class="line">    cxn = connect(db)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cxn:</span><br><span class="line">        print(<span class="string">'ERROR: %r not supported or unreadable, exit'</span> % db)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    cur = cxn.cursor()</span><br><span class="line">    print(<span class="string">'***Creating users table'</span>)</span><br><span class="line">    create(cur=cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'***Inserting names into table'</span>)</span><br><span class="line">    insert(cur, db)</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Randomly moving folks'</span>)</span><br><span class="line">    fr, to, num = update(cur)</span><br><span class="line">    print(<span class="string">'(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'***Randomly choosing group'</span>)</span><br><span class="line">    rm, num = delete(cur)</span><br><span class="line">    print(<span class="string">'\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class="line">    dbDump(cur)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n***Droping users table'</span>)</span><br><span class="line">    drop(cur)</span><br><span class="line">    print(<span class="string">'\n*** Close cxns'</span>)</span><br><span class="line">    cur.close()</span><br><span class="line">    cxn.commit()</span><br><span class="line">    cxn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>MySQL数据库访问结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">        (M)ySQL</span><br><span class="line">        (S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">M</span><br><span class="line">*** Connect to &apos;mysql&apos; database</span><br><span class="line">***Creating users table</span><br><span class="line">***Inserting names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line">Bob       1234      3         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly moving folks</span><br><span class="line">(2 users moved) from (3) to (1)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line">Bob       1234      1         </span><br><span class="line">Angela    4567      1         </span><br><span class="line">***Randomly choosing group</span><br><span class="line">(group #1; 2 users removed)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      2         </span><br><span class="line"></span><br><span class="line">***Droping users table</span><br><span class="line"></span><br><span class="line">*** Close cxns</span><br></pre></td></tr></table></figure><ul><li>SQLite数据库访问结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Choose a database system:</span><br><span class="line">(M)ySQL</span><br><span class="line">(S)QLite</span><br><span class="line">Enter choice:</span><br><span class="line">S</span><br><span class="line">*** Connect to &apos;sqlite&apos; database</span><br><span class="line">***Creating users table</span><br><span class="line">***Inserting names into table</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      3         </span><br><span class="line"></span><br><span class="line">***Randomly moving folks</span><br><span class="line">(1 users moved) from (1) to (1)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line">Angela    4567      3         </span><br><span class="line">***Randomly choosing group</span><br><span class="line">(group #3; 1 users removed)</span><br><span class="line">LOGIN     USERID    PROJID    </span><br><span class="line">Dave      4523      1         </span><br><span class="line">Bob       1234      2         </span><br><span class="line"></span><br><span class="line">***Droping users table</span><br><span class="line"></span><br><span class="line">*** Close cxns</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过&lt;strong&gt;适配器&lt;/strong&gt;的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="数据库编程" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程(二)</title>
    <link href="http://coldjune.com/2018/02/26/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/26/Python多线程-二/</id>
    <published>2018-02-26T14:16:16.000Z</published>
    <updated>2018-03-21T11:28:45.093Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。<br><a id="more"></a></p><h2 id="多线程实践"><a href="#多线程实践" class="headerlink" title="多线程实践"></a>多线程实践</h2><p>Python虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。<br>下面的例子是通过多线程下载图书排名信息的调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-  coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配排名的正则表达式</span></span><br><span class="line"><span class="comment"># 亚马逊的网站</span></span><br><span class="line">REGEX = re.compile(<span class="string">b'#([\d,]+) in Books'</span>)</span><br><span class="line">AMZN = <span class="string">'https://www.amazon.com/dp/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ISBN编号和书名</span></span><br><span class="line">ISBNs = &#123;</span><br><span class="line">    <span class="string">'0132269937'</span>: <span class="string">'Core Python Programming'</span>,</span><br><span class="line">    <span class="string">'0132356139'</span>: <span class="string">'Python Web Development with Django'</span>,</span><br><span class="line">    <span class="string">'0137143419'</span>: <span class="string">'Python Fundamentals'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line"><span class="comment"># 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                  <span class="string">'(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ranking</span><span class="params">(isbn)</span>:</span></span><br><span class="line">    <span class="comment"># 爬取网页,获取数据</span></span><br><span class="line">    <span class="comment"># 使用str.format()格式化数据</span></span><br><span class="line">    url = <span class="string">'&#123;0&#125;&#123;1&#125;'</span>.format(AMZN, isbn)</span><br><span class="line">    <span class="comment"># 爬取网页并解析</span></span><br><span class="line">    req = urllib.request.Request(url, headers=headers)</span><br><span class="line">    page = urllib.request.urlopen(req)</span><br><span class="line">    data = page.read()</span><br><span class="line">    page.close()</span><br><span class="line">    <span class="keyword">return</span> str(REGEX.findall(data)[<span class="number">0</span>], <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_show_ranking</span><span class="params">(isbn)</span>:</span></span><br><span class="line">    <span class="comment"># 显示结果</span></span><br><span class="line">    print(<span class="string">'- %r ranked %s'</span> % (ISBNs[isbn], get_ranking(isbn)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'At'</span>, time.ctime(), <span class="string">'on Amazon...'</span>)</span><br><span class="line">    <span class="keyword">for</span> isbn <span class="keyword">in</span> ISBNs:</span><br><span class="line">        (threading.Thread(target=_show_ranking, args=(isbn,))).start()</span><br><span class="line">        <span class="comment">#_show_ranking(isbn)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 注册一个退出函数，在脚本退出先请求调用这个函数</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, time.ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">At Tue Feb 27 10:40:51 2018 on Amazon...</span><br><span class="line">- &apos;Python Fundamentals&apos; ranked 4,358,513</span><br><span class="line">- &apos;Python Web Development with Django&apos; ranked 1,354,091</span><br><span class="line">- &apos;Core Python Programming&apos; ranked 458,510</span><br><span class="line">all DONE at: Tue Feb 27 10:42:39 2018</span><br></pre></td></tr></table></figure><h3 id="锁示例"><a href="#锁示例" class="headerlink" title="锁示例"></a>锁示例</h3><p>锁有两种状态:<strong>锁定</strong> 和 <strong>未锁定</strong>。同时它也支持两个函数：<strong>获得锁</strong> 和 <strong>释放锁</strong>。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。</p><ul><li>锁和更多的随机性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span>  register</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock, current_thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CleanOutputSet</span><span class="params">(set)</span>:</span></span><br><span class="line">    <span class="comment"># 集合的子类，将默认输出改变为将其所有元素</span></span><br><span class="line">    <span class="comment"># 按照逗号分隔的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">', '</span>.join(x <span class="keyword">for</span> x <span class="keyword">in</span> self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒</span></span><br><span class="line">lock = Lock()</span><br><span class="line">loops = (randrange(<span class="number">2</span>, <span class="number">5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(randrange(<span class="number">3</span>, <span class="number">7</span>)))</span><br><span class="line">remaining = CleanOutputSet()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(sec)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前执行的线程名，然后获取锁并保存线程名</span></span><br><span class="line">    myname = current_thread().name</span><br><span class="line">    lock.acquire()</span><br><span class="line">    remaining.add(myname)</span><br><span class="line">    print(<span class="string">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class="line">    <span class="comment"># 释放锁并睡眠随机秒</span></span><br><span class="line">    lock.release()</span><br><span class="line">    sleep(sec)</span><br><span class="line">    <span class="comment"># 重新获取锁，输出后再释放锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    remaining.remove(myname)</span><br><span class="line">    print(<span class="string">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class="line">    print(<span class="string">'     (remaining: %s)'</span> % (remaining <span class="keyword">or</span> <span class="string">'NONE'</span>))</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_with</span><span class="params">(sec)</span>:</span></span><br><span class="line">    myname = current_thread().name</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        remaining.add(myname)</span><br><span class="line">        print(<span class="string">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class="line">    sleep(sec)</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        remaining.remove(myname)</span><br><span class="line">        print(<span class="string">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class="line">        print(<span class="string">'     (remaining: %s)'</span> % (remaining <span class="keyword">or</span> <span class="string">'NONE'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> pause <span class="keyword">in</span> loops:</span><br><span class="line">        <span class="comment"># Thread(target=loop, args=(pause,)).start()</span></span><br><span class="line">        Thread(target=loop_with, args=(pause,)).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p>loop方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-1</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-2</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-3</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-4</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-5</span><br><span class="line">[Tue Feb 27 11:26:13 2018] Started Thread-6</span><br><span class="line">[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)</span><br><span class="line">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)</span><br><span class="line">[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)</span><br><span class="line">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)</span><br><span class="line">     (remaining: Thread-4, Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5)</span><br><span class="line">[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)</span><br><span class="line">     (remaining: Thread-1)</span><br><span class="line">[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)</span><br><span class="line">     (remaining: NONE)</span><br><span class="line">all DONE at: Tue Feb 27 11:26:17 2018</span><br></pre></td></tr></table></figure></p><p>loop_with方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-1</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-2</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-3</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-4</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-5</span><br><span class="line">[Tue Feb 27 11:43:15 2018] Started Thread-6</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)</span><br><span class="line">     (remaining: Thread-1, Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)</span><br><span class="line">     (remaining: Thread-4, Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)</span><br><span class="line">     (remaining: Thread-2)</span><br><span class="line">[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)</span><br><span class="line">     (remaining: NONE)</span><br><span class="line">all DONE at: Tue Feb 27 11:43:18 2018</span><br></pre></td></tr></table></figure></p><h3 id="信号量示例"><a href="#信号量示例" class="headerlink" title="信号量示例"></a>信号量示例</h3><p>对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。<strong>信号量</strong> 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为<code>P()</code>，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为<code>V()</code>。</p><ul><li>糖果机和信号量</li></ul><blockquote><p> 这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入相应的模块和信号量类</span></span><br><span class="line"><span class="comment"># BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值</span></span><br><span class="line"><span class="comment"># 它可以防范其中信号量释放次数多余获得次数的异常用例</span></span><br><span class="line"><span class="keyword">from</span> atexit <span class="keyword">import</span> register</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> BoundedSemaphore, Lock, Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line"><span class="comment"># 锁</span></span><br><span class="line"><span class="comment"># 库存商品最大值的常量</span></span><br><span class="line"><span class="comment"># 糖果托盘</span></span><br><span class="line">lock = Lock()</span><br><span class="line">MAX = <span class="number">5</span></span><br><span class="line">candytray = BoundedSemaphore(MAX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refill</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 当虚构的糖果机所有者向库存中添加糖果时执行</span></span><br><span class="line">    <span class="comment"># 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'Refilling candy...'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        candytray.release()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">'full, skipping'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'OK'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 允许消费者获取一个单位的库存</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'Buying candy....'</span>)</span><br><span class="line">    <span class="comment"># 检测是否所有资源都已经消费完了</span></span><br><span class="line">    <span class="comment"># 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False</span></span><br><span class="line">    <span class="comment"># 指明没有更多资源</span></span><br><span class="line">    <span class="keyword">if</span> candytray.acquire(<span class="keyword">False</span>):</span><br><span class="line">        print(<span class="string">'OK'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Empty, skipping'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        refill()</span><br><span class="line">        sleep(randrange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(loops)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        buy()</span><br><span class="line">        sleep(randrange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    nloops = randrange(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'THE CANDY MACHINE (full with %d bars)'</span> % MAX)</span><br><span class="line">    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+<span class="number">2</span>),)).start()</span><br><span class="line">    Thread(target=producer, args=(nloops,)).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_atexit</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">starting at: Tue Feb 27 14:48:31 2018</span><br><span class="line">THE CANDY MACHINE (full with 5 bars)</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">full, skipping</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">OK</span><br><span class="line">Refilling candy...</span><br><span class="line">full, skipping</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">OK</span><br><span class="line">Buying candy....</span><br><span class="line">Empty, skipping</span><br><span class="line">all DONE at: Tue Feb 27 14:48:42 2018</span><br></pre></td></tr></table></figure><h2 id="生产者-消费者问题和queue模块"><a href="#生产者-消费者问题和queue模块" class="headerlink" title="生产者-消费者问题和queue模块"></a>生产者-消费者问题和queue模块</h2><p>生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。<br><a href="https://docs.python.org/3/library/queue.html" target="_blank" rel="noopener">queue模块</a>来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品</p><h3 id="queue模块常用属性"><a href="#queue模块常用属性" class="headerlink" title="queue模块常用属性"></a>queue模块常用属性</h3><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Queue(maxsize=0)</td><td style="text-align:center">创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">LifoQueue(maxsize=0)</td><td style="text-align:center">创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">PriorityQueue(maxsize)</td><td style="text-align:center">创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td></tr><tr><td style="text-align:center">queue异常</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Empty</td><td style="text-align:center">当对空队列调用get*()方法时抛出异常</td></tr><tr><td style="text-align:center">Full</td><td style="text-align:center">当对已满的队列调用put*()方法时抛出异常</td></tr><tr><td style="text-align:center">queue对象方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">qsize()</td><td style="text-align:center">返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)</td></tr><tr><td style="text-align:center">empty()</td><td style="text-align:center">如果队列为空，则返回True；否则，返回False</td></tr><tr><td style="text-align:center">full()</td><td style="text-align:center">如果队列已满，则返回True；否则，返回False</td></tr><tr><td style="text-align:center">put(item,block=True,timeout=None)</td><td style="text-align:center">将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常</td></tr><tr><td style="text-align:center">put_nowait()</td><td style="text-align:center">和put(item,False)相同</td></tr><tr><td style="text-align:center">get(block=True,timeout=None)</td><td style="text-align:center">从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止</td></tr><tr><td style="text-align:center">get_nowait()</td><td style="text-align:center">和get(False)相同</td></tr><tr><td style="text-align:center">task_done()</td><td style="text-align:center">用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:center">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td></tr></tbody></table><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p>使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用queue.Queue对象和之前的myThread.MyThread线程类</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> myThread <span class="keyword">import</span> MyThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 将一个对象放入队列中</span></span><br><span class="line">    print(<span class="string">'producing object for Q...'</span>)</span><br><span class="line">    queue.put(<span class="string">'xxx'</span>, <span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'size now'</span>, queue.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readQ</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 消费队列中的一个对象</span></span><br><span class="line">    val = queue.get(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'consumed object from Q... size now'</span>, queue.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="comment"># 作为单个线程运行</span></span><br><span class="line">    <span class="comment"># 向队列中放入一个对象，等待片刻，然后重复上述步骤</span></span><br><span class="line">    <span class="comment"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        writeQ(queue)</span><br><span class="line">        <span class="comment"># 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象</span></span><br><span class="line">        sleep(randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(queue, loops)</span>:</span></span><br><span class="line">    <span class="comment"># 作为单个线程运行</span></span><br><span class="line">    <span class="comment"># 消耗队列中一个对象，等待片刻，然后重复上述步骤</span></span><br><span class="line">    <span class="comment"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(loops):</span><br><span class="line">        readQ(queue)</span><br><span class="line">        sleep(randint(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置派生和执行的线程总数</span></span><br><span class="line">funcs = [writer, reader]</span><br><span class="line">nfuncs = range(len(funcs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    nloops = randint(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    q = Queue(<span class="number">32</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">starting at: Tue Feb 27 15:17:16 2018</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 1</span><br><span class="line">starting at: Tue Feb 27 15:17:16 2018</span><br><span class="line">consumed object from Q... size now 0</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 1</span><br><span class="line">producing object for Q...</span><br><span class="line">size now 2</span><br><span class="line">done at: Tue Feb 27 15:17:20 2018</span><br><span class="line">consumed object from Q... size now 1</span><br><span class="line">consumed object from Q... size now 0</span><br><span class="line">done at: Tue Feb 27 15:17:26 2018</span><br><span class="line">all DONE</span><br></pre></td></tr></table></figure><h2 id="线程的替代方案"><a href="#线程的替代方案" class="headerlink" title="线程的替代方案"></a>线程的替代方案</h2><p><a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess" target="_blank" rel="noopener">subprocess模块</a><br><a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing" target="_blank" rel="noopener">multiprocessing模块</a><br><a href="https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures" target="_blank" rel="noopener">concurrent.futures模块</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程(一)</title>
    <link href="http://coldjune.com/2018/02/24/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/02/24/Python多线程-一/</id>
    <published>2018-02-24T08:13:37.000Z</published>
    <updated>2018-03-21T11:28:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>多线程编程对于以下编程任务是非常理想的：</p><ul><li>本质上是异步的</li><li>需要多个并发活动</li><li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare--></li></ul><p>使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</p><ul><li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li><li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li><li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li></ul><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><ul><li><p>进程</p><blockquote><p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p></blockquote></li><li><p>线程</p><blockquote><p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p></blockquote></li></ul><h2 id="线程与Python"><a href="#线程与Python" class="headerlink" title="线程与Python"></a>线程与Python</h2><h3 id="全局解释锁"><a href="#全局解释锁" class="headerlink" title="全局解释锁"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由<strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p><ol><li>设置GIL</li><li>切换进一个线程去运行</li><li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li><li>把线程设置回睡眠状态(切换出线程)</li><li>解锁GIL</li><li>重复上述步骤</li></ol><p>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</p><h3 id="退出线程"><a href="#退出线程" class="headerlink" title="退出线程"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p><h2 id="thread模块"><a href="#thread模块" class="headerlink" title="_thread模块"></a>_thread模块</h2><p>  <a href="https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread" target="_blank" rel="noopener">_thread模块</a>提供了派生线程、基本的同步数据结构(<em>锁对象(lock object)</em>,也叫 <em>原语锁</em>、<em>简单锁</em>、<em>互斥锁</em>、<em>互斥</em> 和 <em>二进制信号量</em>)</p><ul><li>_thread模和锁对象</li></ul><table><thead><tr><th style="text-align:center">函数/方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">_thread模块的函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">start_new_thread(function, args, kwargs = None)</td><td style="text-align:center">派生一个新的线程，使用给定的args和可选的kwargs来执行function</td></tr><tr><td style="text-align:center">allocate_lock()</td><td style="text-align:center">分配LockType锁对象</td></tr><tr><td style="text-align:center">exit()</td><td style="text-align:center">给线程退出命令</td></tr><tr><td style="text-align:center">LockType锁对象的方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">acquire(wait = None)</td><td style="text-align:center">尝试获取锁对象</td></tr><tr><td style="text-align:center">locked()</td><td style="text-align:center">如果获取了锁对象则返回True，否则，返回False</td></tr><tr><td style="text-align:center">release()</td><td style="text-align:center">释放锁</td></tr></tbody></table><h3 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h3><h4 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h4><ul><li><p>程序</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_0</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start loop_0 at:'</span>, ctime())</span><br><span class="line">    sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">'loop_0 done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start loop_1 at:'</span>, ctime())</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'loop_1 done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    <span class="comment"># start_new_thread 方法即使要执行的</span></span><br><span class="line">    <span class="comment"># 函数不需要参数，也需要传递一个空元组</span></span><br><span class="line">    _thread.start_new_thread(loop_0, ())</span><br><span class="line">    _thread.start_new_thread(loop_1, ())</span><br><span class="line">    <span class="comment"># 阻止主线程的执行，保证其最后执行，</span></span><br><span class="line">    <span class="comment"># 后续去掉这种方式，引入锁的方式</span></span><br><span class="line">    sleep(<span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'all done at'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><p>  在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(<em>loop_0()</em> )的运行时间</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 08:52:10 2018</span><br><span class="line">start loop_0 at: Mon Feb 26 08:52:10 2018</span><br><span class="line">start loop_1 at: Mon Feb 26 08:52:10 2018</span><br><span class="line">loop_1 done at: Mon Feb 26 08:52:12 2018</span><br><span class="line">loop_0 done at: Mon Feb 26 08:52:14 2018</span><br><span class="line">all done at Mon Feb 26 08:52:16 2018</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用锁对象"><a href="#使用锁对象" class="headerlink" title="使用锁对象"></a>使用锁对象</h4><ul><li><p>程序</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec, lock)</span>:</span></span><br><span class="line">    <span class="comment"># nloop: 第几个线程</span></span><br><span class="line">    <span class="comment"># sec: 时间</span></span><br><span class="line">    <span class="comment"># lock: 分配的锁</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop'</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line">    <span class="comment"># 当时间到了的时候释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    locks = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 生成锁对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过allocate_lock()函数得到锁对象</span></span><br><span class="line">        <span class="comment"># 通过acquire()取到每个锁</span></span><br><span class="line">        <span class="comment"># 添加进locks列表</span></span><br><span class="line">        lock = _thread.allocate_lock()</span><br><span class="line">        lock.acquire()</span><br><span class="line">        locks.append(lock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 派生线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 传递循环号，时间、锁对象</span></span><br><span class="line">        _thread.start_new_thread(loop, (i, loops[i], locks[i]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程的锁都释放完了才执行主线程</span></span><br><span class="line">        <span class="keyword">while</span> locks[i].locked():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><p>  未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 09:37:39 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 09:37:39 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 09:37:39 2018</span><br><span class="line">loop 1 done at: Mon Feb 26 09:37:41 2018</span><br><span class="line">loop 0 done at: Mon Feb 26 09:37:43 2018</span><br><span class="line">all DONE at: Mon Feb 26 09:37:43 2018</span><br></pre></td></tr></table></figure></li></ul><h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><p><a href="https://docs.python.org/3/library/threading.html?highlight=threading#module-threading" target="_blank" rel="noopener">threading模块</a>提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制</p><ul><li>threading模块的对象</li></ul><table><thead><tr><th style="text-align:center">对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Thread</td><td style="text-align:center">表示一个执行线程的对象</td></tr><tr><td style="text-align:center">Lock</td><td style="text-align:center">锁原语对象(和thread模块中的锁一样)</td></tr><tr><td style="text-align:center">RLock</td><td style="text-align:center">可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）</td></tr><tr><td style="text-align:center">Condition</td><td style="text-align:center">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td></tr><tr><td style="text-align:center">Event</td><td style="text-align:center">条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活</td></tr><tr><td style="text-align:center">Semaphone</td><td style="text-align:center">为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td style="text-align:center">BoundSemaphone</td><td style="text-align:center">与Semaphone相似，不过它不允许超过初始值</td></tr><tr><td style="text-align:center">Timer</td><td style="text-align:center">与Thread相似，不过它要在运行前等待一段时间</td></tr><tr><td style="text-align:center">Barrier</td><td style="text-align:center">创建一个“障碍”,必须达到指定数量的线程后才可以继续</td></tr></tbody></table><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul><li>Thread对象的属性和方法</li></ul><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">线程名</td></tr><tr><td style="text-align:center">ident</td><td style="text-align:center">线程的标识符</td></tr><tr><td style="text-align:center">daemon</td><td style="text-align:center">布尔标志，表示这个线程是否是守护线程</td></tr><tr><td style="text-align:center">Thread对象方法</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><em>init</em>(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None)</td><td style="text-align:center">实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志</td></tr><tr><td style="text-align:center">start()</td><td style="text-align:center">开始执行该线程</td></tr><tr><td style="text-align:center">run()</td><td style="text-align:center">定义线程功能的方法(通常在子类中被应用开发者重写)</td></tr><tr><td style="text-align:center">join(timeout=None)</td><td style="text-align:center">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td></tr></tbody></table><p>使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：</p><ul><li>创建Thread的实例，传给它一个函数</li><li>创建Thread的实例，传给它一个可调用的类实例</li><li>派生Thread的子类，并创建子类的实例</li></ul><h4 id="创建Thread的实例，传给它一个函数"><a href="#创建Thread的实例，传给它一个函数" class="headerlink" title="创建Thread的实例，传给它一个函数"></a>创建Thread的实例，传给它一个函数</h4><p><code>join()</code> 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。<code>join()</code>方法只有在需要等待线程完成的时候才是有用的。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop'</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        t = threading.Thread(target=loop, args=(i, loops[i]))</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程结束</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 14:29:36 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 14:29:36 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 14:29:36 2018</span><br><span class="line">loop 1 done at: Mon Feb 26 14:29:38 2018</span><br><span class="line">loop 0 done at: Mon Feb 26 14:29:40 2018</span><br><span class="line">all DONE at: Mon Feb 26 14:29:40 2018</span><br></pre></td></tr></table></figure><h4 id="创建Thread的实例，传给它一个可调用的类实例"><a href="#创建Thread的实例，传给它一个可调用的类实例" class="headerlink" title="创建Thread的实例，传给它一个可调用的类实例"></a>创建Thread的实例，传给它一个可调用的类实例</h4><p>将传递进去一个可调用类(实例)而不仅仅是一个函数</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadFunc</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Thread类的代码将调用ThreadFunc对象，此时会调用这个方法</span></span><br><span class="line">        <span class="comment"># 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop '</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 创建所有线程</span></span><br><span class="line">        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 14:47:28 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 14:47:28 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 14:47:28 2018</span><br><span class="line">loop  1 done at: Mon Feb 26 14:47:30 2018</span><br><span class="line">loop  0 done at: Mon Feb 26 14:47:32 2018</span><br><span class="line">all DONE at: Mon Feb 26 14:47:32 2018</span><br></pre></td></tr></table></figure><h4 id="派生Thread的子类，并创建子类的实例-推荐"><a href="#派生Thread的子类，并创建子类的实例-推荐" class="headerlink" title="派生Thread的子类，并创建子类的实例(推荐)"></a>派生Thread的子类，并创建子类的实例(推荐)</h4><p>将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line">loops = [<span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 必须先调用基类的构造函数</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 必须重写run()方法</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(nloop, sec)</span>:</span></span><br><span class="line">    print(<span class="string">'start loop'</span>, nloop, <span class="string">'at:'</span>, ctime())</span><br><span class="line">    sleep(sec)</span><br><span class="line">    print(<span class="string">'loop '</span>, nloop, <span class="string">'done at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">    threads = []</span><br><span class="line">    nloops = range(len(loops))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 创建所有线程</span></span><br><span class="line">        t = MyThread(loop, (i, loops[i]), loop.__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nloops:</span><br><span class="line">        <span class="comment"># 等待所有线程</span></span><br><span class="line">        threads[i].join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE at:'</span>, ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starting at: Mon Feb 26 15:08:33 2018</span><br><span class="line">start loop 0 at: Mon Feb 26 15:08:33 2018</span><br><span class="line">start loop 1 at: Mon Feb 26 15:08:33 2018</span><br><span class="line">loop  1 done at: Mon Feb 26 15:08:35 2018</span><br><span class="line">loop  0 done at: Mon Feb 26 15:08:37 2018</span><br><span class="line">all DONE at: Mon Feb 26 15:08:37 2018</span><br></pre></td></tr></table></figure><h2 id="单线程和多线程执行的对比"><a href="#单线程和多线程执行的对比" class="headerlink" title="单线程和多线程执行的对比"></a>单线程和多线程执行的对比</h2><p>先后使用单线程和多线程执行三个独立的递归函数，代码中加入<code>sleep()</code>是为了减慢执行速度，能够更好的看到效果。</p><ul><li>myThread.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, name=<span class="string">''</span>)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回每一次的执行结果</span></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'starting at:'</span>, ctime())</span><br><span class="line">        self.res = self.func(*self.args)</span><br><span class="line">        print(<span class="string">'done at:'</span>, ctime())</span><br></pre></td></tr></table></figure><ul><li>compare.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myThread <span class="keyword">import</span> MyThread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 斐波拉契</span></span><br><span class="line">    sleep(<span class="number">0.005</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(x<span class="number">-2</span>)+fib(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 阶乘</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x*fac(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="comment"># 累加</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x + sum(x<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">funcs = [fib, fac, sum]</span><br><span class="line">n = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    nfuncs = range(len(funcs))</span><br><span class="line">    print(<span class="string">'***SINGLE THREAD***'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        <span class="comment"># 单线程顺序执行</span></span><br><span class="line">        print(<span class="string">'starting'</span>, funcs[i].__name__, <span class="string">'at:'</span>, ctime())</span><br><span class="line">        print(funcs[i](n))</span><br><span class="line">        print(funcs[i].__name__, <span class="string">'finished at:'</span>, ctime(), <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n ***MULTIPLE THREADS***'</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        <span class="comment"># 多线程执行</span></span><br><span class="line">        t = MyThread(funcs[i], (n,),funcs[i].__name__)</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nfuncs:</span><br><span class="line">        threads[i].join()</span><br><span class="line">        print(threads[i].get_result())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'all DONE'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***SINGLE THREAD***</span><br><span class="line">starting fib at: Mon Feb 26 15:36:22 2018</span><br><span class="line">233</span><br><span class="line">fib finished at: Mon Feb 26 15:36:24 2018</span><br><span class="line"></span><br><span class="line">starting fac at: Mon Feb 26 15:36:24 2018</span><br><span class="line">479001600</span><br><span class="line">fac finished at: Mon Feb 26 15:36:25 2018</span><br><span class="line"></span><br><span class="line">starting sum at: Mon Feb 26 15:36:25 2018</span><br><span class="line">78</span><br><span class="line">sum finished at: Mon Feb 26 15:36:26 2018</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ***MULTIPLE THREADS***</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">starting at: Mon Feb 26 15:36:26 2018</span><br><span class="line">done at: Mon Feb 26 15:36:28 2018</span><br><span class="line">done at: Mon Feb 26 15:36:28 2018</span><br><span class="line">done at: Mon Feb 26 15:36:29 2018</span><br><span class="line">233</span><br><span class="line">479001600</span><br><span class="line">78</span><br><span class="line">all DONE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多线程编程对于以下编程任务是非常理想的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是异步的&lt;/li&gt;
&lt;li&gt;需要多个并发活动&lt;/li&gt;
&lt;li&gt;每个活动的处理顺序可能是不确定的(随机、不可预测的)&lt;!--Mare--&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用多线程或者类似Queue的
      
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程(二)</title>
    <link href="http://coldjune.com/2018/02/24/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/02/24/Python网络编程-二/</id>
    <published>2018-02-24T01:40:06.000Z</published>
    <updated>2018-03-21T11:28:45.103Z</updated>
    
    <content type="html"><![CDATA[<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br><a id="more"></a></p><h2 id="socketserver模块"><a href="#socketserver模块" class="headerlink" title="socketserver模块"></a>socketserver模块</h2><p><a href="https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver" target="_blank" rel="noopener">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p><h3 id="socketserver模块类"><a href="#socketserver模块类" class="headerlink" title="socketserver模块类"></a>socketserver模块类</h3><table><thead><tr><th style="text-align:center">类</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">BaseServer</td><td style="text-align:center">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td></tr><tr><td style="text-align:center">TCPServer/UDPServer</td><td style="text-align:center">基础的网络同步TCP/UDP服务器</td></tr><tr><td style="text-align:center">UnixStreamServer/UnixDatagramServer</td><td style="text-align:center">基于文件的基础同步TCP/UDP服务器</td></tr><tr><td style="text-align:center">ForkingMixIn/ThreadingMixIn</td><td style="text-align:center">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td></tr><tr><td style="text-align:center">ForkingTCPServer/ForkingUDPServer</td><td style="text-align:center">ForkingMaxIn和TCPServer/UDPServer的组合</td></tr><tr><td style="text-align:center">ThreadingTCPServer/ThreadingUDPServer</td><td style="text-align:center">ThreadingMixIn和TCPServer/UDPServer的组合</td></tr><tr><td style="text-align:center">BaseRequestHandler</td><td style="text-align:center">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td></tr><tr><td style="text-align:center">StreamRequestHandler/DatagramRequestHandler</td><td style="text-align:center">实现TCP/UDP服务器的服务处理器</td></tr></tbody></table><h3 id="socketserver-TCP服务器-客户端"><a href="#socketserver-TCP服务器-客户端" class="headerlink" title="socketserver TCP服务器/客户端"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p><h4 id="TCP服务器"><a href="#TCP服务器" class="headerlink" title="TCP服务器"></a>TCP服务器</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> (TCPServer <span class="keyword">as</span> TCP,</span><br><span class="line">                          StreamRequestHandler <span class="keyword">as</span> SRH)</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandler</span><span class="params">(SRH)</span>:</span></span><br><span class="line">    <span class="comment"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class="line">        print(<span class="string">'...connected from:'</span>, self.client_address)</span><br><span class="line">        <span class="comment"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class="line">        <span class="comment"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class="line">        self.wfile.write(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">            ctime(), self.rfile.readline().decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class="line"><span class="comment"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class="line">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class="line">print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure><h4 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    tcpSocket.connect(ADDR)</span><br><span class="line">    data = input(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class="line">    <span class="comment"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class="line">    tcpSocket.send(bytes(<span class="string">'%s\r\n'</span> % data, <span class="string">'utf-8'</span>))</span><br><span class="line">    data = tcpSocket.recv(BUFSIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>).strip())</span><br><span class="line">    tcpSocket.close()</span><br></pre></td></tr></table></figure><h4 id="socketserver-TCP服务器和客户端运行结果"><a href="#socketserver-TCP服务器和客户端运行结果" class="headerlink" title="socketserver TCP服务器和客户端运行结果"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p><ul><li><p>TCP服务器运行结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">waiting for connection...</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class="line">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure></li><li><p>TCP客户端运行结果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">[Sat Feb 24 10:29:28 2018] hello</span><br><span class="line">&gt; hello</span><br><span class="line">[Sat Feb 24 10:29:44 2018] hello</span><br><span class="line">&gt; hi</span><br><span class="line">[Sat Feb 24 10:29:50 2018] hi</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Twisted框架的简单使用"><a href="#Twisted框架的简单使用" class="headerlink" title="Twisted框架的简单使用"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">下载</a>和安装它<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p><p>  安装成功显示<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Processing e:\迅雷下载\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class="line">Requirement already satisfied: Automat&gt;=0.3.0 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: incremental&gt;=16.10.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: constantly&gt;=15.1 in e:\python\python36\lib\site-packages (from Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: attrs in e:\python\python36\lib\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: six in e:\python\python36\lib\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class="line">Requirement already satisfied: setuptools in e:\python\python36\lib\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class="line">Installing collected packages: Twisted</span><br><span class="line">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p><h3 id="Twisted-Reactor-TCP-服务器-客户端"><a href="#Twisted-Reactor-TCP-服务器-客户端" class="headerlink" title="Twisted Reactor TCP 服务器/客户端"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id="TCP服务器-1"><a href="#TCP服务器-1" class="headerlink" title="TCP服务器"></a>TCP服务器</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> protocol, reactor</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWServProtocol</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="comment"># 继承Protocol类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 重写connectionMade()方法</span></span><br><span class="line">        <span class="comment"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class="line">        client = self.client = self.transport.getPeer().host</span><br><span class="line">        print(<span class="string">'...connected from:'</span>, client)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 重写dataReceived()方法</span></span><br><span class="line">        <span class="comment"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class="line">        self.transport.write(bytes(<span class="string">'[%s] %s'</span> % (</span><br><span class="line">            ctime(), data.decode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class="line"><span class="comment"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class="line"><span class="comment"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class="line">factory = protocol.Factory()</span><br><span class="line">factory.protocol = TWServProtocol</span><br><span class="line">print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">reactor.listenTCP(PORT, factory)</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h4 id="TCP客户端-1"><a href="#TCP客户端-1" class="headerlink" title="TCP客户端"></a>TCP客户端</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span>  protocol, reactor</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWClientProtocol</span><span class="params">(protocol.Protocol)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 需要发送数据时调用</span></span><br><span class="line">        <span class="comment"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class="line">        data = input(<span class="string">'&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            print(<span class="string">'...send %s...'</span> % data)</span><br><span class="line">            self.transport.write(bytes(data, <span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.transport.loseConnection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        self.sendData()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        self.sendData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TWClientFactory</span><span class="params">(protocol.ClientFactory)</span>:</span></span><br><span class="line">    <span class="comment"># 创建了一个客户端工厂</span></span><br><span class="line">    protocol = TWClientProtocol</span><br><span class="line">    clientConnectionLost = clientConnectionFailed = \</span><br><span class="line">        <span class="keyword">lambda</span> self, connector, reason: reactor.stop()</span><br><span class="line"><span class="comment"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class="line"><span class="comment"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class="line"><span class="comment"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class="line"><span class="comment"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class="line">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h4 id="TCP服务器和客户端运行结果"><a href="#TCP服务器和客户端运行结果" class="headerlink" title="TCP服务器和客户端运行结果"></a>TCP服务器和客户端运行结果</h4><ul><li><p>服务器结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waiting for connection...</span><br><span class="line">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>客户端结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; hello</span><br><span class="line">...send hello...</span><br><span class="line">[Sat Feb 24 11:19:49 2018] hello</span><br><span class="line">&gt; hi</span><br><span class="line">...send hi...</span><br><span class="line">[Sat Feb 24 11:20:02 2018] hi</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">需要安装python对应的版本和位数</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
