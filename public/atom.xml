<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay Hungary</title>
  
  <subtitle>Programming is an art form</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldjune.com/"/>
  <updated>2018-03-28T01:32:31.845Z</updated>
  <id>http://coldjune.com/</id>
  
  <author>
    <name>邓小俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间序列(一)</title>
    <link href="http://coldjune.com/2018/03/27/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/27/时间序列-一/</id>
    <published>2018-03-27T01:00:40.000Z</published>
    <updated>2018-03-28T01:32:31.845Z</updated>
    
    <content type="html"><![CDATA[<p>在多个时间点观察或测量到的任何事物都可以形成一段时间序列。很多时间序列是固定频率的，数据点是根据某种规律定期出现的(比如没15秒、每5分钟、每月出现一次)。时间序列也可以是不定期的。时间序列数据的意义取决于具体的应用场景，主要有几种:</p><ol><li>时间戳(timestamp)，特定的时刻</li><li>固定时期(period)，如2018年3月或2018年全年</li><li>时间间隔(interval),由起始和结束时间戳表示。时期(period)可以被看做间隔(interval)的特例。</li><li>实验或过程时间，每个时间点都是相对于特定起始时间的一个度量。例如，从放入烤箱时起，每秒钟饼干的直径</li></ol><h2 id="日期和时间数据类型及工具"><a href="#日期和时间数据类型及工具" class="headerlink" title="日期和时间数据类型及工具"></a>日期和时间数据类型及工具</h2><p>Python标准库包含用于日期(date)和时间(time)数据的数据类型，而且有日历方面的功能。主要用到的事<code>datetime</code>、<code>time</code>、<code>canlendar</code>模块；<code>datetime</code>以毫秒形式存储日期和时间；<code>datetime.timedelta</code>表示两个datetime对象之间的时间差，可以给datetime对象加上(或减去)一个或多个timedelta产生一个新对象</p><ul><li>datetime模块中的数据类型</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">date</td><td style="text-align:center">以公历形式存储日历日期(年、月、日)</td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">将时间存储为时、分、秒、毫秒</td></tr><tr><td style="text-align:center">datetime</td><td style="text-align:center">存储日期和时间</td></tr><tr><td style="text-align:center">timedelta</td><td style="text-align:center">表示两个datetime值之间的差(日、秒、毫秒)</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: now  = datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: now</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">40</span>, <span class="number">701738</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: now.year, now.month, now.day</span><br><span class="line">Out[<span class="number">4</span>]: (<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="comment"># 使用timedelta</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: delta = datetime.now() - datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: delta</span><br><span class="line">Out[<span class="number">7</span>]: datetime.timedelta(<span class="number">235</span>, <span class="number">33622</span>, <span class="number">69715</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: delta.days</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">235</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: delta.seconds</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">33622</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="comment"># 加减timedelta</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: start = datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: start+timedelta(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">13</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">53</span>, <span class="number">280284</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: start - <span class="number">2</span>*timedelta(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">14</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">53</span>, <span class="number">280284</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串和datetime的相互转换"><a href="#字符串和datetime的相互转换" class="headerlink" title="字符串和datetime的相互转换"></a>字符串和datetime的相互转换</h3><p>利用<code>str</code>或<code>strftime</code>方法(传入一个格式化字符串),datetime对象和pandas的Timestamp对象可以被格式化为字符串<code>datetime.strptime</code>可以使用相应的格式化编码将字符串转换为日期<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><ul><li>datetime格式定义</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%Y</td><td style="text-align:center">4位数的年</td></tr><tr><td style="text-align:center">%y</td><td style="text-align:center">2位数的年</td></tr><tr><td style="text-align:center">%m</td><td style="text-align:center">2位数的月[01,12]</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">2位数的日[01,31]</td></tr><tr><td style="text-align:center">%H</td><td style="text-align:center">时(24小时制)[00,23]</td></tr><tr><td style="text-align:center">%I</td><td style="text-align:center">是(12小时制)[01,12]</td></tr><tr><td style="text-align:center">%M</td><td style="text-align:center">2位数的分[00,59]</td></tr><tr><td style="text-align:center">%S</td><td style="text-align:center">秒<a href="秒60和61用于闰秒">00,61</a></td></tr><tr><td style="text-align:center">%w</td><td style="text-align:center">用整数表示的星期几[0(星期天),6]</td></tr><tr><td style="text-align:center">%U</td><td style="text-align:center">每年的第几周[00,53]。星期天被认为是每周的第一天，每年第一个星期天之前的那几天被认为是”第0周”</td></tr><tr><td style="text-align:center">%W</td><td style="text-align:center">每年的第几周[00,53]。星期一被认为是每周的第一天，每年第一个星期一之前的那几天被认为是”第0周”</td></tr><tr><td style="text-align:center">%z</td><td style="text-align:center">以+HHMM或-HHMM表示的UTC时区为naive，则返回空字符串</td></tr><tr><td style="text-align:center">%F</td><td style="text-align:center">%Y0%m-%d简写形式，例如2018-03-27</td></tr><tr><td style="text-align:center">%D</td><td style="text-align:center">%m%d%y简写形式，例如03/27/18</td></tr></tbody></table><ul><li>特定于当前环境的日期格式</li></ul><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%a</td><td style="text-align:center">星期几的简写</td></tr><tr><td style="text-align:center">%A</td><td style="text-align:center">星期几的全称</td></tr><tr><td style="text-align:center">%b</td><td style="text-align:center">月份的简写</td></tr><tr><td style="text-align:center">%B</td><td style="text-align:center">月份的全称</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">完整的日期和时间。例如”Tue 01 May 2012 04:20:57 PM”</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">不同环境中的AM或PM</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">适用于当前环境的日期格式，在美国“May 1, 2012”会产生”05/01/2012”</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">适用于当前环境的时间格式，例如”04:24:12 PM”</td></tr></tbody></table><p><code>datetime.strptime</code>是通过已知格式进行日期解析的最佳方式，而对于一些常见的日期格式，可以使用<code>dateutil</code>这个三方包中的<code>parser.parse</code>方法来避免编写格式定义；<code>dateutil</code>可以解析除中文外几乎所有人类能够理解的日期表现形式<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="comment">#将日期转换为字符串</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: stamp = datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: str(stamp)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'2018-03-27 14:19:08.645810'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: stamp.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'2018-03-27'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="comment">#将字符串转换为日期</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: value = <span class="string">'2018-03-27'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: datetime.strptime(value,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">Out[<span class="number">24</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: datestrs = [<span class="string">'8/4/2017'</span>,<span class="string">'3/27/2018'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: [datetime.strptime(x, <span class="string">'%m/%d/%Y'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> datestrs]</span><br><span class="line">Out[<span class="number">27</span>]: [datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>), datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: parse(<span class="string">'2018/03/27'</span>)</span><br><span class="line">Out[<span class="number">31</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: parse(<span class="string">'Jan 31, 1997 10:45 PM'</span>)</span><br><span class="line">Out[<span class="number">32</span>]: datetime.datetime(<span class="number">1997</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">22</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: <span class="comment"># 日出现在月的前面，传入dayfirst = True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: parse(<span class="string">'4/8/2017'</span>, dayfirst=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">34</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>pandas通常是用于处理成组日期的，不管这些日期时DataFrame的轴索引还是列。<code>to_datetime</code>方法可以解析多种不同的日期表示形式，并且它还可以处理缺失值(None、空字符串等)，<em>NaT(Not a Time)</em> 是pandas中时间戳数据的NA值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">45</span>]: datestrs</span><br><span class="line">Out[<span class="number">45</span>]: [<span class="string">'8/4/2017'</span>, <span class="string">'3/27/2018'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: pd.to_datetime(datestrs)</span><br><span class="line">Out[<span class="number">46</span>]: DatetimeIndex([<span class="string">'2017-08-04'</span>, <span class="string">'2018-03-27'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: idx = pd.to_datetime(datestrs + [<span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: idx</span><br><span class="line">Out[<span class="number">48</span>]: DatetimeIndex([<span class="string">'2017-08-04'</span>, <span class="string">'2018-03-27'</span>, <span class="string">'NaT'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: idx[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">49</span>]: NaT</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: pd.isnull(idx)</span><br><span class="line">Out[<span class="number">50</span>]: array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>], dtype=bool)</span><br></pre></td></tr></table></figure></p><h2 id="时间序列基础"><a href="#时间序列基础" class="headerlink" title="时间序列基础"></a>时间序列基础</h2><p>pandas最基本的时间序列类型是以时间戳(以字符串或datetime对象表示)为索引的Series，datetime对象实际上是被放在DatetimeIndex中的，不同索引的时间序列之间的算数运算会自动按日期对齐；pandas使用NumPy的datetime64数据类型以纳秒形式存储时间戳，而DatetimeIndex中各个标量值是pandas的Timestamp对象，在需要的时候Timestamp可以随时自动转换为datetime对象，并且它还可以存储频率信息，且知道如何执行时区转换以及其他操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: <span class="comment"># 创建时间序列</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: dates = [datetime(<span class="number">2018</span>,<span class="number">3</span>,d) <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">21</span>,<span class="number">27</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: ts = Series(np.random.randn(<span class="number">6</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: ts</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>    <span class="number">0.555044</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.404548</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>   <span class="number">-1.334704</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>   <span class="number">-0.550604</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">0.037230</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.298817</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: <span class="comment"># ts的类型</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: type(ts)</span><br><span class="line">Out[<span class="number">63</span>]: pandas.core.series.Series</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: ts.index</span><br><span class="line">Out[<span class="number">64</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-21'</span>, <span class="string">'2018-03-22'</span>, <span class="string">'2018-03-23'</span>, <span class="string">'2018-03-24'</span>,</span><br><span class="line">               <span class="string">'2018-03-25'</span>, <span class="string">'2018-03-26'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: <span class="comment"># 不同索引的时间序列之间的算数运算会自动按日期对齐</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: ts+ts[::<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>    <span class="number">1.110088</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>   <span class="number">-2.669409</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">0.074461</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>         NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="comment"># 时间戳类型</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: ts.index.dtype</span><br><span class="line">Out[<span class="number">68</span>]: dtype(<span class="string">'&lt;M8[ns]'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: <span class="comment">#DateIndex中的各个标量值是pandas的Timestamp对象</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: stamp =ts.index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: stamp</span><br><span class="line">Out[<span class="number">71</span>]: Timestamp(<span class="string">'2018-03-21 00:00:00'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="索引、选取、子集构造"><a href="#索引、选取、子集构造" class="headerlink" title="索引、选取、子集构造"></a>索引、选取、子集构造</h3><p>索引和数据选取和Series的行为相同，也可以传入一个被解释为日期的字符串；对于较长的时间序列，可以传入 <strong>“年”</strong> 或 <strong>“年月”</strong> 选取数据的切片，而通过日期切片的方式只对规则Series有效；对大部分时间序列的数据来说都是按照时间先后排序的，因此可以用不存在于改时间序列中的时间戳进行切片(即范围查找)，而这里同样可以传入字符串日期、datetime或Timestamp，<strong>和NumPy一样都是产生原时间序列的视图</strong>。可以调用<code>truncate</code>方法并传入<code>before</code>和<code>after</code>来实现相同的效果。而这些对DataFrame同样有效:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">73</span>]: <span class="comment"># 选取索引和数据</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: stamp = ts.index[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: ts[stamp]</span><br><span class="line">Out[<span class="number">75</span>]: <span class="number">-1.3347042513067129</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: <span class="comment"># 通过"年"或"年月"切片</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: long_ts = Series(np.random.randn(<span class="number">1000</span>),index=pd.date_range(<span class="string">'1/1/2018'</span>, periods=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: long_ts</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.047281</span></span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-02</span>   <span class="number">-0.630386</span></span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">0.630630</span></span><br><span class="line">                ...</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-26</span>    <span class="number">0.993575</span></span><br><span class="line">Freq: D, Length: <span class="number">1000</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: long_ts[<span class="string">'2019'</span>]</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.890328</span></span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>   <span class="number">-1.131193</span></span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-03</span>   <span class="number">-0.225457</span></span><br><span class="line"><span class="number">2019</span><span class="number">-01</span><span class="number">-04</span>   <span class="number">-0.097514</span></span><br><span class="line">                ...</span><br><span class="line"><span class="number">2019</span><span class="number">-12</span><span class="number">-28</span>    <span class="number">1.096610</span></span><br><span class="line"><span class="number">2019</span><span class="number">-12</span><span class="number">-29</span>    <span class="number">0.534131</span></span><br><span class="line"><span class="number">2019</span><span class="number">-12</span><span class="number">-30</span>   <span class="number">-1.859665</span></span><br><span class="line"><span class="number">2019</span><span class="number">-12</span><span class="number">-31</span>   <span class="number">-0.408150</span></span><br><span class="line">Freq: D, Length: <span class="number">365</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: long_ts[<span class="string">'2019-09'</span>]</span><br><span class="line">Out[<span class="number">85</span>]:</span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-01</span>    <span class="number">0.950379</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-02</span>    <span class="number">0.508369</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-03</span>    <span class="number">0.631864</span></span><br><span class="line">                ...</span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-26</span>    <span class="number">1.982801</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-27</span>    <span class="number">1.626522</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-28</span>    <span class="number">0.546744</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-29</span>   <span class="number">-0.971617</span></span><br><span class="line"><span class="number">2019</span><span class="number">-09</span><span class="number">-30</span>    <span class="number">0.106587</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: <span class="comment"># 通过日期进行切片</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: ts[datetime(<span class="number">2018</span>,<span class="number">3</span>,<span class="number">24</span>):]</span><br><span class="line">Out[<span class="number">89</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>   <span class="number">-0.550604</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">0.037230</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.298817</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: <span class="comment"># 按时间戳进行切片</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: ts</span><br><span class="line">Out[<span class="number">96</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>    <span class="number">0.555044</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.404548</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.298817</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: ts[<span class="string">'23/3/2018'</span>:<span class="string">'25/3/2018'</span>]</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: <span class="comment">#切片数据是源数据的视图</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: ts = Series(np.random.randn(<span class="number">6</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: ts</span><br><span class="line">Out[<span class="number">121</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-0.209784</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.034117</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>   <span class="number">-0.383131</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.207778</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>   <span class="number">-1.419493</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.019064</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: ts_slice = ts[<span class="string">'23/3/2018'</span>:<span class="string">'25/3/2018'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">123</span>]: ts_slice[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: ts</span><br><span class="line">Out[<span class="number">124</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-0.209784</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.034117</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.207778</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>   <span class="number">-1.419493</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.019064</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: <span class="comment">#通过truncate实现切片并实现复制</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: ts.truncate(after=<span class="string">'24/3/2018'</span>, copy=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">126</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-0.209784</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.034117</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.207778</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: ts_slice = ts.truncate(after=<span class="string">'24/3/2018'</span>, copy=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: ts_slice[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: ts</span><br><span class="line">Out[<span class="number">129</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-0.209784</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>   <span class="number">-0.034117</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.000000</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>    <span class="number">1.207778</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>   <span class="number">-1.419493</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>    <span class="number">0.019064</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: <span class="comment"># 对DataFrame的行进行索引</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">131</span>]: date = pd.date_range(<span class="string">'1/3/2018'</span>, periods=<span class="number">100</span>, freq=<span class="string">'W-WED'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: long_df = DataFrame(np.random.randn(<span class="number">100</span>,<span class="number">4</span>),</span><br><span class="line">     ...:                     index=date,</span><br><span class="line">     ...:                     columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">133</span>]: long_df.loc[<span class="string">'5-2018'</span>]</span><br><span class="line">Out[<span class="number">133</span>]:</span><br><span class="line">                col1      col2      col3      col4</span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-02</span> <span class="number">-1.217853</span> <span class="number">-0.052510</span>  <span class="number">1.854937</span>  <span class="number">0.187870</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-09</span>  <span class="number">0.555552</span> <span class="number">-0.276599</span> <span class="number">-0.145089</span> <span class="number">-0.676329</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-16</span>  <span class="number">0.704234</span>  <span class="number">0.316785</span> <span class="number">-0.057501</span>  <span class="number">0.033567</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-23</span>  <span class="number">0.451673</span>  <span class="number">0.367754</span>  <span class="number">0.121129</span> <span class="number">-0.861855</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-30</span> <span class="number">-1.057437</span> <span class="number">-0.904105</span> <span class="number">-0.025711</span> <span class="number">-2.689067</span></span><br></pre></td></tr></table></figure></p><h3 id="带有重复索引的时间序列"><a href="#带有重复索引的时间序列" class="headerlink" title="带有重复索引的时间序列"></a>带有重复索引的时间序列</h3><p>当多个观测数据落在同一个时间点上的时候，可以通过检查索引的<code>is_unique</code>属性来确定它是否唯一，而对这个时间序列进行索引要么产生 <strong>标量值</strong>(不重复)，要么产生 <strong>切片</strong>(重复)；如果需要对具有非唯一时间戳的数据进行聚合，使用groupby并传入<code>level=0</code>(索引的唯一一层):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: <span class="comment"># 生成时间索引的Series</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: dates = pd.DatetimeIndex([<span class="string">'1/3/2018'</span>,<span class="string">'1/3/2018'</span>,<span class="string">'2/3/2018'</span>,<span class="string">'2/3/2018'</span>,<span class="string">'3/3/2018'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: dup_ts = Series(np.arange(<span class="number">5</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: dup_ts</span><br><span class="line">Out[<span class="number">140</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-03</span>    <span class="number">4</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: <span class="comment">#检查索引是否唯一</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: dup_ts.index.is_unique</span><br><span class="line">Out[<span class="number">142</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: <span class="comment">#对时间序列进行索引</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">144</span>]: dup_ts[<span class="string">'3/3/2018'</span>] <span class="comment">#不重复</span></span><br><span class="line">Out[<span class="number">144</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">145</span>]: dup_ts[<span class="string">'2/3/2018'</span>] <span class="comment">#重复</span></span><br><span class="line">Out[<span class="number">145</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">3</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">150</span>]: <span class="comment"># 进行分组聚合</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: grouped = dup_ts.groupby(level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: grouped.count()</span><br><span class="line">Out[<span class="number">152</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-03</span>    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: grouped.mean()</span><br><span class="line">Out[<span class="number">153</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">0.5</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-03</span>    <span class="number">2.5</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-03</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h2 id="日期的范围、频率以及移动"><a href="#日期的范围、频率以及移动" class="headerlink" title="日期的范围、频率以及移动"></a>日期的范围、频率以及移动</h2><p>pandas有一整套标准时间序列频率以及用于重采样、频率推断、生成固定频率日期范围的工具。调用<code>resample</code>方法将时间序列转换为一个具有固定频率的时间序列:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">176</span>]: dates = [datetime(<span class="number">2018</span>,<span class="number">3</span>,d) <span class="keyword">for</span> d <span class="keyword">in</span> arange(<span class="number">21</span>, <span class="number">31</span>, step=<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: ts.resample(<span class="string">'D'</span>).sum()</span><br><span class="line">Out[<span class="number">177</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-2.084044</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">1.075880</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>    <span class="number">0.045201</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-27</span>   <span class="number">-0.754086</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span>   <span class="number">-0.448258</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">178</span>]: dates = [datetime(<span class="number">2018</span>,<span class="number">3</span>,d) <span class="keyword">for</span> d <span class="keyword">in</span> arange(<span class="number">21</span>, <span class="number">31</span>, step=<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">179</span>]: ts = Series(np.random.randn(<span class="number">5</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="number">180</span>]: ts.resample(<span class="string">'D'</span>).sum() <span class="comment">#转换成固定频率(每日)</span></span><br><span class="line">Out[<span class="number">180</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-21</span>   <span class="number">-0.376527</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-22</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>    <span class="number">0.282788</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-24</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-25</span>   <span class="number">-0.014975</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-26</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-27</span>    <span class="number">1.209955</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span>   <span class="number">-1.279524</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="生成日期范围"><a href="#生成日期范围" class="headerlink" title="生成日期范围"></a>生成日期范围</h3><p><code>pandas.data_range</code>用于生成指定长度的DatatimeIndex，默认情况下<code>data_range</code>会产生按天计算的时间点。如果只传入起始或结束时间，那么的传入一个表示一段时间的数字<code>periods</code>。起始和结束日期定义了日期索引的严格边界(<em>如果想要生成一个由每个月最后一个工作日组成的日期索引，传入”BM”频率，这样只会包含时间间隔内(或刚好在边界上)符合频率要求的日期</em>)。<code>data_range</code>默认会保留起始或结束时间戳的 <strong>时间</strong> 信息(有的话)。如果希望产生一组被规范化到午夜的时间戳，可以设置<code>normalize=True</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">182</span>]: index = pd.date_range(<span class="string">'8/4/2017'</span>,<span class="string">'3/27/2018'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: index</span><br><span class="line">Out[<span class="number">183</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2017-08-04'</span>, <span class="string">'2017-08-05'</span>, <span class="string">'2017-08-06'</span>, <span class="string">'2017-08-07'</span>,</span><br><span class="line">               <span class="string">'2017-08-08'</span>, <span class="string">'2017-08-09'</span>, <span class="string">'2017-08-10'</span>, <span class="string">'2017-08-11'</span>,</span><br><span class="line">               <span class="string">'2017-08-12'</span>, <span class="string">'2017-08-13'</span>,</span><br><span class="line">               ...</span><br><span class="line">               <span class="string">'2018-03-18'</span>, <span class="string">'2018-03-19'</span>, <span class="string">'2018-03-20'</span>, <span class="string">'2018-03-21'</span>,</span><br><span class="line">               <span class="string">'2018-03-22'</span>, <span class="string">'2018-03-23'</span>, <span class="string">'2018-03-24'</span>, <span class="string">'2018-03-25'</span>,</span><br><span class="line">               <span class="string">'2018-03-26'</span>, <span class="string">'2018-03-27'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, length=<span class="number">236</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: <span class="comment">#传入起始日期或结束日期并设置一段时间</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: pd.date_range(start=<span class="string">'8/4/2017'</span>,periods=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">186</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2017-08-04'</span>, <span class="string">'2017-08-05'</span>, <span class="string">'2017-08-06'</span>, <span class="string">'2017-08-07'</span>,</span><br><span class="line">               <span class="string">'2017-08-08'</span>, <span class="string">'2017-08-09'</span>, <span class="string">'2017-08-10'</span>, <span class="string">'2017-08-11'</span>,</span><br><span class="line">               <span class="string">'2017-08-12'</span>, <span class="string">'2017-08-13'</span>, <span class="string">'2017-08-14'</span>, <span class="string">'2017-08-15'</span>,</span><br><span class="line">               <span class="string">'2017-08-16'</span>, <span class="string">'2017-08-17'</span>, <span class="string">'2017-08-18'</span>, <span class="string">'2017-08-19'</span>,</span><br><span class="line">               <span class="string">'2017-08-20'</span>, <span class="string">'2017-08-21'</span>, <span class="string">'2017-08-22'</span>, <span class="string">'2017-08-23'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: pd.date_range(end=<span class="string">'8/4/2017'</span>,periods=<span class="number">20</span>)</span><br><span class="line">Out[<span class="number">187</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2017-07-16'</span>, <span class="string">'2017-07-17'</span>, <span class="string">'2017-07-18'</span>, <span class="string">'2017-07-19'</span>,</span><br><span class="line">               <span class="string">'2017-07-20'</span>, <span class="string">'2017-07-21'</span>, <span class="string">'2017-07-22'</span>, <span class="string">'2017-07-23'</span>,</span><br><span class="line">               <span class="string">'2017-07-24'</span>, <span class="string">'2017-07-25'</span>, <span class="string">'2017-07-26'</span>, <span class="string">'2017-07-27'</span>,</span><br><span class="line">               <span class="string">'2017-07-28'</span>, <span class="string">'2017-07-29'</span>, <span class="string">'2017-07-30'</span>, <span class="string">'2017-07-31'</span>,</span><br><span class="line">               <span class="string">'2017-08-01'</span>, <span class="string">'2017-08-02'</span>, <span class="string">'2017-08-03'</span>, <span class="string">'2017-08-04'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: <span class="comment">#传入频率</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">189</span>]: pd.date_range(<span class="string">'8/4/2017'</span>,<span class="string">'3/27/2018'</span>, freq=<span class="string">'BM'</span>)</span><br><span class="line">Out[<span class="number">189</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2017-08-31'</span>, <span class="string">'2017-09-29'</span>, <span class="string">'2017-10-31'</span>, <span class="string">'2017-11-30'</span>,</span><br><span class="line">               <span class="string">'2017-12-29'</span>, <span class="string">'2018-01-31'</span>, <span class="string">'2018-02-28'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'BM'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">193</span>]: <span class="comment">#保留时间信息</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">194</span>]: pd.date_range(<span class="string">'8/4/2017 12:21:56'</span>, periods=<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">194</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2017-08-04 12:21:56'</span>, <span class="string">'2017-08-05 12:21:56'</span>,</span><br><span class="line">               <span class="string">'2017-08-06 12:21:56'</span>, <span class="string">'2017-08-07 12:21:56'</span>,</span><br><span class="line">               <span class="string">'2017-08-08 12:21:56'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">203</span>]: <span class="comment">#规范化时间</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">204</span>]: date_r = pd.date_range(<span class="string">'8/4/2017 12:21:56'</span>, periods=<span class="number">5</span>, normalize=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">205</span>]: date_r[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">205</span>]: Timestamp(<span class="string">'2017-08-05 00:00:00'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="频率和日期偏移量"><a href="#频率和日期偏移量" class="headerlink" title="频率和日期偏移量"></a>频率和日期偏移量</h3><p>pandas中的频率由一个 <strong>基础频率</strong> 和一个 <strong>乘数</strong> 组成。基础频率通常以一个字符串别名表示，比如“M”表示每月，“H”表示每小时。对于每个基础频率，都有一个被称为 <strong>日期偏移量</strong> 的对象与之对应。按小时计算可以使用Hour类，传入一个整数即可定义偏移量的倍数。一般来说无需显式创建便宜对象，直接使用诸如”H”或”4H”这样的字符串别名即可，在基础频率前加上一个整数可创建倍数；大部分的偏移量对象可以通过加法进行连接，而传入”1h30min”这样的频率字符串也能被高效地解析为等效的表达式。有些频率描述的时间点并不是均匀分隔的。(<em>“M”(日历月末)和”BM”(每月最后一个工作日)就取决于每月的天数，对于后者还要考虑月末是不是周末，这种称为锚点偏移量(anchored offset)<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></em>)。</p><ul><li>时间序列的基础频率</li></ul><table><thead><tr><th style="text-align:center">别名</th><th style="text-align:center">偏移量类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">D</td><td style="text-align:center">Day</td><td style="text-align:center">每日历日</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">BusinessDay</td><td style="text-align:center">每工作日</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">Hour</td><td style="text-align:center">每小时</td></tr><tr><td style="text-align:center">T或min</td><td style="text-align:center">Minute</td><td style="text-align:center">每分</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">Second</td><td style="text-align:center">每秒</td></tr><tr><td style="text-align:center">L或ms</td><td style="text-align:center">Milli</td><td style="text-align:center">每毫秒(即每千分之一秒)</td></tr><tr><td style="text-align:center">U</td><td style="text-align:center">Micro</td><td style="text-align:center">每微秒(即每百万分之一秒)</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">MonthEnd</td><td style="text-align:center">每月最后一个日历日</td></tr><tr><td style="text-align:center">BM</td><td style="text-align:center">BusinessMonthEnd</td><td style="text-align:center">每月最后一个工作日</td></tr><tr><td style="text-align:center">MS</td><td style="text-align:center">MonthBegin</td><td style="text-align:center">每月第一个日历日</td></tr><tr><td style="text-align:center">BMS</td><td style="text-align:center">BusinessMonthBegin</td><td style="text-align:center">每月第一个工作日</td></tr><tr><td style="text-align:center">W-MON、W-TUE…</td><td style="text-align:center">Week</td><td style="text-align:center">从指定的星期几(MON、TUE、WED、THU、FRI、SAT、SUN)开始算起，每周</td></tr><tr><td style="text-align:center">WOM-1MON、WOM-2MON…</td><td style="text-align:center">WeekOfMonth</td><td style="text-align:center">产生每月第一、第二、第三或第四轴的星期几。例如，WOM-3FRI表示每月的第三个星期五</td></tr><tr><td style="text-align:center">Q-JAN、Q-FEB…</td><td style="text-align:center">QuaterEnd</td><td style="text-align:center">对于以指定月份(JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV、DEC)结束的年度，每季度最后一月的最后一个日历日</td></tr><tr><td style="text-align:center">BQ-JAN、BQ-FEB…</td><td style="text-align:center">BusinessQuarterEnd</td><td style="text-align:center">对于以指定月份结束的年度，每季度最后一个月的最后一个工作日</td></tr><tr><td style="text-align:center">QS-JAN、QS-FEB…</td><td style="text-align:center">QuarterBegin</td><td style="text-align:center">对于以指定月份结束的年度，每季度最后一月的第一个日历日</td></tr><tr><td style="text-align:center">BQS-JAN、BQS-FEB…</td><td style="text-align:center">BusinessQuarterBegin</td><td style="text-align:center">对于以指定月份结束的年度，每季度最后一月的第一个工作日</td></tr><tr><td style="text-align:center">A-JAN、A-FEB…</td><td style="text-align:center">YearEnd</td><td style="text-align:center">每年指定月份(JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV、DEC)的最后一个日历日</td></tr><tr><td style="text-align:center">BA-JAN、BA-FEB…</td><td style="text-align:center">BusinessYearEnd</td><td style="text-align:center">每年指定月份的最后一个工作日</td></tr><tr><td style="text-align:center">AS-JAN、AS-FEB…</td><td style="text-align:center">YearBegin</td><td style="text-align:center">每年指定月份的最后一个日历日</td></tr><tr><td style="text-align:center">BAS-JAN、BAS-FEB…</td><td style="text-align:center">BusinessYearBegin</td><td style="text-align:center">每年指定月份的最后一个工作日</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">189</span>]: <span class="comment">#按小时计算的频率</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">190</span>]: <span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Hour, Minute</span><br><span class="line"></span><br><span class="line">In [<span class="number">191</span>]: hour = Hour()</span><br><span class="line"></span><br><span class="line">In [<span class="number">192</span>]: hour</span><br><span class="line">Out[<span class="number">192</span>]: &lt;Hour&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">193</span>]: four_hours = Hour(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">194</span>]: four_hours</span><br><span class="line">Out[<span class="number">194</span>]: &lt;<span class="number">4</span> * Hours&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">195</span>]: <span class="comment">#使用“H”或“4H”字符串别名</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">196</span>]: pd.date_range(<span class="string">'3/27/2018'</span>,<span class="string">'3/30/2018'</span>, freq=<span class="string">'4h'</span>)</span><br><span class="line">Out[<span class="number">196</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-27 00:00:00'</span>, <span class="string">'2018-03-27 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 08:00:00'</span>, <span class="string">'2018-03-27 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 16:00:00'</span>, <span class="string">'2018-03-27 20:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-28 00:00:00'</span>, <span class="string">'2018-03-28 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-28 08:00:00'</span>, <span class="string">'2018-03-28 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-28 16:00:00'</span>, <span class="string">'2018-03-28 20:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-29 00:00:00'</span>, <span class="string">'2018-03-29 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-29 08:00:00'</span>, <span class="string">'2018-03-29 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-29 16:00:00'</span>, <span class="string">'2018-03-29 20:00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-30 00:00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'4H'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">197</span>]: <span class="comment">#通过加法连接偏移量</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">198</span>]: Hour(<span class="number">2</span>)+Minute(<span class="number">30</span>)</span><br><span class="line">Out[<span class="number">198</span>]: &lt;<span class="number">150</span> * Minutes&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">199</span>]: <span class="comment">#传入频率字符串</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">200</span>]: pd.date_range(<span class="string">'3/27/2018'</span>,periods=<span class="number">10</span>,freq=<span class="string">'2h30min'</span>)</span><br><span class="line">Out[<span class="number">200</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-27 00:00:00'</span>, <span class="string">'2018-03-27 02:30:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 05:00:00'</span>, <span class="string">'2018-03-27 07:30:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 10:00:00'</span>, <span class="string">'2018-03-27 12:30:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 15:00:00'</span>, <span class="string">'2018-03-27 17:30:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-27 20:00:00'</span>, <span class="string">'2018-03-27 22:30:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'150T'</span>)</span><br></pre></td></tr></table></figure><h4 id="WOM日期"><a href="#WOM日期" class="headerlink" title="WOM日期"></a>WOM日期</h4><p>WOM(Week Of Month)是一种非常实用的频率类，它以 <strong>WOM</strong> 开头，能够获得诸如“每个月第三个星期五”之类的日期：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">202</span>]: <span class="comment"># 每月第三个星期五</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">203</span>]: rng = pd.date_range(<span class="string">'3/1/2018'</span>,<span class="string">'9/1/2018'</span>,freq=<span class="string">'WOM-3FRI'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">204</span>]: rng</span><br><span class="line">Out[<span class="number">204</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-16'</span>, <span class="string">'2018-04-20'</span>, <span class="string">'2018-05-18'</span>, <span class="string">'2018-06-15'</span>,</span><br><span class="line">               <span class="string">'2018-07-20'</span>, <span class="string">'2018-08-17'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'WOM-3FRI'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="移动-超前和滞后-数据"><a href="#移动-超前和滞后-数据" class="headerlink" title="移动(超前和滞后)数据"></a>移动(超前和滞后)数据</h3><p><strong>移动(shifting)</strong> 指的是沿着时间轴将数据前移或后移。Series和DataFrame又一个<code>shift</code>方法用于执行单纯的前移或后移操作，保持索引不变.<code>shift</code>通常用于计算一个时间序列或多个时间序列中的百分比变化(ts/ts.shift(1)-1)。单纯的移位操作不会修改索引，所以部分数据会被丢弃。2⃣️如果频率已知，可以将其传给<code>shift</code>来实现对时间戳进行位移而不是对数据进行简单位移：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">205</span>]: <span class="comment">#使用shift方法对数据移位</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">206</span>]: ts = Series(np.random.randn(<span class="number">4</span>), index=pd.date_range(<span class="string">'27/3/2018'</span>,periods=<span class="number">4</span>, freq=<span class="string">'M'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: ts</span><br><span class="line">Out[<span class="number">207</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span>    <span class="number">0.590246</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-0.425245</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>    <span class="number">0.505558</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-0.467728</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">208</span>]: ts.shift(<span class="number">2</span>)<span class="comment">#后移两位</span></span><br><span class="line">Out[<span class="number">208</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-30</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>    <span class="number">0.590246</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-0.425245</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: ts.shift(<span class="number">-2</span>)<span class="comment">#前移两位</span></span><br><span class="line">Out[<span class="number">209</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span>    <span class="number">0.505558</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-0.467728</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>         NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>         NaN</span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">212</span>]: ts.shift(<span class="number">2</span>,freq=<span class="string">'M'</span>) <span class="comment">#通过频率对时间戳进行移位，后移两个月</span></span><br><span class="line">Out[<span class="number">212</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>    <span class="number">0.590246</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-0.425245</span></span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-31</span>    <span class="number">0.505558</span></span><br><span class="line"><span class="number">2018</span><span class="number">-08</span><span class="number">-31</span>   <span class="number">-0.467728</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">213</span>]: ts.shift(<span class="number">-3</span>,freq=<span class="string">'D'</span>) <span class="comment">#通过频率对时间戳进行移位，前移3天</span></span><br><span class="line">Out[<span class="number">213</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>    <span class="number">0.590246</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-27</span>   <span class="number">-0.425245</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-28</span>    <span class="number">0.505558</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-27</span>   <span class="number">-0.467728</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">214</span>]: ts.shift(<span class="number">-1</span>,freq=<span class="string">'3D'</span>) <span class="comment">#通过频率对时间戳进行移位，前移3天</span></span><br><span class="line">Out[<span class="number">214</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>    <span class="number">0.590246</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-27</span>   <span class="number">-0.425245</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-28</span>    <span class="number">0.505558</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-27</span>   <span class="number">-0.467728</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h4 id="通过偏移量对日期进行位移"><a href="#通过偏移量对日期进行位移" class="headerlink" title="通过偏移量对日期进行位移"></a>通过偏移量对日期进行位移</h4><p>pandas的日期偏移量可以用在datetime或Timestamp对象上；如果是锚点偏移量(比如MethodEnd)，第一次增量会将原日期向前滚动到符合频率规则的下一个日期；通过锚点偏移量的<code>rollforward</code>和<code>rollback</code>方法，可显式地将日期向前或向后滚动；也可以通过<code>groupby</code>或者<code>resample</code>方法来滚动:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">219</span>]: <span class="comment">#在datetime或Timestamp对象上使用日期偏移量</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">220</span>]: <span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</span><br><span class="line"></span><br><span class="line">In [<span class="number">221</span>]: now = datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">222</span>]: now</span><br><span class="line">Out[<span class="number">222</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">34</span>, <span class="number">880551</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">223</span>]: now + <span class="number">3</span>* Day()</span><br><span class="line">Out[<span class="number">223</span>]: Timestamp(<span class="string">'2018-03-30 20:19:34.880551'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">224</span>]: <span class="comment">#加上锚点偏移量</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">225</span>]: now + MonthEnd()</span><br><span class="line">Out[<span class="number">225</span>]: Timestamp(<span class="string">'2018-03-31 20:19:34.880551'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">226</span>]: now + MonthEnd(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">226</span>]: Timestamp(<span class="string">'2018-04-30 20:19:34.880551'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">231</span>]: <span class="comment">#使用rollforward和rollback方法显式向前或向后滚动日期</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">232</span>]: offset = MonthEnd()</span><br><span class="line"></span><br><span class="line">In [<span class="number">233</span>]: offset.rollforward(now) <span class="comment">#向前滚动</span></span><br><span class="line">Out[<span class="number">233</span>]: Timestamp(<span class="string">'2018-03-31 20:19:34.880551'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">234</span>]: offset.rollback(now) <span class="comment">#向后滚动</span></span><br><span class="line">Out[<span class="number">234</span>]: Timestamp(<span class="string">'2018-02-28 20:19:34.880551'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">238</span>]: <span class="comment">#使用groupby使用滚动</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">239</span>]: ts = Series(np.random.randn(<span class="number">20</span>), index=pd.date_range(<span class="string">'27/3/2018'</span>,periods=<span class="number">20</span>, freq=<span class="string">'4d'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">240</span>]: ts.groupby(offset.rollforward).mean()</span><br><span class="line">Out[<span class="number">240</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span>    <span class="number">0.847476</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-0.194661</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>    <span class="number">0.092392</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-0.710720</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">243</span>]: <span class="comment"># 使用resample</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">244</span>]: ts.resample(<span class="string">'M'</span>).mean()</span><br><span class="line">Out[<span class="number">244</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span>    <span class="number">0.847476</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-0.194661</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span><span class="number">-31</span>    <span class="number">0.092392</span></span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-0.710720</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure></p><h2 id="时区处理"><a href="#时区处理" class="headerlink" title="时区处理"></a>时区处理</h2><p>时区是以UTC偏移量的形式表示。在Python中时区信息来自第三方库pytz，它使Python可以使用Olson数据库(汇编了世界时区信息)。而pandas包装了pytz的功能，所以一般不需要单独学习，只需要记住时区名即可。时区名既可以在<a href="https://pypi.python.org/pypi/pytz/" target="_blank" rel="noopener">官方文档</a>中查看也可以通过交互式的方式查看；要从pytz中获取时区对象，使用pytz.timezone即可，pandas方法虽然接收时区名和时区对象，但建议使用时区名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="comment"># 使用交互式方式查看时区名</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: pytz.common_timezones[<span class="number">-5</span>:]</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'US/Eastern'</span>, <span class="string">'US/Hawaii'</span>, <span class="string">'US/Mountain'</span>, <span class="string">'US/Pacific'</span>, <span class="string">'UTC'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="comment"># 从pytz中获取时区对象</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: tz = pytz.timezone(<span class="string">'US/Hawaii'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: tz</span><br><span class="line">Out[<span class="number">8</span>]: &lt;DstTzInfo <span class="string">'US/Hawaii'</span> LMT<span class="number">-1</span> day, <span class="number">13</span>:<span class="number">29</span>:<span class="number">00</span> STD&gt;</span><br></pre></td></tr></table></figure></p><h3 id="本地化和转换"><a href="#本地化和转换" class="headerlink" title="本地化和转换"></a>本地化和转换</h3><p>默认情况下pandas中的时间序列是 <strong>单纯的(naive)</strong> 时区，其索引的tz字段为 <em>None</em>，在生成日期范围的时候可以加上<code>tz=</code>时区集；从单纯到本地化的转换可以通过<code>tz_localize</code>方法处理，一旦时间序列被本地化到某个特定时区，就可以用<code>tz_convert</code>将其转换到别的时区;<code>tz_localize</code>和<code>tz_convert</code>两个方法都是DatetimeIndex的实例方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="comment"># 生成时间序列</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: rng = pd.date_range(<span class="string">'3/29/2018 8:51'</span>, periods=<span class="number">6</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: ts = Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: print(ts.index.tz)</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="comment"># 在生成日期范围时加上时区集</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: pd.date_range(<span class="string">'3/28/2018 8:53'</span>,periods=<span class="number">10</span>, freq=<span class="string">'D'</span>, tz=<span class="string">'UTC'</span>)</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-28 08:53:00+00:00'</span>, <span class="string">'2018-03-29 08:53:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-30 08:53:00+00:00'</span>, <span class="string">'2018-03-31 08:53:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-01 08:53:00+00:00'</span>, <span class="string">'2018-04-02 08:53:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-03 08:53:00+00:00'</span>, <span class="string">'2018-04-04 08:53:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-05 08:53:00+00:00'</span>, <span class="string">'2018-04-06 08:53:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, UTC]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="comment"># 使用tz_localize方法将单纯转换为本地化</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: ts</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>   <span class="number">-2.496207</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>    <span class="number">0.632944</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>    <span class="number">1.018756</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-01</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>   <span class="number">-0.017984</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>   <span class="number">-2.522974</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>    <span class="number">1.096955</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: ts_utc = ts.tz_localize(<span class="string">'UTC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: ts_utc</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-2.496207</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.632944</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.018756</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-01</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-0.017984</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-2.522974</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.096955</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: ts_utc.index</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-29 08:51:00+00:00'</span>, <span class="string">'2018-03-30 08:51:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-31 08:51:00+00:00'</span>, <span class="string">'2018-04-01 08:51:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-02 08:51:00+00:00'</span>, <span class="string">'2018-04-03 08:51:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, UTC]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="comment"># 使用tz_covert方法转换到别的时区</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: ts_utc.tz_convert(<span class="string">'US/Eastern'</span>)</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>   <span class="number">-2.496207</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">0.632944</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">1.018756</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>   <span class="number">-0.017984</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>   <span class="number">-2.522974</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">04</span>:<span class="number">51</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">1.096955</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: <span class="comment"># 将ts本地化到EST再转换为UTC或柏林时间</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: ts_eastern = ts.tz_localize(<span class="string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: ts_eastern.tz_convert(<span class="string">'UTC'</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-2.496207</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.632944</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.018756</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-01</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-0.017984</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-2.522974</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.096955</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: ts_eastern.tz_convert(<span class="string">'Europe/Berlin'</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>   <span class="number">-2.496207</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>    <span class="number">0.632944</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-31</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>    <span class="number">1.018756</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-01</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>   <span class="number">-0.017984</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>   <span class="number">-2.522974</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">02</span>:<span class="number">00</span>    <span class="number">1.096955</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: <span class="comment"># tz_localize和tz_convert是DatetimeIndex的实例方法</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: ts.index.tz_localize(<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-29 08:51:00+08:00'</span>, <span class="string">'2018-03-30 08:51:00+08:00'</span>,</span><br><span class="line">               <span class="string">'2018-03-31 08:51:00+08:00'</span>, <span class="string">'2018-04-01 08:51:00+08:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-02 08:51:00+08:00'</span>, <span class="string">'2018-04-03 08:51:00+08:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, Asia/Shanghai]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="操作时区意识型Timestamp对象"><a href="#操作时区意识型Timestamp对象" class="headerlink" title="操作时区意识型Timestamp对象"></a>操作时区意识型Timestamp对象</h3><p>跟时间序列和日期范围一样，Timestamp对象也能被从 <strong>单纯型(naive)</strong> 本地化为 <strong>时区意识型(time zone-aware)</strong>，并从一个时区转换到另一个时区；可以在创建Timestamp对象时，传入一个时区信息。时区意识型Timestamp对象在内部保存了一个UTC时间戳值(自UNIX纪元(1970年1月1日)算起的纳秒数)，而这个UTC值在时区转换过程中不会变化，当使用pandas的DateOffset对象执行时间算术运算时，运算过程会自动关注是否存在夏令时转变期:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: <span class="comment"># 创建Timestamp对象并本地化，转换时区</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: stamp = pd.Timestamp(<span class="string">'2018-3-28 9:08'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: stamp_utc = stamp.tz_localize(<span class="string">'UTC'</span>) <span class="comment">#本地化为UTC</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: stamp_utc</span><br><span class="line">Out[<span class="number">37</span>]: Timestamp(<span class="string">'2018-03-28 09:08:00+0000'</span>, tz=<span class="string">'UTC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: stamp_utc.tz_convert(<span class="string">'US/Eastern'</span>) <span class="comment">#转换到USE时区</span></span><br><span class="line">Out[<span class="number">38</span>]: Timestamp(<span class="string">'2018-03-28 05:08:00-0400'</span>, tz=<span class="string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: <span class="comment"># 创建一个带有时区信息的Timestamp</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: stamp_moscow = pd.Timestamp(<span class="string">'2018-3-28 9:00'</span>, tz=<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: stamp_moscow</span><br><span class="line">Out[<span class="number">41</span>]: Timestamp(<span class="string">'2018-03-28 09:00:00+0800'</span>, tz=<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: stamp_moscow.value</span><br><span class="line">Out[<span class="number">43</span>]: <span class="number">1522198800000000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: stamp_moscow.tz_convert(<span class="string">'US/Eastern'</span>).value</span><br><span class="line">Out[<span class="number">44</span>]: <span class="number">1522198800000000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: <span class="comment"># DateOffset对象执行算术运算</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: stamp = pd.Timestamp(<span class="string">'2012-3-12 1:30'</span>, tz=<span class="string">'US/Eastern'</span>) <span class="comment">#夏令时转变前30min</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: stamp + Hour()</span><br><span class="line">Out[<span class="number">54</span>]: Timestamp(<span class="string">'2012-03-12 02:30:00-0400'</span>, tz=<span class="string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: stamp = pd.Timestamp(<span class="string">'2012-11-4 00:30'</span>, tz=<span class="string">'US/Eastern'</span>) <span class="comment">#夏令时转变前90min</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: stamp</span><br><span class="line">Out[<span class="number">56</span>]: Timestamp(<span class="string">'2012-11-04 00:30:00-0400'</span>, tz=<span class="string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: stamp + <span class="number">2</span>*Hour()</span><br><span class="line">Out[<span class="number">57</span>]: Timestamp(<span class="string">'2012-11-04 01:30:00-0500'</span>, tz=<span class="string">'US/Eastern'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="不同时区之间的运算"><a href="#不同时区之间的运算" class="headerlink" title="不同时区之间的运算"></a>不同时区之间的运算</h3><p>如果两个时间序列的时区不同，在将它们合并到一起时，最终结果就会是UTC；而由于时间戳是以UTC存储的，所以不需要发生任何转换:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: rng = pd.date_range(<span class="string">'3/29/2018 8:51'</span>, periods=<span class="number">6</span>, freq=<span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: ts = Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: <span class="comment"># 分别设置时区</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: ts1 = ts[:<span class="number">6</span>].tz_localize(<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: ts2 = ts1[<span class="number">2</span>:].tz_convert(<span class="string">'Europe/Moscow'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: ts1</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-29</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-0.685011</span></span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>    <span class="number">0.257992</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-0.650380</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>    <span class="number">0.050511</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-04</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-0.441419</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-05</span> <span class="number">08</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-1.618306</span></span><br><span class="line">Freq: B, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: ts2</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">03</span>:<span class="number">00</span>   <span class="number">-0.650380</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-03</span> <span class="number">03</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">03</span>:<span class="number">00</span>    <span class="number">0.050511</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-04</span> <span class="number">03</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">03</span>:<span class="number">00</span>   <span class="number">-0.441419</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span><span class="number">-05</span> <span class="number">03</span>:<span class="number">51</span>:<span class="number">00</span>+<span class="number">03</span>:<span class="number">00</span>   <span class="number">-1.618306</span></span><br><span class="line">Freq: B, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: result = ts1+ts2</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: result.index</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line">DatetimeIndex([<span class="string">'2018-03-29 00:51:00+00:00'</span>, <span class="string">'2018-03-30 00:51:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-02 00:51:00+00:00'</span>, <span class="string">'2018-04-03 00:51:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2018-04-04 00:51:00+00:00'</span>, <span class="string">'2018-04-05 00:51:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, UTC]'</span>, freq=<span class="string">'B'</span>)</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">闰秒，是指为保持协调世界时接近于世界时时刻，由国际计量局统一规定在年底或年中（也可能在季末）对协调世界时增加或减少1秒的调整</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">dateutil.parser并不完美，它会将一些原本不是日期的字符串认作是日期(例如将’23’解析成当月的23号，而大于日期的例如’32’会被解析为2032年的今天)</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">来源于书上的叫法(《利用Python进行数据分析》)</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      无论在什么领域中，时间序列(time series)数据是一种重要的结构化数据，
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="时间序列" scheme="http://coldjune.com/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据聚合与分组运算示例</title>
    <link href="http://coldjune.com/2018/03/26/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E4%B8%8E%E5%88%86%E7%BB%84%E8%BF%90%E7%AE%97%E7%A4%BA%E4%BE%8B/"/>
    <id>http://coldjune.com/2018/03/26/数据聚合与分组运算示例/</id>
    <published>2018-03-26T11:49:27.000Z</published>
    <updated>2018-03-27T00:29:54.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用特定与分组的值填充缺失值"><a href="#用特定与分组的值填充缺失值" class="headerlink" title="用特定与分组的值填充缺失值"></a>用特定与分组的值填充缺失值</h2><blockquote><p> 对于缺失数据的清理工作，有时会用dropna将其滤除，而有时则可能希望用一个固定值或由数据集本身所衍生出来的值去填充NA值，这时就需要使用fillna。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: s = Series(np.random.randn(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s[::<span class="number">2</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: s</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line"><span class="number">0</span>         NaN</span><br><span class="line"><span class="number">1</span>    <span class="number">1.467329</span></span><br><span class="line"><span class="number">2</span>         NaN</span><br><span class="line"><span class="number">3</span>    <span class="number">0.066519</span></span><br><span class="line"><span class="number">4</span>         NaN</span><br><span class="line"><span class="number">5</span>   <span class="number">-0.324448</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: s.fillna(s.mean()) <span class="comment"># 用平均值填充NA值</span></span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">0.403133</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.467329</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.403133</span></span><br><span class="line"><span class="number">3</span>    <span class="number">0.066519</span></span><br><span class="line"><span class="number">4</span>    <span class="number">0.403133</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-0.324448</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>对不同的分组填充不同的值，只需将数据分组，并使用<code>apply</code>和一个能够对各数据块调用<code>fillna</code>的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: states = [<span class="string">'CD'</span>, <span class="string">'CQ'</span>,<span class="string">'XJ'</span>,<span class="string">'XM'</span>,<span class="string">'SH'</span>,<span class="string">'BJ'</span>,<span class="string">'NJ'</span>,<span class="string">'TJ'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: group_key = [<span class="string">'West'</span>]*<span class="number">4</span> +[<span class="string">'East'</span>]*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: data = Series(np.random.randn(<span class="number">8</span>),index=states)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: data[[<span class="string">'XJ'</span>,<span class="string">'BJ'</span>,<span class="string">'TJ'</span>]] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: data</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">CD    <span class="number">0.438333</span></span><br><span class="line">CQ    <span class="number">0.156206</span></span><br><span class="line">XJ         NaN</span><br><span class="line">XM    <span class="number">0.309649</span></span><br><span class="line">SH   <span class="number">-0.692189</span></span><br><span class="line">BJ         NaN</span><br><span class="line">NJ    <span class="number">1.812046</span></span><br><span class="line">TJ         NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: data.groupby(group_key).mean()</span><br><span class="line">Out[<span class="number">12</span>]:</span><br><span class="line">East    <span class="number">0.559928</span></span><br><span class="line">West    <span class="number">0.301396</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="comment"># 用分组平均值去填充NA值</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: fill_mean = <span class="keyword">lambda</span> g: g.fillna(g.mean())</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: data.groupby(group_key).apply(fill_mean)</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">CD    <span class="number">0.438333</span></span><br><span class="line">CQ    <span class="number">0.156206</span></span><br><span class="line">XJ    <span class="number">0.301396</span></span><br><span class="line">XM    <span class="number">0.309649</span></span><br><span class="line">SH   <span class="number">-0.692189</span></span><br><span class="line">BJ    <span class="number">0.559928</span></span><br><span class="line">NJ    <span class="number">1.812046</span></span><br><span class="line">TJ    <span class="number">0.559928</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="comment"># 在代码中预定义各组的填充值，可以使用各分组的name属性</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: fill_values=&#123;<span class="string">'East'</span>:<span class="number">0.5</span>,<span class="string">'West'</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: fill_func = <span class="keyword">lambda</span> g: g.fillna(fill_values[g.name])</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: data.groupby(group_key).apply(fill_func)</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">CD    <span class="number">0.438333</span></span><br><span class="line">CQ    <span class="number">0.156206</span></span><br><span class="line">XJ    <span class="number">1.000000</span></span><br><span class="line">XM    <span class="number">0.309649</span></span><br><span class="line">SH   <span class="number">-0.692189</span></span><br><span class="line">BJ    <span class="number">0.500000</span></span><br><span class="line">NJ    <span class="number">1.812046</span></span><br><span class="line">TJ    <span class="number">0.500000</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h2 id="随机采样和排列"><a href="#随机采样和排列" class="headerlink" title="随机采样和排列"></a>随机采样和排列</h2><blockquote><p>从一个大数据集中随机抽取样本可以选取np.random.permutation(N)的前K个元素，其中N为完整数据的大小，K为期望的样本大小下面将构造一个扑克牌</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: <span class="comment"># 红桃(Hearts)、黑桃(Spades)、梅花(Clubs)、方片(Diamonds)</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: suits = [<span class="string">'H'</span>,<span class="string">'S'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: card_val = (list(range(<span class="number">1</span>,<span class="number">11</span>))+[<span class="number">10</span>]*<span class="number">3</span>)*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: base_names = [<span class="string">'A'</span>]+list(range(<span class="number">2</span>,<span class="number">11</span>))+[<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'Q'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: cards = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: <span class="keyword">for</span> suit <span class="keyword">in</span> suits:</span><br><span class="line">    ...:     <span class="comment"># 构造卡牌</span></span><br><span class="line">    ...:     cards.extend(str(num)+ suit <span class="keyword">for</span> num <span class="keyword">in</span> base_names)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: deck = Series(card_val,index=cards)</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: deck[:<span class="number">13</span>] <span class="comment"># 长度为52的Series，其索引为牌名，值则是用于记分的点数</span></span><br><span class="line">Out[<span class="number">44</span>]:</span><br><span class="line">AH      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>H      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>H      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>H      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>H      <span class="number">5</span></span><br><span class="line"><span class="number">6</span>H      <span class="number">6</span></span><br><span class="line"><span class="number">7</span>H      <span class="number">7</span></span><br><span class="line"><span class="number">8</span>H      <span class="number">8</span></span><br><span class="line"><span class="number">9</span>H      <span class="number">9</span></span><br><span class="line"><span class="number">10</span>H    <span class="number">10</span></span><br><span class="line">JH     <span class="number">10</span></span><br><span class="line">KH     <span class="number">10</span></span><br><span class="line">QH     <span class="number">10</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(deck, n=<span class="number">5</span>)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 从整副牌中抽出5张</span></span><br><span class="line">    ...:     <span class="keyword">return</span> deck.take(np.random.permutation(len(deck))[:n])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: draw(deck) <span class="comment"># 抽牌</span></span><br><span class="line">Out[<span class="number">48</span>]:</span><br><span class="line"><span class="number">3</span>H      <span class="number">3</span></span><br><span class="line">KS     <span class="number">10</span></span><br><span class="line"><span class="number">9</span>D      <span class="number">9</span></span><br><span class="line"><span class="number">10</span>S    <span class="number">10</span></span><br><span class="line">JH     <span class="number">10</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: <span class="comment"># 从每种花色中抽取两张牌。由于花色是最后一个字符，所以根据这个进行分组并使用apply</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: get_suit = <span class="keyword">lambda</span> card:card[<span class="number">-1</span>] <span class="comment"># 只要最后一个字母</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: deck.groupby(get_suit).apply(draw, n=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line">C  <span class="number">10</span>C    <span class="number">10</span></span><br><span class="line">   KC     <span class="number">10</span></span><br><span class="line">D  JD     <span class="number">10</span></span><br><span class="line">   <span class="number">6</span>D      <span class="number">6</span></span><br><span class="line">H  <span class="number">6</span>H      <span class="number">6</span></span><br><span class="line">   <span class="number">3</span>H      <span class="number">3</span></span><br><span class="line">S  JS     <span class="number">10</span></span><br><span class="line">   <span class="number">7</span>S      <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: <span class="comment"># 另一种方法</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: deck.groupby(get_suit, group_keys=<span class="keyword">False</span>).apply(draw, n=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line"><span class="number">7</span>C      <span class="number">7</span></span><br><span class="line"><span class="number">3</span>C      <span class="number">3</span></span><br><span class="line"><span class="number">10</span>D    <span class="number">10</span></span><br><span class="line"><span class="number">5</span>D      <span class="number">5</span></span><br><span class="line">KH     <span class="number">10</span></span><br><span class="line"><span class="number">8</span>H      <span class="number">8</span></span><br><span class="line">AS      <span class="number">1</span></span><br><span class="line"><span class="number">6</span>S      <span class="number">6</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="分组加权平均数和相关系数"><a href="#分组加权平均数和相关系数" class="headerlink" title="分组加权平均数和相关系数"></a>分组加权平均数和相关系数</h2><blockquote><p>根据groupby的“拆分-应用-合并”范式，DataFrame的列与列之间或两个Series之间的运算(比如分组加权平均)称为一种标准作业</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">60</span>]: df = DataFrame(&#123;<span class="string">'category'</span>:list(<span class="string">'aaaabbbb'</span>),</span><br><span class="line">    ...:                 <span class="string">'data'</span>:np.random.randn(<span class="number">8</span>),</span><br><span class="line">    ...:                 <span class="string">'weights'</span>:np.random.rand(<span class="number">8</span>)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: df</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">  category      data   weights</span><br><span class="line"><span class="number">0</span>        a <span class="number">-0.183911</span>  <span class="number">0.065850</span></span><br><span class="line"><span class="number">1</span>        a <span class="number">-0.977102</span>  <span class="number">0.897496</span></span><br><span class="line"><span class="number">2</span>        a  <span class="number">1.632742</span>  <span class="number">0.052966</span></span><br><span class="line"><span class="number">3</span>        a  <span class="number">1.820148</span>  <span class="number">0.914846</span></span><br><span class="line"><span class="number">4</span>        b <span class="number">-1.387401</span>  <span class="number">0.256462</span></span><br><span class="line"><span class="number">5</span>        b  <span class="number">0.858152</span>  <span class="number">0.977665</span></span><br><span class="line"><span class="number">6</span>        b  <span class="number">1.613297</span>  <span class="number">0.549450</span></span><br><span class="line"><span class="number">7</span>        b  <span class="number">0.365536</span>  <span class="number">0.472255</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: <span class="comment"># 利用catefory计算加权平均数:</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: grouped  = df.groupby(<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: get_wavg = <span class="keyword">lambda</span> g: np.average(g[<span class="string">'data'</span>], weights=g[<span class="string">'weights'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: grouped.apply(get_wavg)</span><br><span class="line">Out[<span class="number">72</span>]:</span><br><span class="line">category</span><br><span class="line">a    <span class="number">0.446664</span></span><br><span class="line">b    <span class="number">0.683660</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>来自<a href="https://github.com/wesm/pydata-book/blob/2nd-edition/datasets/fec/P00000001-ALL.csv" target="_blank" rel="noopener">Yahoo!Finance的数据集</a>，其中含有标准普尔500指数(SPX字段)和几只股票的收盘价<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: <span class="comment"># 读取数据</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: close_px = pd.read_csv(<span class="string">'stock_px.csv'</span>, parse_dates=<span class="keyword">True</span>, index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: close_px[:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">              AA  AAPL    GE    IBM   JNJ  MSFT   PEP     SPX   XOM</span><br><span class="line"><span class="number">1990</span><span class="number">-02</span><span class="number">-01</span>  <span class="number">4.98</span>  <span class="number">7.86</span>  <span class="number">2.87</span>  <span class="number">16.79</span>  <span class="number">4.27</span>  <span class="number">0.51</span>  <span class="number">6.04</span>  <span class="number">328.79</span>  <span class="number">6.12</span></span><br><span class="line"><span class="number">1990</span><span class="number">-02</span><span class="number">-02</span>  <span class="number">5.04</span>  <span class="number">8.00</span>  <span class="number">2.87</span>  <span class="number">16.89</span>  <span class="number">4.37</span>  <span class="number">0.51</span>  <span class="number">6.09</span>  <span class="number">330.92</span>  <span class="number">6.24</span></span><br><span class="line"><span class="number">1990</span><span class="number">-02</span><span class="number">-05</span>  <span class="number">5.07</span>  <span class="number">8.18</span>  <span class="number">2.87</span>  <span class="number">17.32</span>  <span class="number">4.34</span>  <span class="number">0.51</span>  <span class="number">6.05</span>  <span class="number">331.85</span>  <span class="number">6.25</span></span><br><span class="line"><span class="number">1990</span><span class="number">-02</span><span class="number">-06</span>  <span class="number">5.01</span>  <span class="number">8.12</span>  <span class="number">2.88</span>  <span class="number">17.56</span>  <span class="number">4.32</span>  <span class="number">0.51</span>  <span class="number">6.15</span>  <span class="number">329.66</span>  <span class="number">6.23</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: <span class="comment"># 计算一个由日收益率(通过百分数变化计算)与SPX之间的年度相关系数组成的DataFrame</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: rets = close_px.pct_change().dropna()</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: spx_corr = <span class="keyword">lambda</span> x: x.corrwith(x[<span class="string">'SPX'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: by_year = rets.groupby(<span class="keyword">lambda</span> x: x.year)</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: by_year.apply(spx_corr)[:<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line">            AA      AAPL        GE       IBM       JNJ      MSFT       PEP  \</span><br><span class="line"><span class="number">1990</span>  <span class="number">0.595024</span>  <span class="number">0.545067</span>  <span class="number">0.752187</span>  <span class="number">0.738361</span>  <span class="number">0.801145</span>  <span class="number">0.586691</span>  <span class="number">0.783168</span></span><br><span class="line"><span class="number">1991</span>  <span class="number">0.453574</span>  <span class="number">0.365315</span>  <span class="number">0.759607</span>  <span class="number">0.557046</span>  <span class="number">0.646401</span>  <span class="number">0.524225</span>  <span class="number">0.641775</span></span><br><span class="line"><span class="number">1992</span>  <span class="number">0.398180</span>  <span class="number">0.498732</span>  <span class="number">0.632685</span>  <span class="number">0.262232</span>  <span class="number">0.515740</span>  <span class="number">0.492345</span>  <span class="number">0.473871</span></span><br><span class="line"><span class="number">1993</span>  <span class="number">0.259069</span>  <span class="number">0.238578</span>  <span class="number">0.447257</span>  <span class="number">0.211269</span>  <span class="number">0.451503</span>  <span class="number">0.425377</span>  <span class="number">0.385089</span></span><br><span class="line"><span class="number">1994</span>  <span class="number">0.428549</span>  <span class="number">0.268420</span>  <span class="number">0.572996</span>  <span class="number">0.385162</span>  <span class="number">0.372962</span>  <span class="number">0.436585</span>  <span class="number">0.450516</span></span><br><span class="line"></span><br><span class="line">      SPX       XOM</span><br><span class="line"><span class="number">1990</span>  <span class="number">1.0</span>  <span class="number">0.517586</span></span><br><span class="line"><span class="number">1991</span>  <span class="number">1.0</span>  <span class="number">0.569335</span></span><br><span class="line"><span class="number">1992</span>  <span class="number">1.0</span>  <span class="number">0.318408</span></span><br><span class="line"><span class="number">1993</span>  <span class="number">1.0</span>  <span class="number">0.318952</span></span><br><span class="line"><span class="number">1994</span>  <span class="number">1.0</span>  <span class="number">0.395078</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: <span class="comment"># 计算列和列之间的相关系数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: by_year.apply(<span class="keyword">lambda</span> g: g[<span class="string">'AAPL'</span>].corr(g[<span class="string">'MSFT'</span>]))[:<span class="number">4</span>]  <span class="comment">#计算苹果和微软的年度相关系数</span></span><br><span class="line">Out[<span class="number">88</span>]:</span><br><span class="line"><span class="number">1990</span>    <span class="number">0.408271</span></span><br><span class="line"><span class="number">1991</span>    <span class="number">0.266807</span></span><br><span class="line"><span class="number">1992</span>    <span class="number">0.450592</span></span><br><span class="line"><span class="number">1993</span>    <span class="number">0.236917</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h2 id="面向分组的线性回归"><a href="#面向分组的线性回归" class="headerlink" title="面向分组的线性回归"></a>面向分组的线性回归</h2><blockquote><p>利用statsmodels库对各数据块执行普通最小二乘法回归:</p></blockquote><ul><li><p>安装statsmodels库 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: !pip3 install statsmodels</span><br></pre></td></tr></table></figure></li><li><p>计算线性回归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">90</span>]: <span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: <span class="function"><span class="keyword">def</span> <span class="title">regress</span><span class="params">(data, yvar, xvars)</span>:</span></span><br><span class="line">    ...:     Y = data[yvar]</span><br><span class="line">    ...:     X = data[xvars]</span><br><span class="line">    ...:     X[<span class="string">'intercept'</span>] = <span class="number">1.</span></span><br><span class="line">    ...:     result = sm.OLS(Y,X).fit()</span><br><span class="line">    ...:     <span class="keyword">return</span> result.params</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: by_year.apply(regress, <span class="string">'AAPL'</span>, [<span class="string">'SPX'</span>]) <span class="comment"># 按年计算AAPL对SPX收益率的线性回归</span></span><br><span class="line">Out[<span class="number">92</span>]:</span><br><span class="line">           SPX  intercept</span><br><span class="line"><span class="number">1990</span>  <span class="number">1.512772</span>   <span class="number">0.001395</span></span><br><span class="line"><span class="number">1991</span>  <span class="number">1.187351</span>   <span class="number">0.000396</span></span><br><span class="line"><span class="number">1992</span>  <span class="number">1.832427</span>   <span class="number">0.000164</span></span><br><span class="line"><span class="number">1993</span>  <span class="number">1.390470</span>  <span class="number">-0.002657</span></span><br><span class="line"><span class="number">1994</span>  <span class="number">1.190277</span>   <span class="number">0.001617</span></span><br><span class="line"><span class="number">1995</span>  <span class="number">0.858818</span>  <span class="number">-0.001423</span></span><br><span class="line"><span class="number">1996</span>  <span class="number">0.829389</span>  <span class="number">-0.001791</span></span><br><span class="line"><span class="number">1997</span>  <span class="number">0.749928</span>  <span class="number">-0.001901</span></span><br><span class="line"><span class="number">1998</span>  <span class="number">1.164582</span>   <span class="number">0.004075</span></span><br><span class="line"><span class="number">1999</span>  <span class="number">1.384989</span>   <span class="number">0.003273</span></span><br><span class="line"><span class="number">2000</span>  <span class="number">1.733802</span>  <span class="number">-0.002523</span></span><br><span class="line"><span class="number">2001</span>  <span class="number">1.676128</span>   <span class="number">0.003122</span></span><br><span class="line"><span class="number">2002</span>  <span class="number">1.080330</span>  <span class="number">-0.000199</span></span><br><span class="line"><span class="number">2003</span>  <span class="number">1.187770</span>   <span class="number">0.000690</span></span><br><span class="line"><span class="number">2004</span>  <span class="number">1.363463</span>   <span class="number">0.004201</span></span><br><span class="line"><span class="number">2005</span>  <span class="number">1.766415</span>   <span class="number">0.003246</span></span><br><span class="line"><span class="number">2006</span>  <span class="number">1.645496</span>   <span class="number">0.000080</span></span><br><span class="line"><span class="number">2007</span>  <span class="number">1.198761</span>   <span class="number">0.003438</span></span><br><span class="line"><span class="number">2008</span>  <span class="number">0.968016</span>  <span class="number">-0.001110</span></span><br><span class="line"><span class="number">2009</span>  <span class="number">0.879103</span>   <span class="number">0.002954</span></span><br><span class="line"><span class="number">2010</span>  <span class="number">1.052608</span>   <span class="number">0.001261</span></span><br><span class="line"><span class="number">2011</span>  <span class="number">0.806605</span>   <span class="number">0.001514</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2012联邦选举委员会数据库"><a href="#2012联邦选举委员会数据库" class="headerlink" title="2012联邦选举委员会数据库"></a>2012联邦选举委员会数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">105</span>]: <span class="comment"># 读取文件</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: fec = pd.read_csv(<span class="string">'P00000001-ALL.csv'</span>, low_memory=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: <span class="comment">#fec.loc[123456]</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: <span class="comment"># 读取文件</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: fec = pd.read_csv(<span class="string">'P00000001-ALL.csv'</span>, low_memory=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: fec.loc[<span class="number">123456</span>] <span class="comment">#DataFrame中记录</span></span><br><span class="line">Out[<span class="number">110</span>]:</span><br><span class="line">cmte_id                             C00431445</span><br><span class="line">cand_id                             P80003338</span><br><span class="line">cand_nm                         Obama, Barack</span><br><span class="line">contbr_nm                         ELLMAN, IRA</span><br><span class="line">contbr_city                             TEMPE</span><br><span class="line">contbr_st                                  AZ</span><br><span class="line">contbr_zip                          <span class="number">852816719</span></span><br><span class="line">contbr_employer      ARIZONA STATE UNIVERSITY</span><br><span class="line">contbr_occupation                   PROFESSOR</span><br><span class="line">contb_receipt_amt                          <span class="number">50</span></span><br><span class="line">contb_receipt_dt                    <span class="number">01</span>-DEC<span class="number">-11</span></span><br><span class="line">receipt_desc                              NaN</span><br><span class="line">memo_cd                                   NaN</span><br><span class="line">memo_text                                 NaN</span><br><span class="line">form_tp                                 SA17A</span><br><span class="line">file_num                               <span class="number">772372</span></span><br><span class="line">Name: <span class="number">123456</span>, dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: <span class="comment"># 数据中没有党派信息，通过unique可以获取全部候选人名单，利用字典说明党派关系</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: unique_cands = fec.cand_nm.unique()</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: unique_cands</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">array([<span class="string">'Bachmann, Michelle'</span>, <span class="string">'Romney, Mitt'</span>, <span class="string">'Obama, Barack'</span>,</span><br><span class="line">       <span class="string">"Roemer, Charles E. 'Buddy' III"</span>, <span class="string">'Pawlenty, Timothy'</span>,</span><br><span class="line">       <span class="string">'Johnson, Gary Earl'</span>, <span class="string">'Paul, Ron'</span>, <span class="string">'Santorum, Rick'</span>,</span><br><span class="line">       <span class="string">'Cain, Herman'</span>, <span class="string">'Gingrich, Newt'</span>, <span class="string">'McCotter, Thaddeus G'</span>,</span><br><span class="line">       <span class="string">'Huntsman, Jon'</span>, <span class="string">'Perry, Rick'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: parties=&#123;<span class="string">'Bachmann, Michelle'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Romney, Mitt'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">"Roemer, Charles E. 'Buddy' III"</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Pawlenty, Timothy'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Johnson, Gary Earl'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Paul, Ron'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Santorum, Rick'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Cain, Herman'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Gingrich, Newt'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'McCotter, Thaddeus G'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Huntsman, Jon'</span>:<span class="string">'Republican'</span>,</span><br><span class="line">     ...:         <span class="string">'Obama, Barack'</span>:<span class="string">'Democrat'</span>,</span><br><span class="line">     ...:         <span class="string">'Perry, Rick'</span>:<span class="string">'Republican'</span>&#125;</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: <span class="comment"># 通过这个映射以及Series对象的map方法可以根据候选人姓名得到一组党派信息</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: fec.cand_nm[<span class="number">123456</span>:<span class="number">123461</span>]</span><br><span class="line">Out[<span class="number">119</span>]:</span><br><span class="line"><span class="number">123456</span>    Obama, Barack</span><br><span class="line"><span class="number">123457</span>    Obama, Barack</span><br><span class="line"><span class="number">123458</span>    Obama, Barack</span><br><span class="line"><span class="number">123459</span>    Obama, Barack</span><br><span class="line"><span class="number">123460</span>    Obama, Barack</span><br><span class="line">Name: cand_nm, dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: fec.cand_nm[<span class="number">123456</span>:<span class="number">123461</span>].map(parties)</span><br><span class="line">Out[<span class="number">120</span>]:</span><br><span class="line"><span class="number">123456</span>    Democrat</span><br><span class="line"><span class="number">123457</span>    Democrat</span><br><span class="line"><span class="number">123458</span>    Democrat</span><br><span class="line"><span class="number">123459</span>    Democrat</span><br><span class="line"><span class="number">123460</span>    Democrat</span><br><span class="line">Name: cand_nm, dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: <span class="comment"># 将其添加为一个新列</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: fec[<span class="string">'party'</span>] = fec.cand_nm.map(parties)</span><br><span class="line"></span><br><span class="line">In [<span class="number">123</span>]: <span class="comment"># 限定该数据集只有正的出资额</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: fec = fec[fec.contb_receipt_amt&gt;<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: <span class="comment"># 由于Barack Obama和Mitt Romney是最主要的两名候选人，所以准备一个只包含针对两人的竞选活动的赞助信息的子集</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: fec_mrbo = fec[fec.cand_nm.isin([<span class="string">'Obama, Barack'</span>,<span class="string">'Romney, Mitt'</span>])]</span><br></pre></td></tr></table></figure><h3 id="根据职业和雇主统计赞助信息"><a href="#根据职业和雇主统计赞助信息" class="headerlink" title="根据职业和雇主统计赞助信息"></a>根据职业和雇主统计赞助信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">127</span>]: <span class="comment">#根据职业计算出资总额</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: fec.contbr_occupation.value_counts()[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">128</span>]:</span><br><span class="line">RETIRED                                   <span class="number">233990</span></span><br><span class="line">INFORMATION REQUESTED                      <span class="number">35107</span></span><br><span class="line">ATTORNEY                                   <span class="number">34286</span></span><br><span class="line">HOMEMAKER                                  <span class="number">29931</span></span><br><span class="line">PHYSICIAN                                  <span class="number">23432</span></span><br><span class="line">INFORMATION REQUESTED PER BEST EFFORTS     <span class="number">21138</span></span><br><span class="line">ENGINEER                                   <span class="number">14334</span></span><br><span class="line">TEACHER                                    <span class="number">13990</span></span><br><span class="line">CONSULTANT                                 <span class="number">13273</span></span><br><span class="line">PROFESSOR                                  <span class="number">12555</span></span><br><span class="line">Name: contbr_occupation, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: <span class="comment"># 许多职业都涉及相同的基本工作类型，或者同一样东西有多重辩题。下面通过将一个职业信息映射到另一个来清理这样的数据</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: occ_mapping =&#123;</span><br><span class="line">     ...:     <span class="string">'INFORMATION REQUESTED PER BEST EFFORTS'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">     ...:     <span class="string">'INFORMATION REQUESTED'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">     ...:     <span class="string">'INFORMATION REQUESTED (BEST EFFORTS)'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">     ...:     <span class="string">'C.E.O'</span>:<span class="string">'CEO'</span>&#125;</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">131</span>]: <span class="comment"># 使用dict.get允许没有映射关系的职业也能通过，如果没有映射关系则返回x</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: f = <span class="keyword">lambda</span> x: occ_mapping.get(x,x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">133</span>]: fec.contbr_occupation = fec.contbr_occupation.map(f)</span><br><span class="line"></span><br><span class="line">In [<span class="number">134</span>]: <span class="comment"># 对雇主也进行相同的处理</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: emp_mapping = &#123;</span><br><span class="line">     ...:     <span class="string">'INFORMATION REQUESTED PER BEST EFFORTS'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">     ...:     <span class="string">'INFORMATION REQUESTED'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">     ...:     <span class="string">'SELF'</span>:<span class="string">'SELF-EMPLOYED'</span>,</span><br><span class="line">     ...:     <span class="string">'SELF EMPLOYED'</span>:<span class="string">'SELF-EMPLOYED'</span>,&#125;</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: f = <span class="keyword">lambda</span> x : emp_mapping.get(x,x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: fec.contbr_employer = fec.contbr_employer.map(f)</span><br><span class="line">In [<span class="number">138</span>]: <span class="comment"># 通过pivor_table根据党派和职业对数据进行聚合，然后过滤掉总出资额不足200万美元的数据</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]:  by_occupation = fec.pivot_table(<span class="string">'contb_receipt_amt'</span>, index=<span class="string">'contbr_occupation'</span>,columns=<span class="string">'party'</span>,aggfunc=<span class="string">'sum'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: over_2mm = by_occupation[by_occupation.sum(<span class="number">1</span>)&gt;<span class="number">2000000</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: over_2mm</span><br><span class="line">Out[<span class="number">141</span>]:</span><br><span class="line">party                 Democrat    Republican</span><br><span class="line">contbr_occupation</span><br><span class="line">ATTORNEY           <span class="number">11141982.97</span>  <span class="number">7.477194e+06</span></span><br><span class="line">C.E.O.                 <span class="number">1690.00</span>  <span class="number">2.592983e+06</span></span><br><span class="line">CEO                 <span class="number">2074284.79</span>  <span class="number">1.640758e+06</span></span><br><span class="line">CONSULTANT          <span class="number">2459912.71</span>  <span class="number">2.544725e+06</span></span><br><span class="line">ENGINEER             <span class="number">951525.55</span>  <span class="number">1.818374e+06</span></span><br><span class="line">EXECUTIVE           <span class="number">1355161.05</span>  <span class="number">4.138850e+06</span></span><br><span class="line">HOMEMAKER           <span class="number">4248875.80</span>  <span class="number">1.363428e+07</span></span><br><span class="line">INVESTOR             <span class="number">884133.00</span>  <span class="number">2.431769e+06</span></span><br><span class="line">LAWYER              <span class="number">3160478.87</span>  <span class="number">3.912243e+05</span></span><br><span class="line">MANAGER              <span class="number">762883.22</span>  <span class="number">1.444532e+06</span></span><br><span class="line">NOT PROVIDED        <span class="number">4866973.96</span>  <span class="number">2.056547e+07</span></span><br><span class="line">OWNER               <span class="number">1001567.36</span>  <span class="number">2.408287e+06</span></span><br><span class="line">PHYSICIAN           <span class="number">3735124.94</span>  <span class="number">3.594320e+06</span></span><br><span class="line">PRESIDENT           <span class="number">1878509.95</span>  <span class="number">4.720924e+06</span></span><br><span class="line">PROFESSOR           <span class="number">2165071.08</span>  <span class="number">2.967027e+05</span></span><br><span class="line">REAL ESTATE          <span class="number">528902.09</span>  <span class="number">1.625902e+06</span></span><br><span class="line">RETIRED            <span class="number">25305116.38</span>  <span class="number">2.356124e+07</span></span><br><span class="line">SELF-EMPLOYED        <span class="number">672393.40</span>  <span class="number">1.640253e+06</span></span><br></pre></td></tr></table></figure><ul><li>出资总额大于两百万美元<br><img src="/2018/03/26/数据聚合与分组运算示例/出资总额大于200万美元.png" alt="出资总额大于200万美元"></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">159</span>]: <span class="comment"># 对Obama和Romney总出资最高的职业和企业</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: <span class="comment">#先对候选人进行分组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_top_amounts</span><span class="params">(group, key, n=<span class="number">5</span>)</span>:</span></span><br><span class="line">     ...:     <span class="comment"># 求最大值</span></span><br><span class="line">     ...:     totals = group.groupby(key)[<span class="string">'contb_receipt_amt'</span>].sum()</span><br><span class="line">     ...:     <span class="comment"># 根据key对totals进行降序排列</span></span><br><span class="line">     ...:     <span class="keyword">return</span> totals.sort_values(ascending=<span class="keyword">False</span>)[n:]</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">162</span>]: <span class="comment"># 根据职业和雇主进行聚合</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">163</span>]: grouped  = fec_mrbo.groupby(<span class="string">'cand_nm'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">164</span>]: grouped.apply(get_top_amounts, <span class="string">'contbr_occupation'</span>,n=<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">164</span>]:</span><br><span class="line">cand_nm        contbr_occupation</span><br><span class="line">Obama, Barack  PROFESSOR                                 <span class="number">2165071.08</span></span><br><span class="line">               CEO                                       <span class="number">2073284.79</span></span><br><span class="line">               PRESIDENT                                 <span class="number">1878509.95</span></span><br><span class="line">               NOT EMPLOYED                              <span class="number">1709188.20</span></span><br><span class="line">               EXECUTIVE                                 <span class="number">1355161.05</span></span><br><span class="line">               TEACHER                                   <span class="number">1250969.15</span></span><br><span class="line">               WRITER                                    <span class="number">1084188.88</span></span><br><span class="line">               OWNER                                     <span class="number">1001567.36</span></span><br><span class="line">               ENGINEER                                   <span class="number">951525.55</span></span><br><span class="line">               INVESTOR                                   <span class="number">884133.00</span></span><br><span class="line">               ARTIST                                     <span class="number">763125.00</span></span><br><span class="line">               MANAGER                                    <span class="number">762883.22</span></span><br><span class="line">               SELF-EMPLOYED                              <span class="number">672393.40</span></span><br><span class="line">               STUDENT                                    <span class="number">628099.75</span></span><br><span class="line">               REAL ESTATE                                <span class="number">528902.09</span></span><br><span class="line">               CHAIRMAN                                   <span class="number">496547.00</span></span><br><span class="line">               ARCHITECT                                  <span class="number">483859.89</span></span><br><span class="line">               DIRECTOR                                   <span class="number">471741.73</span></span><br><span class="line">               BUSINESS OWNER                             <span class="number">449979.30</span></span><br><span class="line">               EDUCATOR                                   <span class="number">436600.89</span></span><br><span class="line">               PSYCHOLOGIST                               <span class="number">427299.92</span></span><br><span class="line">               SOFTWARE ENGINEER                          <span class="number">396985.65</span></span><br><span class="line">               PARTNER                                    <span class="number">395759.50</span></span><br><span class="line">               SALES                                      <span class="number">392886.91</span></span><br><span class="line">               EXECUTIVE DIRECTOR                         <span class="number">348180.94</span></span><br><span class="line">               MANAGING DIRECTOR                          <span class="number">329688.25</span></span><br><span class="line">               SOCIAL WORKER                              <span class="number">326844.43</span></span><br><span class="line">               VICE PRESIDENT                             <span class="number">325647.15</span></span><br><span class="line">               ADMINISTRATOR                              <span class="number">323079.26</span></span><br><span class="line">               SCIENTIST                                  <span class="number">319227.88</span></span><br><span class="line">                                                            ...</span><br><span class="line">Romney, Mitt   NON-PROFIT VETERANS ORG. CHAIR/ANNUITA         <span class="number">10.00</span></span><br><span class="line">               PARAPLANNER                                    <span class="number">10.00</span></span><br><span class="line">               APPRAISAL                                      <span class="number">10.00</span></span><br><span class="line">               SIGN CONTRACTOR                                <span class="number">10.00</span></span><br><span class="line">               POLITICAL OPERATIVE                            <span class="number">10.00</span></span><br><span class="line">               PORT MGT                                       <span class="number">10.00</span></span><br><span class="line">               PRESIDENT EMERITUS                             <span class="number">10.00</span></span><br><span class="line">               CONTRACTS SPECIALIST                            <span class="number">9.00</span></span><br><span class="line">               TEACHER &amp; FREE-LANCE JOURNALIST                 <span class="number">9.00</span></span><br><span class="line">               FOUNDATION CONSULTANT                           <span class="number">6.00</span></span><br><span class="line">               MAIL HANDLER                                    <span class="number">6.00</span></span><br><span class="line">               TREASURER &amp; DIRECTOR OF FINANCE                 <span class="number">6.00</span></span><br><span class="line">               SECRETARY/BOOKKEPPER                            <span class="number">6.00</span></span><br><span class="line">               ELAYNE WELLS HARMER                             <span class="number">6.00</span></span><br><span class="line">               CHICKEN GRADER                                  <span class="number">5.00</span></span><br><span class="line">               DIRECTOR REISCHAUER CENTER FOR EAST A           <span class="number">5.00</span></span><br><span class="line">               SCOTT GREENBAUM                                 <span class="number">5.00</span></span><br><span class="line">               EDUCATION ADMIN                                 <span class="number">5.00</span></span><br><span class="line">               ENGINEER/RISK EXPERT                            <span class="number">5.00</span></span><br><span class="line">               PLANNING AND OPERATIONS ANALYST                 <span class="number">5.00</span></span><br><span class="line">               VILLA NOVA                                      <span class="number">5.00</span></span><br><span class="line">               FINANCIAL INSTITUTION - CEO                     <span class="number">5.00</span></span><br><span class="line">               HORTICULTURIST                                  <span class="number">5.00</span></span><br><span class="line">               MD - UROLOGIST                                  <span class="number">5.00</span></span><br><span class="line">               DISTRICT REPRESENTATIVE                         <span class="number">5.00</span></span><br><span class="line">               INDEPENDENT PROFESSIONAL                        <span class="number">3.00</span></span><br><span class="line">               REMODELER &amp; SEMI RETIRED                        <span class="number">3.00</span></span><br><span class="line">               AFFORDABLE REAL ESTATE DEVELOPER                <span class="number">3.00</span></span><br><span class="line">               IFC CONTRACTING SOLUTIONS                       <span class="number">3.00</span></span><br><span class="line">               <span class="number">3</span>RD GENERATION FAMILY BUSINESS OWNER            <span class="number">3.00</span></span><br><span class="line">Name: contb_receipt_amt, Length: <span class="number">35975</span>, dtype: float64</span><br></pre></td></tr></table></figure><h3 id="对出资额分组"><a href="#对出资额分组" class="headerlink" title="对出资额分组"></a>对出资额分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">165</span>]: <span class="comment"># 利用cut函数根据出资额的大小将数据离散到多个面元中</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">166</span>]: bins = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>,<span class="number">10000000</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">167</span>]: labels = pd.cut(fec_mrbo.contb_receipt_amt,bins)</span><br><span class="line"></span><br><span class="line">In [<span class="number">168</span>]: labels</span><br><span class="line">Out[<span class="number">168</span>]:</span><br><span class="line"><span class="number">411</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">412</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">413</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">414</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">415</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">416</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">417</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">418</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">419</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">420</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">421</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">422</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">423</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">424</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">425</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">426</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">427</span>       (<span class="number">1000</span>, <span class="number">10000</span>]</span><br><span class="line"><span class="number">428</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">429</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">430</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">431</span>       (<span class="number">1000</span>, <span class="number">10000</span>]</span><br><span class="line"><span class="number">432</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">433</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">434</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">435</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">436</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">437</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">438</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">439</span>         (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">440</span>           (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line">              ...</span><br><span class="line"><span class="number">701356</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701357</span>          (<span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">701358</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701359</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701360</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701361</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701362</span>      (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">701363</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701364</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701365</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701366</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701367</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701368</span>      (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">701369</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701370</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701371</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701372</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701373</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701374</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701375</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701376</span>    (<span class="number">1000</span>, <span class="number">10000</span>]</span><br><span class="line"><span class="number">701377</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701378</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701379</span>      (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">701380</span>    (<span class="number">1000</span>, <span class="number">10000</span>]</span><br><span class="line"><span class="number">701381</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701382</span>      (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line"><span class="number">701383</span>          (<span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">701384</span>        (<span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">701385</span>      (<span class="number">100</span>, <span class="number">1000</span>]</span><br><span class="line">Name: contb_receipt_amt, Length: <span class="number">694282</span>, dtype: category</span><br><span class="line">Categories (<span class="number">8</span>, interval[int64]): [(<span class="number">0</span>, <span class="number">1</span>] &lt; (<span class="number">1</span>, <span class="number">10</span>] &lt; (<span class="number">10</span>, <span class="number">100</span>] &lt; (<span class="number">100</span>, <span class="number">1000</span>] &lt; (<span class="number">1000</span>, <span class="number">10000</span>] &lt;</span><br><span class="line">                                  (<span class="number">10000</span>, <span class="number">100000</span>] &lt; (<span class="number">100000</span>, <span class="number">1000000</span>] &lt; (<span class="number">1000000</span>, <span class="number">10000000</span>]]</span><br><span class="line"></span><br><span class="line">n [<span class="number">171</span>]: <span class="comment"># 根据候选人姓名以及面元标签对数据进行分组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">172</span>]: grouped = fec_mrbo.groupby([<span class="string">'cand_nm'</span>,labels])</span><br><span class="line"></span><br><span class="line">In [<span class="number">173</span>]: grouped.size().unstack(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">173</span>]:</span><br><span class="line">cand_nm              Obama, Barack  Romney, Mitt</span><br><span class="line">contb_receipt_amt</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>]                       <span class="number">493.0</span>          <span class="number">77.0</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">10</span>]                    <span class="number">40070.0</span>        <span class="number">3681.0</span></span><br><span class="line">(<span class="number">10</span>, <span class="number">100</span>]                 <span class="number">372280.0</span>       <span class="number">31853.0</span></span><br><span class="line">(<span class="number">100</span>, <span class="number">1000</span>]               <span class="number">153991.0</span>       <span class="number">43357.0</span></span><br><span class="line">(<span class="number">1000</span>, <span class="number">10000</span>]              <span class="number">22284.0</span>       <span class="number">26186.0</span></span><br><span class="line">(<span class="number">10000</span>, <span class="number">100000</span>]                <span class="number">2.0</span>           <span class="number">1.0</span></span><br><span class="line">(<span class="number">100000</span>, <span class="number">1000000</span>]              <span class="number">3.0</span>           NaN</span><br><span class="line">(<span class="number">1000000</span>, <span class="number">10000000</span>]            <span class="number">4.0</span>           NaN</span><br></pre></td></tr></table></figure><ul><li>两位候选人收到的各种捐赠总额比例<br><img src="/2018/03/26/数据聚合与分组运算示例/两位候选人收到的各种捐赠总额比例.png" alt="两位候选人收到的各种捐赠总额比例"></li></ul><h3 id="根据州统计赞助信息"><a href="#根据州统计赞助信息" class="headerlink" title="根据州统计赞助信息"></a>根据州统计赞助信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n [<span class="number">181</span>]: <span class="comment"># 根据候选人和州对数据进行聚合</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">182</span>]: grouped = fec_mrbo.groupby([<span class="string">'cand_nm'</span>,<span class="string">'contbr_st'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: totals = grouped.contb_receipt_amt.sum().unstack(<span class="number">0</span>).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">184</span>]: totals = totals[totals.sum(<span class="number">1</span>)&gt;<span class="number">100000</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: totals[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">185</span>]:</span><br><span class="line">cand_nm    Obama, Barack  Romney, Mitt</span><br><span class="line">contbr_st</span><br><span class="line">AK             <span class="number">281840.15</span>      <span class="number">86204.24</span></span><br><span class="line">AL             <span class="number">543123.48</span>     <span class="number">527303.51</span></span><br><span class="line">AR             <span class="number">359247.28</span>     <span class="number">105556.00</span></span><br><span class="line">AZ            <span class="number">1506476.98</span>    <span class="number">1888436.23</span></span><br><span class="line">CA           <span class="number">23824984.24</span>   <span class="number">11237636.60</span></span><br><span class="line">CO            <span class="number">2132429.49</span>    <span class="number">1506714.12</span></span><br><span class="line">CT            <span class="number">2068291.26</span>    <span class="number">3499475.45</span></span><br><span class="line">DC            <span class="number">4373538.80</span>    <span class="number">1025137.50</span></span><br><span class="line">DE             <span class="number">336669.14</span>      <span class="number">82712.00</span></span><br><span class="line">FL            <span class="number">7318178.58</span>    <span class="number">8338458.81</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: <span class="comment"># 对各行除以总赞助额会得到各候选人在各州的总赞助额比例</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: percent = totals.div(totals.sum(<span class="number">1</span>),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: percent[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">188</span>]:</span><br><span class="line">cand_nm    Obama, Barack  Romney, Mitt</span><br><span class="line">contbr_st</span><br><span class="line">AK              <span class="number">0.765778</span>      <span class="number">0.234222</span></span><br><span class="line">AL              <span class="number">0.507390</span>      <span class="number">0.492610</span></span><br><span class="line">AR              <span class="number">0.772902</span>      <span class="number">0.227098</span></span><br><span class="line">AZ              <span class="number">0.443745</span>      <span class="number">0.556255</span></span><br><span class="line">CA              <span class="number">0.679498</span>      <span class="number">0.320502</span></span><br><span class="line">CO              <span class="number">0.585970</span>      <span class="number">0.414030</span></span><br><span class="line">CT              <span class="number">0.371476</span>      <span class="number">0.628524</span></span><br><span class="line">DC              <span class="number">0.810113</span>      <span class="number">0.189887</span></span><br><span class="line">DE              <span class="number">0.802776</span>      <span class="number">0.197224</span></span><br><span class="line">FL              <span class="number">0.467417</span>      <span class="number">0.532583</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      实践是检验真理的标准，学习了聚合与分组之后就通过一些示例来运用吧
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="聚合与分组" scheme="http://coldjune.com/tags/%E8%81%9A%E5%90%88%E4%B8%8E%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据聚合和分组运算</title>
    <link href="http://coldjune.com/2018/03/25/%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E5%92%8C%E5%88%86%E7%BB%84%E8%BF%90%E7%AE%97/"/>
    <id>http://coldjune.com/2018/03/25/数据聚合和分组运算/</id>
    <published>2018-03-25T06:34:00.000Z</published>
    <updated>2018-03-27T00:29:54.393Z</updated>
    
    <content type="html"><![CDATA[<p>Python和pandas可以利用任何合一接受pandas对象或NumPy数组的函数执行复杂的分组运算：</p><ol><li>根据一个或多个键(可以是函数、数组或DataFrame列名)拆分pandas对象</li><li>计算分组摘要统计，如计数、平均数、标准差或用户自定义函数</li><li>对DataFrame的列应用各种各样的函数</li><li>应用组内转换或其他运算，如规格化、线性回归、排名或选取子集等</li><li>计算透视表或交叉表</li><li>执行分位数分析以及其他分组分析</li></ol><h2 id="GroupBy技术"><a href="#GroupBy技术" class="headerlink" title="GroupBy技术"></a>GroupBy技术</h2><p>pandas对象(无论是Series、DataFrane还是其他)中的数据会根据提供的一个或多个键被拆分(split)为多组。拆分操作是在对象的特定轴上执行。然后将一个函数应用(apply)到各个分组并产生一个新值。最后这些函数的执行结果会被合并(combine)到最终结果中。结果对象的形式一般取决于数据上所执行的操作。</p><ul><li>split-apply-combine(分组聚合)<br><img src="/2018/03/25/数据聚合和分组运算/分股聚合演示.png" alt="分组聚合"></li></ul><p>分组键可以有多种形式，且类型不必相同(后三种只是快捷方式其最终目的是产生一组用于拆分对象的值)：</p><ol><li>列表或数组，其长度和待分组轴一样</li><li>表示DataFrame某个列名的值</li><li>字典或Series，给出待分组轴上的值或分组名之间的对应关系</li><li>函数、用于处理轴索引或索引中的各个标签</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: df = DataFrame(&#123;<span class="string">'key1'</span>:list(<span class="string">'aabba'</span>),</span><br><span class="line">   ...:                 <span class="string">'key2'</span>:[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>],</span><br><span class="line">   ...:                 <span class="string">'data1'</span>:np.random.randn(<span class="number">5</span>),</span><br><span class="line">   ...:                 <span class="string">'data2'</span>:np.random.randn(<span class="number">5</span>)&#125;)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: df</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span>    a  one</span><br><span class="line"><span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span>    a  two</span><br><span class="line"><span class="number">2</span>  <span class="number">0.285600</span> <span class="number">-2.665997</span>    b  one</span><br><span class="line"><span class="number">3</span>  <span class="number">1.578314</span>  <span class="number">0.772522</span>    b  two</span><br><span class="line"><span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>    a  one</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="comment">#按key1进行分组，并计算data1的平均值</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="comment">#访问data1，并根据key1调用groupby</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: grouped = df[<span class="string">'data1'</span>].groupby(df[<span class="string">'key1'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: grouped <span class="comment">#变量grouped是一个GroupBy对象。它没有进行任何计算，该对象已经有了接下来对分组执行运算所需的一切信息</span></span><br><span class="line">Out[<span class="number">9</span>]: &lt;pandas.core.groupby.SeriesGroupBy object at <span class="number">0x11292e4e0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="comment">#调用GroupBy的mean方法计算分组平均值</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: grouped.mean()<span class="comment">#数据(Series)根据分组键进行了聚合，产生新的一个Series，其索引为key1列中的唯一值</span></span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">key1</span><br><span class="line">a    <span class="number">0.464193</span></span><br><span class="line">b    <span class="number">0.931957</span></span><br><span class="line">Name: data1, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="comment"># 传入多个数组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: means = df[<span class="string">'data1'</span>].groupby([df[<span class="string">'key1'</span>],df[<span class="string">'key2'</span>]]).mean()<span class="comment">#通过两个键对数据进行了分组，得到一个Series具有层次化索引(由唯一的建对组成)</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: means</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">key1  key2</span><br><span class="line">a     one     <span class="number">0.128166</span></span><br><span class="line">      two     <span class="number">1.136247</span></span><br><span class="line">b     one     <span class="number">0.285600</span></span><br><span class="line">      two     <span class="number">1.578314</span></span><br><span class="line">Name: data1, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: means.unstack()</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">key2       one       two</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.128166</span>  <span class="number">1.136247</span></span><br><span class="line">b     <span class="number">0.285600</span>  <span class="number">1.578314</span></span><br></pre></td></tr></table></figure><p>以上分组键均为Series，2⃣️分组键可以是任何 <strong>长度适当</strong> 的数组，也可以将列名(可以是字符串、数字或其他Python对象)用作分组键:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: states=np.array([<span class="string">'Ohio'</span>,<span class="string">'California'</span>,<span class="string">'California'</span>,<span class="string">'Ohio'</span>,<span class="string">'Ohio'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: years = np.array([<span class="number">2005</span>,<span class="number">2005</span>,<span class="number">2006</span>,<span class="number">2005</span>,<span class="number">2006</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: df[<span class="string">'data1'</span>].groupby([states,years]).mean()<span class="comment">#分组键为适当长度的数组</span></span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">California  <span class="number">2005</span>    <span class="number">1.136247</span></span><br><span class="line">            <span class="number">2006</span>    <span class="number">0.285600</span></span><br><span class="line">Ohio        <span class="number">2005</span>    <span class="number">0.785631</span></span><br><span class="line">            <span class="number">2006</span>    <span class="number">0.263382</span></span><br><span class="line">Name: data1, dtype: float64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="comment"># 分组键为列名</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: df.groupby(<span class="string">'key1'</span>).mean()</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">         data1     data2</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.464193</span>  <span class="number">0.886358</span></span><br><span class="line">b     <span class="number">0.931957</span> <span class="number">-0.946738</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="comment"># 结果中没有key2列是因为这一列不是数值数据，会从结果中排除。默认情况所有数值列都会被聚合</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: df.groupby([<span class="string">'key1'</span>,<span class="string">'key2'</span>]).mean()</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">              data1     data2</span><br><span class="line">key1 key2</span><br><span class="line">a    one   <span class="number">0.128166</span>  <span class="number">0.669099</span></span><br><span class="line">     two   <span class="number">1.136247</span>  <span class="number">1.320876</span></span><br><span class="line">b    one   <span class="number">0.285600</span> <span class="number">-2.665997</span></span><br><span class="line">     two   <span class="number">1.578314</span>  <span class="number">0.772522</span></span><br></pre></td></tr></table></figure></p><h3 id="对分组进行迭代"><a href="#对分组进行迭代" class="headerlink" title="对分组进行迭代"></a>对分组进行迭代</h3><p>GroupBy对象支持迭代，可以产生一组二元元组(由分组名和数据块组成):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">for</span> name, group <span class="keyword">in</span> df.groupby(<span class="string">'key1'</span>):</span><br><span class="line">    ...:     print(<span class="string">'分组名'</span>,name)</span><br><span class="line">    ...:     print(<span class="string">'数据块\n'</span>,group)</span><br><span class="line">    ...:</span><br><span class="line">分组名 a</span><br><span class="line">数据块</span><br><span class="line">       data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span>    a  one</span><br><span class="line"><span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span>    a  two</span><br><span class="line"><span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>    a  one</span><br><span class="line">分组名 b</span><br><span class="line">数据块</span><br><span class="line">       data1     data2 key1 key2</span><br><span class="line"><span class="number">2</span>  <span class="number">0.285600</span> <span class="number">-2.665997</span>    b  one</span><br><span class="line"><span class="number">3</span>  <span class="number">1.578314</span>  <span class="number">0.772522</span>    b  two</span><br></pre></td></tr></table></figure></p><p>对于多重键的情况，元组的第一个元素将会是由键值组成的元组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: <span class="keyword">for</span> (k1,k2), group <span class="keyword">in</span> df.groupby([<span class="string">'key1'</span>,<span class="string">'key2'</span>]):</span><br><span class="line">    ...:     print(k1,k2)</span><br><span class="line">    ...:     print(group)</span><br><span class="line">    ...:</span><br><span class="line">a one</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span>    a  one</span><br><span class="line"><span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>    a  one</span><br><span class="line">a two</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span>    a  two</span><br><span class="line">b one</span><br><span class="line">    data1     data2 key1 key2</span><br><span class="line"><span class="number">2</span>  <span class="number">0.2856</span> <span class="number">-2.665997</span>    b  one</span><br><span class="line">b two</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">3</span>  <span class="number">1.578314</span>  <span class="number">0.772522</span>    b  two</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: <span class="comment"># 将数据片段转化成一个字典</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: pieces = dict(list(df.groupby(<span class="string">'key1'</span>)))</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: pieces[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span>    a  one</span><br><span class="line"><span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span>    a  two</span><br><span class="line"><span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>    a  one</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: pieces</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">&#123;<span class="string">'a'</span>:       data1     data2 key1 key2</span><br><span class="line"> <span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span>    a  one</span><br><span class="line"> <span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span>    a  two</span><br><span class="line"> <span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>    a  one, <span class="string">'b'</span>:       data1     data2 key1 key2</span><br><span class="line"> <span class="number">2</span>  <span class="number">0.285600</span> <span class="number">-2.665997</span>    b  one</span><br><span class="line"> <span class="number">3</span>  <span class="number">1.578314</span>  <span class="number">0.772522</span>    b  two&#125;</span><br></pre></td></tr></table></figure></p><p><code>groupby</code>默认是在<code>axis=0</code>(DataFrame行)上进行分组，通过设置可以在其他任何轴上进行分组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: <span class="comment"># 通过dtype对列进行分组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: grouped = df.groupby(df.dtypes, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: dict(list(grouped))</span><br><span class="line">Out[<span class="number">44</span>]:</span><br><span class="line">&#123;dtype(<span class="string">'float64'</span>):       data1     data2</span><br><span class="line"> <span class="number">0</span> <span class="number">-0.007051</span>  <span class="number">1.406114</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">1.136247</span>  <span class="number">1.320876</span></span><br><span class="line"> <span class="number">2</span>  <span class="number">0.285600</span> <span class="number">-2.665997</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">1.578314</span>  <span class="number">0.772522</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">0.263382</span> <span class="number">-0.067916</span>, dtype(<span class="string">'O'</span>):   key1 key2</span><br><span class="line"> <span class="number">0</span>    a  one</span><br><span class="line"> <span class="number">1</span>    a  two</span><br><span class="line"> <span class="number">2</span>    b  one</span><br><span class="line"> <span class="number">3</span>    b  two</span><br><span class="line"> <span class="number">4</span>    a  one&#125;</span><br></pre></td></tr></table></figure></p><h3 id="选取一个或一组列"><a href="#选取一个或一组列" class="headerlink" title="选取一个或一组列"></a>选取一个或一组列</h3><p>对于由DataFrame产生的GroupBy对象，如果用一个(单个字符串)或一组(字符串数组)列名对其进行索引，就能实现选取部分列进行聚合的目的：<code>df.groupby(&#39;key1&#39;)[&#39;data1&#39;]</code>相当于<code>df[&#39;data1&#39;].groupby(&#39;key1&#39;)</code>；<code>df.groupby(&#39;key1&#39;)[[&#39;data2&#39;]]</code>相当于<code>df[[&#39;data2&#39;]].groupby(df[&#39;key1&#39;])</code>。对于大数据集很可能只需要对部分列进行聚合，这种索引操作返回的对象是一个DataFrame(如果传入的是列表或数组)或已分组的Series(如果传入的是标量形式的单个列名):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: <span class="comment"># 计算data2列的平均值并以DataFrame形式得到结果</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: df.groupby([<span class="string">'key1'</span>,<span class="string">'key2'</span>])[[<span class="string">'data2'</span>]].mean()</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">              data2</span><br><span class="line">key1 key2</span><br><span class="line">a    one   <span class="number">0.669099</span></span><br><span class="line">     two   <span class="number">1.320876</span></span><br><span class="line">b    one  <span class="number">-2.665997</span></span><br><span class="line">     two   <span class="number">0.772522</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: s_grouped= df.groupby([<span class="string">'key1'</span>,<span class="string">'key2'</span>])[<span class="string">'data2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: s_grouped</span><br><span class="line">Out[<span class="number">49</span>]: &lt;pandas.core.groupby.SeriesGroupBy object at <span class="number">0x1119a86a0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: s_grouped.mean()</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">key1  key2</span><br><span class="line">a     one     <span class="number">0.669099</span></span><br><span class="line">      two     <span class="number">1.320876</span></span><br><span class="line">b     one    <span class="number">-2.665997</span></span><br><span class="line">      two     <span class="number">0.772522</span></span><br><span class="line">Name: data2, dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="通过字典或Series进行分组"><a href="#通过字典或Series进行分组" class="headerlink" title="通过字典或Series进行分组"></a>通过字典或Series进行分组</h3><p>除了数组以外，分组信息可以是 <strong>字典</strong>和 <strong>Series</strong>。Series会被看成一个固定大小的映射，如果用Series作为分组键，则pandas会检查Series以确保其索引跟分组轴对齐：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: people = DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">    ...:                    columns=list(<span class="string">'abcde'</span>),</span><br><span class="line">    ...:                    index=[<span class="string">'tom'</span>,<span class="string">'john'</span>,<span class="string">'jim'</span>,<span class="string">'lancy'</span>,<span class="string">'lucy'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: people.loc[<span class="number">2</span>:<span class="number">3</span>,[<span class="string">'b'</span>,<span class="string">'c'</span>]] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: people</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">              a         b         c         d         e</span><br><span class="line">tom    <span class="number">1.522909</span> <span class="number">-1.357885</span> <span class="number">-0.262730</span>  <span class="number">0.180761</span> <span class="number">-1.662128</span></span><br><span class="line">john   <span class="number">0.941963</span> <span class="number">-0.330136</span>  <span class="number">0.520398</span> <span class="number">-0.069789</span>  <span class="number">0.856472</span></span><br><span class="line">jim   <span class="number">-0.077905</span>       NaN       NaN  <span class="number">0.527588</span> <span class="number">-0.162906</span></span><br><span class="line">lancy <span class="number">-0.141172</span>  <span class="number">0.699214</span> <span class="number">-0.602441</span> <span class="number">-2.306901</span> <span class="number">-0.228982</span></span><br><span class="line">lucy  <span class="number">-1.345708</span>  <span class="number">0.931025</span>  <span class="number">0.615641</span> <span class="number">-0.733455</span>  <span class="number">1.321982</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: <span class="comment"># 字典作为分组键</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: mapping = &#123;<span class="string">'a'</span>:<span class="string">'red'</span>, <span class="string">'b'</span>:<span class="string">'red'</span>, <span class="string">'c'</span>:<span class="string">'blue'</span>,</span><br><span class="line">    ...:            <span class="string">'d'</span>:<span class="string">'blue'</span>, <span class="string">'e'</span>:<span class="string">'red'</span>, <span class="string">'f'</span>:<span class="string">'orange'</span>&#125;</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: by_column = people.groupby(mapping, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: by_column.sum()</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">           blue       red</span><br><span class="line">tom   <span class="number">-0.081968</span> <span class="number">-1.497105</span></span><br><span class="line">john   <span class="number">0.450609</span>  <span class="number">1.468299</span></span><br><span class="line">jim    <span class="number">0.527588</span> <span class="number">-0.240812</span></span><br><span class="line">lancy <span class="number">-2.909342</span>  <span class="number">0.329059</span></span><br><span class="line">lucy  <span class="number">-0.117814</span>  <span class="number">0.907299</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: <span class="comment"># Series用作分组键</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: map_series = Series(mapping)</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: people.groupby(map_series, axis=<span class="number">1</span>).count()</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">       blue  red</span><br><span class="line">tom       <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">john      <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">jim       <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">lancy     <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">lucy      <span class="number">2</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="通过函数进行分组"><a href="#通过函数进行分组" class="headerlink" title="通过函数进行分组"></a>通过函数进行分组</h3><p>任何作为分组键的函数都会在各个索引值上被调用一次，其返回值就会被用作分类名称；同时将函数跟数组、列表、字典、Series混用也可以，因为任何东西都会被转换为数组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: <span class="comment"># 根据人名的长度进行分组，可以仅仅传入一个len函数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: people.groupby(len).sum()</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">          a         b         c         d         e</span><br><span class="line"><span class="number">3</span>  <span class="number">1.445004</span> <span class="number">-1.357885</span> <span class="number">-0.262730</span>  <span class="number">0.708349</span> <span class="number">-1.825035</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.403745</span>  <span class="number">0.600890</span>  <span class="number">1.136039</span> <span class="number">-0.803243</span>  <span class="number">2.178454</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.141172</span>  <span class="number">0.699214</span> <span class="number">-0.602441</span> <span class="number">-2.306901</span> <span class="number">-0.228982</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: <span class="comment"># 将函数、列表和数组混用</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: key_list =[<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: people.groupby([len,key_list]).min()</span><br><span class="line">Out[<span class="number">74</span>]:</span><br><span class="line">              a         b         c         d         e</span><br><span class="line"><span class="number">3</span> one <span class="number">-0.077905</span> <span class="number">-1.357885</span> <span class="number">-0.262730</span>  <span class="number">0.180761</span> <span class="number">-1.662128</span></span><br><span class="line"><span class="number">4</span> one  <span class="number">0.941963</span> <span class="number">-0.330136</span>  <span class="number">0.520398</span> <span class="number">-0.069789</span>  <span class="number">0.856472</span></span><br><span class="line">  two <span class="number">-1.345708</span>  <span class="number">0.931025</span>  <span class="number">0.615641</span> <span class="number">-0.733455</span>  <span class="number">1.321982</span></span><br><span class="line"><span class="number">5</span> two <span class="number">-0.141172</span>  <span class="number">0.699214</span> <span class="number">-0.602441</span> <span class="number">-2.306901</span> <span class="number">-0.228982</span></span><br></pre></td></tr></table></figure></p><h3 id="根据索引级别分组"><a href="#根据索引级别分组" class="headerlink" title="根据索引级别分组"></a>根据索引级别分组</h3><p>通过<code>level</code>关键字传入级别编号或名称来根据索引级别聚合层次化索引数据集:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">77</span>]: columns = pd.MultiIndex.from_arrays([[<span class="string">'US'</span>,<span class="string">'US'</span>,<span class="string">'US'</span>,<span class="string">'CH'</span>,<span class="string">'CH'</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>]],names=[<span class="string">'cty'</span>,<span class="string">'tenor'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: hier_df = DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">5</span>), columns=columns)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: hier_df</span><br><span class="line">Out[<span class="number">79</span>]:</span><br><span class="line">cty          US                            CH</span><br><span class="line">tenor         <span class="number">1</span>         <span class="number">3</span>         <span class="number">5</span>         <span class="number">1</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span>     <span class="number">-1.544928</span>  <span class="number">0.860951</span> <span class="number">-1.021428</span>  <span class="number">0.150361</span>  <span class="number">0.863332</span></span><br><span class="line"><span class="number">1</span>      <span class="number">1.500901</span>  <span class="number">0.411124</span>  <span class="number">0.717717</span> <span class="number">-1.186560</span> <span class="number">-0.341670</span></span><br><span class="line"><span class="number">2</span>      <span class="number">1.728200</span>  <span class="number">0.507285</span> <span class="number">-0.974570</span>  <span class="number">0.856083</span>  <span class="number">0.606669</span></span><br><span class="line"><span class="number">3</span>      <span class="number">0.356776</span>  <span class="number">0.399169</span> <span class="number">-0.254092</span>  <span class="number">0.274927</span>  <span class="number">0.169848</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: hier_df.groupby(level=<span class="string">'cty'</span>,axis=<span class="number">1</span>).count()</span><br><span class="line">Out[<span class="number">80</span>]:</span><br><span class="line">cty  CH  US</span><br><span class="line"><span class="number">0</span>     <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>     <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>     <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     <span class="number">2</span>   <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h2><p>聚合指任何能够从数组产生标量值的数据转换过程，许多常见的聚合运算都有就地计算数据集统计信息的优化实现，也可以自己定义聚合运算，还可以调用分组对象上已经定义好的任何方法。</p><ul><li>经过优化的groupby方法</li></ul><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">分组中非NA值的数量</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">非NA值的和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">非NA值的平均数</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">非NA值的算术中位数</td></tr><tr><td style="text-align:center">std、var</td><td style="text-align:center">无偏(分母为n-1)标准差和方差</td></tr><tr><td style="text-align:center">min、max</td><td style="text-align:center">非NA值的最小值和最大值</td></tr><tr><td style="text-align:center">prod</td><td style="text-align:center">非NA值的积</td></tr><tr><td style="text-align:center">first、last</td><td style="text-align:center">第一个和最后一个非NA值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: df</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span>  <span class="number">0.303363</span> <span class="number">-1.985931</span>    a  one</span><br><span class="line"><span class="number">1</span> <span class="number">-1.510949</span>  <span class="number">0.351845</span>    a  two</span><br><span class="line"><span class="number">2</span>  <span class="number">1.665133</span> <span class="number">-0.527562</span>    b  one</span><br><span class="line"><span class="number">3</span>  <span class="number">0.851907</span> <span class="number">-0.377448</span>    b  two</span><br><span class="line"><span class="number">4</span>  <span class="number">0.141499</span>  <span class="number">0.969610</span>    a  one</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: grouped = df.groupby(<span class="string">'key1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="comment"># 使用quantile计算Series或DataFrame列的样本分位数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: grouped[<span class="string">'data1'</span>].quantile(<span class="number">0.9</span>)</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">key1</span><br><span class="line">a    <span class="number">0.27099</span></span><br><span class="line">b    <span class="number">1.58381</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><p><code>quantile</code>是一个Series方法。GroupBy会高效地对Series进行切片，然后对各片调用<code>quantile(0.9)</code>.<br>要使用自己写的聚集函数，需要将其传入<code>aggregate</code>或<code>agg</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">45</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_to_peak</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> arr.max()-arr.min()</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: grouped.agg(get_to_peak)</span><br><span class="line">Out[<span class="number">46</span>]:</span><br><span class="line">         data1     data2</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">1.814312</span>  <span class="number">2.955541</span></span><br><span class="line">b     <span class="number">0.813225</span>  <span class="number">0.150115</span></span><br></pre></td></tr></table></figure></p><p>并非严格的聚合运算(如<code>describe</code>)也可以在这里使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: grouped.describe()</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">     data1                                                              \</span><br><span class="line">     count      mean       std       min       <span class="number">25</span>%       <span class="number">50</span>%       <span class="number">75</span>%</span><br><span class="line">key1</span><br><span class="line">a      <span class="number">3.0</span> <span class="number">-0.355362</span>  <span class="number">1.004035</span> <span class="number">-1.510949</span> <span class="number">-0.684725</span>  <span class="number">0.141499</span>  <span class="number">0.222431</span></span><br><span class="line">b      <span class="number">2.0</span>  <span class="number">1.258520</span>  <span class="number">0.575037</span>  <span class="number">0.851907</span>  <span class="number">1.055214</span>  <span class="number">1.258520</span>  <span class="number">1.461827</span></span><br><span class="line"></span><br><span class="line">               data2                                                    \</span><br><span class="line">           max count      mean       std       min       <span class="number">25</span>%       <span class="number">50</span>%</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.303363</span>   <span class="number">3.0</span> <span class="number">-0.221492</span>  <span class="number">1.558956</span> <span class="number">-1.985931</span> <span class="number">-0.817043</span>  <span class="number">0.351845</span></span><br><span class="line">b     <span class="number">1.665133</span>   <span class="number">2.0</span> <span class="number">-0.452505</span>  <span class="number">0.106147</span> <span class="number">-0.527562</span> <span class="number">-0.490034</span> <span class="number">-0.452505</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="number">75</span>%       max</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.660727</span>  <span class="number">0.969610</span></span><br><span class="line">b    <span class="number">-0.414976</span> <span class="number">-0.377448</span></span><br></pre></td></tr></table></figure></p><h3 id="面向列的多函数应用"><a href="#面向列的多函数应用" class="headerlink" title="面向列的多函数应用"></a>面向列的多函数应用</h3><p>对Series或DataFrame列的聚合运算其实是使用<code>aggregate</code>(使用自定义函数)或调用诸如<code>mean</code>、<code>std</code>之类的方法。如果希望对不同的列使用不同的聚合函数，活一次应用多个函数可以将函数名以 <strong>字符串</strong> 的形式传入；如果传入 <strong>一组</strong> 函数或函数名，得到的DataFrame的列就会以相应的函数命名；如果传入(name，function)元组组成的列表，则元组的第一个元素就会被用作DataFrame的列名(二元元组列表可以看成一个有序映射)；对于DataFrame可以定义一组应用于全部列的函数或不同的列应用不同的函，而结果DataFrame拥有层次化的列，相当于分别对各列进行聚合然后用<code>concat</code>将结果组装到一起，这里也可以传入带有自定义名称的元组列表；如果要对不同的列应用不同的函数，向<code>agg</code>传入一个从列名映射到函数的字典；只有将多个函数应用到至少一列事，DataFrame才会拥有层次化的列，使用<a href="https://github.com/coldJune/Python/blob/master/ipython/stock_px.csv" target="_blank" rel="noopener">小费数据集</a>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="comment"># 准备数据集</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: tips = pd.read_csv(<span class="string">'tips.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="comment"># 添加"小费占总额百分比"的列</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: tips[<span class="string">'tip_pct'</span>] = tips[<span class="string">'tip'</span>]/tips[<span class="string">'total_bill'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: tips[:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">   total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="number">0</span>       <span class="number">16.99</span>  <span class="number">1.01</span>     No  Sun  Dinner     <span class="number">2</span>  <span class="number">0.059447</span></span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>     No  Sun  Dinner     <span class="number">3</span>  <span class="number">0.160542</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>     No  Sun  Dinner     <span class="number">3</span>  <span class="number">0.166587</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: grouped  = tips.groupby([<span class="string">'smoker'</span>,<span class="string">'time'</span>]) <span class="comment"># 根据smoker和time对tips进行分组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: grouped_pct = grouped[<span class="string">'tip_pct'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: grouped_pct.agg(<span class="string">'mean'</span>) <span class="comment">#将函数名以字符串的形式传入</span></span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">smoker  time</span><br><span class="line">No      Dinner    <span class="number">0.158653</span></span><br><span class="line">        Lunch     <span class="number">0.160920</span></span><br><span class="line">Yes     Dinner    <span class="number">0.160828</span></span><br><span class="line">        Lunch     <span class="number">0.170404</span></span><br><span class="line">Name: tip_pct, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="function"><span class="keyword">def</span> <span class="title">peak_to_peak</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 自定义方法</span></span><br><span class="line">    ...:     <span class="keyword">return</span> arr.max() - arr.min()</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: grouped_pct.agg([<span class="string">'mean'</span>,<span class="string">'std'</span>, peak_to_peak]) <span class="comment"># 传入一组函数或函数名，得到的DataFrame的列名为对应的函数名</span></span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">                   mean       std  peak_to_peak</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner  <span class="number">0.158653</span>  <span class="number">0.040458</span>      <span class="number">0.235193</span></span><br><span class="line">       Lunch   <span class="number">0.160920</span>  <span class="number">0.038989</span>      <span class="number">0.193350</span></span><br><span class="line">Yes    Dinner  <span class="number">0.160828</span>  <span class="number">0.095153</span>      <span class="number">0.674707</span></span><br><span class="line">       Lunch   <span class="number">0.170404</span>  <span class="number">0.042770</span>      <span class="number">0.169300</span></span><br><span class="line"></span><br><span class="line">       In [<span class="number">26</span>]: grouped_pct.agg([(<span class="string">'foo'</span>,<span class="string">'mean'</span>),(<span class="string">'bar'</span>,np.std)]) <span class="comment">#传入一个由(name,function)组成的二元元组列表</span></span><br><span class="line">       Out[<span class="number">26</span>]:</span><br><span class="line">                           foo       bar</span><br><span class="line">       smoker time</span><br><span class="line">       No     Dinner  <span class="number">0.158653</span>  <span class="number">0.040458</span></span><br><span class="line">              Lunch   <span class="number">0.160920</span>  <span class="number">0.038989</span></span><br><span class="line">       Yes    Dinner  <span class="number">0.160828</span>  <span class="number">0.095153</span></span><br><span class="line">              Lunch   <span class="number">0.170404</span>  <span class="number">0.042770</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="comment"># 定义一组用于全部列的函数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: functions = [<span class="string">'count'</span>,<span class="string">'mean'</span>,<span class="string">'max'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: result = grouped[<span class="string">'tip_pct'</span>,<span class="string">'total_bill'</span>].agg(functions)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: result</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line">              tip_pct                     total_bill</span><br><span class="line">                count      mean       max      count       mean    max</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner     <span class="number">106</span>  <span class="number">0.158653</span>  <span class="number">0.291990</span>        <span class="number">106</span>  <span class="number">20.095660</span>  <span class="number">48.33</span></span><br><span class="line">       Lunch       <span class="number">45</span>  <span class="number">0.160920</span>  <span class="number">0.266312</span>         <span class="number">45</span>  <span class="number">17.050889</span>  <span class="number">41.19</span></span><br><span class="line">Yes    Dinner      <span class="number">70</span>  <span class="number">0.160828</span>  <span class="number">0.710345</span>         <span class="number">70</span>  <span class="number">21.859429</span>  <span class="number">50.81</span></span><br><span class="line">       Lunch       <span class="number">23</span>  <span class="number">0.170404</span>  <span class="number">0.259314</span>         <span class="number">23</span>  <span class="number">17.399130</span>  <span class="number">43.11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="comment"># 结果DataFrame拥有层次化的列，相当于分别对各列进行聚合，然后用concat将结果组装到一起(列名用作keys参数)</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: result[<span class="string">'tip_pct'</span>]</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">               count      mean       max</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner    <span class="number">106</span>  <span class="number">0.158653</span>  <span class="number">0.291990</span></span><br><span class="line">       Lunch      <span class="number">45</span>  <span class="number">0.160920</span>  <span class="number">0.266312</span></span><br><span class="line">Yes    Dinner     <span class="number">70</span>  <span class="number">0.160828</span>  <span class="number">0.710345</span></span><br><span class="line">       Lunch      <span class="number">23</span>  <span class="number">0.170404</span>  <span class="number">0.259314</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: <span class="comment"># 传入自定义名称的元组列表</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: ftuples = [(<span class="string">'Durchschnit'</span>,<span class="string">'mean'</span>),(<span class="string">'Abweichung'</span>,np.var)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: grouped[<span class="string">'tip_pct'</span>,<span class="string">'total_bill'</span>].agg(ftuples)</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">                  tip_pct             total_bill</span><br><span class="line">              Durchschnit Abweichung Durchschnit  Abweichung</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner    <span class="number">0.158653</span>   <span class="number">0.001637</span>   <span class="number">20.095660</span>   <span class="number">69.604821</span></span><br><span class="line">       Lunch     <span class="number">0.160920</span>   <span class="number">0.001520</span>   <span class="number">17.050889</span>   <span class="number">59.587154</span></span><br><span class="line">Yes    Dinner    <span class="number">0.160828</span>   <span class="number">0.009054</span>   <span class="number">21.859429</span>  <span class="number">104.148753</span></span><br><span class="line">       Lunch     <span class="number">0.170404</span>   <span class="number">0.001829</span>   <span class="number">17.399130</span>   <span class="number">61.958436</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: <span class="comment"># 对不同的列应用不同的函数，向agg传入一个从列名映射到函数的字典</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: grouped.agg(&#123;<span class="string">'tip'</span>:np.max,<span class="string">'size'</span>:<span class="string">'sum'</span>&#125;)</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">                tip  size</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner   <span class="number">9.0</span>   <span class="number">290</span></span><br><span class="line">       Lunch    <span class="number">6.7</span>   <span class="number">113</span></span><br><span class="line">Yes    Dinner  <span class="number">10.0</span>   <span class="number">173</span></span><br><span class="line">       Lunch    <span class="number">5.0</span>    <span class="number">51</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: grouped.agg(&#123;<span class="string">'tip_pct'</span>:[<span class="string">'min'</span>,<span class="string">'max'</span>,<span class="string">'mean'</span>,<span class="string">'std'</span>],<span class="string">'size'</span>:<span class="string">'sum'</span>&#125;)</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">                tip_pct                               size</span><br><span class="line">                    min       max      mean       std  sum</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner  <span class="number">0.056797</span>  <span class="number">0.291990</span>  <span class="number">0.158653</span>  <span class="number">0.040458</span>  <span class="number">290</span></span><br><span class="line">       Lunch   <span class="number">0.072961</span>  <span class="number">0.266312</span>  <span class="number">0.160920</span>  <span class="number">0.038989</span>  <span class="number">113</span></span><br><span class="line">Yes    Dinner  <span class="number">0.035638</span>  <span class="number">0.710345</span>  <span class="number">0.160828</span>  <span class="number">0.095153</span>  <span class="number">173</span></span><br><span class="line">       Lunch   <span class="number">0.090014</span>  <span class="number">0.259314</span>  <span class="number">0.170404</span>  <span class="number">0.042770</span>   <span class="number">51</span></span><br></pre></td></tr></table></figure></p><h3 id="以”无索引”的形式返回聚合数据"><a href="#以”无索引”的形式返回聚合数据" class="headerlink" title="以”无索引”的形式返回聚合数据"></a>以”无索引”的形式返回聚合数据</h3><p>可以通过向groupby传入<code>as_index=False</code>以禁用生成唯一分组键组成的索引(层次化索引):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: tips.groupby([<span class="string">'smoker'</span>,<span class="string">'time'</span>], as_index=<span class="keyword">False</span>).mean()</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">  smoker    time  total_bill       tip      size   tip_pct</span><br><span class="line"><span class="number">0</span>     No  Dinner   <span class="number">20.095660</span>  <span class="number">3.126887</span>  <span class="number">2.735849</span>  <span class="number">0.158653</span></span><br><span class="line"><span class="number">1</span>     No   Lunch   <span class="number">17.050889</span>  <span class="number">2.673778</span>  <span class="number">2.511111</span>  <span class="number">0.160920</span></span><br><span class="line"><span class="number">2</span>    Yes  Dinner   <span class="number">21.859429</span>  <span class="number">3.066000</span>  <span class="number">2.471429</span>  <span class="number">0.160828</span></span><br><span class="line"><span class="number">3</span>    Yes   Lunch   <span class="number">17.399130</span>  <span class="number">2.834348</span>  <span class="number">2.217391</span>  <span class="number">0.170404</span></span><br></pre></td></tr></table></figure></p><h2 id="分组级运算和转换"><a href="#分组级运算和转换" class="headerlink" title="分组级运算和转换"></a>分组级运算和转换</h2><p>聚合是分组运算的其中一种，它是数据转换的一个特例，它接受能够将一维数组简化为标量值的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: <span class="comment">#使用县聚合再合并的方式为一个DataFrame添加一个用于存放各索引分组平均值的列</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: df</span><br><span class="line">Out[<span class="number">44</span>]:</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="number">0</span>  <span class="number">0.568585</span> <span class="number">-0.865028</span>    a  one</span><br><span class="line"><span class="number">1</span>  <span class="number">0.191774</span>  <span class="number">0.063184</span>    a  two</span><br><span class="line"><span class="number">2</span>  <span class="number">1.877514</span> <span class="number">-0.445805</span>    b  one</span><br><span class="line"><span class="number">3</span>  <span class="number">0.834648</span> <span class="number">-0.260108</span>    b  two</span><br><span class="line"><span class="number">4</span> <span class="number">-0.250249</span> <span class="number">-1.472969</span>    a  one</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: k1_means = df.groupby(<span class="string">'key1'</span>).mean().add_prefix(<span class="string">'mean_'</span>)<span class="comment"># 利用np.mean函数对两个数据列进行转换</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: k1_means</span><br><span class="line">Out[<span class="number">46</span>]:</span><br><span class="line">      mean_data1  mean_data2</span><br><span class="line">key1</span><br><span class="line">a       <span class="number">0.170037</span>   <span class="number">-0.758271</span></span><br><span class="line">b       <span class="number">1.356081</span>   <span class="number">-0.352957</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: pd.merge(df,k1_means, left_on=<span class="string">'key1'</span>, right_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">      data1     data2 key1 key2  mean_data1  mean_data2</span><br><span class="line"><span class="number">0</span>  <span class="number">0.568585</span> <span class="number">-0.865028</span>    a  one    <span class="number">0.170037</span>   <span class="number">-0.758271</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.191774</span>  <span class="number">0.063184</span>    a  two    <span class="number">0.170037</span>   <span class="number">-0.758271</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.250249</span> <span class="number">-1.472969</span>    a  one    <span class="number">0.170037</span>   <span class="number">-0.758271</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.877514</span> <span class="number">-0.445805</span>    b  one    <span class="number">1.356081</span>   <span class="number">-0.352957</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.834648</span> <span class="number">-0.260108</span>    b  two    <span class="number">1.356081</span>   <span class="number">-0.352957</span></span><br></pre></td></tr></table></figure></p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p><code>transform</code>会将一个函数应用到各个分组，然后将结果放置到适当的位置上。如果各分组产生的是一个标量值，则该值就会被广播出去；<code>transform</code>和<code>aggregate</code>一样也是一个有着严格条件的特殊函数：传入的函数只能产生两种结果，要么产生一个可以广播的标量值，要么产生一个相同大小的结果数组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">49</span>]: key=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: people.groupby(key).mean()</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">            a         b         c         d         e</span><br><span class="line">one <span class="number">-0.761405</span>  <span class="number">0.060654</span>  <span class="number">0.157032</span> <span class="number">-0.791220</span>  <span class="number">0.330372</span></span><br><span class="line">two <span class="number">-0.253093</span>  <span class="number">0.201181</span>  <span class="number">0.138541</span>  <span class="number">0.459374</span>  <span class="number">0.860159</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: people.groupby(key).transform(np.mean)</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">              a         b         c         d         e</span><br><span class="line">tom   <span class="number">-0.761405</span>  <span class="number">0.060654</span>  <span class="number">0.157032</span> <span class="number">-0.791220</span>  <span class="number">0.330372</span></span><br><span class="line">john  <span class="number">-0.253093</span>  <span class="number">0.201181</span>  <span class="number">0.138541</span>  <span class="number">0.459374</span>  <span class="number">0.860159</span></span><br><span class="line">jim   <span class="number">-0.761405</span>  <span class="number">0.060654</span>  <span class="number">0.157032</span> <span class="number">-0.791220</span>  <span class="number">0.330372</span></span><br><span class="line">lancy <span class="number">-0.253093</span>  <span class="number">0.201181</span>  <span class="number">0.138541</span>  <span class="number">0.459374</span>  <span class="number">0.860159</span></span><br><span class="line">lucy  <span class="number">-0.761405</span>  <span class="number">0.060654</span>  <span class="number">0.157032</span> <span class="number">-0.791220</span>  <span class="number">0.330372</span></span><br></pre></td></tr></table></figure></p><p>从各组中减去平均值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: <span class="function"><span class="keyword">def</span> <span class="title">demean</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 创建一个距平化函数</span></span><br><span class="line">    ...:     <span class="keyword">return</span> arr - arr.mean()</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: dameaned = people.groupby(key).transform(demean)</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: dameaned</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">              a         b         c         d         e</span><br><span class="line">tom   <span class="number">-0.529944</span>  <span class="number">0.771323</span> <span class="number">-1.053227</span>  <span class="number">0.098752</span> <span class="number">-0.720876</span></span><br><span class="line">john   <span class="number">1.022316</span>  <span class="number">0.626768</span> <span class="number">-0.418873</span> <span class="number">-0.901180</span> <span class="number">-0.117146</span></span><br><span class="line">jim    <span class="number">0.626749</span>  <span class="number">0.642272</span> <span class="number">-0.110584</span>  <span class="number">0.192733</span> <span class="number">-0.023483</span></span><br><span class="line">lancy <span class="number">-1.022316</span> <span class="number">-0.626768</span>  <span class="number">0.418873</span>  <span class="number">0.901180</span>  <span class="number">0.117146</span></span><br><span class="line">lucy  <span class="number">-0.096805</span> <span class="number">-1.413596</span>  <span class="number">1.163811</span> <span class="number">-0.291486</span>  <span class="number">0.744359</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: dameaned.groupby(key).mean() <span class="comment">#检查现在分组的平均值是否为0</span></span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line">                a    b    c             d             e</span><br><span class="line">one <span class="number">-7.401487e-17</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">3.700743e-17</span> <span class="number">-3.700743e-17</span></span><br><span class="line">two  <span class="number">0.000000e+00</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">0.000000e+00</span> <span class="number">-5.551115e-17</span></span><br></pre></td></tr></table></figure></p><h3 id="apply-一般性的”拆分-应用-合并”"><a href="#apply-一般性的”拆分-应用-合并”" class="headerlink" title="apply:一般性的”拆分-应用-合并”"></a>apply:一般性的”拆分-应用-合并”</h3><p><code>apply</code>会将待处理的对象拆分成多个片段，然后对各片段调用传入的函数，最后尝试将各片段组合到一起；如果传给apply的函数能够接受其他参数或关键字，可以将这些内容放在函数名后面一并传入:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(df, n=<span class="number">5</span>, column=<span class="string">'tip_pct'</span>)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 在指定列找出最大值，然后把这个值所在的行选取出来</span></span><br><span class="line">    ...:     <span class="keyword">return</span> df.sort_values(by=column)[-n:]</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: top(tips, n=<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">     total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="number">67</span>         <span class="number">3.07</span>  <span class="number">1.00</span>    Yes  Sat  Dinner     <span class="number">1</span>  <span class="number">0.325733</span></span><br><span class="line"><span class="number">178</span>        <span class="number">9.60</span>  <span class="number">4.00</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.416667</span></span><br><span class="line"><span class="number">172</span>        <span class="number">7.25</span>  <span class="number">5.15</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.710345</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: top(tips, n=<span class="number">6</span>)</span><br><span class="line">Out[<span class="number">60</span>]:</span><br><span class="line">     total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="number">109</span>       <span class="number">14.31</span>  <span class="number">4.00</span>    Yes  Sat  Dinner     <span class="number">2</span>  <span class="number">0.279525</span></span><br><span class="line"><span class="number">183</span>       <span class="number">23.17</span>  <span class="number">6.50</span>    Yes  Sun  Dinner     <span class="number">4</span>  <span class="number">0.280535</span></span><br><span class="line"><span class="number">232</span>       <span class="number">11.61</span>  <span class="number">3.39</span>     No  Sat  Dinner     <span class="number">2</span>  <span class="number">0.291990</span></span><br><span class="line"><span class="number">67</span>         <span class="number">3.07</span>  <span class="number">1.00</span>    Yes  Sat  Dinner     <span class="number">1</span>  <span class="number">0.325733</span></span><br><span class="line"><span class="number">178</span>        <span class="number">9.60</span>  <span class="number">4.00</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.416667</span></span><br><span class="line"><span class="number">172</span>        <span class="number">7.25</span>  <span class="number">5.15</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.710345</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(df, n=<span class="number">5</span>, column=<span class="string">'tip_pct'</span>)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 在指定列找出最大值，然后把这个值所在的行选取出来</span></span><br><span class="line">    ...:     <span class="keyword">return</span> df.sort_values(by=column)[-n:]</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: top(tips, n=<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">     total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="number">67</span>         <span class="number">3.07</span>  <span class="number">1.00</span>    Yes  Sat  Dinner     <span class="number">1</span>  <span class="number">0.325733</span></span><br><span class="line"><span class="number">178</span>        <span class="number">9.60</span>  <span class="number">4.00</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.416667</span></span><br><span class="line"><span class="number">172</span>        <span class="number">7.25</span>  <span class="number">5.15</span>    Yes  Sun  Dinner     <span class="number">2</span>  <span class="number">0.710345</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: tips.groupby(<span class="string">'smoker'</span>).apply(top) <span class="comment">#top函数在DataFrame的各个片段上调用，然后结果由pandas.concat组装到一起，并以分</span></span><br><span class="line">    ...: 组名称进行了标记，最后得到了一个层次化索引，内层索引值来源于原DataFrame</span><br><span class="line">Out[<span class="number">65</span>]:</span><br><span class="line">            total_bill   tip smoker   day    time  size   tip_pct</span><br><span class="line">smoker</span><br><span class="line">No     <span class="number">88</span>        <span class="number">24.71</span>  <span class="number">5.85</span>     No  Thur   Lunch     <span class="number">2</span>  <span class="number">0.236746</span></span><br><span class="line">       <span class="number">185</span>       <span class="number">20.69</span>  <span class="number">5.00</span>     No   Sun  Dinner     <span class="number">5</span>  <span class="number">0.241663</span></span><br><span class="line">       <span class="number">51</span>        <span class="number">10.29</span>  <span class="number">2.60</span>     No   Sun  Dinner     <span class="number">2</span>  <span class="number">0.252672</span></span><br><span class="line">       <span class="number">149</span>        <span class="number">7.51</span>  <span class="number">2.00</span>     No  Thur   Lunch     <span class="number">2</span>  <span class="number">0.266312</span></span><br><span class="line">       <span class="number">232</span>       <span class="number">11.61</span>  <span class="number">3.39</span>     No   Sat  Dinner     <span class="number">2</span>  <span class="number">0.291990</span></span><br><span class="line">Yes    <span class="number">109</span>       <span class="number">14.31</span>  <span class="number">4.00</span>    Yes   Sat  Dinner     <span class="number">2</span>  <span class="number">0.279525</span></span><br><span class="line">       <span class="number">183</span>       <span class="number">23.17</span>  <span class="number">6.50</span>    Yes   Sun  Dinner     <span class="number">4</span>  <span class="number">0.280535</span></span><br><span class="line">       <span class="number">67</span>         <span class="number">3.07</span>  <span class="number">1.00</span>    Yes   Sat  Dinner     <span class="number">1</span>  <span class="number">0.325733</span></span><br><span class="line">       <span class="number">178</span>        <span class="number">9.60</span>  <span class="number">4.00</span>    Yes   Sun  Dinner     <span class="number">2</span>  <span class="number">0.416667</span></span><br><span class="line">       <span class="number">172</span>        <span class="number">7.25</span>  <span class="number">5.15</span>    Yes   Sun  Dinner     <span class="number">2</span>  <span class="number">0.710345</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: <span class="comment"># 传给apply的函数能接受其他参数或关键字，则可以将这些内容放在函数名后面</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: tips.groupby([<span class="string">'smoker'</span>,<span class="string">'day'</span>]).apply(top,n=<span class="number">2</span>,column=<span class="string">'total_bill'</span>)</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">                 total_bill    tip smoker   day    time  size   tip_pct</span><br><span class="line">smoker day</span><br><span class="line">No     Fri  <span class="number">91</span>        <span class="number">22.49</span>   <span class="number">3.50</span>     No   Fri  Dinner     <span class="number">2</span>  <span class="number">0.155625</span></span><br><span class="line">            <span class="number">94</span>        <span class="number">22.75</span>   <span class="number">3.25</span>     No   Fri  Dinner     <span class="number">2</span>  <span class="number">0.142857</span></span><br><span class="line">       Sat  <span class="number">59</span>        <span class="number">48.27</span>   <span class="number">6.73</span>     No   Sat  Dinner     <span class="number">4</span>  <span class="number">0.139424</span></span><br><span class="line">            <span class="number">212</span>       <span class="number">48.33</span>   <span class="number">9.00</span>     No   Sat  Dinner     <span class="number">4</span>  <span class="number">0.186220</span></span><br><span class="line">       Sun  <span class="number">112</span>       <span class="number">38.07</span>   <span class="number">4.00</span>     No   Sun  Dinner     <span class="number">3</span>  <span class="number">0.105070</span></span><br><span class="line">            <span class="number">156</span>       <span class="number">48.17</span>   <span class="number">5.00</span>     No   Sun  Dinner     <span class="number">6</span>  <span class="number">0.103799</span></span><br><span class="line">       Thur <span class="number">85</span>        <span class="number">34.83</span>   <span class="number">5.17</span>     No  Thur   Lunch     <span class="number">4</span>  <span class="number">0.148435</span></span><br><span class="line">            <span class="number">142</span>       <span class="number">41.19</span>   <span class="number">5.00</span>     No  Thur   Lunch     <span class="number">5</span>  <span class="number">0.121389</span></span><br><span class="line">Yes    Fri  <span class="number">90</span>        <span class="number">28.97</span>   <span class="number">3.00</span>    Yes   Fri  Dinner     <span class="number">2</span>  <span class="number">0.103555</span></span><br><span class="line">            <span class="number">95</span>        <span class="number">40.17</span>   <span class="number">4.73</span>    Yes   Fri  Dinner     <span class="number">4</span>  <span class="number">0.117750</span></span><br><span class="line">       Sat  <span class="number">102</span>       <span class="number">44.30</span>   <span class="number">2.50</span>    Yes   Sat  Dinner     <span class="number">3</span>  <span class="number">0.056433</span></span><br><span class="line">            <span class="number">170</span>       <span class="number">50.81</span>  <span class="number">10.00</span>    Yes   Sat  Dinner     <span class="number">3</span>  <span class="number">0.196812</span></span><br><span class="line">       Sun  <span class="number">184</span>       <span class="number">40.55</span>   <span class="number">3.00</span>    Yes   Sun  Dinner     <span class="number">2</span>  <span class="number">0.073983</span></span><br><span class="line">            <span class="number">182</span>       <span class="number">45.35</span>   <span class="number">3.50</span>    Yes   Sun  Dinner     <span class="number">3</span>  <span class="number">0.077178</span></span><br><span class="line">       Thur <span class="number">83</span>        <span class="number">32.68</span>   <span class="number">5.00</span>    Yes  Thur   Lunch     <span class="number">2</span>  <span class="number">0.152999</span></span><br><span class="line">            <span class="number">197</span>       <span class="number">43.11</span>   <span class="number">5.00</span>    Yes  Thur   Lunch     <span class="number">4</span>  <span class="number">0.115982</span></span><br></pre></td></tr></table></figure></p><h4 id="禁止分组键"><a href="#禁止分组键" class="headerlink" title="禁止分组键"></a>禁止分组键</h4><p>分组键会跟原始对象的索引共同构成结果对象中的层次化索引,向groupvy传入<code>group_keys=False</code>禁用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">68</span>]: tips.groupby(<span class="string">'smoker'</span>,group_keys=<span class="keyword">False</span>).apply(top,n=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">     total_bill   tip smoker   day    time  size   tip_pct</span><br><span class="line"><span class="number">149</span>        <span class="number">7.51</span>  <span class="number">2.00</span>     No  Thur   Lunch     <span class="number">2</span>  <span class="number">0.266312</span></span><br><span class="line"><span class="number">232</span>       <span class="number">11.61</span>  <span class="number">3.39</span>     No   Sat  Dinner     <span class="number">2</span>  <span class="number">0.291990</span></span><br><span class="line"><span class="number">178</span>        <span class="number">9.60</span>  <span class="number">4.00</span>    Yes   Sun  Dinner     <span class="number">2</span>  <span class="number">0.416667</span></span><br><span class="line"><span class="number">172</span>        <span class="number">7.25</span>  <span class="number">5.15</span>    Yes   Sun  Dinner     <span class="number">2</span>  <span class="number">0.710345</span></span><br></pre></td></tr></table></figure></p><h3 id="分位数和桶分析"><a href="#分位数和桶分析" class="headerlink" title="分位数和桶分析"></a>分位数和桶分析</h3><p>pandas有一些根据指定面元或样本分位数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>将数据拆分成多块的工具(比如<code>cut</code>和<code>qcut</code>)，将这些函数跟groupby结合起来，能实现对数据集的桶(bucket)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>或分位数(quantile)分析。</p><ul><li>长度相等的桶</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">73</span>]: <span class="comment"># 生成随机数据集</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: frame = DataFrame(&#123;<span class="string">'data1'</span>:np.random.randn(<span class="number">1000</span>),</span><br><span class="line">    ...:                    <span class="string">'data2'</span>:np.random.randn(<span class="number">1000</span>)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: factor = pd.cut(frame.data1, <span class="number">4</span>) <span class="comment">#使用cut将其装入长度相等的桶</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: factor[:<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line"><span class="number">0</span>     (<span class="number">-0.019</span>, <span class="number">1.563</span>]</span><br><span class="line"><span class="number">1</span>    (<span class="number">-1.601</span>, <span class="number">-0.019</span>]</span><br><span class="line"><span class="number">2</span>      (<span class="number">1.563</span>, <span class="number">3.146</span>]</span><br><span class="line"><span class="number">3</span>     (<span class="number">-0.019</span>, <span class="number">1.563</span>]</span><br><span class="line"><span class="number">4</span>    (<span class="number">-1.601</span>, <span class="number">-0.019</span>]</span><br><span class="line">Name: data1, dtype: category</span><br><span class="line">Categories (<span class="number">4</span>, interval[float64]): [(<span class="number">-3.19</span>, <span class="number">-1.601</span>] &lt; (<span class="number">-1.601</span>, <span class="number">-0.019</span>] &lt; (<span class="number">-0.019</span>, <span class="number">1.563</span>] &lt;</span><br><span class="line">                                    (<span class="number">1.563</span>, <span class="number">3.146</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: <span class="comment"># 由cut返回的Factor对象可直接用于groupby</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_stats</span><span class="params">(group)</span>:</span></span><br><span class="line">    ...:     <span class="comment"># 返回对应调用的方法和列名</span></span><br><span class="line">    ...:     <span class="keyword">return</span> &#123;<span class="string">'min'</span>:group.min(),<span class="string">'max'</span>:group.max(),</span><br><span class="line">    ...:             <span class="string">'count'</span>:group.count(),<span class="string">'mean'</span>:group.mean()&#125;</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: grouped = frame.data2.groupby(factor)</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: grouped.apply(get_stats).unstack()</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">                  count       max      mean       min</span><br><span class="line">data1</span><br><span class="line">(<span class="number">-3.19</span>, <span class="number">-1.601</span>]    <span class="number">48.0</span>  <span class="number">2.748015</span>  <span class="number">0.087192</span> <span class="number">-1.809659</span></span><br><span class="line">(<span class="number">-1.601</span>, <span class="number">-0.019</span>]  <span class="number">452.0</span>  <span class="number">3.046213</span> <span class="number">-0.007537</span> <span class="number">-3.326031</span></span><br><span class="line">(<span class="number">-0.019</span>, <span class="number">1.563</span>]   <span class="number">444.0</span>  <span class="number">2.372145</span> <span class="number">-0.012882</span> <span class="number">-3.489221</span></span><br><span class="line">(<span class="number">1.563</span>, <span class="number">3.146</span>]     <span class="number">56.0</span>  <span class="number">3.598193</span>  <span class="number">0.165933</span> <span class="number">-2.688040</span></span><br></pre></td></tr></table></figure><ul><li>大小相等的桶<blockquote><p>使用qcut根据样本分位数得到大小相等的桶，传入labels=False即可只获取分位数的编号</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: <span class="comment"># 返回分位数编号</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: grouping = pd.qcut(frame.data1, <span class="number">10</span>, labels=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: gropuped = frame.data2.groupby(grouping)</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: grouped.apply(get_stats).unstack()</span><br><span class="line">Out[<span class="number">90</span>]:</span><br><span class="line">                  count       max      mean       min</span><br><span class="line">data1</span><br><span class="line">(<span class="number">-3.19</span>, <span class="number">-1.601</span>]    <span class="number">48.0</span>  <span class="number">2.748015</span>  <span class="number">0.087192</span> <span class="number">-1.809659</span></span><br><span class="line">(<span class="number">-1.601</span>, <span class="number">-0.019</span>]  <span class="number">452.0</span>  <span class="number">3.046213</span> <span class="number">-0.007537</span> <span class="number">-3.326031</span></span><br><span class="line">(<span class="number">-0.019</span>, <span class="number">1.563</span>]   <span class="number">444.0</span>  <span class="number">2.372145</span> <span class="number">-0.012882</span> <span class="number">-3.489221</span></span><br><span class="line">(<span class="number">1.563</span>, <span class="number">3.146</span>]     <span class="number">56.0</span>  <span class="number">3.598193</span>  <span class="number">0.165933</span> <span class="number">-2.688040</span></span><br></pre></td></tr></table></figure><h2 id="透视表和交叉表"><a href="#透视表和交叉表" class="headerlink" title="透视表和交叉表"></a>透视表和交叉表</h2><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><p><strong>透视表</strong>根据一个或多个键对数据进行聚合，并根据行和列上的分组键将数据分配到各个矩形区域中。可以通过groupby功能以及(能够使用层次化索引的)重塑运算制作透视表。DataFrame有一个<code>pivot_table</code>方法(默认聚合类型为分组平均数)，还有一个顶层的<code>pandas.pivot_table</code>函数。除了能为groupby提供便利外，<code>pivot_table</code>还能添加分项小计(也叫做margins)，只需要传入<code>margins=True</code>，这会添加标签为All的行和列，其值对应于单个等级中所有数据的分组统计；要使用其他函数通过<code>aggfunc</code>传入；通过使用<code>fill_value</code>填充NA值。</p><ul><li>pivot_table的参数</li></ul><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">values</td><td style="text-align:center">待聚合的列的名称。默认集合所有数值列</td></tr><tr><td style="text-align:center">index</td><td style="text-align:center">用于分组的列名或其他分组键，出现在结果透视表的行</td></tr><tr><td style="text-align:center">columns</td><td style="text-align:center">用于分组的列名或其他分组键，出现在结果透视表的列</td></tr><tr><td style="text-align:center">aggfunc</td><td style="text-align:center">聚合函数或函数列表，默认为’mean’。可以是任何对groupby有效的函数</td></tr><tr><td style="text-align:center">fill_value</td><td style="text-align:center">用于替换结果列表中的缺失值</td></tr><tr><td style="text-align:center">margins</td><td style="text-align:center">添加行/列小计和总计，默认为False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">97</span>]: <span class="comment">#根据smoker和time计算分组平均数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: tips.pivot_table(index=[<span class="string">'smoker'</span>,<span class="string">'time'</span>])</span><br><span class="line">Out[<span class="number">98</span>]:</span><br><span class="line">                   size       tip   tip_pct  total_bill</span><br><span class="line">smoker time</span><br><span class="line">No     Dinner  <span class="number">2.735849</span>  <span class="number">3.126887</span>  <span class="number">0.158653</span>   <span class="number">20.095660</span></span><br><span class="line">       Lunch   <span class="number">2.511111</span>  <span class="number">2.673778</span>  <span class="number">0.160920</span>   <span class="number">17.050889</span></span><br><span class="line">Yes    Dinner  <span class="number">2.471429</span>  <span class="number">3.066000</span>  <span class="number">0.160828</span>   <span class="number">21.859429</span></span><br><span class="line">       Lunch   <span class="number">2.217391</span>  <span class="number">2.834348</span>  <span class="number">0.170404</span>   <span class="number">17.399130</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: <span class="comment"># 聚合tip_pct和size,根据day进行分组，将smoker放在列上，day放在行上</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: tips.pivot_table([<span class="string">'tip_pct'</span>,<span class="string">'size'</span>],index=[<span class="string">'time'</span>,<span class="string">'day'</span>],columns=<span class="string">'smoker'</span>)</span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">                 size             tip_pct</span><br><span class="line">smoker             No       Yes        No       Yes</span><br><span class="line">time   day</span><br><span class="line">Dinner Fri   <span class="number">2.000000</span>  <span class="number">2.222222</span>  <span class="number">0.139622</span>  <span class="number">0.165347</span></span><br><span class="line">       Sat   <span class="number">2.555556</span>  <span class="number">2.476190</span>  <span class="number">0.158048</span>  <span class="number">0.147906</span></span><br><span class="line">       Sun   <span class="number">2.929825</span>  <span class="number">2.578947</span>  <span class="number">0.160113</span>  <span class="number">0.187250</span></span><br><span class="line">       Thur  <span class="number">2.000000</span>       NaN  <span class="number">0.159744</span>       NaN</span><br><span class="line">Lunch  Fri   <span class="number">3.000000</span>  <span class="number">1.833333</span>  <span class="number">0.187735</span>  <span class="number">0.188937</span></span><br><span class="line">       Thur  <span class="number">2.500000</span>  <span class="number">2.352941</span>  <span class="number">0.160311</span>  <span class="number">0.163863</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: <span class="comment">#添加分项小计，All值为平均数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: tips.pivot_table([<span class="string">'tip_pct'</span>,<span class="string">'size'</span>],index=[<span class="string">'time'</span>,<span class="string">'day'</span>],columns=<span class="string">'smoker'</span>,margins=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">                 size                       tip_pct</span><br><span class="line">smoker             No       Yes       All        No       Yes       All</span><br><span class="line">time   day</span><br><span class="line">Dinner Fri   <span class="number">2.000000</span>  <span class="number">2.222222</span>  <span class="number">2.166667</span>  <span class="number">0.139622</span>  <span class="number">0.165347</span>  <span class="number">0.158916</span></span><br><span class="line">       Sat   <span class="number">2.555556</span>  <span class="number">2.476190</span>  <span class="number">2.517241</span>  <span class="number">0.158048</span>  <span class="number">0.147906</span>  <span class="number">0.153152</span></span><br><span class="line">       Sun   <span class="number">2.929825</span>  <span class="number">2.578947</span>  <span class="number">2.842105</span>  <span class="number">0.160113</span>  <span class="number">0.187250</span>  <span class="number">0.166897</span></span><br><span class="line">       Thur  <span class="number">2.000000</span>       NaN  <span class="number">2.000000</span>  <span class="number">0.159744</span>       NaN  <span class="number">0.159744</span></span><br><span class="line">Lunch  Fri   <span class="number">3.000000</span>  <span class="number">1.833333</span>  <span class="number">2.000000</span>  <span class="number">0.187735</span>  <span class="number">0.188937</span>  <span class="number">0.188765</span></span><br><span class="line">       Thur  <span class="number">2.500000</span>  <span class="number">2.352941</span>  <span class="number">2.459016</span>  <span class="number">0.160311</span>  <span class="number">0.163863</span>  <span class="number">0.161301</span></span><br><span class="line">All          <span class="number">2.668874</span>  <span class="number">2.408602</span>  <span class="number">2.569672</span>  <span class="number">0.159328</span>  <span class="number">0.163196</span>  <span class="number">0.160803</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: <span class="comment">#添加分项小计，All值为平均数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: tips.pivot_table([<span class="string">'tip_pct'</span>,<span class="string">'size'</span>],index=[<span class="string">'time'</span>,<span class="string">'day'</span>],columns=<span class="string">'smoker'</span>,margins=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">                 size                       tip_pct</span><br><span class="line">smoker             No       Yes       All        No       Yes       All</span><br><span class="line">time   day</span><br><span class="line">Dinner Fri   <span class="number">2.000000</span>  <span class="number">2.222222</span>  <span class="number">2.166667</span>  <span class="number">0.139622</span>  <span class="number">0.165347</span>  <span class="number">0.158916</span></span><br><span class="line">       Sat   <span class="number">2.555556</span>  <span class="number">2.476190</span>  <span class="number">2.517241</span>  <span class="number">0.158048</span>  <span class="number">0.147906</span>  <span class="number">0.153152</span></span><br><span class="line">       Sun   <span class="number">2.929825</span>  <span class="number">2.578947</span>  <span class="number">2.842105</span>  <span class="number">0.160113</span>  <span class="number">0.187250</span>  <span class="number">0.166897</span></span><br><span class="line">       Thur  <span class="number">2.000000</span>       NaN  <span class="number">2.000000</span>  <span class="number">0.159744</span>       NaN  <span class="number">0.159744</span></span><br><span class="line">Lunch  Fri   <span class="number">3.000000</span>  <span class="number">1.833333</span>  <span class="number">2.000000</span>  <span class="number">0.187735</span>  <span class="number">0.188937</span>  <span class="number">0.188765</span></span><br><span class="line">       Thur  <span class="number">2.500000</span>  <span class="number">2.352941</span>  <span class="number">2.459016</span>  <span class="number">0.160311</span>  <span class="number">0.163863</span>  <span class="number">0.161301</span></span><br><span class="line">All          <span class="number">2.668874</span>  <span class="number">2.408602</span>  <span class="number">2.569672</span>  <span class="number">0.159328</span>  <span class="number">0.163196</span>  <span class="number">0.160803</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: <span class="comment">#添加分项小计，All值为平均数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: tips.pivot_table([<span class="string">'tip_pct'</span>,<span class="string">'size'</span>],index=[<span class="string">'time'</span>,<span class="string">'day'</span>],columns=<span class="string">'smoker'</span>,margins=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">                 size                       tip_pct</span><br><span class="line">smoker             No       Yes       All        No       Yes       All</span><br><span class="line">time   day</span><br><span class="line">Dinner Fri   <span class="number">2.000000</span>  <span class="number">2.222222</span>  <span class="number">2.166667</span>  <span class="number">0.139622</span>  <span class="number">0.165347</span>  <span class="number">0.158916</span></span><br><span class="line">       Sat   <span class="number">2.555556</span>  <span class="number">2.476190</span>  <span class="number">2.517241</span>  <span class="number">0.158048</span>  <span class="number">0.147906</span>  <span class="number">0.153152</span></span><br><span class="line">       Sun   <span class="number">2.929825</span>  <span class="number">2.578947</span>  <span class="number">2.842105</span>  <span class="number">0.160113</span>  <span class="number">0.187250</span>  <span class="number">0.166897</span></span><br><span class="line">       Thur  <span class="number">2.000000</span>       NaN  <span class="number">2.000000</span>  <span class="number">0.159744</span>       NaN  <span class="number">0.159744</span></span><br><span class="line">Lunch  Fri   <span class="number">3.000000</span>  <span class="number">1.833333</span>  <span class="number">2.000000</span>  <span class="number">0.187735</span>  <span class="number">0.188937</span>  <span class="number">0.188765</span></span><br><span class="line">       Thur  <span class="number">2.500000</span>  <span class="number">2.352941</span>  <span class="number">2.459016</span>  <span class="number">0.160311</span>  <span class="number">0.163863</span>  <span class="number">0.161301</span></span><br><span class="line">All          <span class="number">2.668874</span>  <span class="number">2.408602</span>  <span class="number">2.569672</span>  <span class="number">0.159328</span>  <span class="number">0.163196</span>  <span class="number">0.160803</span></span><br></pre></td></tr></table></figure><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><p><strong>交叉表</strong>(<em>cross-tabulation</em>简称<em>crosstab</em>)是一种用于计算分组频率的特殊透视表。<code>crosstab</code>前两个参数可以是数组、Series或数组列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">108</span>]: pd.crosstab([tips.time,tips.day],tips.smoker,margins=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">108</span>]:</span><br><span class="line">smoker        No  Yes  All</span><br><span class="line">time   day</span><br><span class="line">Dinner Fri     <span class="number">3</span>    <span class="number">9</span>   <span class="number">12</span></span><br><span class="line">       Sat    <span class="number">45</span>   <span class="number">42</span>   <span class="number">87</span></span><br><span class="line">       Sun    <span class="number">57</span>   <span class="number">19</span>   <span class="number">76</span></span><br><span class="line">       Thur    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">Lunch  Fri     <span class="number">1</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">       Thur   <span class="number">44</span>   <span class="number">17</span>   <span class="number">61</span></span><br><span class="line">All          <span class="number">151</span>   <span class="number">93</span>  <span class="number">244</span></span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">样本分位数的计算方式为loc= 1+(n-1)<em>p;n是数据个数，p是分位点。loc介于1到n之间。把数据从小到大排列，找到loc两边的值L和R，值为(R-L)</em> (loc-floor(loc))+L，其中floor是向下取整</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">长度相等指的是区间大小相等，大小相等指的是数据点数量相等</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      对数据进行分组并对各组应用一个函数是数据分析工作的重要环节
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="聚合和分组" scheme="http://coldjune.com/tags/%E8%81%9A%E5%90%88%E5%92%8C%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>绘图和可视化</title>
    <link href="http://coldjune.com/2018/03/23/%E7%BB%98%E5%9B%BE%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://coldjune.com/2018/03/23/绘图和可视化/</id>
    <published>2018-03-23T02:57:04.000Z</published>
    <updated>2018-03-26T01:29:55.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="matplotlib-API入门"><a href="#matplotlib-API入门" class="headerlink" title="matplotlib API入门"></a>matplotlib API入门</h2><p>使用<a href="https://matplotlib.org/index.html" target="_blank" rel="noopener">matplotlib</a>时以<code>--pylab</code>模式打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython --pylab</span><br></pre></td></tr></table></figure></p><p>matplotlib API的函数都位于matplotlib.pyplot模块之下，通常通过以下语句引用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure></p><h3 id="Figure和Subplot"><a href="#Figure和Subplot" class="headerlink" title="Figure和Subplot"></a>Figure和Subplot</h3><p>matplotlib的图像都位于Figure对象中，使用<code>plt.figure</code>创建一个新的Figure；<code>plt.figure</code>的<code>figsize</code>选项用于确保当图片保存到磁盘时具有一定的大小和纵横比；通过<code>plt.gcf()</code>等到当前Figure的引用；不能再空Figure上绘图，必须通过<code>add_subplot</code>创建一个或多个subplot，返回的对象是AxesSubplot对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)  <span class="comment">#在figure实例上调用add_subplot创建一个2x2的图像，且当前选中的事第一个(编号从1</span></span><br><span class="line">   ...: 开始)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: ax3 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><ul><li><p>带有三个subplot的Figure<br><img src="/2018/03/23/绘图和可视化/Figure_1.png" alt="带有三个subplot的Figure"><br>如果这时发出一条绘图命令，matplotlib会在最后一个用过的subplot(没有则创建一个)上进行绘制,<code>k--</code>是一个线型选项，告诉matplotlib绘制黑色虚线图:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: plt.plot(randn(<span class="number">50</span>).cumsum(),<span class="string">'k--'</span>)</span><br><span class="line">Out[<span class="number">16</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x26fc86694a8</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: plt.savefig(<span class="string">'Figure_2.png'</span>)</span><br></pre></td></tr></table></figure></li><li><p>绘制一次后的图像<br><img src="/2018/03/23/绘图和可视化/Figure_2.png" alt="绘制一次后的图像"><br>对于<code>add_subplot</code>返回AxesSubplot直接调用它们的实例方法就可以在对应的实例上画图了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: _ = ax1.hist(randn(<span class="number">100</span>),bins=<span class="number">20</span>,color=<span class="string">'k'</span>,alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: ax2.scatter(np.arange(<span class="number">30</span>),np.arange(<span class="number">30</span>)+<span class="number">3</span>*randn(<span class="number">30</span>))</span><br><span class="line">Out[<span class="number">15</span>]: &lt;matplotlib.collections.PathCollection at <span class="number">0x2213001c2e8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: plt.savefig(<span class="string">'Figure_3.png'</span>)</span><br></pre></td></tr></table></figure></li><li><p>继续绘制两次之后的图像<br><img src="/2018/03/23/绘图和可视化/Figure_3.png" alt="继续绘制两次之后的图像"></p></li></ul><p><code>plt.subplots</code>创建一个新的Figure，返回一个含有已创建的subplot对象的NumPy数组，可以通过索引获取对应的AxesSubplot对象进行绘图:</p><ul><li>pyplot.subplots的选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">nrows</td><td style="text-align:center">subplot的行数</td></tr><tr><td style="text-align:center">ncols</td><td style="text-align:center">subplot的列数</td></tr><tr><td style="text-align:center">sharex</td><td style="text-align:center">所有subplot应该使用相同的X轴刻度(调节xlim将会影响所有subplot)</td></tr><tr><td style="text-align:center">sharey</td><td style="text-align:center">所有subplot应该使用相同的Y轴刻度(调节ylim将会影响所有subplot)</td></tr><tr><td style="text-align:center">subplot_kw</td><td style="text-align:center">用于创建个subplot的关键字字典</td></tr><tr><td style="text-align:center">**fig_kw</td><td style="text-align:center">创建figure的其他关键字如plt.subplots(2,2,figsize=(8,6))</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: axes</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x000002213099BDD8</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x000002213088D940</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x0000022136CD45F8</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x0000022136CE7358</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x0000022136B9E320</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x0000022136BBB198</span>&gt;]], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: fig</span><br><span class="line">Out[<span class="number">19</span>]: &lt;matplotlib.figure.Figure at <span class="number">0x22130a437b8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: axes[<span class="number">0</span>,<span class="number">1</span>].scatter(np.arange(<span class="number">30</span>),np.arange(<span class="number">30</span>)+<span class="number">3</span>*randn(<span class="number">30</span>))</span><br><span class="line">Out[<span class="number">20</span>]: &lt;matplotlib.collections.PathCollection at <span class="number">0x22136ead278</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: fig.savefig(<span class="string">'Figure_4.png'</span>)</span><br></pre></td></tr></table></figure><ul><li>通过<code>plt.subplots</code>创建的Figure和AxesSubplot数组<br><img src="/2018/03/23/绘图和可视化/Figure_4.png" alt="通过`plt.subplots`创建的Figure和AxesSubplot数组"></li></ul><h4 id="调整subplot周围的间距"><a href="#调整subplot周围的间距" class="headerlink" title="调整subplot周围的间距"></a>调整subplot周围的间距</h4><p>matplotlib会在subplot外围留下一定的边距，并在subplot之间留下一定的间距。间距和图像的高宽有关，只要图像大小调整则间距也会自动调整利用的Figure的<code>subplots_adjust</code>方法可以修改间距，同时它也是个顶级函数；<code>wspace</code>和<code>hspace</code>用于控制宽度和高度的百分比，可以用作subplot之间的间距。matplotlib不会检查标签是否重叠，所以只能自己设定刻度的位置和刻度标签:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: plt.subplots_adjust(wspace=<span class="number">0</span>,hspace=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: fig.savefig(<span class="string">'Figure_5.png'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>调整间距之后的图像<br><img src="/2018/03/23/绘图和可视化/Figure_5.png" alt="调整间距之后的图像"></li></ul><h4 id="颜色、标记和线型"><a href="#颜色、标记和线型" class="headerlink" title="颜色、标记和线型"></a>颜色、标记和线型</h4><p>matplotlib的plot函数接受一组X和Y的坐标，还可以接受一个表示<code>color</code>颜色和<code>linestyle</code><a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html?highlight=drawstyle#matplotlib.lines.Line2D.lineStyles" target="_blank" rel="noopener">线型</a>的字符串缩写；常用的颜色都有一个缩写词(<code>color=&#39;g&#39;</code>)，如果需要使用其他颜色可以指定其RGB值(‘#CECECE’)；线形图可以加上一些<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html?highlight=drawstyle#matplotlib.lines.Line2D.markers" target="_blank" rel="noopener">标记</a><code>marker</code>来强调实际的数据点；标记和颜色都可以放在格式字符串中，但标记类型和线型必须放在颜色后面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: axe1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: plt.plot(data,<span class="string">'ko--'</span>)</span><br><span class="line">Out[<span class="number">31</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x22137639198</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: plt.plot(data,color=<span class="string">'k'</span>,linestyle=<span class="string">'dashed'</span>,marker=<span class="string">'o'</span>)</span><br><span class="line">Out[<span class="number">32</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x2213a7bd588</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: plt.savefig(<span class="string">'Figure_6.png'</span>)</span><br></pre></td></tr></table></figure></p><ul><li><p>带有标记的线型图实例<br><img src="/2018/03/23/绘图和可视化/Figure_6.png" alt="带有标记的线形图实例"><br>非实际数据点默认是按线性方式插值的，可以通过<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html?highlight=drawstyle#matplotlib.lines.Line2D.drawStyles" target="_blank" rel="noopener">drawstyle选项</a>修改:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: plt.plot(data,<span class="string">'k--'</span>,label=<span class="string">'Default'</span>)</span><br><span class="line">Out[<span class="number">34</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x22134d35198</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: plt.plot(data,<span class="string">'k--'</span>,label=<span class="string">'step-post'</span>,drawstyle=<span class="string">'steps-post'</span>)</span><br><span class="line">Out[<span class="number">35</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x22134d35b70</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">Out[<span class="number">37</span>]: &lt;matplotlib.legend.Legend at <span class="number">0x22134b3a240</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用不同的drawstyle选项的线型图实例<br><img src="/2018/03/23/绘图和可视化/Figure_7.png" alt="修改之后的线型图实例"></p></li></ul><h4 id="刻度、标签和图例"><a href="#刻度、标签和图例" class="headerlink" title="刻度、标签和图例"></a>刻度、标签和图例</h4><p>对于大多数图标的装饰项，有两种实现方式，一是使用过程型的pyplot接口，而是使用面向对象的原生matplotlib API。pyplot接口是为了交互式使用，它含有<code>xlim</code>、<code>xticks</code>和<code>xticklabels</code>等方法。分别控制图标的范围、刻度位置、刻度标签等。使用方式有两种：</p><ol><li>调用时不带参数，则返回当前的配置值。(<code>plt.xlim()</code>返回当前的X轴绘图范围)</li><li>调用时带参数，则是则会参数值。(<code>plt.xlim([0,10])</code>将X轴的范围设置为0到10)<br>所有方法都是对当前或最近创建的AxesSubplot起作用的，它们各自对应subplot对象的两个方法，以<code>xlim</code>为例对应<code>ax.get_xlim</code>和<code>ax.set_xlim</code></li></ol><h5 id="设置标题、轴标签、刻度以及刻度标签"><a href="#设置标题、轴标签、刻度以及刻度标签" class="headerlink" title="设置标题、轴标签、刻度以及刻度标签"></a>设置标题、轴标签、刻度以及刻度标签</h5><p>要修改X轴的刻度，使用<code>set_xticks</code>和<code>set_xticklabels</code>方法。<code>set_xticks</code>告诉matplotlib要将刻度放在数据范围中的哪些位置，默认情况下这些位置也就是刻度标签。<code>set_xticklabels</code>将任何其他值用作标签；<code>set_xlabel</code>为X轴设置一个名称;<code>set_title</code>设置一个标题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: ax.plot(randn(<span class="number">1000</span>).cumsum())</span><br><span class="line">Out[<span class="number">41</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x2213dfb8e48</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: fig.savefig(<span class="string">'Figure_8.png'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: ticks = ax.set_xticks([<span class="number">0</span>,<span class="number">250</span>,<span class="number">500</span>,<span class="number">700</span>,<span class="number">1000</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: fig.savefig(<span class="string">'Figure_9.png'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: labels = ax.set_xticklabels([<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>,<span class="string">'five'</span>], rotation=<span class="number">30</span>, fontsize=<span class="string">'small'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: ax.set_title(<span class="string">'FIRST'</span>)</span><br><span class="line">Out[<span class="number">46</span>]: &lt;matplotlib.text.Text at <span class="number">0x2213f03bb70</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: ax.set_xlabel(<span class="string">'STAGES'</span>)</span><br><span class="line">Out[<span class="number">47</span>]: &lt;matplotlib.text.Text at <span class="number">0x2213ddaf320</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: fig.savefig(<span class="string">'Figure_10.png'</span>)</span><br></pre></td></tr></table></figure></p><ul><li><p>用于显示xticks的线型图<br><img src="/2018/03/23/绘图和可视化/Figure_8.png" alt=""><img src="/2018/03/23/绘图和可视化/Figure_9.png" alt=""><img src="/2018/03/23/绘图和可视化/Figure_10.png" alt=""></p><h5 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h5><p>图例(legend)是一种标识图标元素的重要工具，通过在天剑subplot的时候传入<code>label</code>参数，然后调用<code>ax.legend(loc=&#39;best&#39;)</code>；其中<code>legend</code>的<code>loc</code>参数告诉matplotlib要将图例放在哪儿。要从图例中去除一个或多个元素，不传入label或传入<code>label=&#39;_nolegend_&#39;</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: ax.plot(randn(<span class="number">1000</span>).cumsum(),<span class="string">'k'</span>,label=<span class="string">'one'</span>)</span><br><span class="line">Out[<span class="number">53</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x22136e7f5c0</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: ax.plot(randn(<span class="number">1000</span>).cumsum(),<span class="string">'k--'</span>,label=<span class="string">'two'</span>)</span><br><span class="line">Out[<span class="number">54</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x221404f6be0</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: ax.plot(randn(<span class="number">1000</span>).cumsum(),<span class="string">'k.'</span>,label=<span class="string">'three'</span>)</span><br><span class="line">Out[<span class="number">55</span>]: [&lt;matplotlib.lines.Line2D at <span class="number">0x2213b9aba58</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: ax.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">Out[<span class="number">56</span>]: &lt;matplotlib.legend.Legend at <span class="number">0x2213dffc208</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: fig.savefig(<span class="string">'Figure_11.png'</span>)</span><br></pre></td></tr></table></figure></li><li><p>带有三条线及图例的简单线型图<br><img src="/2018/03/23/绘图和可视化/Figure_11.png" alt="带有三条线及图例的简单线型图"></p></li></ul><h3 id="注解以及在Subplot上绘图"><a href="#注解以及在Subplot上绘图" class="headerlink" title="注解以及在Subplot上绘图"></a>注解以及在Subplot上绘图</h3><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>注解可以通过<code>text</code>、<code>arrow</code>和<code>annotate</code>等函数添加。<code>text</code>可以将文本绘制在图标的指定坐标(x,y)，还可以加上一些自定义格式<code>ax.text(x,y,&#39;Hello world!&#39;, family=&#39;monospace&#39;, fontsize=10)</code>，注解中可以既含有文本也哈有箭头：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: data = pd.read_csv(<span class="string">'D:\Python\ipython\spx.csv'</span>,index_col=<span class="number">0</span>, parse_dates=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: spx = data[<span class="string">'SPX'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: spx.plot(ax=ax, style=<span class="string">'k-'</span>)</span><br><span class="line">Out[<span class="number">71</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x2213f993c50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: crisis_data = [</span><br><span class="line">    ...:         (datetime(<span class="number">2007</span>,<span class="number">10</span>,<span class="number">11</span>),<span class="string">'Peak of bull market'</span>),</span><br><span class="line">    ...:         (datetime(<span class="number">2008</span>,<span class="number">3</span>,<span class="number">12</span>),<span class="string">'Bear Stearbs Fails'</span>),</span><br><span class="line">    ...:         (datetime(<span class="number">2008</span>,<span class="number">9</span>,<span class="number">15</span>),<span class="string">'Lehman Bankruptcy'</span>)</span><br><span class="line">    ...:         ]</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: <span class="keyword">for</span> date, label <span class="keyword">in</span> crisis_data:</span><br><span class="line">    ...:     ax.annotate(label, xy=(date,spx.asof(date)+<span class="number">50</span>),</span><br><span class="line">    ...:                 xytext=(date, spx.asof(date)+<span class="number">200</span>),</span><br><span class="line">    ...:                 arrowprops=dict(facecolor=<span class="string">'black'</span>),</span><br><span class="line">    ...:                 horizontalalignment=<span class="string">'left'</span>, verticalalignment=<span class="string">'top'</span>)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: <span class="comment"># 放大到2007-2010</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: ax.set_xlim([<span class="string">'1/1/2007'</span>,<span class="string">'1/1/2011'</span>])</span><br><span class="line">Out[<span class="number">76</span>]: (<span class="number">732677.0</span>, <span class="number">734138.0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: ax.set_xlim([<span class="string">'1/1/2007'</span>,<span class="string">'1/1/2011'</span>])</span><br><span class="line">Out[<span class="number">76</span>]: (<span class="number">732677.0</span>, <span class="number">734138.0</span>)</span><br></pre></td></tr></table></figure></p><ul><li>2008-2009年金融危机期间的重要日期<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br><img src="/2018/03/23/绘图和可视化/Figure_12.png" alt="2008-2009年金融危机期间的重要日期"></li></ul><h4 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h4><p>matplotlib有一些表示常见图形的对象被称为快(patch)，完整的集合位于matplotlib.patches中，有些可以在matplotlib.pyplot中找到(如Rectangle和Circle)。要在图表中添加一个图形，需要先创建一个块对象shp，然后通过<code>ax.add_patch(shp)</code>将其添加到subplot中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: rect = plt.Rectangle((<span class="number">0.2</span>,<span class="number">0.75</span>),<span class="number">0.4</span>,<span class="number">0.15</span>,color=<span class="string">'k'</span>,alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: circ = plt.Circle((<span class="number">0.7</span>,<span class="number">0.2</span>),<span class="number">0.15</span>,color=<span class="string">'b'</span>,alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: pgon = plt.Polygon([[<span class="number">0.15</span>,<span class="number">0.15</span>],[<span class="number">0.35</span>,<span class="number">0.4</span>],[<span class="number">0.2</span>,<span class="number">0.6</span>]],color=<span class="string">'g'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: ax.add_patch(rect)</span><br><span class="line">Out[<span class="number">86</span>]: &lt;matplotlib.patches.Rectangle at <span class="number">0x22142e4a908</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: ax.add_patch(circ)</span><br><span class="line">Out[<span class="number">87</span>]: &lt;matplotlib.patches.Circle at <span class="number">0x22140caa6d8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: ax.add_patch(pgon)</span><br><span class="line">Out[<span class="number">88</span>]: &lt;matplotlib.patches.Polygon at <span class="number">0x2214117b940</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: fig.savefig(<span class="string">'Figure_13.png'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>由三块图形组成的图<br><img src="/2018/03/23/绘图和可视化/Figure_13.png" alt="由三块图形组成的图"></li></ul><h3 id="将图表保存到文件"><a href="#将图表保存到文件" class="headerlink" title="将图表保存到文件"></a>将图表保存到文件</h3><p>利用<code>plt.savefig</code>可以将当前图表保存到文件，其相当于Figure对象的实例方法<code>savefig</code>。文件类型是通过文件扩展名推断出来的。可以通过<code>dpi</code>参数控制分辨率，通过<code>bbox_inches</code>剪除当前图表周围的空白部分<code>plt.savefig(&#39;filepath.png&#39;, dpi=400,bbox_inches=&#39;tight&#39;)</code>;</p><ul><li>savepig的选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">fname</td><td style="text-align:center">含有文件路径的字符串或Python的文件型对象。图像格式由文件扩展名推断得出</td></tr><tr><td style="text-align:center">dpi</td><td style="text-align:center">图像分辨率(每英寸点数),默认为100</td></tr><tr><td style="text-align:center">facecolor、edgecolor</td><td style="text-align:center">图像的背景色，默认为”w”(白色)</td></tr><tr><td style="text-align:center">format</td><td style="text-align:center">显式设置文件格式(png/pdf/svg/ps….)</td></tr><tr><td style="text-align:center">bbox_inches</td><td style="text-align:center">图表需要保存的部分。如果设置为”tight”则尝试剪除图表周围的空白部分</td></tr></tbody></table><h3 id="matplotlib配置"><a href="#matplotlib配置" class="headerlink" title="matplotlib配置"></a>matplotlib配置</h3><p>matplotlib自带一些配色方案，几乎所有默认行为都能通过一组全局参数进行自定义，它们可以管理图像大小、subplot边距、配色方案、字体大小、网格类型等。操作matplotlib配置系统可以使用<code>rc</code>方法，<code>rc</code>第一个参数是希望自定义的对象，其后可以跟上一系列的关键字参数，可以将这些选项写成一个字典:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">100</span>]: font_options=&#123;<span class="string">'family'</span>:<span class="string">'monospace'</span>,</span><br><span class="line">     ...:               <span class="string">'weight'</span>:<span class="string">'bold'</span>,</span><br><span class="line">     ...:               <span class="string">'size'</span>:<span class="number">10</span>&#125;</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: plt.rc(<span class="string">'font'</span>, **font_options)</span><br></pre></td></tr></table></figure></p><h2 id="pandas中的绘图函数"><a href="#pandas中的绘图函数" class="headerlink" title="pandas中的绘图函数"></a>pandas中的绘图函数</h2><p>matplotlib是一种比较低级的工具，要组装一张图白哦，得使用它的各种基础组建才行：数据展示(即图标类型：线型图、柱状图、盒型图、散布图、等值线图等)、图例、标题、刻度标签以及其他注解型信息。<br>在pandas中因为已经有行标签、列标签以及分组信息，所以能够看利用DataFrame对象数据组织特点来创建标准图表的高级方法</p><ul><li>Series.plot方法的餐素</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">label</td><td style="text-align:center">用于图例的标签</td></tr><tr><td style="text-align:center">ax</td><td style="text-align:center">要在其上进行绘制的matplotlib subplot对象。如果没有设置，则使用当前matplotlib subplot</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">将要传给matplotlib的风格字符串(如’ko–’)</td></tr><tr><td style="text-align:center">alpha</td><td style="text-align:center">图表的填充不透明度(0到1之间)</td></tr><tr><td style="text-align:center">kind</td><td style="text-align:center">可以是’line’、’bar’、’barh’、’kde’</td></tr><tr><td style="text-align:center">logy</td><td style="text-align:center">在Y轴上使用对数标签</td></tr><tr><td style="text-align:center">use_index</td><td style="text-align:center">将对象的索引用作刻度标签</td></tr><tr><td style="text-align:center">rot</td><td style="text-align:center">旋转刻度标签(0到360)</td></tr><tr><td style="text-align:center">xticks</td><td style="text-align:center">用作X轴刻度的值</td></tr><tr><td style="text-align:center">yticks</td><td style="text-align:center">用作Y轴刻度的值</td></tr><tr><td style="text-align:center">xlim</td><td style="text-align:center">X轴的界限(例如[0,10])</td></tr><tr><td style="text-align:center">ylim</td><td style="text-align:center">Y轴的界限</td></tr><tr><td style="text-align:center">grid</td><td style="text-align:center">显示轴网格线(默认打开)</td></tr></tbody></table><ul><li>专用于DataFrame的plot参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">subplots</td><td style="text-align:center">将各个DataFrame列绘制到单独的subplot中</td></tr><tr><td style="text-align:center">sharex</td><td style="text-align:center">如果subplots=True，则共用同一个X轴，包括刻度和界限</td></tr><tr><td style="text-align:center">sharey</td><td style="text-align:center">如果subplots=False，则共用同一个Y轴</td></tr><tr><td style="text-align:center">figsize</td><td style="text-align:center">表示图像大小的元组</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">表示图像标题的字符串</td></tr><tr><td style="text-align:center">legend</td><td style="text-align:center">添加一个subplot图例(默认为True)</td></tr><tr><td style="text-align:center">sort_columns</td><td style="text-align:center">以字母顺序绘制各列，默认使用当前列顺序</td></tr></tbody></table><h3 id="线型图"><a href="#线型图" class="headerlink" title="线型图"></a>线型图</h3><p>Series和DataFrame都有一个生成各类图表的<code>plot</code>方法，默认情况下它们生成的是线型图。Series对象的索引会被传给matplotlib，并用以绘制X轴；通过<code>use_index=False</code>禁用该功能；X轴的刻度和界限可以通过<code>xticks</code>和<code>xlim</code>选项进行调节;Y轴用<code>yticks</code>和<code>ylim</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: s = Series(np.random.randn(<span class="number">10</span>).cumsum(),index=np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s.plot()</span><br><span class="line">Out[<span class="number">11</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x10a781588</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>简单的Series图表<br><img src="/2018/03/23/绘图和可视化/Figure_14.png" alt="简单的Series图表"></li></ul><p>pandas的大部分绘图方法有一个可选的<code>ax</code>参数，它可以是一个matplotlib的subplot对象。这使得在网格布局中更灵活地处理subplot的位置，DataFrame的plot方法会在一个subplot中为各列绘制一条线，并自动创建图例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: df = DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">4</span>).cumsum(<span class="number">0</span>),</span><br><span class="line">    ...:                columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>],</span><br><span class="line">    ...:                index=np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>))</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: df.plot()</span><br><span class="line">Out[<span class="number">17</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x10b8704a8</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>简单的DataFrame图表<br><img src="/2018/03/23/绘图和可视化/Figure_15.png" alt="简单的DataFrame图表"></p><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p>在生成线型图的代码中加上<code>kind=&#39;bar&#39;</code>(垂直柱状图)或<code>kind=&#39;barh&#39;</code>(水平柱状图)即可生成柱状图。Series和DataFrame的索引会被用作X(bar)或Y(barh)刻度:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: fig, axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: data = Series(np.random.rand(<span class="number">16</span>),index=list(<span class="string">'abcdefghijklmnop'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: data.plot(kind=<span class="string">'bar'</span>, ax=axes[<span class="number">0</span>],color=<span class="string">'k'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">Out[<span class="number">28</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x1186e90b8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: data.plot(kind=<span class="string">'barh'</span>, ax=axes[<span class="number">1</span>],color=<span class="string">'k'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">Out[<span class="number">29</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x118bd52e8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: fig.savefig(<span class="string">'Figure_16.png'</span>)</span><br></pre></td></tr></table></figure></li><li><p>Series柱状图<br><img src="/2018/03/23/绘图和可视化/Figure_16.png" alt="Series柱状图"></p></li></ul><p>对于DataFrame，柱状图会将每一行的值分为一组，使用<code>stacked=True</code>会使每行的值堆积在一起:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df = DataFrame(np.random.rand(<span class="number">6</span>,<span class="number">4</span>),</span><br><span class="line">    ...:                index=[<span class="string">'r1'</span>,<span class="string">'r2'</span>,<span class="string">'r3'</span>,<span class="string">'r4'</span>,<span class="string">'r5'</span>,<span class="string">'r6'</span>],</span><br><span class="line">    ...:                columns=pd.Index([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>],name=<span class="string">'Genus'</span>))</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: df</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">Genus         A         B         C         D</span><br><span class="line">r1     <span class="number">0.820633</span>  <span class="number">0.228560</span>  <span class="number">0.550244</span>  <span class="number">0.236735</span></span><br><span class="line">r2     <span class="number">0.968056</span>  <span class="number">0.268256</span>  <span class="number">0.539757</span>  <span class="number">0.453413</span></span><br><span class="line">r3     <span class="number">0.827034</span>  <span class="number">0.905531</span>  <span class="number">0.722537</span>  <span class="number">0.368674</span></span><br><span class="line">r4     <span class="number">0.433393</span>  <span class="number">0.154539</span>  <span class="number">0.223513</span>  <span class="number">0.340216</span></span><br><span class="line">r5     <span class="number">0.037282</span>  <span class="number">0.609635</span>  <span class="number">0.609266</span>  <span class="number">0.172542</span></span><br><span class="line">r6     <span class="number">0.359212</span>  <span class="number">0.399398</span>  <span class="number">0.044828</span>  <span class="number">0.712773</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: fig, axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: df.plot(kind=<span class="string">'bar'</span>,ax=axes[<span class="number">0</span>])</span><br><span class="line">Out[<span class="number">37</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x11eecb198</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: df.plot(kind=<span class="string">'barh'</span>,ax=axes[<span class="number">1</span>],stacked=<span class="keyword">True</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">Out[<span class="number">38</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x11e691048</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: fig.savefig(<span class="string">'Figure_17.png'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>DataFrame柱状图<br><img src="/2018/03/23/绘图和可视化/Figure_17.png" alt="DataFrame柱状图"></li></ul><h3 id="直方图和密度图"><a href="#直方图和密度图" class="headerlink" title="直方图和密度图"></a>直方图和密度图</h3><p>直方图是一种可以对值频率进行离散化显示的柱状图。数据点被拆分到离散的、间隔均匀的面元中，绘制的是各面元中数据点的数量,通过<code>hist</code>方法绘制“小费占消费总额的百分比”(<a href="https://github.com/coldJune/Python/blob/master/ipython/tips.csv" target="_blank" rel="noopener">数据集</a>):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: tips = pd.read_csv(<span class="string">'/Users/dengxiaojun/Documents/pydata-book-2nd-edition/examples/tips.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: tips[<span class="string">'tip_pct'</span>] = tips[<span class="string">'tip'</span>]/tips[<span class="string">'total_bill'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: tips[<span class="string">'tip_pct'</span>].hist(bins=<span class="number">50</span>)</span><br><span class="line">Out[<span class="number">77</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x10ce1c240</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>小费百分比的直方图<br><img src="/2018/03/23/绘图和可视化/Figure_18.png" alt="小费百分比的直方图"></li></ul><p>与此相关的是密度图，它通过计算“可能会产生观测数据的连续概率分布的估计”而产生。一般的过程是将该分布近似为一组核(即诸如正态(高斯)分布之类的较为简单的分布),t通过调用<code>plot</code>的<code>kind=&#39;kde&#39;</code>生成:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: tips[<span class="string">'tip_pct'</span>].plot(kind=<span class="string">'kde'</span>)</span><br><span class="line">Out[<span class="number">91</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x120178ba8</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>小费百分比密度图<br><img src="/2018/03/23/绘图和可视化/Figure_19.png" alt="小费百分比密度图"></li></ul><p>这两种图表常常被画在一起。直方图以规格化形式给出(以便给出面元化密度)，然后再在其上绘制核密度估计:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">98</span>]: comp1  = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,size=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: comp2 = np.random.normal(<span class="number">10</span>,<span class="number">2</span>,size=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: values = Series(np.concatenate([comp1,comp2]))</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: values.hist(bins=<span class="number">100</span>, alpha=<span class="number">0.3</span>, color=<span class="string">'k'</span>, density=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">101</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x119e863c8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: values.plot(kind=<span class="string">'kde'</span>, style=<span class="string">'k--'</span>)</span><br><span class="line">Out[<span class="number">102</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x119e863c8</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>带有密度估计的规格化直方图<br><img src="/2018/03/23/绘图和可视化/Figure_20.png" alt="带有密度估计的规格化直方图"></li></ul><h3 id="散布图"><a href="#散布图" class="headerlink" title="散布图"></a>散布图</h3><p>散布图是观察两个一维数据序列之间的关系的有效手段。matplotlib的<code>scatter</code>方法是绘制散布图的主要方法，(加载<a href="https://github.com/coldJune/Python/blob/master/ipython/macrodata.csv" target="_blank" rel="noopener">数据集</a>选择其中几列，计算对数差:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">114</span>]: macro = pd.read_csv(<span class="string">'/Users/dengxiaojun/Documents/pydata-book-2nd-edition/examples/macrodata.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: data = macro[[<span class="string">'cpi'</span>,<span class="string">'m1'</span>,<span class="string">'tbilrate'</span>,<span class="string">'unemp'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: trans_data = np.log(data).diff().dropna()</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: trans_data[<span class="number">-5</span>:]</span><br><span class="line">Out[<span class="number">117</span>]:</span><br><span class="line">          cpi        m1  tbilrate     unemp</span><br><span class="line"><span class="number">198</span> <span class="number">-0.007904</span>  <span class="number">0.045361</span> <span class="number">-0.396881</span>  <span class="number">0.105361</span></span><br><span class="line"><span class="number">199</span> <span class="number">-0.021979</span>  <span class="number">0.066753</span> <span class="number">-2.277267</span>  <span class="number">0.139762</span></span><br><span class="line"><span class="number">200</span>  <span class="number">0.002340</span>  <span class="number">0.010286</span>  <span class="number">0.606136</span>  <span class="number">0.160343</span></span><br><span class="line"><span class="number">201</span>  <span class="number">0.008419</span>  <span class="number">0.037461</span> <span class="number">-0.200671</span>  <span class="number">0.127339</span></span><br><span class="line"><span class="number">202</span>  <span class="number">0.008894</span>  <span class="number">0.012202</span> <span class="number">-0.405465</span>  <span class="number">0.042560</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: plt.scatter(trans_data[<span class="string">'m1'</span>],trans_data[<span class="string">'unemp'</span>])</span><br><span class="line">Out[<span class="number">118</span>]: &lt;matplotlib.collections.PathCollection at <span class="number">0x11b24c780</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: plt.title(<span class="string">'Changes in log %s vs .log %s'</span> % (<span class="string">'m1'</span>, <span class="string">'unemp'</span>))</span><br><span class="line">Out[<span class="number">119</span>]: Text(<span class="number">0.5</span>,<span class="number">1</span>,<span class="string">'Changes in log m1 vs .log unemp'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>一张简单的散布图<br><img src="/2018/03/23/绘图和可视化/Figure_21.png" alt="一张简单的散布图"></li></ul><p>在探索式数据分析工作中，同时观察一组变量的散布图很有意义，这也被称为散布矩阵。pandas.plotting提供了一个能从DataFrame创建散布图矩阵的<code>scatter_matrix</code>函数，它还支持在对角线上放置各变量的直方图或密度图:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">121</span>]: pd.plotting.scatter_matrix(trans_data,diagonal=<span class="string">'kde'</span>,color=<span class="string">'k'</span>,alpha=<span class="number">0.4</span>)</span><br><span class="line">Out[<span class="number">121</span>]:</span><br><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b3591d0</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b499dd8</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b857f98</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b3e7eb8</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b383390</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b383208</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11b873da0</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11d0574e0</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x119b73f98</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x119b75f28</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x119afddd8</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x119ae6128</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x119af3128</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x1261c6860</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11ac44b70</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x126938ac8</span>&gt;]],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure></p><ul><li>散布图矩阵<br><img src="/2018/03/23/绘图和可视化/Figure_22.png" alt="散布图矩阵"></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/coldJune/Python/blob/master/ipython/spx.csv" target="_blank" rel="noopener">数据来源</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      绘图是数据分析工作中的最重要的任务之一，是探索过程的一部分
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="可视化" scheme="http://coldjune.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据规整化(二)</title>
    <link href="http://coldjune.com/2018/03/22/%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E5%8C%96-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/03/22/数据规整化-二/</id>
    <published>2018-03-22T07:01:03.000Z</published>
    <updated>2018-03-26T01:29:58.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重塑和轴向旋转"><a href="#重塑和轴向旋转" class="headerlink" title="重塑和轴向旋转"></a>重塑和轴向旋转</h2><h3 id="重塑层次化索引"><a href="#重塑层次化索引" class="headerlink" title="重塑层次化索引"></a>重塑层次化索引</h3><p>层次化索引为DataFrame数据的重排提供了具有良好一致性的方式。主要功能包括：</p><ol><li>stack:将数据的列”旋转”为行</li><li>unstack:将数据的行”旋转”为列</li></ol><ul><li><p>stack<br>对于一个简单的DataFrame使用<code>stack</code>方法会得到一个Series，<code>stack</code>在运算的时候默认会滤除缺失值，指定<code>dropna=False</code>可以保留：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">112</span>]: data = DataFrame(np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>)),</span><br><span class="line">     ...:                  index=pd.Index([<span class="string">'row1'</span>,<span class="string">'row2'</span>],name=<span class="string">'row'</span>),</span><br><span class="line">     ...:                  columns=pd.Index([<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>],name=<span class="string">'col'</span>))</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: data</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">col   col1  col2  col3</span><br><span class="line">row</span><br><span class="line">row1     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">row2     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: resulst = data.stack()</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: resulst</span><br><span class="line">Out[<span class="number">115</span>]:</span><br><span class="line">row   col</span><br><span class="line">row1  col1    <span class="number">0</span></span><br><span class="line">      col2    <span class="number">1</span></span><br><span class="line">      col3    <span class="number">2</span></span><br><span class="line">row2  col1    <span class="number">3</span></span><br><span class="line">      col2    <span class="number">4</span></span><br><span class="line">      col3    <span class="number">5</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: s1 = Series(np.arange(<span class="number">4</span>),index=list(<span class="string">'abcd'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: s2 = Series([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],index=list(<span class="string">'cde'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: data2 = pd.concat([s1,s2],keys=[<span class="string">'one'</span>,<span class="string">'two'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: data2</span><br><span class="line">Out[<span class="number">127</span>]:</span><br><span class="line">one  a    <span class="number">0</span></span><br><span class="line">     b    <span class="number">1</span></span><br><span class="line">     c    <span class="number">2</span></span><br><span class="line">     d    <span class="number">3</span></span><br><span class="line">two  c    <span class="number">4</span></span><br><span class="line">     d    <span class="number">5</span></span><br><span class="line">     e    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: data2.unstack()</span><br><span class="line">Out[<span class="number">129</span>]:</span><br><span class="line">       a    b    c    d    e</span><br><span class="line">one  <span class="number">0.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  NaN</span><br><span class="line">two  NaN  NaN  <span class="number">4.0</span>  <span class="number">5.0</span>  <span class="number">6.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: data2.unstack().stack()</span><br><span class="line">Out[<span class="number">130</span>]:</span><br><span class="line">one  a    <span class="number">0.0</span></span><br><span class="line">     b    <span class="number">1.0</span></span><br><span class="line">     c    <span class="number">2.0</span></span><br><span class="line">     d    <span class="number">3.0</span></span><br><span class="line">two  c    <span class="number">4.0</span></span><br><span class="line">     d    <span class="number">5.0</span></span><br><span class="line">     e    <span class="number">6.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: data2.unstack().stack(dropna=<span class="keyword">False</span>)</span><br><span class="line">Out[<span class="number">132</span>]:</span><br><span class="line">one  a    <span class="number">0.0</span></span><br><span class="line">     b    <span class="number">1.0</span></span><br><span class="line">     c    <span class="number">2.0</span></span><br><span class="line">     d    <span class="number">3.0</span></span><br><span class="line">     e    NaN</span><br><span class="line">two  a    NaN</span><br><span class="line">     b    NaN</span><br><span class="line">     c    <span class="number">4.0</span></span><br><span class="line">     d    <span class="number">5.0</span></span><br><span class="line">     e    <span class="number">6.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></li><li><p>unstack<br><code>unstack</code>可以将<code>stack</code>方法得到的Series重排为一个DataFrame；默认情况下，<code>unstack</code>操作的是最内层。传入分层级别的编号或名称即可对其他级别进行<code>unstack</code>操作，如果不是所有级别值都能在各分组中找到的话会引入缺失值；在对DataFrame进行<code>unstack</code>操作时，作为旋转轴的级别将会成为结果中的最低级别:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: resulst</span><br><span class="line">Out[<span class="number">140</span>]:</span><br><span class="line">row   col</span><br><span class="line">row1  col1    <span class="number">0</span></span><br><span class="line">      col2    <span class="number">1</span></span><br><span class="line">      col3    <span class="number">2</span></span><br><span class="line">row2  col1    <span class="number">3</span></span><br><span class="line">      col2    <span class="number">4</span></span><br><span class="line">      col3    <span class="number">5</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: resulst.unstack()</span><br><span class="line">Out[<span class="number">141</span>]:</span><br><span class="line">col   col1  col2  col3</span><br><span class="line">row</span><br><span class="line">row1     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">row2     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: resulst.unstack(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">142</span>]:</span><br><span class="line">row   row1  row2</span><br><span class="line">col</span><br><span class="line">col1     <span class="number">0</span>     <span class="number">3</span></span><br><span class="line">col2     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line">col3     <span class="number">2</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: resulst.unstack(<span class="string">'row'</span>)</span><br><span class="line">Out[<span class="number">143</span>]:</span><br><span class="line">row   row1  row2</span><br><span class="line">col</span><br><span class="line">col1     <span class="number">0</span>     <span class="number">3</span></span><br><span class="line">col2     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line">col3     <span class="number">2</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">144</span>]: data2</span><br><span class="line">Out[<span class="number">144</span>]:</span><br><span class="line">one  a    <span class="number">0</span></span><br><span class="line">     b    <span class="number">1</span></span><br><span class="line">     c    <span class="number">2</span></span><br><span class="line">     d    <span class="number">3</span></span><br><span class="line">two  c    <span class="number">4</span></span><br><span class="line">     d    <span class="number">5</span></span><br><span class="line">     e    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">145</span>]: data2.unstack()</span><br><span class="line">Out[<span class="number">145</span>]:</span><br><span class="line">       a    b    c    d    e</span><br><span class="line">one  <span class="number">0.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  NaN</span><br><span class="line">two  NaN  NaN  <span class="number">4.0</span>  <span class="number">5.0</span>  <span class="number">6.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: df = DataFrame(&#123;<span class="string">'left'</span>:resulst,<span class="string">'right'</span>:resulst+<span class="number">5</span>&#125;,</span><br><span class="line">     ...:                 columns=pd.Index([<span class="string">'left'</span>,<span class="string">'right'</span>], name=<span class="string">'side'</span>))</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: df</span><br><span class="line">Out[<span class="number">152</span>]:</span><br><span class="line">side       left  right</span><br><span class="line">row  col</span><br><span class="line">row1 col1     <span class="number">0</span>      <span class="number">5</span></span><br><span class="line">     col2     <span class="number">1</span>      <span class="number">6</span></span><br><span class="line">     col3     <span class="number">2</span>      <span class="number">7</span></span><br><span class="line">row2 col1     <span class="number">3</span>      <span class="number">8</span></span><br><span class="line">     col2     <span class="number">4</span>      <span class="number">9</span></span><br><span class="line">     col3     <span class="number">5</span>     <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: df.unstack(<span class="string">'col'</span>)</span><br><span class="line">Out[<span class="number">153</span>]:</span><br><span class="line">side left           right</span><br><span class="line">col  col1 col2 col3  col1 col2 col3</span><br><span class="line">row</span><br><span class="line">row1    <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>     <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2    <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span>     <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: df.unstack(<span class="string">'col'</span>).stack(<span class="string">'side'</span>)</span><br><span class="line">Out[<span class="number">154</span>]:</span><br><span class="line">col         col1  col2  col3</span><br><span class="line">row  side</span><br><span class="line">row1 left      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">     right     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">row2 left      <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">     right     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="将“长格式”旋转为“宽格式”"><a href="#将“长格式”旋转为“宽格式”" class="headerlink" title="将“长格式”旋转为“宽格式”"></a>将“长格式”旋转为“宽格式”</h3><p>先预处理实验数据，首先加载数据，使用<code>PeriodIndex</code>生成新的索引，使用<code>Index</code>选取索引然后使用<code>reindex</code>方法根据新的列索引生成数据，然后修改数据的行索引为时间索引，最后生成需要的数据:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">217</span>]: periods = pd.PeriodIndex(year=data.year, quarter=data.quarter,name=<span class="string">'date'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: colums = pd.Index([<span class="string">'realgdp'</span>,<span class="string">'infl'</span>,<span class="string">'unemp'</span>],name=<span class="string">'item'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">219</span>]: data = data.reindex(columns=colums)</span><br><span class="line"></span><br><span class="line">In [<span class="number">220</span>]: data.index = periods.to_timestamp(<span class="string">'D'</span>,<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">221</span>]: ldata = data.stack().reset_index().rename(columns=&#123;<span class="number">0</span>:<span class="string">'value'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p><code>pivot</code>第一个参数节后行索引的列名，第二参数是列索引的列名，最后一个参数值用于填充DataFrame的数据列的列名，如果忽略最后一个参数得到的DataFrame就会带有层次化的列:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">233</span>]: ldata[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">233</span>]:</span><br><span class="line">        date     item     value</span><br><span class="line"><span class="number">0</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  realgdp  <span class="number">2710.349</span></span><br><span class="line"><span class="number">1</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>     infl     <span class="number">0.000</span></span><br><span class="line"><span class="number">2</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>    unemp     <span class="number">5.800</span></span><br><span class="line"><span class="number">3</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  realgdp  <span class="number">2778.801</span></span><br><span class="line"><span class="number">4</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>     infl     <span class="number">2.340</span></span><br><span class="line"><span class="number">5</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>    unemp     <span class="number">5.100</span></span><br><span class="line"><span class="number">6</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>  realgdp  <span class="number">2775.488</span></span><br><span class="line"><span class="number">7</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>     infl     <span class="number">2.740</span></span><br><span class="line"><span class="number">8</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>    unemp     <span class="number">5.300</span></span><br><span class="line"><span class="number">9</span> <span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  realgdp  <span class="number">2785.204</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">234</span>]: pivoted = ldata.pivot(<span class="string">'date'</span>,<span class="string">'item'</span>,<span class="string">'value'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">235</span>]: pivoted.head()</span><br><span class="line">Out[<span class="number">235</span>]:</span><br><span class="line">item        infl   realgdp  unemp</span><br><span class="line">date</span><br><span class="line"><span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">0.00</span>  <span class="number">2710.349</span>    <span class="number">5.8</span></span><br><span class="line"><span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  <span class="number">2.34</span>  <span class="number">2778.801</span>    <span class="number">5.1</span></span><br><span class="line"><span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>  <span class="number">2.74</span>  <span class="number">2775.488</span>    <span class="number">5.3</span></span><br><span class="line"><span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  <span class="number">0.27</span>  <span class="number">2785.204</span>    <span class="number">5.6</span></span><br><span class="line"><span class="number">1960</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">2.31</span>  <span class="number">2847.699</span>    <span class="number">5.2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">236</span>]: ldata[<span class="string">'value2'</span>] = np.random.randn(len(ldata))</span><br><span class="line"></span><br><span class="line">In [<span class="number">237</span>]: ldata[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">237</span>]:</span><br><span class="line">        date     item     value    value2</span><br><span class="line"><span class="number">0</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  realgdp  <span class="number">2710.349</span>  <span class="number">0.944599</span></span><br><span class="line"><span class="number">1</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>     infl     <span class="number">0.000</span>  <span class="number">0.244179</span></span><br><span class="line"><span class="number">2</span> <span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>    unemp     <span class="number">5.800</span>  <span class="number">0.055830</span></span><br><span class="line"><span class="number">3</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  realgdp  <span class="number">2778.801</span>  <span class="number">1.182520</span></span><br><span class="line"><span class="number">4</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>     infl     <span class="number">2.340</span>  <span class="number">0.266359</span></span><br><span class="line"><span class="number">5</span> <span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>    unemp     <span class="number">5.100</span> <span class="number">-0.881742</span></span><br><span class="line"><span class="number">6</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>  realgdp  <span class="number">2775.488</span>  <span class="number">0.007021</span></span><br><span class="line"><span class="number">7</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>     infl     <span class="number">2.740</span> <span class="number">-1.171792</span></span><br><span class="line"><span class="number">8</span> <span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>    unemp     <span class="number">5.300</span>  <span class="number">0.007356</span></span><br><span class="line"><span class="number">9</span> <span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  realgdp  <span class="number">2785.204</span>  <span class="number">0.631422</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">238</span>]: pivoted = ldata.pivot(<span class="string">'date'</span>,<span class="string">'item'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">239</span>]: pivoted[:<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">239</span>]:</span><br><span class="line">           value                    value2</span><br><span class="line">item        infl   realgdp unemp      infl   realgdp     unemp</span><br><span class="line">date</span><br><span class="line"><span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">0.00</span>  <span class="number">2710.349</span>   <span class="number">5.8</span>  <span class="number">0.244179</span>  <span class="number">0.944599</span>  <span class="number">0.055830</span></span><br><span class="line"><span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  <span class="number">2.34</span>  <span class="number">2778.801</span>   <span class="number">5.1</span>  <span class="number">0.266359</span>  <span class="number">1.182520</span> <span class="number">-0.881742</span></span><br><span class="line"><span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>  <span class="number">2.74</span>  <span class="number">2775.488</span>   <span class="number">5.3</span> <span class="number">-1.171792</span>  <span class="number">0.007021</span>  <span class="number">0.007356</span></span><br><span class="line"><span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  <span class="number">0.27</span>  <span class="number">2785.204</span>   <span class="number">5.6</span>  <span class="number">0.136254</span>  <span class="number">0.631422</span> <span class="number">-0.850516</span></span><br><span class="line"><span class="number">1960</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">2.31</span>  <span class="number">2847.699</span>   <span class="number">5.2</span> <span class="number">-2.338798</span>  <span class="number">0.897056</span>  <span class="number">0.296124</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">240</span>]: pivoted[<span class="string">'value2'</span>][:<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">240</span>]:</span><br><span class="line">item            infl   realgdp     unemp</span><br><span class="line">date</span><br><span class="line"><span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">0.244179</span>  <span class="number">0.944599</span>  <span class="number">0.055830</span></span><br><span class="line"><span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  <span class="number">0.266359</span>  <span class="number">1.182520</span> <span class="number">-0.881742</span></span><br><span class="line"><span class="number">1959</span><span class="number">-09</span><span class="number">-30</span> <span class="number">-1.171792</span>  <span class="number">0.007021</span>  <span class="number">0.007356</span></span><br><span class="line"><span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  <span class="number">0.136254</span>  <span class="number">0.631422</span> <span class="number">-0.850516</span></span><br><span class="line"><span class="number">1960</span><span class="number">-03</span><span class="number">-31</span> <span class="number">-2.338798</span>  <span class="number">0.897056</span>  <span class="number">0.296124</span></span><br></pre></td></tr></table></figure></p><p>相当于使用<code>set_index</code>创建层次化索引，再用<code>unstack</code>重塑:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">243</span>]: ldata.set_index([<span class="string">'date'</span>,<span class="string">'item'</span>]).unstack(<span class="string">'item'</span>)[:<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">243</span>]:</span><br><span class="line">           value                    value2</span><br><span class="line">item        infl   realgdp unemp      infl   realgdp     unemp</span><br><span class="line">date</span><br><span class="line"><span class="number">1959</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">0.00</span>  <span class="number">2710.349</span>   <span class="number">5.8</span>  <span class="number">0.244179</span>  <span class="number">0.944599</span>  <span class="number">0.055830</span></span><br><span class="line"><span class="number">1959</span><span class="number">-06</span><span class="number">-30</span>  <span class="number">2.34</span>  <span class="number">2778.801</span>   <span class="number">5.1</span>  <span class="number">0.266359</span>  <span class="number">1.182520</span> <span class="number">-0.881742</span></span><br><span class="line"><span class="number">1959</span><span class="number">-09</span><span class="number">-30</span>  <span class="number">2.74</span>  <span class="number">2775.488</span>   <span class="number">5.3</span> <span class="number">-1.171792</span>  <span class="number">0.007021</span>  <span class="number">0.007356</span></span><br><span class="line"><span class="number">1959</span><span class="number">-12</span><span class="number">-31</span>  <span class="number">0.27</span>  <span class="number">2785.204</span>   <span class="number">5.6</span>  <span class="number">0.136254</span>  <span class="number">0.631422</span> <span class="number">-0.850516</span></span><br><span class="line"><span class="number">1960</span><span class="number">-03</span><span class="number">-31</span>  <span class="number">2.31</span>  <span class="number">2847.699</span>   <span class="number">5.2</span> <span class="number">-2.338798</span>  <span class="number">0.897056</span>  <span class="number">0.296124</span></span><br></pre></td></tr></table></figure></p><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>前面描述的均为数据重排，而另一类重要操作则是过滤、清理以及其他转换工作。</p><h3 id="移除重复数据"><a href="#移除重复数据" class="headerlink" title="移除重复数据"></a>移除重复数据</h3><p>DataFrame的<code>duplicated</code>方法返回一个布尔型Series，表示各行是否有重复行；<code>drop_duplicates</code>方法用于返回一个移除了重复行的DataFrame。这两个方法默认会判断全部列，可以传入一个列表指定部分列作为重复项判断标准，即根据某些列过滤重复项；两个方法默认保留第一个出现的组合，传入<code>keep=&#39;last&#39;</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>则会保留最后一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: data = DataFrame(&#123;<span class="string">'k1'</span>:[<span class="string">'one'</span>]*<span class="number">3</span>+[<span class="string">'two'</span>]*<span class="number">2</span>,</span><br><span class="line">    ...:                   <span class="string">'k2'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,]&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: data</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">    k1  k2</span><br><span class="line"><span class="number">0</span>  one   <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  one   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  one   <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  two   <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  two   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: data.duplicated()</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: data.drop_duplicates()</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">    k1  k2</span><br><span class="line"><span class="number">0</span>  one   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  one   <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  two   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: data.drop_duplicates([<span class="string">'k1'</span>])</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">    k1  k2</span><br><span class="line"><span class="number">0</span>  one   <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  two   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: data.drop_duplicates([<span class="string">'k2'</span>,<span class="string">'k1'</span>],keep=<span class="string">'last'</span>)</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">    k1  k2</span><br><span class="line"><span class="number">1</span>  one   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  one   <span class="number">2</span></span><br><span class="line"><span class="number">4</span>  two   <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="利用函数或映射进行数据转换"><a href="#利用函数或映射进行数据转换" class="headerlink" title="利用函数或映射进行数据转换"></a>利用函数或映射进行数据转换</h3><p>Series的<code>map</code>方法可以接受一个函数或含有映射关系的字典型对象，使用<code>map</code>是一种实现元素级转换以及其他数据清理工作的便捷方式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: data = DataFrame(&#123;<span class="string">'food'</span>:[<span class="string">'bacon'</span>,<span class="string">'pulled pork'</span>,<span class="string">'bacon'</span>,<span class="string">'Pastrami'</span>,<span class="string">'corned beef'</span>,</span><br><span class="line">    ...:                           <span class="string">'Bacon'</span>,<span class="string">'pastrami'</span>,<span class="string">'honey ham'</span>,<span class="string">'nava lox'</span>],</span><br><span class="line">    ...:                   <span class="string">'ounces'</span>:[<span class="number">4</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">7.5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: meat_to_animal=&#123;</span><br><span class="line">    ...:     <span class="string">'bacon'</span>:<span class="string">'pig'</span>,</span><br><span class="line">    ...:     <span class="string">'pulled pork'</span>:<span class="string">'pig'</span>,</span><br><span class="line">    ...:     <span class="string">'pastrami'</span>:<span class="string">'cow'</span>,</span><br><span class="line">    ...:     <span class="string">'corned beef'</span>:<span class="string">'cow'</span>,</span><br><span class="line">    ...:     <span class="string">'honey ham'</span>:<span class="string">'pig'</span>,</span><br><span class="line">    ...:     <span class="string">'nava lox'</span>:<span class="string">'salmon'</span></span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: data</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">          food  ounces</span><br><span class="line"><span class="number">0</span>        bacon     <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>  pulled pork     <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>        bacon    <span class="number">12.0</span></span><br><span class="line"><span class="number">3</span>     Pastrami     <span class="number">6.0</span></span><br><span class="line"><span class="number">4</span>  corned beef     <span class="number">7.5</span></span><br><span class="line"><span class="number">5</span>        Bacon     <span class="number">8.0</span></span><br><span class="line"><span class="number">6</span>     pastrami     <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span>    honey ham     <span class="number">5.0</span></span><br><span class="line"><span class="number">8</span>     nava lox     <span class="number">6.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: data[<span class="string">'animal'</span>]=data[<span class="string">'food'</span>].map(str.lower).map(meat_to_animal)</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: data</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">          food  ounces  animal</span><br><span class="line"><span class="number">0</span>        bacon     <span class="number">4.0</span>     pig</span><br><span class="line"><span class="number">1</span>  pulled pork     <span class="number">3.0</span>     pig</span><br><span class="line"><span class="number">2</span>        bacon    <span class="number">12.0</span>     pig</span><br><span class="line"><span class="number">3</span>     Pastrami     <span class="number">6.0</span>     cow</span><br><span class="line"><span class="number">4</span>  corned beef     <span class="number">7.5</span>     cow</span><br><span class="line"><span class="number">5</span>        Bacon     <span class="number">8.0</span>     pig</span><br><span class="line"><span class="number">6</span>     pastrami     <span class="number">3.0</span>     cow</span><br><span class="line"><span class="number">7</span>    honey ham     <span class="number">5.0</span>     pig</span><br><span class="line"><span class="number">8</span>     nava lox     <span class="number">6.0</span>  salmon</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: data[<span class="string">'food'</span>].map(<span class="keyword">lambda</span> x: meat_to_animal[x.lower()])</span><br><span class="line">Out[<span class="number">53</span>]:</span><br><span class="line"><span class="number">0</span>       pig</span><br><span class="line"><span class="number">1</span>       pig</span><br><span class="line"><span class="number">2</span>       pig</span><br><span class="line"><span class="number">3</span>       cow</span><br><span class="line"><span class="number">4</span>       cow</span><br><span class="line"><span class="number">5</span>       pig</span><br><span class="line"><span class="number">6</span>       cow</span><br><span class="line"><span class="number">7</span>       pig</span><br><span class="line"><span class="number">8</span>    salmon</span><br><span class="line">Name: food, dtype: object</span><br></pre></td></tr></table></figure></p><h3 id="替换值"><a href="#替换值" class="headerlink" title="替换值"></a>替换值</h3><p><code>replace</code>方法提供了一种实现替换功能的更简单、更灵活的方式；<code>replace</code>支持一次性替换多个值，只需要传入一个由待替换值组成的列表以及一个替换值；如果希望对不同的值进行不同的替换，则传入一个由替换关系组成的列表即可，也可以是字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">54</span>]: data = Series([<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: data.replace(<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: data.replace([<span class="number">0</span>,<span class="number">2</span>],<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">56</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: data.replace([<span class="number">0</span>,<span class="number">2</span>],[<span class="number">-1</span>,<span class="number">9</span>])</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">9</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">5</span>    <span class="number">9</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: data.replace(&#123;<span class="number">0</span>:<span class="number">-1</span>,<span class="number">1</span>:<span class="number">9</span>&#125;)</span><br><span class="line">Out[<span class="number">58</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">9</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><p>和Series相同，轴标签也可以通过函数或映射进行转换，从而得到一个新对象。轴还可以被就地修改而无需新建一个数据结构，这些都可以使用<code>map</code>方法实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: data = DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>)),</span><br><span class="line">    ...:                  index = [<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row4'</span>],</span><br><span class="line">    ...:                  columns=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: data</span><br><span class="line">Out[<span class="number">64</span>]:</span><br><span class="line">      one  two  three</span><br><span class="line">row1    <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">row2    <span class="number">3</span>    <span class="number">4</span>      <span class="number">5</span></span><br><span class="line">row4    <span class="number">6</span>    <span class="number">7</span>      <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: data.index = data.index.map(str.upper)</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: data</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">      one  two  three</span><br><span class="line">ROW1    <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">ROW2    <span class="number">3</span>    <span class="number">4</span>      <span class="number">5</span></span><br><span class="line">ROW4    <span class="number">6</span>    <span class="number">7</span>      <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>如果要创建数据集的转换版(而不是修改原始数据)，可以使用<code>rename</code>方法；<code>rename</code>方法可以结合字典型对象实现对部分轴标签的更新；如果希望就地修改可以传入<code>implace=True</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: data.rename(index=str.title, columns=str.upper)</span><br><span class="line">Out[<span class="number">72</span>]:</span><br><span class="line">      ONE  TWO  THREE</span><br><span class="line">Row1    <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">Row2    <span class="number">3</span>    <span class="number">4</span>      <span class="number">5</span></span><br><span class="line">Row4    <span class="number">6</span>    <span class="number">7</span>      <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: data.rename(index=&#123;<span class="string">'ROW1'</span>:<span class="string">'ROW'</span>&#125;, columns=&#123;<span class="string">'three'</span>:<span class="string">'col3'</span>&#125;)</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">      one  two  col3</span><br><span class="line">ROW     <span class="number">0</span>    <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">ROW2    <span class="number">3</span>    <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">ROW4    <span class="number">6</span>    <span class="number">7</span>     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: data.rename(index=&#123;<span class="string">'ROW1'</span>:<span class="string">'ROW'</span>&#125;, columns=&#123;<span class="string">'three'</span>:<span class="string">'col3'</span>&#125;,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: data</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">      one  two  col3</span><br><span class="line">ROW     <span class="number">0</span>    <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">ROW2    <span class="number">3</span>    <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">ROW4    <span class="number">6</span>    <span class="number">7</span>     <span class="number">8</span></span><br></pre></td></tr></table></figure></p><h3 id="离散化和面元划分"><a href="#离散化和面元划分" class="headerlink" title="离散化和面元划分"></a>离散化和面元划分</h3><p>为了便于分析，连续的数据常常被离散化或拆分为“面元”。<code>cut</code>函数可以实现将数据划分为面元；其返回的是一个特殊的Categorical对象，相当于一组表示面元名称的字符串。其中<code>categories</code>表示不同分类的名称,<code>codes</code>属性表示各个数据所属分组的标号。和“区间”的数学符号一样，圆括号表示开端，而方括号则被考试闭端(包括)，哪边是闭端可以使用<code>right=True</code>来确定。可以通过<code>labels</code>参数设置自己的面元名称。如果向<code>cut</code>传入的是面元的数量而不是确切的面元边界，则会根据最大值和最小值来计算等长面元：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: ages = [<span class="number">20</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">27</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">47</span>,<span class="number">54</span>,<span class="number">35</span>,<span class="number">37</span>,<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: bins = [<span class="number">18</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">60</span>,<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: cats = pd.cut(ages,bins)</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: cats</span><br><span class="line">Out[<span class="number">99</span>]:</span><br><span class="line">[(<span class="number">18</span>, <span class="number">25</span>], (<span class="number">18</span>, <span class="number">25</span>], (<span class="number">18</span>, <span class="number">25</span>], (<span class="number">25</span>, <span class="number">35</span>], (<span class="number">18</span>, <span class="number">25</span>], ..., (<span class="number">35</span>, <span class="number">60</span>], (<span class="number">35</span>, <span class="number">60</span>], (<span class="number">25</span>, <span class="number">35</span>], (<span class="number">35</span>, <span class="number">60</span>], (<span class="number">25</span>, <span class="number">35</span>]]</span><br><span class="line">Length: <span class="number">11</span></span><br><span class="line">Categories (<span class="number">4</span>, interval[int64]): [(<span class="number">18</span>, <span class="number">25</span>] &lt; (<span class="number">25</span>, <span class="number">35</span>] &lt; (<span class="number">35</span>, <span class="number">60</span>] &lt; (<span class="number">60</span>, <span class="number">100</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: cats.categories</span><br><span class="line">Out[<span class="number">100</span>]:</span><br><span class="line">IntervalIndex([(<span class="number">18</span>, <span class="number">25</span>], (<span class="number">25</span>, <span class="number">35</span>], (<span class="number">35</span>, <span class="number">60</span>], (<span class="number">60</span>, <span class="number">100</span>]]</span><br><span class="line">              closed=<span class="string">'right'</span>,</span><br><span class="line">              dtype=<span class="string">'interval[int64]'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: cats.codes</span><br><span class="line">Out[<span class="number">101</span>]: array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], dtype=int8)</span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: cats = pd.cut(ages,bins,right=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: cats</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">[[<span class="number">18</span>, <span class="number">25</span>), [<span class="number">18</span>, <span class="number">25</span>), [<span class="number">25</span>, <span class="number">35</span>), [<span class="number">25</span>, <span class="number">35</span>), [<span class="number">18</span>, <span class="number">25</span>), ..., [<span class="number">35</span>, <span class="number">60</span>), [<span class="number">35</span>, <span class="number">60</span>), [<span class="number">35</span>, <span class="number">60</span>), [<span class="number">35</span>, <span class="number">60</span>), [<span class="number">25</span>, <span class="number">35</span>)]</span><br><span class="line">Length: <span class="number">11</span></span><br><span class="line">Categories (<span class="number">4</span>, interval[int64]): [[<span class="number">18</span>, <span class="number">25</span>) &lt; [<span class="number">25</span>, <span class="number">35</span>) &lt; [<span class="number">35</span>, <span class="number">60</span>) &lt; [<span class="number">60</span>, <span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: group_names=[<span class="string">'Youth'</span>,<span class="string">'YoungAdult'</span>,<span class="string">'MiddleAged'</span>,<span class="string">'Senior'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: cats = pd.cut(ages,bins,labels=group_names,right=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: cats</span><br><span class="line">Out[<span class="number">106</span>]:</span><br><span class="line">[Youth, Youth, YoungAdult, YoungAdult, Youth, ..., MiddleAged, MiddleAged, MiddleAged, MiddleAged, YoungAdult]</span><br><span class="line">Length: <span class="number">11</span></span><br><span class="line">Categories (<span class="number">4</span>, object): [Youth &lt; YoungAdult &lt; MiddleAged &lt; Senior]</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: data = np.random.rand(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: pd.cut(data,<span class="number">4</span>,precision=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">108</span>]:</span><br><span class="line">[(<span class="number">0.75</span>, <span class="number">0.98</span>], (<span class="number">0.75</span>, <span class="number">0.98</span>], (<span class="number">0.75</span>, <span class="number">0.98</span>], (<span class="number">0.52</span>, <span class="number">0.75</span>], (<span class="number">0.52</span>, <span class="number">0.75</span>], ..., (<span class="number">0.29</span>, <span class="number">0.52</span>], (<span class="number">0.061</span>, <span class="number">0.29</span>], (<span class="number">0.061</span>, <span class="number">0.29</span>], (<span class="number">0.52</span>, <span class="number">0.75</span>], (<span class="number">0.52</span>, <span class="number">0.75</span>]]</span><br><span class="line">Length: <span class="number">20</span></span><br><span class="line">Categories (<span class="number">4</span>, interval[float64]): [(<span class="number">0.061</span>, <span class="number">0.29</span>] &lt; (<span class="number">0.29</span>, <span class="number">0.52</span>] &lt; (<span class="number">0.52</span>, <span class="number">0.75</span>] &lt; (<span class="number">0.75</span>, <span class="number">0.98</span>]]</span><br></pre></td></tr></table></figure></p><p><code>qcut</code>是一个类似于<code>cut</code>的函数，它可以根据样本分位数对数据进行面元划分，可以得到大小基本相等的面元，和<code>cut</code>相同它可以自定义分位数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">109</span>]: data = np.random.rand(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: cats = pd.qcut(data,<span class="number">4</span>) <span class="comment">#按四分位数进行切割</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: cats</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">[(<span class="number">0.499</span>, <span class="number">0.749</span>], (<span class="number">0.263</span>, <span class="number">0.499</span>], (<span class="number">0.263</span>, <span class="number">0.499</span>], (<span class="number">0.499</span>, <span class="number">0.749</span>], (<span class="number">0.263</span>, <span class="number">0.499</span>], ..., (<span class="number">0.263</span>, <span class="number">0.499</span>], (<span class="number">0.499</span>, <span class="number">0.749</span>], (<span class="number">-0.000892</span>, <span class="number">0.263</span>], (<span class="number">0.749</span>, <span class="number">0.999</span>], (<span class="number">0.263</span>, <span class="number">0.499</span>]]</span><br><span class="line">Length: <span class="number">1000</span></span><br><span class="line">Categories (<span class="number">4</span>, interval[float64]): [(<span class="number">-0.000892</span>, <span class="number">0.263</span>] &lt; (<span class="number">0.263</span>, <span class="number">0.499</span>] &lt; (<span class="number">0.499</span>, <span class="number">0.749</span>] &lt; (<span class="number">0.749</span>, <span class="number">0.999</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: pd.value_counts(cats)</span><br><span class="line">Out[<span class="number">112</span>]:</span><br><span class="line">(<span class="number">0.749</span>, <span class="number">0.999</span>]        <span class="number">250</span></span><br><span class="line">(<span class="number">0.499</span>, <span class="number">0.749</span>]        <span class="number">250</span></span><br><span class="line">(<span class="number">0.263</span>, <span class="number">0.499</span>]        <span class="number">250</span></span><br><span class="line">(<span class="number">-0.000892</span>, <span class="number">0.263</span>]    <span class="number">250</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: pd.qcut(data,[<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">0.9</span>,<span class="number">1</span>])</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">[(<span class="number">0.499</span>, <span class="number">0.909</span>], (<span class="number">0.104</span>, <span class="number">0.499</span>], (<span class="number">0.104</span>, <span class="number">0.499</span>], (<span class="number">0.499</span>, <span class="number">0.909</span>], (<span class="number">0.104</span>, <span class="number">0.499</span>], ..., (<span class="number">0.104</span>, <span class="number">0.499</span>], (<span class="number">0.499</span>, <span class="number">0.909</span>], (<span class="number">0.104</span>, <span class="number">0.499</span>], (<span class="number">0.499</span>, <span class="number">0.909</span>], (<span class="number">0.104</span>, <span class="number">0.499</span>]]</span><br><span class="line">Length: <span class="number">1000</span></span><br><span class="line">Categories (<span class="number">4</span>, interval[float64]): [(<span class="number">-0.000892</span>, <span class="number">0.104</span>] &lt; (<span class="number">0.104</span>, <span class="number">0.499</span>] &lt; (<span class="number">0.499</span>, <span class="number">0.909</span>] &lt; (<span class="number">0.909</span>, <span class="number">0.999</span>]]</span><br></pre></td></tr></table></figure></p><h3 id="检测和过滤异常值"><a href="#检测和过滤异常值" class="headerlink" title="检测和过滤异常值"></a>检测和过滤异常值</h3><p>异常值(孤立点或离群值)的过滤或变换运算在很大程度上其实就是数组运算,使用数组运算的方法来进行过滤：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">123</span>]: np.random.seed(<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: data = DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: col = data[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: col[np.abs(col)&gt;<span class="number">3</span>] <span class="comment">#选出绝对值大小超过3的值</span></span><br><span class="line">Out[<span class="number">126</span>]:</span><br><span class="line"><span class="number">97</span>     <span class="number">3.927528</span></span><br><span class="line"><span class="number">305</span>   <span class="number">-3.399312</span></span><br><span class="line"><span class="number">400</span>   <span class="number">-3.745356</span></span><br><span class="line">Name: <span class="number">3</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: data[(np.abs(data)&gt;<span class="number">3</span>).any(<span class="number">1</span>)]<span class="comment">#选出超过3或-3的行</span></span><br><span class="line">Out[<span class="number">127</span>]:</span><br><span class="line">            <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-0.539741</span>  <span class="number">0.476985</span>  <span class="number">3.248944</span> <span class="number">-1.021228</span></span><br><span class="line"><span class="number">97</span>  <span class="number">-0.774363</span>  <span class="number">0.552936</span>  <span class="number">0.106061</span>  <span class="number">3.927528</span></span><br><span class="line"><span class="number">102</span> <span class="number">-0.655054</span> <span class="number">-0.565230</span>  <span class="number">3.176873</span>  <span class="number">0.959533</span></span><br><span class="line"><span class="number">305</span> <span class="number">-2.315555</span>  <span class="number">0.457246</span> <span class="number">-0.025907</span> <span class="number">-3.399312</span></span><br><span class="line"><span class="number">324</span>  <span class="number">0.050188</span>  <span class="number">1.951312</span>  <span class="number">3.260383</span>  <span class="number">0.963301</span></span><br><span class="line"><span class="number">400</span>  <span class="number">0.146326</span>  <span class="number">0.508391</span> <span class="number">-0.196713</span> <span class="number">-3.745356</span></span><br><span class="line"><span class="number">499</span> <span class="number">-0.293333</span> <span class="number">-0.242459</span> <span class="number">-3.056990</span>  <span class="number">1.918403</span></span><br><span class="line"><span class="number">523</span> <span class="number">-3.428254</span> <span class="number">-0.296336</span> <span class="number">-0.439938</span> <span class="number">-0.867165</span></span><br><span class="line"><span class="number">586</span>  <span class="number">0.275144</span>  <span class="number">1.179227</span> <span class="number">-3.184377</span>  <span class="number">1.369891</span></span><br><span class="line"><span class="number">808</span> <span class="number">-0.362528</span> <span class="number">-3.548824</span>  <span class="number">1.553205</span> <span class="number">-2.186301</span></span><br><span class="line"><span class="number">900</span>  <span class="number">3.366626</span> <span class="number">-2.372214</span>  <span class="number">0.851010</span>  <span class="number">1.332846</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: data[np.abs(data)&gt;<span class="number">3</span>] = np.sign(data)*<span class="number">3</span><span class="comment">#将值限制在区间-3到3，sign返回的是一个1和-1组成的数组，表示原始值的符号</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: data.describe()</span><br><span class="line">Out[<span class="number">129</span>]:</span><br><span class="line">                 <span class="number">0</span>            <span class="number">1</span>            <span class="number">2</span>            <span class="number">3</span></span><br><span class="line">count  <span class="number">1000.000000</span>  <span class="number">1000.000000</span>  <span class="number">1000.000000</span>  <span class="number">1000.000000</span></span><br><span class="line">mean     <span class="number">-0.067623</span>     <span class="number">0.068473</span>     <span class="number">0.025153</span>    <span class="number">-0.002081</span></span><br><span class="line">std       <span class="number">0.995485</span>     <span class="number">0.990253</span>     <span class="number">1.003977</span>     <span class="number">0.989736</span></span><br><span class="line">min      <span class="number">-3.000000</span>    <span class="number">-3.000000</span>    <span class="number">-3.000000</span>    <span class="number">-3.000000</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">-0.774890</span>    <span class="number">-0.591841</span>    <span class="number">-0.641675</span>    <span class="number">-0.644144</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">-0.116401</span>     <span class="number">0.101143</span>     <span class="number">0.002073</span>    <span class="number">-0.013611</span></span><br><span class="line"><span class="number">75</span>%       <span class="number">0.616366</span>     <span class="number">0.780282</span>     <span class="number">0.680391</span>     <span class="number">0.654328</span></span><br><span class="line">max       <span class="number">3.000000</span>     <span class="number">2.653656</span>     <span class="number">3.000000</span>     <span class="number">3.000000</span></span><br></pre></td></tr></table></figure></p><h3 id="排列和随机采样"><a href="#排列和随机采样" class="headerlink" title="排列和随机采样"></a>排列和随机采样</h3><p>利用<code>numpy.random.permutation</code>函数实现对Series或DataFrame的列的排列工作(即随机重排序)。通过需要排列的轴的长度调用<code>permitation</code>，可产生一个表示新顺序的整数数组；如果不想用替换的方式选取随机自己可以使用<code>permitation</code>，其返回的数组中切下前k个元素；而要通过替换的方式产生样本，最快的方式是通过<code>np.random.randint</code>得到一组随机整数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">130</span>]: df = DataFrame(np.arange(<span class="number">5</span>*<span class="number">4</span>).reshape(<span class="number">5</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">131</span>]: sample = np.random.permutation(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: sample</span><br><span class="line">Out[<span class="number">132</span>]: array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">133</span>]: df</span><br><span class="line">Out[<span class="number">133</span>]:</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">2</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="number">3</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="number">4</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">134</span>]: df.take(sample)</span><br><span class="line">Out[<span class="number">134</span>]:</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="number">3</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="number">4</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: df.take(np.random.permutation(len(df))[:<span class="number">3</span>])</span><br><span class="line">Out[<span class="number">135</span>]:</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">3</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="number">4</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: bag = np.array([<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">-1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: sampler = np.random.randint(<span class="number">0</span>,len(bag),size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: draws = bag.take(sampler)</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: draws</span><br><span class="line">Out[<span class="number">139</span>]: array([ <span class="number">2</span>,  <span class="number">2</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>,  <span class="number">5</span>, <span class="number">-1</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><h3 id="计算指标-哑变量"><a href="#计算指标-哑变量" class="headerlink" title="计算指标/哑变量"></a>计算指标/哑变量</h3><p>将分类变量转换为哑变量或指标矩阵是常用于统计建模或机器学习的转换方式。pandas的<code>get_dummies</code>函数可以实现如果DataFrame的某一列中含有k个不同的值来派生出一个k列矩阵或DataFrame(其值全为0或1)；如果需要个指标DataFrame的列加上一个前缀以便和其他数据进行合并可以使用<code>prefix</code>参数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">152</span>]: df = DataFrame(&#123;<span class="string">'key'</span>:list(<span class="string">'bbacab'</span>),</span><br><span class="line">     ...:                 <span class="string">'data'</span>:range(<span class="number">6</span>)&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: df</span><br><span class="line">Out[<span class="number">153</span>]:</span><br><span class="line">   data key</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>   b</span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>   b</span><br><span class="line"><span class="number">2</span>     <span class="number">2</span>   a</span><br><span class="line"><span class="number">3</span>     <span class="number">3</span>   c</span><br><span class="line"><span class="number">4</span>     <span class="number">4</span>   a</span><br><span class="line"><span class="number">5</span>     <span class="number">5</span>   b</span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: pd.get_dummies(df[<span class="string">'key'</span>])</span><br><span class="line">Out[<span class="number">154</span>]:</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">155</span>]: dummies = pd.get_dummies(df[<span class="string">'key'</span>],prefix=<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">156</span>]: dummies</span><br><span class="line">Out[<span class="number">156</span>]:</span><br><span class="line">   key_a  key_b  key_c</span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">2</span>      <span class="number">1</span>      <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">3</span>      <span class="number">0</span>      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">4</span>      <span class="number">1</span>      <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: df_with_dummies = df[[<span class="string">'data'</span>]].join(dummies)</span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: df_with_dummies</span><br><span class="line">Out[<span class="number">158</span>]:</span><br><span class="line">   data  key_a  key_b  key_c</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">2</span>     <span class="number">2</span>      <span class="number">1</span>      <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span>      <span class="number">0</span>      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">4</span>     <span class="number">4</span>      <span class="number">1</span>      <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>     <span class="number">5</span>      <span class="number">0</span>      <span class="number">1</span>      <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串对象方法"><a href="#字符串对象方法" class="headerlink" title="字符串对象方法"></a>字符串对象方法</h3><ul><li>Python内置的字符串方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">返回子串在字符串中的出现次数(非重叠)</td></tr><tr><td style="text-align:center">endswith、startswith</td><td style="text-align:center">如果字符串以某个后缀结尾(以某个前缀开头)，则返回True</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">将字符串用作连接其他字符串序列的分隔符</td></tr><tr><td style="text-align:center">index</td><td style="text-align:center">如果在字符串中找到子串，则返回子串第一个字符所在的位置。如果没有找到，则引发ValueError</td></tr><tr><td style="text-align:center">find</td><td style="text-align:center">如果在字符串中找到子串，则返回第一个发现的子串的第一个字符所在的位置。如果没有找到返回-1</td></tr><tr><td style="text-align:center">rfind</td><td style="text-align:center">如果在字符串中找到子串，则返回最后一个发现的子串的第一个字符所在的位置。如果没有找到，则返回-1</td></tr><tr><td style="text-align:center">replace</td><td style="text-align:center">用另一个字符串替换指定子串</td></tr><tr><td style="text-align:center">strip、rstrip、lstrip</td><td style="text-align:center">去除空白符(包括换行符)。</td></tr><tr><td style="text-align:center">split</td><td style="text-align:center">通过指定的分隔符将字符串拆分为一组子串</td></tr><tr><td style="text-align:center">lower、upper</td><td style="text-align:center">分别将字母字符转换为小写或大写</td></tr><tr><td style="text-align:center">ljust、rjust</td><td style="text-align:center">用空格(或其他字符)填充字符串的空白侧以返回符合最低宽度的字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: var = <span class="string">'a, ,b, c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: var.split(<span class="string">','</span>)</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: pieces = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> var.split(<span class="string">','</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: pieces</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'a'</span>, <span class="string">''</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: first,sencond,third,fourth = pieces</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: first+<span class="string">'::'</span>+sencond+<span class="string">'::'</span>+third+<span class="string">'::'</span>+fourth</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'a::::b::c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="string">'::'</span>.join(pieces)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'a::::b::c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: var.index(<span class="string">':'</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-10</span>-d73873441320&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 var.index(':')</span><br><span class="line"></span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: var.count(<span class="string">','</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: var.replace(<span class="string">','</span>,<span class="string">'::'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'a:: ::b:: c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: var.replace(<span class="string">','</span>,<span class="string">''</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'a b c'</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>见<a href="http://coldjune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">正则表达式</a>部分</p><h3 id="pandas中矢量化的字符串函数"><a href="#pandas中矢量化的字符串函数" class="headerlink" title="pandas中矢量化的字符串函数"></a>pandas中矢量化的字符串函数</h3><ul><li>矢量化的字符串方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">cat</td><td style="text-align:center">实现元素级的字符串连接操作，可指定分隔符</td></tr><tr><td style="text-align:center">contains</td><td style="text-align:center">返回表示各字符串是否含有指定模式的布尔型数组</td></tr><tr><td style="text-align:center">count</td><td style="text-align:center">模式的出现次数</td></tr><tr><td style="text-align:center">endswith、startswith</td><td style="text-align:center">相当于对各个元素执行x.endswith(patten)或x.startswith(pattern)</td></tr><tr><td style="text-align:center">findall</td><td style="text-align:center">计算各字符串的模式列表</td></tr><tr><td style="text-align:center">get</td><td style="text-align:center">获取各元素的第i个字符</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">根据指定的分隔符将Series中各元素的字符串连接起来</td></tr><tr><td style="text-align:center">len</td><td style="text-align:center">计算各字符串的长度</td></tr><tr><td style="text-align:center">lower、upper</td><td style="text-align:center">转换大小写。相当于对各个元素执行x.lower()或x.upper()</td></tr><tr><td style="text-align:center">match</td><td style="text-align:center">根据指定的正则表达式对各个元素执行re.match</td></tr><tr><td style="text-align:center">pad</td><td style="text-align:center">在字符串的左边、右边或左右两边添加空白符</td></tr><tr><td style="text-align:center">center</td><td style="text-align:center">相当于pad(side=’both’)</td></tr><tr><td style="text-align:center">repeat</td><td style="text-align:center">重复值。例如x.str.repeat(3)相当于对各个字符串执行x*3</td></tr><tr><td style="text-align:center">slice</td><td style="text-align:center">对Series中的各个字符串进行子串截取</td></tr><tr><td style="text-align:center">split</td><td style="text-align:center">根据分隔符或正则表达式对字符串进行拆分</td></tr><tr><td style="text-align:center">strip、rstrip、lstrip</td><td style="text-align:center">去除空白符，包括换行符。相当于对各个元素执行x.strip()、x.rstrip()、x.lstrip()</td></tr></tbody></table><p>为了解决<code>map</code>方法应用于pandas对象时遇到NA值报错的问题，Series可以通过str属性访问跳过NA的字符串操作方法,可以执行正则表达式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: data = &#123;<span class="string">'Jone'</span>:<span class="string">'123@qq.com'</span>,<span class="string">'bob'</span>:<span class="string">'asd@163.com'</span>,<span class="string">'jim'</span>:<span class="string">'jim@gmail.com'</span>,<span class="string">'tom'</span>:np.nan&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: data = Series(data)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: data.isnull()</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">Jone    <span class="keyword">False</span></span><br><span class="line">bob     <span class="keyword">False</span></span><br><span class="line">jim     <span class="keyword">False</span></span><br><span class="line">tom      <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: data.str.contains(<span class="string">'gmail'</span>)</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">Jone    <span class="keyword">False</span></span><br><span class="line">bob     <span class="keyword">False</span></span><br><span class="line">jim      <span class="keyword">True</span></span><br><span class="line">tom       NaN</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: pattern = <span class="string">r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\.([A-Z]&#123;2,4&#125;)'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: data.str.findall(pattern,flags=re.I)</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">Jone       [(<span class="number">123</span>, qq, com)]</span><br><span class="line">bob       [(asd, <span class="number">163</span>, com)]</span><br><span class="line">jim     [(jim, gmail, com)]</span><br><span class="line">tom                     NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://github.com/coldJune/Python/blob/master/ipython/ipython_log.py" target="_blank" rel="noopener">处理食品数据集</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">keep可以取‘first’、‘last’、False分别表示保留第一个，保留最后一个，全部删除。详细可以查看文档。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      上一章主要记录了合并数据集，这里讲介绍转换和重塑
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据清洗" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据规整化(一)</title>
    <link href="http://coldjune.com/2018/03/21/%E6%95%B0%E6%8D%AE%E8%A7%84%E6%95%B4%E5%8C%96-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/21/数据规整化-一/</id>
    <published>2018-03-21T11:30:39.000Z</published>
    <updated>2018-03-26T01:29:56.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合并数据集"><a href="#合并数据集" class="headerlink" title="合并数据集"></a>合并数据集</h2><p>pandas对象中的数据可以通过内置的方式进行合并:</p><ul><li><code>pandas.merge</code>可根据一个或多个键讲不通DataFrame中的行连接起来(数据库连接操作)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li><code>pandas.concat</code>可以沿着一条轴将多个对象堆叠到一起</li><li><p>实例方法<code>combine_first</code>可以将重复数据编接在一起，用一个对象中的值填充另一个对象的中的缺失值(先从第一个对象选值，不行就去第二个对象中选值)</p></li><li><p>merge函数的参数</p></li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">left</td><td style="text-align:center">参数合并的左侧DataFrame</td></tr><tr><td style="text-align:center">right</td><td style="text-align:center">参与合并的右侧DataFrame</td></tr><tr><td style="text-align:center">how</td><td style="text-align:center">“inner”、”outer”、”left”、”right”。默认为”inner”</td></tr><tr><td style="text-align:center">on</td><td style="text-align:center">用于连接的列名。必须存在于左右两个DataFrame对象中。如果未指定，且其他连接键也未指定，则以left和right列名的交集作为连接键</td></tr><tr><td style="text-align:center">left_on</td><td style="text-align:center">左侧DataFrame中用作连接键的列</td></tr><tr><td style="text-align:center">right_on</td><td style="text-align:center">右侧DataFrame中用作连接键的列</td></tr><tr><td style="text-align:center">left_index</td><td style="text-align:center">将左侧的行索引用作其连接键</td></tr><tr><td style="text-align:center">right_index</td><td style="text-align:center">将右侧的行索引用作其连接键</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">根据连接键合并后的数据进行排序，默认为True。处理大数据集时，禁用会获得更好的性能</td></tr><tr><td style="text-align:center">suffixes</td><td style="text-align:center">字符串值元组，用于追加到重叠列名的末尾，默认为(‘_x’,’_y’)。(如果左右两个DataFrame中都有data，则结果会出现”data_x”和”data_y”)</td></tr><tr><td style="text-align:center">copy</td><td style="text-align:center">设置为False，可以在某些特殊情况下避免将数据复制到结果数据结构中。默认总是复制</td></tr></tbody></table><h3 id="数据库风格的DataFrame合并"><a href="#数据库风格的DataFrame合并" class="headerlink" title="数据库风格的DataFrame合并"></a>数据库风格的DataFrame合并</h3><p>数据集的合并(merge)或链接(join)运算是通过一个或多个键将行链接起来。</p><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><p>df1中的数据key列中有多个被标记为a,b的行，而df2中key列的每个值仅对应一行。如果没有指定要用哪个列进行链接，<code>merge</code>就会将重叠列的列名当做键，最好通过<code>on</code>显式指定；如果两个列的列名不同可以分别使用<code>left_on</code>和<code>right_on</code>指定；默认情况下<code>merge</code>做的是<code>inner</code>链接，即结果是键的交集，所以c的数据被剔除了；外链接<code>outer</code>求的是并集，结合了左链接<code>left</code>和右链接<code>right</code>的效果，通过<code>how</code>来指定链接方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">In [14]: df1 = DataFrame(&#123;&apos;key&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [15]: df2 = DataFrame(&#123;&apos;key&apos;:list(&apos;abc&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [16]: df1</span><br><span class="line">Out[16]:</span><br><span class="line">   data1 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   a</span><br><span class="line">2      2   c</span><br><span class="line">3      3   c</span><br><span class="line">4      4   b</span><br><span class="line">5      5   b</span><br><span class="line">6      6   c</span><br><span class="line"></span><br><span class="line">In [17]: df2</span><br><span class="line">Out[17]:</span><br><span class="line">   data2 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   b</span><br><span class="line">2      2   c</span><br><span class="line"></span><br><span class="line">In [18]: pd.merge(df1,df2)</span><br><span class="line">Out[18]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br><span class="line"></span><br><span class="line">In [19]: df1.merge(df2,on=&apos;key&apos;)</span><br><span class="line">Out[19]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br><span class="line"></span><br><span class="line">In [20]: df3 = DataFrame(&#123;&apos;lkey&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [21]: df4 = DataFrame(&#123;&apos;rkey&apos;:list(&apos;abc&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [22]: pd.merge(df3,df4,left_on=&apos;lkey&apos;,right_on=&apos;rkey&apos;)</span><br><span class="line">Out[22]:</span><br><span class="line">   data1 lkey  data2 rkey</span><br><span class="line">0      0    a      0    a</span><br><span class="line">1      1    a      0    a</span><br><span class="line">2      2    c      2    c</span><br><span class="line">3      3    c      2    c</span><br><span class="line">4      6    c      2    c</span><br><span class="line">5      4    b      1    b</span><br><span class="line">6      5    b      1    b</span><br><span class="line"></span><br><span class="line">In [23]: df1.merge(df2,on=&apos;key&apos;,how=&apos;outer&apos;)</span><br><span class="line">Out[23]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      1   a      0</span><br><span class="line">2      2   c      2</span><br><span class="line">3      3   c      2</span><br><span class="line">4      6   c      2</span><br><span class="line">5      4   b      1</span><br><span class="line">6      5   b      1</span><br></pre></td></tr></table></figure></p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>多对多链接产生的是行的笛卡尔积，链接方式只影响出现在结果中的键；要根据多个键进行合并，传入一个由列名组成的列表即可(可以看成组合外键)；对于列名重复的问题可以通过设置<code>suffixes</code>选项指定附加到左右两个DataFrame对象列名上的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">In [29]: df1 = DataFrame(&#123;&apos;key&apos;:list(&apos;aaccbbc&apos;),</span><br><span class="line">    ...:                  &apos;data1&apos;:range(7)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [30]: df2 = DataFrame(&#123;&apos;key&apos;:list(&apos;abacd&apos;),</span><br><span class="line">    ...:                  &apos;data2&apos;:range(5)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [31]: df1</span><br><span class="line">Out[31]:</span><br><span class="line">   data1 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   a</span><br><span class="line">2      2   c</span><br><span class="line">3      3   c</span><br><span class="line">4      4   b</span><br><span class="line">5      5   b</span><br><span class="line">6      6   c</span><br><span class="line"></span><br><span class="line">In [32]: df2</span><br><span class="line">Out[32]:</span><br><span class="line">   data2 key</span><br><span class="line">0      0   a</span><br><span class="line">1      1   b</span><br><span class="line">2      2   a</span><br><span class="line">3      3   c</span><br><span class="line">4      4   d</span><br><span class="line"></span><br><span class="line">In [33]: pd.merge(df1,df2,on=&apos;key&apos;,how=&apos;left&apos;)</span><br><span class="line">Out[33]:</span><br><span class="line">   data1 key  data2</span><br><span class="line">0      0   a      0</span><br><span class="line">1      0   a      2</span><br><span class="line">2      1   a      0</span><br><span class="line">3      1   a      2</span><br><span class="line">4      2   c      3</span><br><span class="line">5      3   c      3</span><br><span class="line">6      4   b      1</span><br><span class="line">7      5   b      1</span><br><span class="line">8      6   c      3</span><br><span class="line"></span><br><span class="line">In [42]: left = DataFrame(&#123;&apos;key1&apos;:[&apos;foo&apos;,&apos;foo&apos;,&apos;bar&apos;],</span><br><span class="line">    ...:                   &apos;key2&apos;:[&apos;one&apos;,&apos;two&apos;,&apos;one&apos;],</span><br><span class="line">    ...:                   &apos;lval&apos;:range(3)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [43]: right = DataFrame(&#123;&apos;key1&apos;:[&apos;bar&apos;,&apos;foo&apos;,&apos;bar&apos;,&apos;bar&apos;],</span><br><span class="line">    ...:                   &apos;key2&apos;:[&apos;one&apos;,&apos;two&apos;,&apos;one&apos;,&apos;two&apos;],</span><br><span class="line">    ...:                   &apos;lval&apos;:range(4)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [44]: left</span><br><span class="line">Out[44]:</span><br><span class="line">  key1 key2  lval</span><br><span class="line">0  foo  one     0</span><br><span class="line">1  foo  two     1</span><br><span class="line">2  bar  one     2</span><br><span class="line"></span><br><span class="line">In [45]: right</span><br><span class="line">Out[45]:</span><br><span class="line">  key1 key2  lval</span><br><span class="line">0  bar  one     0</span><br><span class="line">1  foo  two     1</span><br><span class="line">2  bar  one     2</span><br><span class="line">3  bar  two     3</span><br><span class="line"></span><br><span class="line">In [46]: left.merge(right,on=[&apos;key1&apos;,&apos;key2&apos;],how=&apos;outer&apos;)</span><br><span class="line">Out[46]:</span><br><span class="line">  key1 key2  lval_x  lval_y</span><br><span class="line">0  foo  one     0.0     NaN</span><br><span class="line">1  foo  two     1.0     1.0</span><br><span class="line">2  bar  one     2.0     0.0</span><br><span class="line">3  bar  one     2.0     2.0</span><br><span class="line">4  bar  two     NaN     3.0</span><br><span class="line"></span><br><span class="line">In [47]: left.merge(right,on=&apos;key1&apos;,how=&apos;outer&apos;)</span><br><span class="line">Out[47]:</span><br><span class="line">  key1 key2_x  lval_x key2_y  lval_y</span><br><span class="line">0  foo    one       0    two       1</span><br><span class="line">1  foo    two       1    two       1</span><br><span class="line">2  bar    one       2    one       0</span><br><span class="line">3  bar    one       2    one       2</span><br><span class="line">4  bar    one       2    two       3</span><br><span class="line"></span><br><span class="line">In [48]: left.merge(right,on=&apos;key1&apos;,how=&apos;outer&apos;,suffixes=[&apos;_left&apos;,&apos;_right&apos;])</span><br><span class="line">Out[48]:</span><br><span class="line">  key1 key2_left  lval_left key2_right  lval_right</span><br><span class="line">0  foo       one          0        two           1</span><br><span class="line">1  foo       two          1        two           1</span><br><span class="line">2  bar       one          2        one           0</span><br><span class="line">3  bar       one          2        one           2</span><br><span class="line">4  bar       one          2        two           3</span><br></pre></td></tr></table></figure></p><h3 id="索引上的合并"><a href="#索引上的合并" class="headerlink" title="索引上的合并"></a>索引上的合并</h3><p>当DataFrame中的连接键位于其索引上可以通过传入<code>left_index=True</code>和<code>right_index=True</code>来说明索引应该被用作连接键，对于层次化的索引必须以列表的形式指明用作合并键的多个列，同样可以合并双方的索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: left1 = DataFrame(&#123;<span class="string">'key'</span>:list(<span class="string">'abaacb'</span>),</span><br><span class="line">   ...:                    <span class="string">'value'</span>:range(<span class="number">6</span>)&#125;)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: right1 = DataFrame(&#123;<span class="string">'group_val'</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: left1</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">  key  value</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: right1</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">   group_val</span><br><span class="line">a          <span class="number">1</span></span><br><span class="line">b          <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: pd.merge(left1,right1,left_on=<span class="string">'key'</span>,right_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">  key  value  group_val</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span>          <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span>          <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span>          <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>          <span class="number">2</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span>          <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: pd.merge(left1,right1,left_on=<span class="string">'key'</span>,right_index=<span class="keyword">True</span>,how=<span class="string">'outer'</span>)</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">  key  value  group_val</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>        <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span>        <span class="number">2.0</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span>        NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: lefth = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'row1'</span>,<span class="string">'row1'</span>,<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row2'</span>],</span><br><span class="line">    ...:                     <span class="string">'key2'</span>:[<span class="number">2001</span>,<span class="number">2001</span>,<span class="number">2002</span>,<span class="number">2001</span>,<span class="number">2002</span>],</span><br><span class="line">    ...:                     <span class="string">'data'</span>:range(<span class="number">5</span>)&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: righth = DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>,<span class="number">3</span>)),</span><br><span class="line">    ...:                     index=[[<span class="string">'row1'</span>,<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row2'</span>],[<span class="number">2001</span>,<span class="number">2002</span>,<span class="number">2001</span>,<span class="number">2001</span>]],</span><br><span class="line">    ...:                     columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: lefth</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">   data  key1  key2</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>  row1  <span class="number">2001</span></span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>  row1  <span class="number">2001</span></span><br><span class="line"><span class="number">2</span>     <span class="number">2</span>  row1  <span class="number">2002</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span>  row2  <span class="number">2001</span></span><br><span class="line"><span class="number">4</span>     <span class="number">4</span>  row2  <span class="number">2002</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: righth</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">           col1  col2  col3</span><br><span class="line">row1 <span class="number">2001</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">2002</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">row2 <span class="number">2001</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line">     <span class="number">2001</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: pd.merge(lefth,righth,left_on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>],right_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">   data  key1  key2  col1  col2  col3</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span>  row1  <span class="number">2001</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     <span class="number">1</span>  row1  <span class="number">2001</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>     <span class="number">2</span>  row1  <span class="number">2002</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span>  row2  <span class="number">2001</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span>  row2  <span class="number">2001</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: left2 = DataFrame(np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>,<span class="number">2</span>)),index=list(<span class="string">'ace'</span>),columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: right2 = DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">4</span>,<span class="number">2</span>)),index=list(<span class="string">'bcde'</span>),columns=[<span class="string">'col_1'</span>,<span class="string">'col_2'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: left2</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line">   col1  col2</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">c     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">e     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: right2</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">   col_1  col_2</span><br><span class="line">b      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line">c      <span class="number">2</span>      <span class="number">3</span></span><br><span class="line">d      <span class="number">4</span>      <span class="number">5</span></span><br><span class="line">e      <span class="number">6</span>      <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: pd.merge(left2,right2,how=<span class="string">'outer'</span>,left_index=<span class="keyword">True</span>,right_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">   col1  col2  col_1  col_2</span><br><span class="line">a   <span class="number">0.0</span>   <span class="number">1.0</span>    NaN    NaN</span><br><span class="line">b   NaN   NaN    <span class="number">0.0</span>    <span class="number">1.0</span></span><br><span class="line">c   <span class="number">2.0</span>   <span class="number">3.0</span>    <span class="number">2.0</span>    <span class="number">3.0</span></span><br><span class="line">d   NaN   NaN    <span class="number">4.0</span>    <span class="number">5.0</span></span><br><span class="line">e   <span class="number">4.0</span>   <span class="number">5.0</span>    <span class="number">6.0</span>    <span class="number">7.0</span></span><br></pre></td></tr></table></figure></p><p>DataFrame有一个<code>join</code>方法，它能更为方便地实现按索引合并。它还可以合并多个带有相同或相似索引的DataFrame对象，而不管它们之间有没有重叠的列；同时它也支持参数DataFrame的索引跟调用者DataFrame的某个列之间的连接，队友索引的简单合并，可以向<code>join</code>传入一组DataFrame：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: left1</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">  key  value</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: left2</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">   col1  col2</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">c     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">e     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: left2.join(right2,how=<span class="string">'outer'</span>)</span><br><span class="line">Out[<span class="number">44</span>]:</span><br><span class="line">   col1  col2  col_1  col_2</span><br><span class="line">a   <span class="number">0.0</span>   <span class="number">1.0</span>    NaN    NaN</span><br><span class="line">b   NaN   NaN    <span class="number">0.0</span>    <span class="number">1.0</span></span><br><span class="line">c   <span class="number">2.0</span>   <span class="number">3.0</span>    <span class="number">2.0</span>    <span class="number">3.0</span></span><br><span class="line">d   NaN   NaN    <span class="number">4.0</span>    <span class="number">5.0</span></span><br><span class="line">e   <span class="number">4.0</span>   <span class="number">5.0</span>    <span class="number">6.0</span>    <span class="number">7.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: left1</span><br><span class="line">Out[<span class="number">45</span>]:</span><br><span class="line">  key  value</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: right1</span><br><span class="line">Out[<span class="number">46</span>]:</span><br><span class="line">   group_val</span><br><span class="line">a          <span class="number">1</span></span><br><span class="line">b          <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: left1.join(right1,on=<span class="string">'key'</span>)</span><br><span class="line">Out[<span class="number">47</span>]:</span><br><span class="line">  key  value  group_val</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>        <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span>        <span class="number">1.0</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span>        NaN</span><br><span class="line"><span class="number">5</span>   b      <span class="number">5</span>        <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: anote =DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">4</span>,<span class="number">2</span>)),index=[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'f'</span>],columns=[<span class="string">'col3'</span>,<span class="string">'col4'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: anote</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">   col3  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">c     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">b     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">f     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: left2.join([right2,anote])</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">   col1  col2  col_1  col_2  col3  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span>    NaN    NaN   <span class="number">0.0</span>   <span class="number">1.0</span></span><br><span class="line">c     <span class="number">2</span>     <span class="number">3</span>    <span class="number">2.0</span>    <span class="number">3.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span></span><br><span class="line">e     <span class="number">4</span>     <span class="number">5</span>    <span class="number">6.0</span>    <span class="number">7.0</span>   NaN   NaN</span><br></pre></td></tr></table></figure></p><h3 id="轴向连接"><a href="#轴向连接" class="headerlink" title="轴向连接"></a>轴向连接</h3><p>另一种数据合并运算称作连接(concatenation)、绑定(binding)或堆叠(stacking)。NumPy提供了一个用于合并原始NumPy数组的<code>concatenation</code>函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">54</span>]: np.concatenate([arr,arr], axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: np.concatenate([arr,arr], axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">55</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure></p><p>对于pandas对象(如Series和DataFrame)，带有标签的轴能进一步推广数组的连接运算:</p><ul><li>如果个对象其他轴上的索引不同，那些轴应该做并集还是交集</li><li>结果对象中的分组需要是否各不相同</li><li><p>用于连接的轴是否重要</p></li><li><p>concat函数的参数</p></li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">obj</td><td style="text-align:center">参与连接的pandas对象的列表或字典。唯一必需的参数</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">指明连接的轴向,默认为0</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">“inner”、”outer”其中之一，默认为”outer”。指明其他轴向上的索引时按交集(inner)还是并集(outer)进行合并</td></tr><tr><td style="text-align:center">join_axes</td><td style="text-align:center">指明用于其他n-1条轴的索引，不执行并集/交集运算</td></tr><tr><td style="text-align:center">keys</td><td style="text-align:center">与连接对象有关的值，用于形成连接轴向上的层次化索引。可以是任意值的列表或数组、元组数组、列表数组(如果将levels设置成多级数组的话)</td></tr><tr><td style="text-align:center">levels</td><td style="text-align:center">指定用作层次化索引各级别上的索引，如果设置了keys的话</td></tr><tr><td style="text-align:center">names</td><td style="text-align:center">用于创建分层级别的名称，如果设置了keys和levels的话</td></tr><tr><td style="text-align:center">verify_integrity</td><td style="text-align:center">检查结果对象新轴上的重复情况，如果发现则引发异常。默认(False)允许重复</td></tr><tr><td style="text-align:center">ignore_index</td><td style="text-align:center">不保留连接轴上的索引，产生一组新索引range(total_length)</td></tr></tbody></table><p>pandas的<code>concat</code>函数提供了解决以上问题的可靠方式，对没有重叠索引的Series调用concat可以将值和索引粘合在一起;默认情况是在<code>axis=0</code>上工作，最后产生一个新的Series。如果传入<code>axis=1</code>将会得到一个DataFrame，这种情况下从索引的有序并集可以看出另一条轴上没有重叠，可以传入<code>join=&#39;inner&#39;</code>得到交集:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: s1 = Series([<span class="number">0</span>,<span class="number">1</span>],index=list(<span class="string">'ab'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s2 = Series([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=list(<span class="string">'cde'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s3 = Series([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],index=list(<span class="string">'fgh'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: pd.concat([s1,s2,s3])</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">e    <span class="number">4</span></span><br><span class="line">f    <span class="number">5</span></span><br><span class="line">g    <span class="number">6</span></span><br><span class="line">h    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: pd.concat([s1,s2,s3],axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">60</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">a  <span class="number">0.0</span>  NaN  NaN</span><br><span class="line">b  <span class="number">1.0</span>  NaN  NaN</span><br><span class="line">c  NaN  <span class="number">2.0</span>  NaN</span><br><span class="line">d  NaN  <span class="number">3.0</span>  NaN</span><br><span class="line">e  NaN  <span class="number">4.0</span>  NaN</span><br><span class="line">f  NaN  NaN  <span class="number">5.0</span></span><br><span class="line">g  NaN  NaN  <span class="number">6.0</span></span><br><span class="line">h  NaN  NaN  <span class="number">7.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: s4 = pd.concat([s1*<span class="number">5</span>,s3])</span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: s4</span><br><span class="line">Out[<span class="number">63</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">f    <span class="number">5</span></span><br><span class="line">g    <span class="number">6</span></span><br><span class="line">h    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: pd.concat([s1,s4],axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">64</span>]:</span><br><span class="line">     <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">a  <span class="number">0.0</span>  <span class="number">0</span></span><br><span class="line">b  <span class="number">1.0</span>  <span class="number">5</span></span><br><span class="line">f  NaN  <span class="number">5</span></span><br><span class="line">g  NaN  <span class="number">6</span></span><br><span class="line">h  NaN  <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: pd.concat([s1,s4],axis=<span class="number">1</span>,join=<span class="string">'inner'</span>)</span><br><span class="line">Out[<span class="number">65</span>]:</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">b  <span class="number">1</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>可以通过<code>join_axes</code>指定要在其他轴上使用的索引，使用<code>keys</code>可以在连接轴上创建一个层次化索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">69</span>]: pd.concat([s1,s4],axis=<span class="number">1</span>,join_axes=[[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]])</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">a  <span class="number">0.0</span>  <span class="number">0.0</span></span><br><span class="line">c  NaN  NaN</span><br><span class="line">b  <span class="number">1.0</span>  <span class="number">5.0</span></span><br><span class="line">e  NaN  NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: pd.concat([s1,s1,s3],keys=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>])</span><br><span class="line">Out[<span class="number">71</span>]:</span><br><span class="line">one    a    <span class="number">0</span></span><br><span class="line">       b    <span class="number">1</span></span><br><span class="line">two    a    <span class="number">0</span></span><br><span class="line">       b    <span class="number">1</span></span><br><span class="line">three  f    <span class="number">5</span></span><br><span class="line">       g    <span class="number">6</span></span><br><span class="line">       h    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>若果沿着<code>axis=1</code>对Series进行合并，则<code>keys</code>就会成为DataFrame的列头，对于DataFrame效果一样；如果传入的不是列表而是一个字典，则字典的键就会被当做keys选项的值;<code>names</code>可以创建分层级别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">73</span>]: df1 = DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'one'</span>,<span class="string">'two'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: df2 = DataFrame(<span class="number">2</span>+np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'c'</span>],columns=[<span class="string">'three'</span>,<span class="string">'four'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: df1</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: df2</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">   three  four</span><br><span class="line">a      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c      <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: pd.concat([df1,df2],axis=<span class="number">1</span>,keys=[<span class="string">'level1'</span>,<span class="string">'level2'</span>])</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">  level1     level2</span><br><span class="line">     one two  three four</span><br><span class="line">a      <span class="number">0</span>   <span class="number">1</span>    <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line">b      <span class="number">2</span>   <span class="number">3</span>    NaN  NaN</span><br><span class="line">c      <span class="number">4</span>   <span class="number">5</span>    <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: df1 = DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'one'</span>,<span class="string">'two'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: df2 = DataFrame(<span class="number">2</span>+np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'c'</span>],columns=[<span class="string">'three'</span>,<span class="string">'four'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: df1</span><br><span class="line">Out[<span class="number">75</span>]:</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: df2</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">   three  four</span><br><span class="line">a      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c      <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: pd.concat([df1,df2],axis=<span class="number">1</span>,keys=[<span class="string">'level1'</span>,<span class="string">'level2'</span>])</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">  level1     level2</span><br><span class="line">     one two  three four</span><br><span class="line">a      <span class="number">0</span>   <span class="number">1</span>    <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line">b      <span class="number">2</span>   <span class="number">3</span>    NaN  NaN</span><br><span class="line">c      <span class="number">4</span>   <span class="number">5</span>    <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: pd.concat(&#123;<span class="string">'level1'</span>:df1,<span class="string">'level2'</span>:df2&#125;,axis=<span class="number">1</span>,names=[<span class="string">'upper'</span>,<span class="string">'down'</span>])</span><br><span class="line">Out[<span class="number">79</span>]:</span><br><span class="line">upper level1     level2</span><br><span class="line">down     one two  three four</span><br><span class="line">a          <span class="number">0</span>   <span class="number">1</span>    <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line">b          <span class="number">2</span>   <span class="number">3</span>    NaN  NaN</span><br><span class="line">c          <span class="number">4</span>   <span class="number">5</span>    <span class="number">4.0</span>  <span class="number">5.0</span></span><br></pre></td></tr></table></figure></p><p>需要排除与分析无关的行索引，传入<code>ignore_index=True</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: df1</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: df2</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line">   three  four</span><br><span class="line">a      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c      <span class="number">4</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: pd.concat([df1,df2],ignore_index=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">85</span>]:</span><br><span class="line">   four  one  three  two</span><br><span class="line"><span class="number">0</span>   NaN  <span class="number">0.0</span>    NaN  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>   NaN  <span class="number">2.0</span>    NaN  <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>   NaN  <span class="number">4.0</span>    NaN  <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3.0</span>  NaN    <span class="number">2.0</span>  NaN</span><br><span class="line"><span class="number">4</span>   <span class="number">5.0</span>  NaN    <span class="number">4.0</span>  NaN</span><br></pre></td></tr></table></figure></p><h3 id="合并重叠数据"><a href="#合并重叠数据" class="headerlink" title="合并重叠数据"></a>合并重叠数据</h3><p>如果数据集的索引全部或部分重叠就不能拿用简单的合并(merge)或连接(concatenation)运算来处理了。<code>combine_first</code>实现了相同索引择一选择的功能,满足条件则选1否则选2，类似于<code>np.where(pd.isnull(a),b,a)</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: a = Series([np.nan,<span class="number">2</span>,np.nan,<span class="number">3</span>,<span class="number">4</span>,np.nan],index=list(<span class="string">'fedcba'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: b = Series(np.arange(len(a)),dtype=np.float64,index=list(<span class="string">'fedcba'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: b[<span class="number">2</span>:<span class="number">3</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: a</span><br><span class="line">Out[<span class="number">94</span>]:</span><br><span class="line">f    NaN</span><br><span class="line">e    <span class="number">2.0</span></span><br><span class="line">d    NaN</span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">4.0</span></span><br><span class="line">a    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: b</span><br><span class="line">Out[<span class="number">95</span>]:</span><br><span class="line">f    <span class="number">0.0</span></span><br><span class="line">e    <span class="number">1.0</span></span><br><span class="line">d    NaN</span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">4.0</span></span><br><span class="line">a    <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: np.where(pd.isnull(a),b,a)</span><br><span class="line">Out[<span class="number">96</span>]: array([  <span class="number">0.</span>,   <span class="number">2.</span>,  nan,   <span class="number">3.</span>,   <span class="number">4.</span>,   <span class="number">5.</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: b[:<span class="number">-2</span>].combine_first(a[<span class="number">2</span>:])</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line">a    NaN</span><br><span class="line">b    <span class="number">4.0</span></span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">d    NaN</span><br><span class="line">e    <span class="number">1.0</span></span><br><span class="line">f    <span class="number">0.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame，<code>combine_first</code>会在列上做同样的事，可以看做参数对象中的数据为调用者对象的缺失数据”打补丁”:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">107</span>]: df1 = DataFrame(&#123;<span class="string">'a'</span>:[<span class="number">1</span>,np.nan,<span class="number">5</span>,np.nan],</span><br><span class="line">     ...:                  <span class="string">'b'</span>:[np.nan,<span class="number">2</span>,np.nan,<span class="number">6</span>],</span><br><span class="line">     ...:                  <span class="string">'c'</span>:range(<span class="number">2</span>,<span class="number">18</span>,<span class="number">4</span>)&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: df2 = DataFrame(&#123;<span class="string">'a'</span>:[<span class="number">5</span>,<span class="number">4</span>,np.nan,<span class="number">3</span>,<span class="number">7</span>],</span><br><span class="line">     ...:                  <span class="string">'b'</span>:[np.nan,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: df1</span><br><span class="line">Out[<span class="number">109</span>]:</span><br><span class="line">     a    b   c</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN   <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  NaN  <span class="number">2.0</span>   <span class="number">6</span></span><br><span class="line"><span class="number">2</span>  <span class="number">5.0</span>  NaN  <span class="number">10</span></span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">6.0</span>  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: df2</span><br><span class="line">Out[<span class="number">110</span>]:</span><br><span class="line">     a    b</span><br><span class="line"><span class="number">0</span>  <span class="number">5.0</span>  NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">7.0</span>  <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: df1.combine_first(df2)</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">     a    b     c</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN   <span class="number">2.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">2.0</span>   <span class="number">6.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">5.0</span>  <span class="number">4.0</span>  <span class="number">10.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3.0</span>  <span class="number">6.0</span>  <span class="number">14.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">7.0</span>  <span class="number">9.0</span>   NaN</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">可用做实例方法df1.merge(df2),df1想当于left，df2相当于right</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      数据分析和建模方面的大量编程工作都是在做数据准备:加载、清理、转换以及重塑。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据清洗" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
  </entry>
  
  <entry>
    <title>数据加载、存储与文件格式</title>
    <link href="http://coldjune.com/2018/03/21/%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E3%80%81%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <id>http://coldjune.com/2018/03/21/数据加载、存储与文件格式/</id>
    <published>2018-03-21T00:43:06.000Z</published>
    <updated>2018-03-26T01:34:30.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读写文本格式的数据"><a href="#读写文本格式的数据" class="headerlink" title="读写文本格式的数据"></a>读写文本格式的数据</h2><p>pandas提供了一些用于将表格型数据读取为DataFrame对象的函数</p><ul><li>pandas中的解析函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">read_csv</td><td style="text-align:center">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td></tr><tr><td style="text-align:center">read_table</td><td style="text-align:center">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符(“\t”)</td></tr><tr><td style="text-align:center">read_fwf</td><td style="text-align:center">读取定宽列格式数据(没有分隔符)</td></tr><tr><td style="text-align:center">read_clipboard</td><td style="text-align:center">读取剪贴板中的数据，可以看做read_table的剪贴板版。将网页转换为表格时很有用</td></tr></tbody></table><p>这些函数的选项可以划分为几个大类：</p><ol><li>索引：将一个或多个列当做返回的DataFrame处理，以及是否从文件、用户获取列名</li><li>类型推断和数据转换：包括用户定义值的转换、缺失值标记列表等</li><li>日期解析： 包括组合功能，比如将分散在多个列中的日期时间信息组合成结果中的单个列</li><li>迭代：支持对大文件进行逐块迭代</li><li>不规整数据问题：跳过一些行、页脚、注释或其他一些不重要的东西</li></ol><ul><li>read_csv/read_table函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">filepath_or_buffer</td><td style="text-align:center">表示文件系统位置、URL、文件型对象的字符串或任何有read()函数的对象(file handle或StringIO)</td></tr><tr><td style="text-align:center">sep/delimiter</td><td style="text-align:center">用于对行中各字段进行拆分的字符序列或正则表达式</td></tr><tr><td style="text-align:center">header</td><td style="text-align:center">用作列名的行号。默认为0(第一行)，如果没有header行就应该设置为None</td></tr><tr><td style="text-align:center">index_col</td><td style="text-align:center">用作行索引的列编号或列名。可以是单个名称/数字或由多个名称/数字组成的列表(层次化索引)</td></tr><tr><td style="text-align:center">names</td><td style="text-align:center">用于结果的列名列表，结合header=None</td></tr><tr><td style="text-align:center">skiprows</td><td style="text-align:center">需要忽略的行数(从文件开始处算起)，或需要跳过的行号列表(从0开始)</td></tr><tr><td style="text-align:center">na_values</td><td style="text-align:center">一组用于替换NA的值</td></tr><tr><td style="text-align:center">comment</td><td style="text-align:center">用于将注释信息从行尾拆分出去的字符(一个或多个)</td></tr><tr><td style="text-align:center">parse_dates</td><td style="text-align:center">尝试将数据解析为日期，默认为False。如果为True，则尝试解析所有列。此外，还可以指定需要解析的一组列号或列名。如果列表的元素为列表或元组，就会将多个列组合到一起再进行日期解析工作(日期/时间分别位于两个列中)</td></tr><tr><td style="text-align:center">keep_data_col</td><td style="text-align:center">如果连接多列解析日期，则保持参加连接的列。默认为False</td></tr><tr><td style="text-align:center">dayfirst</td><td style="text-align:center">当解析有歧义的日期时，将其看做国际格式(7/6/2018 -&gt; June 7,2018)。默认为False</td></tr><tr><td style="text-align:center">date_parser</td><td style="text-align:center">用于解析日期的函数</td></tr><tr><td style="text-align:center">nrows</td><td style="text-align:center">需要读取的行数(从文件开始处算起)</td></tr><tr><td style="text-align:center">iterator</td><td style="text-align:center">返回一个TextParser以便逐块读取文件</td></tr><tr><td style="text-align:center">chunksize</td><td style="text-align:center">文件快的大小(用于迭代)</td></tr><tr><td style="text-align:center">skip_footer</td><td style="text-align:center">需要忽略的行数(从文件末尾处算起)</td></tr><tr><td style="text-align:center">verbose</td><td style="text-align:center">打印各种解析器输出信息，比如“非数值列中缺失值的数量”</td></tr><tr><td style="text-align:center">encoding</td><td style="text-align:center">用于unicode的文本编码格式。“utf-8”表示用UTF-8编码的文本</td></tr><tr><td style="text-align:center">squeeze</td><td style="text-align:center">如果数据经解析后仅含一列，则返回Series</td></tr><tr><td style="text-align:center">thousands</td><td style="text-align:center">千分位分隔符，如“，”或“.”</td></tr></tbody></table><p>可以使用<code>read_csv</code>和<code>read_table</code>读取一个以逗号分隔的(CSV)文本文件，使用<code>read_table</code>是指定分隔符<code>sep=&#39;,&#39;</code>；当未指定列名时，会使用第一行数据当做列名，可以通过设置<code>header=None</code>使用默认的列名，也可以使用<code>names=[]</code>自己定义列名:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: !type ex1.csv</span><br><span class="line">a,b,c,d,message</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,hello</span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,world</span><br><span class="line"><span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,foo</span><br><span class="line">In [<span class="number">13</span>]: pd.read_csv(<span class="string">'ex1.csv'</span>)</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: pd.read_table(<span class="string">'ex1.csv'</span>,sep=<span class="string">','</span>)</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: pd.read_csv(<span class="string">'ex1.csv'</span>,header=<span class="keyword">None</span>)</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>        <span class="number">4</span></span><br><span class="line"><span class="number">0</span>  a   b   c   d  message</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>    hello</span><br><span class="line"><span class="number">2</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>    world</span><br><span class="line"><span class="number">3</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>      foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: pd.read_csv(<span class="string">'ex1.csv'</span>,names=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>])</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">  col1 col2 col3     col4</span><br><span class="line">a    b    c    d  message</span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    hello</span><br><span class="line"><span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    world</span><br><span class="line"><span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span>      foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: pd.read_csv(<span class="string">'ex1.csv'</span>,names=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>,<span class="string">'col5'</span>])</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">  col1 col2 col3 col4     col5</span><br><span class="line"><span class="number">0</span>    a    b    c    d  message</span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    hello</span><br><span class="line"><span class="number">2</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    world</span><br><span class="line"><span class="number">3</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span>      foo</span><br></pre></td></tr></table></figure></p><p>如果需要将数据指定为索引列，可以通过设置<code>index_col</code>参数指定索引列，而希望将多个列做成一个层次化索引，只需要传入列编号或列名组成的列表即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: !type csv_mindex.csv</span><br><span class="line">key1,key2,value1,value2</span><br><span class="line">one,a,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">one,b,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">one,c,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">one,d,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">two,a,<span class="number">9</span>,<span class="number">10</span></span><br><span class="line">two,b,<span class="number">11</span>,<span class="number">12</span></span><br><span class="line">two,c,<span class="number">13</span>,<span class="number">14</span></span><br><span class="line">two,d,<span class="number">15</span>,<span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: pd.read_csv(<span class="string">'csv_mindex.csv'</span>,index_col=<span class="string">'key1'</span>)</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">     key2  value1  value2</span><br><span class="line">key1</span><br><span class="line">one     a       <span class="number">1</span>       <span class="number">2</span></span><br><span class="line">one     b       <span class="number">3</span>       <span class="number">4</span></span><br><span class="line">one     c       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line">one     d       <span class="number">7</span>       <span class="number">8</span></span><br><span class="line">two     a       <span class="number">9</span>      <span class="number">10</span></span><br><span class="line">two     b      <span class="number">11</span>      <span class="number">12</span></span><br><span class="line">two     c      <span class="number">13</span>      <span class="number">14</span></span><br><span class="line">two     d      <span class="number">15</span>      <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: pd.read_csv(<span class="string">'csv_mindex.csv'</span>,index_col=[<span class="string">'key1'</span>,<span class="string">'key2'</span>])</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">           value1  value2</span><br><span class="line">key1 key2</span><br><span class="line">one  a          <span class="number">1</span>       <span class="number">2</span></span><br><span class="line">     b          <span class="number">3</span>       <span class="number">4</span></span><br><span class="line">     c          <span class="number">5</span>       <span class="number">6</span></span><br><span class="line">     d          <span class="number">7</span>       <span class="number">8</span></span><br><span class="line">two  a          <span class="number">9</span>      <span class="number">10</span></span><br><span class="line">     b         <span class="number">11</span>      <span class="number">12</span></span><br><span class="line">     c         <span class="number">13</span>      <span class="number">14</span></span><br><span class="line">     d         <span class="number">15</span>      <span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>有些表格可能不是固定的分隔符去分隔字段的，对此可以编写一个正则表达式来作为<code>read_table</code>的分隔符:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: list(open(<span class="string">'ex3.txt'</span>))</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">[<span class="string">'            A         B         C\n'</span>,</span><br><span class="line"> <span class="string">'aaa -0.264438 -1.026059 -0.619500\n'</span>,</span><br><span class="line"> <span class="string">'bbb  0.927272  0.302904 -0.032399\n'</span>,</span><br><span class="line"> <span class="string">'ccc -0.264273 -0.386314 -0.217601\n'</span>,</span><br><span class="line"> <span class="string">'ddd -0.871858 -0.348382  1.100491\n'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: pd.read_table(<span class="string">'ex3.txt'</span>,sep=<span class="string">'\s+'</span>)</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">            A         B         C</span><br><span class="line">aaa <span class="number">-0.264438</span> <span class="number">-1.026059</span> <span class="number">-0.619500</span></span><br><span class="line">bbb  <span class="number">0.927272</span>  <span class="number">0.302904</span> <span class="number">-0.032399</span></span><br><span class="line">ccc <span class="number">-0.264273</span> <span class="number">-0.386314</span> <span class="number">-0.217601</span></span><br><span class="line">ddd <span class="number">-0.871858</span> <span class="number">-0.348382</span>  <span class="number">1.100491</span></span><br></pre></td></tr></table></figure></p><p>同时可以使用<code>skiprows</code>跳过指定的行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: !type ex4.csv</span><br><span class="line"><span class="comment"># hey!</span></span><br><span class="line">a,b,c,d,message</span><br><span class="line"><span class="comment"># just wanted to make things more difficult for you</span></span><br><span class="line"><span class="comment"># who reads CSV files with computers, anyway?</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,hello</span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,world</span><br><span class="line"><span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,foo</span><br><span class="line">In [<span class="number">29</span>]: pd.read_csv(<span class="string">'ex4.csv'</span>,skiprows=[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br></pre></td></tr></table></figure></p><p>默认情况pandas会用一组经常出现的标记值识别缺失值，如NA、-1.#IND以及NULL，可以使用<code>na_values</code>指定一组用于表示缺失值的字符串，可以使用一个字典为各列指定不同的NA标记值:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: !type ex5.csv</span><br><span class="line">something,a,b,c,d,message</span><br><span class="line">one,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,NA</span><br><span class="line">two,<span class="number">5</span>,<span class="number">6</span>,,<span class="number">8</span>,world</span><br><span class="line">three,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,foo</span><br><span class="line">In [<span class="number">31</span>]: pd.read_csv(<span class="string">'ex5.csv'</span>)</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>     foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pd.read_csv(<span class="string">'ex5.csv'</span>,na_values=[<span class="string">'NULL'</span>])</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>     foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: pd.read_csv(<span class="string">'ex5.csv'</span>,na_values=&#123;<span class="string">'message'</span>:[<span class="string">'foo'</span>,<span class="string">'NA'</span>],<span class="string">'something'</span>:[<span class="string">'two'</span>]&#125;)</span><br><span class="line">Out[<span class="number">33</span>]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       NaN  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>     NaN</span><br></pre></td></tr></table></figure></p><h3 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h3><p>在读取大文件中的参数时，只想读取文件的一小部分或逐块对文件进行迭代;<code>nrows</code>用于指定读取几行;<code>chunksize</code>用于逐块读取文件时设置行数，<code>read_csv</code>返回的TextParse对象可以根据<code>chunksize</code>对文件进行逐块迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: pd.read_csv(<span class="string">'ex6.csv'</span>)</span><br><span class="line">Out[<span class="number">46</span>]:</span><br><span class="line">           one       two     three      four key</span><br><span class="line"><span class="number">0</span>     <span class="number">0.467976</span> <span class="number">-0.038649</span> <span class="number">-0.295344</span> <span class="number">-1.824726</span>   L</span><br><span class="line"><span class="number">1</span>    <span class="number">-0.358893</span>  <span class="number">1.404453</span>  <span class="number">0.704965</span> <span class="number">-0.200638</span>   B</span><br><span class="line"><span class="number">2</span>    <span class="number">-0.501840</span>  <span class="number">0.659254</span> <span class="number">-0.421691</span> <span class="number">-0.057688</span>   G</span><br><span class="line"><span class="meta">... </span>       ...       ...       ...       ...  ..</span><br><span class="line"><span class="number">9998</span> <span class="number">-0.362559</span>  <span class="number">0.598894</span> <span class="number">-1.843201</span>  <span class="number">0.887292</span>   G</span><br><span class="line"><span class="number">9999</span> <span class="number">-0.096376</span> <span class="number">-1.012999</span> <span class="number">-0.657431</span> <span class="number">-0.573315</span>   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="number">10000</span> rows x <span class="number">5</span> columns]</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: chunk = pd.read_csv(<span class="string">'ex6.csv'</span>,chunksize=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: tot = Series([])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: <span class="keyword">for</span> piece <span class="keyword">in</span> chunk:</span><br><span class="line">    ...:     tot = tot.add(piece[<span class="string">'key'</span>].value_counts(),fill_value=<span class="number">0</span>)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: tot = tot.sort_values(ascending=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: tot[:<span class="number">10</span>]</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">E    <span class="number">368.0</span></span><br><span class="line">X    <span class="number">364.0</span></span><br><span class="line">L    <span class="number">346.0</span></span><br><span class="line">O    <span class="number">343.0</span></span><br><span class="line">Q    <span class="number">340.0</span></span><br><span class="line">M    <span class="number">338.0</span></span><br><span class="line">J    <span class="number">337.0</span></span><br><span class="line">F    <span class="number">335.0</span></span><br><span class="line">K    <span class="number">334.0</span></span><br><span class="line">H    <span class="number">330.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h3 id="将数据写出到文本格式"><a href="#将数据写出到文本格式" class="headerlink" title="将数据写出到文本格式"></a>将数据写出到文本格式</h3><p>利用DataFrame的<code>to_csv</code>方法可以将数据写到一个以逗号分隔的文件中，可以是<code>sep</code>参数指定其他的分隔符；缺失值在输出结果空会被表示为空字符串，可以使用<code>na_rep</code>设置别的标记值；如果没有设置其他选项，则会写出行和列的标签，可以通过<code>index=False</code>和<code>header=False</code>设置禁用；可以通过设置<code>columns</code>来指定顺序排列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: data = pd.read_csv(<span class="string">'ex5.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: data</span><br><span class="line">Out[<span class="number">53</span>]:</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>     foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: data.to_csv(<span class="string">'out.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: !type out.csv</span><br><span class="line">,something,a,b,c,d,message</span><br><span class="line"><span class="number">0</span>,one,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.0</span>,<span class="number">4</span>,</span><br><span class="line"><span class="number">1</span>,two,<span class="number">5</span>,<span class="number">6</span>,,<span class="number">8</span>,world</span><br><span class="line"><span class="number">2</span>,three,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11.0</span>,<span class="number">12</span>,foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: data.to_csv(sys.stdout,sep=<span class="string">'|'</span>)</span><br><span class="line">|something|a|b|c|d|message</span><br><span class="line"><span class="number">0</span>|one|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3.0</span>|<span class="number">4</span>|</span><br><span class="line"><span class="number">1</span>|two|<span class="number">5</span>|<span class="number">6</span>||<span class="number">8</span>|world</span><br><span class="line"><span class="number">2</span>|three|<span class="number">9</span>|<span class="number">10</span>|<span class="number">11.0</span>|<span class="number">12</span>|foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: data.to_csv(sys.stdout,na_rep=<span class="string">'NULL'</span>)</span><br><span class="line">,something,a,b,c,d,message</span><br><span class="line"><span class="number">0</span>,one,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.0</span>,<span class="number">4</span>,NULL</span><br><span class="line"><span class="number">1</span>,two,<span class="number">5</span>,<span class="number">6</span>,NULL,<span class="number">8</span>,world</span><br><span class="line"><span class="number">2</span>,three,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11.0</span>,<span class="number">12</span>,foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: data.to_csv(sys.stdout,index=<span class="keyword">False</span>,header=<span class="keyword">False</span>)</span><br><span class="line">one,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.0</span>,<span class="number">4</span>,</span><br><span class="line">two,<span class="number">5</span>,<span class="number">6</span>,,<span class="number">8</span>,world</span><br><span class="line">three,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11.0</span>,<span class="number">12</span>,foo</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: data.to_csv(sys.stdout,index=<span class="keyword">False</span>,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">a,b,c</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">9</span>,<span class="number">10</span>,<span class="number">11.0</span></span><br></pre></td></tr></table></figure></p><p>Series也有<code>ro_csv</code>方法，同时Series可以使用<code>from_csv</code>读取数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">61</span>]: Series.from_csv(<span class="string">'tseries.csv'</span>,parse_dates=<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-05</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-06</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-07</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h3 id="手工处理分隔符格式"><a href="#手工处理分隔符格式" class="headerlink" title="手工处理分隔符格式"></a>手工处理分隔符格式</h3><ul><li>CSV语支选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">delimiter</td><td style="text-align:center">用于分隔字段的单字符字符串。默认为”,”</td></tr><tr><td style="text-align:center">lineterminator</td><td style="text-align:center">用于写操作的行结束符，默认为”\r\n”。读操作将忽略此选项，它能认出跨平台的行结束符</td></tr><tr><td style="text-align:center">quotechar</td><td style="text-align:center">用于带有特殊字符(如分隔符)的字段的引用符号。默认为“””</td></tr><tr><td style="text-align:center">quoting</td><td style="text-align:center">引用约定。可选值包括csv.QUOTE_ALL(引用所有字段)、csv.QUOTE_MINIMAL(只应用带有诸如分隔符之类的特殊字符的字段)、csv.QUOTE_NONNUMERIC以及csv.QUOTE_NON(不引用)。默认为QUOTE_MINIMAL</td></tr><tr><td style="text-align:center">skipinitialspace</td><td style="text-align:center">忽略分隔符后面的空白符。默认为False</td></tr><tr><td style="text-align:center">doublequote</td><td style="text-align:center">如何处理字段内的引用符号。如果为True，则双写。</td></tr><tr><td style="text-align:center">escapechar</td><td style="text-align:center">用于调分隔符进行转义的字符串(如果quoting被设置为csv.QUOIE_NONE)。默认禁用</td></tr></tbody></table><p>对于单字符分隔符文件，可以使用Python内置<code>csv</code>模块，将任意已打开的文件或文件型对象传给<code>csv.reader</code>,对这个reader进行迭代将会为每一行产生去除引号的列表，为了是数据合乎要求，可以做一些整理:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: !type ex7.csv</span><br><span class="line"><span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: f = open(<span class="string">'ex7.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: reader=csv.reader(f)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: <span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">    ...:     print(line)</span><br><span class="line">    ...:</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: !type ex7.csv</span><br><span class="line"><span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span></span><br><span class="line"><span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: f = open(<span class="string">'ex7.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: reader=csv.reader(f)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: <span class="keyword">for</span> line <span class="keyword">in</span> reader:</span><br><span class="line">    ...:     print(line)</span><br><span class="line">    ...:</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure></p><p>csv的文件有很多，可以定义<code>csv.Dialect</code>的子类定义出新格式(专门的分隔符、字符串引用约定、行结束符等)，CSV语支的参数也可以以关键字的形式提供给<code>csv.reader</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: <span class="class"><span class="keyword">class</span> <span class="title">my_dialect</span><span class="params">(csv.Dialect)</span>:</span></span><br><span class="line">    ...:     lineterminator = <span class="string">'\n'</span></span><br><span class="line">    ...:     delimiter = <span class="string">';'</span></span><br><span class="line">    ...:     quotechar = <span class="string">'"'</span></span><br><span class="line">    ...:     quoting = csv.QUOTE_MINIMAL</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: reader = csv.reader(f, dialect=my_dialect)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: reader = csv.reader(f,delimiter=<span class="string">'|'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="JSON、XML和HTML"><a href="#JSON、XML和HTML" class="headerlink" title="JSON、XML和HTML"></a>JSON、XML和HTML</h3><p>关于此类文件解析可查看<a href="http://coldjune.com/2018/03/13/Python%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/">Python文本处理</a></p><h2 id="二进制数据格式"><a href="#二进制数据格式" class="headerlink" title="二进制数据格式"></a>二进制数据格式</h2><p>可以使用Python内置的pickle序列化来实现数据的二进制存储可以使用<code>pandas.read_pickle</code>函数将数据读回到Python：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: frame.to_pickle(<span class="string">'frame'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: pd.read_pickle(<span class="string">'frame'</span>)</span><br><span class="line">Out[<span class="number">92</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br></pre></td></tr></table></figure></p><h3 id="使用HDF5格式"><a href="#使用HDF5格式" class="headerlink" title="使用HDF5格式"></a>使用HDF5格式</h3><p>HDF5能实现高效读取磁盘上以二进制格式存储的科学依据。HDF5中HDF指的是层次性数据格式。每个HDF5文件都含有一个文件系统式的节点结构，能够存储多个数据集并支持元数据。HDF5支持多种压缩器的及时压缩，还能更高效地存储重复模式数据。对于那些非常大的无法直接放入内存的数据集，它可以高效地分块读写。Python的HDF5库有两个接口(PyTables和h5py)。</p><ul><li><p>PyTables</p><blockquote><p>PyTables抽象了HDF5的许多细节以提供多种灵活的数据容器、表索引、查询功能以及对核外计算技术的支持。</p></blockquote></li><li><p>h5py</p><blockquote><p>h5py提供了一种直接而高级的HDF5 API访问接口。</p></blockquote></li></ul><p>使用SDFStore类需要先下载<code>tables</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tables</span><br></pre></td></tr></table></figure></p><p>然后通过PyTables存储pandas对象，HDF5文件中的对象可以通过与字典一样的方式进行获取:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: store[<span class="string">'obj1'</span>] = frame</span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: store</span><br><span class="line">Out[<span class="number">102</span>]:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">io</span>.<span class="title">pytables</span>.<span class="title">HDFStore</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">File</span> <span class="title">path</span>:</span> mydata.h5</span><br><span class="line">/obj1            frame        (shape-&gt;[3,5])</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: store[<span class="string">'obj1'</span>]</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br></pre></td></tr></table></figure></p><h3 id="读取Microsoft-Excel文件"><a href="#读取Microsoft-Excel文件" class="headerlink" title="读取Microsoft Excel文件"></a>读取Microsoft Excel文件</h3><p>pandas的ExcelFile类支持读取存储在Excel 2003(或更高版本)中的表格型数据。由于ExcelFile用到了xlrd和openpyxl包，所以需要安装它们:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">104</span>]: !pip3 install xlrd</span><br><span class="line">In [<span class="number">105</span>]: !pip3 install openpyxl</span><br></pre></td></tr></table></figure></p><p>通过传入一个xls或xlsx的路径创建一个ExcelFile实例然后将存放在工作表中的数据读取到DataFrame中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">112</span>]: xls_file = pd.ExcelFile(<span class="string">'ex1.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: table = xls_file.parse(<span class="string">'Sheet1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: table</span><br><span class="line">Out[<span class="number">114</span>]:</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>     foo</span><br></pre></td></tr></table></figure></p><h2 id="HTML和Web-API"><a href="#HTML和Web-API" class="headerlink" title="HTML和Web API"></a>HTML和Web API</h2><p>HTML和Web API相关内容查看<a href="http://coldjune.com/2018/03/06/Python-Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/">Python-We客户端和服务器</a></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库相关内容查看<a href="http://coldjune.com/2018/02/28/Python数据库编程-一/">Python数据库编程</a></p>]]></content>
    
    <summary type="html">
    
      输入输出分为几个大类：读取文本文件和其他更高效的磁盘存储格式、加载数据库中的数据，利用Web API操作网络资源
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="输入输出" scheme="http://coldjune.com/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(四)</title>
    <link href="http://coldjune.com/2018/03/20/pandas%E5%85%A5%E9%97%A8-%E5%9B%9B/"/>
    <id>http://coldjune.com/2018/03/20/pandas入门-四/</id>
    <published>2018-03-20T07:43:20.000Z</published>
    <updated>2018-03-26T01:34:03.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层次化索引"><a href="#层次化索引" class="headerlink" title="层次化索引"></a>层次化索引</h2><p>层次化索引能在一个轴上拥有多个(两个以上)索引级别，能以低纬度形式处理高纬度数据。在创建Series时，可以使用一个由列表或数组组成的列表作为索引。对于一个层次化索引的对象，选取数据子集的操作同样很简单，有时可以在”内层”中进行选取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">206</span>]: data = Series(np.random.randn(<span class="number">10</span>),index=[list(<span class="string">'aaabbbvvdd'</span>),</span><br><span class="line">     ...:            [<span class="string">'in1'</span>,<span class="string">'in2'</span>,<span class="string">'in3'</span>,<span class="string">'in1'</span>,<span class="string">'in2'</span>,<span class="string">'in3'</span>,<span class="string">'in1'</span>,<span class="string">'in2'</span>,<span class="string">'in2'</span>,<span class="string">'in3'</span>]])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: data</span><br><span class="line">Out[<span class="number">207</span>]:</span><br><span class="line">a  in1    <span class="number">0.837994</span></span><br><span class="line">   in2    <span class="number">0.360445</span></span><br><span class="line">   in3   <span class="number">-0.657047</span></span><br><span class="line">b  in1    <span class="number">0.017681</span></span><br><span class="line">   in2   <span class="number">-0.577803</span></span><br><span class="line">   in3    <span class="number">0.080992</span></span><br><span class="line">v  in1   <span class="number">-0.158913</span></span><br><span class="line">   in2   <span class="number">-0.011517</span></span><br><span class="line">d  in2    <span class="number">0.632189</span></span><br><span class="line">   in3   <span class="number">-1.181628</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">208</span>]: data[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">208</span>]:</span><br><span class="line">in1    <span class="number">0.837994</span></span><br><span class="line">in2    <span class="number">0.360445</span></span><br><span class="line">in3   <span class="number">-0.657047</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: data[:,<span class="string">'in1'</span>]</span><br><span class="line">Out[<span class="number">209</span>]:</span><br><span class="line">a    <span class="number">0.837994</span></span><br><span class="line">b    <span class="number">0.017681</span></span><br><span class="line">v   <span class="number">-0.158913</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>层次化索引在数据重塑和基于分组的操作中非常重要，使用<code>unstack</code>方法可以将Series多层索引安排到一个DataFrame中,<code>statck</code>是其逆运算:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">210</span>]: data.unstack()</span><br><span class="line">Out[<span class="number">210</span>]:</span><br><span class="line">        in1       in2       in3</span><br><span class="line">a  <span class="number">0.837994</span>  <span class="number">0.360445</span> <span class="number">-0.657047</span></span><br><span class="line">b  <span class="number">0.017681</span> <span class="number">-0.577803</span>  <span class="number">0.080992</span></span><br><span class="line">d       NaN  <span class="number">0.632189</span> <span class="number">-1.181628</span></span><br><span class="line">v <span class="number">-0.158913</span> <span class="number">-0.011517</span>       NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">211</span>]: data.unstack().stack()</span><br><span class="line">Out[<span class="number">211</span>]:</span><br><span class="line">a  in1    <span class="number">0.837994</span></span><br><span class="line">   in2    <span class="number">0.360445</span></span><br><span class="line">   in3   <span class="number">-0.657047</span></span><br><span class="line">b  in1    <span class="number">0.017681</span></span><br><span class="line">   in2   <span class="number">-0.577803</span></span><br><span class="line">   in3    <span class="number">0.080992</span></span><br><span class="line">d  in2    <span class="number">0.632189</span></span><br><span class="line">   in3   <span class="number">-1.181628</span></span><br><span class="line">v  in1   <span class="number">-0.158913</span></span><br><span class="line">   in2   <span class="number">-0.011517</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于一个DataFrame，每条轴都可以有分层索引，各层都可以有名字；有了列索引后可以通过其选取列分组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">213</span>]: df = DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">     ...:                 index = [[<span class="string">'row1'</span>,<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row2'</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]],</span><br><span class="line">     ...:                 columns=[[<span class="string">'col1'</span>,<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col2'</span>],[<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'red'</span>,<span class="string">'blue'</span>]])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">214</span>]: df</span><br><span class="line">Out[<span class="number">214</span>]:</span><br><span class="line">       col1      col2</span><br><span class="line">        red blue  red blue</span><br><span class="line">row1 <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">     <span class="number">2</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2 <span class="number">1</span>    <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">     <span class="number">2</span>   <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">215</span>]: df.index.names=[<span class="string">'rowname1'</span>,<span class="string">'rowname2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">216</span>]: df.columns.names=[<span class="string">'colname1'</span>,<span class="string">'colname2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">217</span>]: df</span><br><span class="line">Out[<span class="number">217</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     <span class="number">1</span>           <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">         <span class="number">2</span>           <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2     <span class="number">1</span>           <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">         <span class="number">2</span>          <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: df[<span class="string">'col1'</span>]</span><br><span class="line">Out[<span class="number">218</span>]:</span><br><span class="line">colname2           red  blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     <span class="number">1</span>           <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">         <span class="number">2</span>           <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">row2     <span class="number">1</span>           <span class="number">8</span>     <span class="number">9</span></span><br><span class="line">         <span class="number">2</span>          <span class="number">12</span>    <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="重排分级顺序"><a href="#重排分级顺序" class="headerlink" title="重排分级顺序"></a>重排分级顺序</h3><ul><li><p><strong>swaplevel</strong><br><code>swaplevel</code>接收两个级别编号或名称，并返回一个互换了级别的新对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">219</span>]: df</span><br><span class="line">Out[<span class="number">219</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     <span class="number">1</span>           <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">         <span class="number">2</span>           <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2     <span class="number">1</span>           <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">         <span class="number">2</span>          <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">220</span>]: df.swaplevel(<span class="string">'rowname1'</span>,<span class="string">'rowname2'</span>)</span><br><span class="line">Out[<span class="number">220</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line"><span class="number">1</span>        row1        <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>        row1        <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line"><span class="number">1</span>        row2        <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line"><span class="number">2</span>        row2       <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br></pre></td></tr></table></figure></li><li><p><strong>sort_index(level=)</strong><br><code>sort_index(level=)</code>根据单个级别中的值对数据进行排序(稳定的):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">225</span>]: df.sort_index(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">225</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     <span class="number">1</span>           <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">row2     <span class="number">1</span>           <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">row1     <span class="number">2</span>           <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2     <span class="number">2</span>          <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">226</span>]: df.swaplevel(<span class="number">0</span>,<span class="number">1</span>).sort_index(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">226</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line"><span class="number">1</span>        row1        <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">         row2        <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line"><span class="number">2</span>        row1        <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">         row2       <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="根据级别汇总统计"><a href="#根据级别汇总统计" class="headerlink" title="根据级别汇总统计"></a>根据级别汇总统计</h3><p>许多对于DataFrame和Series的描述和汇总统计都有一个level选项，用于指定在某条轴上求和的级别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">225</span>]: df.sort_index(level=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">225</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname1 rowname2</span><br><span class="line">row1     <span class="number">1</span>           <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">row2     <span class="number">1</span>           <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">row1     <span class="number">2</span>           <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">row2     <span class="number">2</span>          <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">226</span>]: df.swaplevel(<span class="number">0</span>,<span class="number">1</span>).sort_index(level=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">226</span>]:</span><br><span class="line">colname1          col1      col2</span><br><span class="line">colname2           red blue  red blue</span><br><span class="line">rowname2 rowname1</span><br><span class="line"><span class="number">1</span>        row1        <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">         row2        <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line"><span class="number">2</span>        row1        <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">         row2       <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br></pre></td></tr></table></figure></p><h3 id="使用DataFrame的列"><a href="#使用DataFrame的列" class="headerlink" title="使用DataFrame的列"></a>使用DataFrame的列</h3><ul><li><p><strong>set_index</strong><br><code>set_index</code>函数将一个或多个列转换为行索引，并创建一个新的DataFrame，默认情况下用于创建索引的列会被移除，可以通过设置<code>drop=False</code>保留：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">231</span>]: frame = DataFrame(&#123;<span class="string">'a'</span>:range(<span class="number">7</span>),<span class="string">'b'</span>:range(<span class="number">7</span>,<span class="number">0</span>,<span class="number">-1</span>),</span><br><span class="line">     ...:                 <span class="string">'c'</span>:[<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>],</span><br><span class="line">     ...:                 <span class="string">'d'</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">232</span>]: frame</span><br><span class="line">Out[<span class="number">232</span>]:</span><br><span class="line">   a  b    c  d</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span>  one  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span>  one  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span>  one  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">4</span>  two  <span class="number">0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">3</span>  two  <span class="number">1</span></span><br><span class="line"><span class="number">5</span>  <span class="number">5</span>  <span class="number">2</span>  two  <span class="number">2</span></span><br><span class="line"><span class="number">6</span>  <span class="number">6</span>  <span class="number">1</span>  two  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">233</span>]: frame.set_index([<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">Out[<span class="number">233</span>]:</span><br><span class="line">       a  b</span><br><span class="line">c   d</span><br><span class="line">one <span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span></span><br><span class="line">two <span class="number">0</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">5</span>  <span class="number">2</span></span><br><span class="line">    <span class="number">3</span>  <span class="number">6</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">234</span>]: frame.set_index([<span class="string">'c'</span>,<span class="string">'d'</span>],drop=<span class="keyword">False</span>)</span><br><span class="line">Out[<span class="number">234</span>]:</span><br><span class="line">       a  b    c  d</span><br><span class="line">c   d</span><br><span class="line">one <span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span>  one  <span class="number">0</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span>  one  <span class="number">1</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span>  one  <span class="number">2</span></span><br><span class="line">two <span class="number">0</span>  <span class="number">3</span>  <span class="number">4</span>  two  <span class="number">0</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">4</span>  <span class="number">3</span>  two  <span class="number">1</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">5</span>  <span class="number">2</span>  two  <span class="number">2</span></span><br><span class="line">    <span class="number">3</span>  <span class="number">6</span>  <span class="number">1</span>  two  <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>reset_index</strong><br><code>reset_index</code>将层次化索引的级别转移到列里面，和<code>set_index</code>相反:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">236</span>]: frame2</span><br><span class="line">Out[<span class="number">236</span>]:</span><br><span class="line">       a  b</span><br><span class="line">c   d</span><br><span class="line">one <span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span></span><br><span class="line">two <span class="number">0</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">    <span class="number">1</span>  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>  <span class="number">5</span>  <span class="number">2</span></span><br><span class="line">    <span class="number">3</span>  <span class="number">6</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">237</span>]: frame2.reset_index()</span><br><span class="line">Out[<span class="number">237</span>]:</span><br><span class="line">     c  d  a  b</span><br><span class="line"><span class="number">0</span>  one  <span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  one  <span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line"><span class="number">2</span>  one  <span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  two  <span class="number">0</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  two  <span class="number">1</span>  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line"><span class="number">5</span>  two  <span class="number">2</span>  <span class="number">5</span>  <span class="number">2</span></span><br><span class="line"><span class="number">6</span>  two  <span class="number">3</span>  <span class="number">6</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="整数索引"><a href="#整数索引" class="headerlink" title="整数索引"></a>整数索引</h2><p>当一个pandas对象含有类似0、1、2的索引时，很难推断出需要的是基于标签或位置的索引，为了保证良好的一致性，如果轴索引含有索引器，那么根据整数进行数据选取的操作将总是面向标签的；如果需要可靠地、不考虑索引类型的、基于位置的索引，可以使用<code>loc</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">271</span>]: obj = Series(np.arange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">272</span>]: obj.loc[:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">272</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">273</span>]: frame = DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index=[<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">274</span>]: frame.loc[<span class="number">0</span>,:]</span><br><span class="line">Out[<span class="number">274</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">3</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">275</span>]: frame.loc[:,<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">275</span>]:</span><br><span class="line"><span class="number">2</span>    <span class="number">0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">3</span></span><br><span class="line"><span class="number">1</span>    <span class="number">6</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: int32</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      pandas入门主题的最后一点内容，关于层次化索引和整数索引及面板数据
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(三)</title>
    <link href="http://coldjune.com/2018/03/20/pandas%E5%85%A5%E9%97%A8-%E4%B8%89/"/>
    <id>http://coldjune.com/2018/03/20/pandas入门-三/</id>
    <published>2018-03-20T01:14:48.000Z</published>
    <updated>2018-03-26T01:33:24.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h2><p>pandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。</p><ul><li>约简方法的选项</li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">axis</td><td style="text-align:center">约简的轴。DataFrame的行用0，列用1</td></tr><tr><td style="text-align:center">skipna</td><td style="text-align:center">排除缺失值，默认值为True</td></tr><tr><td style="text-align:center">level</td><td style="text-align:center">如果轴是层次化索引的(即MultiIndex)，则根据level分组约简</td></tr></tbody></table><ul><li>描述和汇总统计</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">非NA值的数量</td></tr><tr><td style="text-align:center">describe</td><td style="text-align:center">针对Series或各DataFrame列计算汇总统计</td></tr><tr><td style="text-align:center">min、max</td><td style="text-align:center">计算最小值和最大值</td></tr><tr><td style="text-align:center">argmin、argmax</td><td style="text-align:center">计算能够获取到最小值和最大值的索引位置(整数)</td></tr><tr><td style="text-align:center">idxmin、idmax</td><td style="text-align:center">计算能够获取到最小值和最大值的索引值</td></tr><tr><td style="text-align:center">quantile</td><td style="text-align:center">计算样本的分位数(0到1)</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">值的总和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">值的平均值</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">指的算术中位数</td></tr><tr><td style="text-align:center">mad</td><td style="text-align:center">根据平均值计算平均绝对离差</td></tr><tr><td style="text-align:center">var</td><td style="text-align:center">样本值的方差</td></tr><tr><td style="text-align:center">std</td><td style="text-align:center">样本值的标准差</td></tr><tr><td style="text-align:center">skew</td><td style="text-align:center">样本值的偏度(三阶矩)</td></tr><tr><td style="text-align:center">kurt</td><td style="text-align:center">样本值的峰度(四阶矩)</td></tr><tr><td style="text-align:center">cumsum</td><td style="text-align:center">样本值的累计和</td></tr><tr><td style="text-align:center">cummin、cummax</td><td style="text-align:center">样本值的累计最小值和累计最大值</td></tr><tr><td style="text-align:center">cumprod</td><td style="text-align:center">样本值的累计积</td></tr><tr><td style="text-align:center">diff</td><td style="text-align:center">计算一阶差分(对时间序列有用)_</td></tr><tr><td style="text-align:center">pct_change</td><td style="text-align:center">计算百分数变化</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df = DataFrame([[<span class="number">1</span>,np.nan],[<span class="number">2</span>,<span class="number">3</span>],[np.nan,np.nan],[<span class="number">4</span>,<span class="number">5</span>]],</span><br><span class="line">    ...:                 index=list(<span class="string">'abcd'</span>),</span><br><span class="line">    ...:                 columns=[<span class="string">'one'</span>,<span class="string">'two'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: df</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">   one  two</span><br><span class="line">a  <span class="number">1.0</span>  NaN</span><br><span class="line">b  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line">c  NaN  NaN</span><br><span class="line">d  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: df.sum()</span><br><span class="line">Out[<span class="number">35</span>]:</span><br><span class="line">one    <span class="number">7.0</span></span><br><span class="line">two    <span class="number">8.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: df.sum(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">5.0</span></span><br><span class="line">c    NaN</span><br><span class="line">d    <span class="number">9.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: df.mean(axis=<span class="number">1</span>,skipna=<span class="keyword">False</span>)</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">a    NaN</span><br><span class="line">b    <span class="number">2.5</span></span><br><span class="line">c    NaN</span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: df.idxmax()</span><br><span class="line">Out[<span class="number">38</span>]:</span><br><span class="line">one    d</span><br><span class="line">two    d</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: df.cumsum()</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line">   one  two</span><br><span class="line">a  <span class="number">1.0</span>  NaN</span><br><span class="line">b  <span class="number">3.0</span>  <span class="number">3.0</span></span><br><span class="line">c  NaN  NaN</span><br><span class="line">d  <span class="number">7.0</span>  <span class="number">8.0</span></span><br></pre></td></tr></table></figure><p><code>describe</code>用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: df.describe()</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">            one       two</span><br><span class="line">count  <span class="number">3.000000</span>  <span class="number">2.000000</span></span><br><span class="line">mean   <span class="number">2.333333</span>  <span class="number">4.000000</span></span><br><span class="line">std    <span class="number">1.527525</span>  <span class="number">1.414214</span></span><br><span class="line">min    <span class="number">1.000000</span>  <span class="number">3.000000</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1.500000</span>  <span class="number">3.500000</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">2.000000</span>  <span class="number">4.000000</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">3.000000</span>  <span class="number">4.500000</span></span><br><span class="line">max    <span class="number">4.000000</span>  <span class="number">5.000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: obj =Series(list(<span class="string">'aabc'</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: obj.describe()</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">count     <span class="number">16</span></span><br><span class="line">unique     <span class="number">3</span></span><br><span class="line">top        a</span><br><span class="line">freq       <span class="number">8</span></span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><h3 id="相关系数和协方差"><a href="#相关系数和协方差" class="headerlink" title="相关系数和协方差"></a>相关系数和协方差</h3><p>Series的<code>corr</code>方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用<code>cov</code>计算协方差：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: obj = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=list(<span class="string">'abcd'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: obj2 = Series([<span class="number">1</span>,np.nan,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],index=list(<span class="string">'acdse'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: obj.corr(obj2)</span><br><span class="line">Out[<span class="number">48</span>]: <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: obj.cov(obj2)</span><br><span class="line">Out[<span class="number">49</span>]: <span class="number">6.0</span></span><br></pre></td></tr></table></figure></p><p>DataFrame的<code>corr</code>和<code>cov</code>方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">60</span>]: df = DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">    ...:                 index=list(<span class="string">'abcd'</span>),</span><br><span class="line">    ...:                 columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: df2 = DataFrame(np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">    ...:                 index=list(<span class="string">'abcde'</span>),</span><br><span class="line">    ...:                 columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>,<span class="string">'col5'</span>])</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: df</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">b     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">c     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: df2</span><br><span class="line">Out[<span class="number">63</span>]:</span><br><span class="line">   col1  col2  col3  col4  col5</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">b     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span></span><br><span class="line">c    <span class="number">10</span>    <span class="number">11</span>    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span></span><br><span class="line">d    <span class="number">15</span>    <span class="number">16</span>    <span class="number">17</span>    <span class="number">18</span>    <span class="number">19</span></span><br><span class="line">e    <span class="number">20</span>    <span class="number">21</span>    <span class="number">22</span>    <span class="number">23</span>    <span class="number">24</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: df.corr()</span><br><span class="line">Out[<span class="number">64</span>]:</span><br><span class="line">      col1  col2  col3  col4</span><br><span class="line">col1   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span></span><br><span class="line">col2   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span></span><br><span class="line">col3   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span></span><br><span class="line">col4   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span>   <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: df.cov()</span><br><span class="line">Out[<span class="number">65</span>]:</span><br><span class="line">           col1       col2       col3       col4</span><br><span class="line">col1  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span></span><br><span class="line">col2  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span></span><br><span class="line">col3  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span></span><br><span class="line">col4  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span>  <span class="number">26.666667</span></span><br></pre></td></tr></table></figure></p><p>利用DataFrame的<code>corrwith</code>方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: df.corrwith(df2)</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">col1    <span class="number">1.0</span></span><br><span class="line">col2    <span class="number">1.0</span></span><br><span class="line">col3    <span class="number">1.0</span></span><br><span class="line">col4    <span class="number">1.0</span></span><br><span class="line">col5    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: df.corrwith(df2.col1)</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">col1    <span class="number">1.0</span></span><br><span class="line">col2    <span class="number">1.0</span></span><br><span class="line">col3    <span class="number">1.0</span></span><br><span class="line">col4    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>###唯一值、值计数以及成员资格</p><ul><li>唯一值、值计数、成员资格方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">isin</td><td style="text-align:center">计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">计算Series中的唯一值数组，按发现顺序返回</td></tr><tr><td style="text-align:center">value_counts</td><td style="text-align:center">返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列</td></tr></tbody></table><p><code>unique</code>可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(<code>unique().sort()</code>)。<code>value_counts</code>用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。<code>value_counts</code>是一个顶级pandas方法，可以用于任何数组或序列；<code>isin</code>用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: obj = Series(list(<span class="string">'abbddc'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: sor  = obj.unique()</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: sor</span><br><span class="line">Out[<span class="number">80</span>]: array([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: sor.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: sor</span><br><span class="line">Out[<span class="number">82</span>]: array([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: obj.value_counts()</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">c    <span class="number">1</span></span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: pd.value_counts(obj.values, sort=<span class="keyword">False</span>)</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: mask = obj.isin([<span class="string">'a'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: mask</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">5</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: obj[mask]</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">5</span>    c</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p><p>可以将<code>pandas.value_counts</code>传递给DataFrame的<code>aplly</code>函数得到DataFrame中多个相关列的柱状图：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: data = DataFrame(&#123;<span class="string">'Q1'</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    ...:                    <span class="string">'Q2'</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">    ...:                     <span class="string">'Q3'</span>:[<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: data</span><br><span class="line">Out[<span class="number">90</span>]:</span><br><span class="line">   Q1  Q2  Q3</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">4</span></span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>   <span class="number">3</span>   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">4</span>   <span class="number">4</span></span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>   <span class="number">1</span>   <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: result = data.apply(pd.value_counts).fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: result</span><br><span class="line">Out[<span class="number">92</span>]:</span><br><span class="line">    Q1   Q2   Q3</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.0</span>  <span class="number">2.0</span>  <span class="number">0.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">0.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></table></figure></p><h2 id="处理缺失数据"><a href="#处理缺失数据" class="headerlink" title="处理缺失数据"></a>处理缺失数据</h2><p>缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理</p><ul><li>NA处理方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">dropna</td><td style="text-align:center">根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度</td></tr><tr><td style="text-align:center">fillna</td><td style="text-align:center">用指定值或插值方法(如ffill或bfill)填充缺失数据</td></tr><tr><td style="text-align:center">isnull</td><td style="text-align:center">返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样</td></tr><tr><td style="text-align:center">notnull</td><td style="text-align:center">isnull的否定式</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">99</span>]: obj = Series([<span class="number">1</span>,np.nan,<span class="number">2</span>,np.nan,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: obj.isnull()</span><br><span class="line">Out[<span class="number">100</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: obj[<span class="number">0</span>]=<span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: obj.isnull()</span><br><span class="line">Out[<span class="number">102</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h3 id="滤除缺失数据"><a href="#滤除缺失数据" class="headerlink" title="滤除缺失数据"></a>滤除缺失数据</h3><p>对于Series，<code>dropna</code>返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">104</span>]: obj</span><br><span class="line">Out[<span class="number">104</span>]:</span><br><span class="line"><span class="number">0</span>    NaN</span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: obj.dropna()</span><br><span class="line">Out[<span class="number">105</span>]:</span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: obj[obj.notnull()]</span><br><span class="line">Out[<span class="number">106</span>]:</span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame对象，<code>dropna</code>默认丢弃任何含有缺失值的行，传入<code>how=&#39;all&#39;</code>将只丢弃全为NA的那些行，要丢弃列需要传入<code>axis=1</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">108</span>]: data = DataFrame([[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: data</span><br><span class="line">Out[<span class="number">109</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: data.dropna()</span><br><span class="line">Out[<span class="number">110</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: data.dropna(how=<span class="string">'all'</span>)</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: data[<span class="number">3</span>]=np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: data</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  NaN  NaN NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">2.0</span>  <span class="number">3.0</span> NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: data.dropna(axis=<span class="number">1</span>,how=<span class="string">'all'</span>)</span><br><span class="line">Out[<span class="number">114</span>]:</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  NaN  NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN  NaN</span><br><span class="line"><span class="number">3</span>  NaN  <span class="number">2.0</span>  <span class="number">3.0</span></span><br></pre></td></tr></table></figure></p><p><code>thresh</code>参数移除非NA个数小于设定值的行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">123</span>]: df = DataFrame(np.random.randn(<span class="number">7</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: df.loc[:<span class="number">3</span>,<span class="number">1</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: df.loc[:<span class="number">2</span>,<span class="number">2</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: df.dropna(thresh=<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">126</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.620445</span>       NaN <span class="number">-0.379638</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.642811</span>  <span class="number">0.033634</span>  <span class="number">0.700009</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.510774</span>  <span class="number">1.458027</span>  <span class="number">1.247687</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.614596</span> <span class="number">-1.986715</span> <span class="number">-0.378179</span></span><br></pre></td></tr></table></figure></p><h3 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h3><p><code>fillna</code>方法是填充缺失数据的主要函数。通过一个常数调用<code>fillna</code>将会将缺失值替换为那个常数值；通过字典调用<code>fillna</code>可以实现对不同的列填充不同的值；<code>fillna</code>默认会返回新对象，通过设置<code>inplace=True</code>可以对现有对象进行就地修改，对<code>reindex</code>有效的插值方法也可用于<code>fillna</code>:</p><ul><li>fillna函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">用于填充缺失值的标量值或字典对象</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">插值方式。如果函数调用时未指定其他参数的话，默认为“ffill”</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">待填充的轴，默认axis=0</td></tr><tr><td style="text-align:center">inplace</td><td style="text-align:center">修改调用者对象而不产生副本</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">(对于前向和后向填充)可以连续填充的最大数量</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">127</span>]: df</span><br><span class="line">Out[<span class="number">127</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.293799</span>       NaN       NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">0.728953</span>       NaN       NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">0.573023</span>       NaN       NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">0.620445</span>       NaN <span class="number">-0.379638</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.642811</span>  <span class="number">0.033634</span>  <span class="number">0.700009</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.510774</span>  <span class="number">1.458027</span>  <span class="number">1.247687</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.614596</span> <span class="number">-1.986715</span> <span class="number">-0.378179</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: df.fillna(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">128</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.293799</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.728953</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.573023</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.620445</span>  <span class="number">0.000000</span> <span class="number">-0.379638</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.642811</span>  <span class="number">0.033634</span>  <span class="number">0.700009</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.510774</span>  <span class="number">1.458027</span>  <span class="number">1.247687</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.614596</span> <span class="number">-1.986715</span> <span class="number">-0.378179</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: df.fillna(&#123;<span class="number">1</span>:<span class="number">0.5</span>, <span class="number">3</span>:<span class="number">-1</span>&#125;)</span><br><span class="line">Out[<span class="number">129</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.293799</span>  <span class="number">0.500000</span>       NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">0.728953</span>  <span class="number">0.500000</span>       NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">0.573023</span>  <span class="number">0.500000</span>       NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">0.620445</span>  <span class="number">0.500000</span> <span class="number">-0.379638</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.642811</span>  <span class="number">0.033634</span>  <span class="number">0.700009</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.510774</span>  <span class="number">1.458027</span>  <span class="number">1.247687</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.614596</span> <span class="number">-1.986715</span> <span class="number">-0.378179</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: _  = df.fillna(<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">131</span>]: df</span><br><span class="line">Out[<span class="number">131</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.293799</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.728953</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.573023</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.620445</span>  <span class="number">0.000000</span> <span class="number">-0.379638</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.642811</span>  <span class="number">0.033634</span>  <span class="number">0.700009</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.510774</span>  <span class="number">1.458027</span>  <span class="number">1.247687</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.614596</span> <span class="number">-1.986715</span> <span class="number">-0.378179</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: df = DataFrame(np.random.randn(<span class="number">7</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: df.loc[<span class="number">3</span>:,<span class="number">1</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: df.loc[<span class="number">2</span>:,<span class="number">2</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: df</span><br><span class="line">Out[<span class="number">141</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1.741073</span> <span class="number">-0.993316</span> <span class="number">-1.030055</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.139948</span> <span class="number">-1.446029</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.373251</span>  <span class="number">0.505183</span>       NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">1.179879</span>       NaN       NaN</span><br><span class="line"><span class="number">4</span>  <span class="number">0.764752</span>       NaN       NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">1.405856</span>       NaN       NaN</span><br><span class="line"><span class="number">6</span> <span class="number">-1.053222</span>       NaN       NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: df.fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line">Out[<span class="number">142</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1.741073</span> <span class="number">-0.993316</span> <span class="number">-1.030055</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.139948</span> <span class="number">-1.446029</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.373251</span>  <span class="number">0.505183</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.179879</span>  <span class="number">0.505183</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.764752</span>  <span class="number">0.505183</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1.405856</span>  <span class="number">0.505183</span>  <span class="number">0.797856</span></span><br><span class="line"><span class="number">6</span> <span class="number">-1.053222</span>  <span class="number">0.505183</span>  <span class="number">0.797856</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      更高级的数学及数据处理方法
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(二)</title>
    <link href="http://coldjune.com/2018/03/19/pandas%E5%85%A5%E9%97%A8-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/03/19/pandas入门-二/</id>
    <published>2018-03-19T08:51:47.000Z</published>
    <updated>2018-03-26T01:33:49.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h3><ul><li>reindex的(插值)method选项</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">fffill或pad</td><td style="text-align:center">前向填充(或搬运)值</td></tr><tr><td style="text-align:center">bfill或backfill</td><td style="text-align:center">后向填充(或搬运)值</td></tr></tbody></table><ul><li>reindex函数的参数</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">index</td><td style="text-align:center">用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">插值(填充)方式</td></tr><tr><td style="text-align:center">fill_value</td><td style="text-align:center">再重新索引的过程中，需要引入缺失值时使用的替代值</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">前向或后向填充时的最大填充量</td></tr><tr><td style="text-align:center">level</td><td style="text-align:center">在MultiIndex的指定级别上匹配简单索引，否则选取其子集</td></tr><tr><td style="text-align:center">copy</td><td style="text-align:center">默认为True，无论如何都复制；如果为False，则新旧相等就不复制</td></tr></tbody></table><p>pandas对象的<code>reindex</code>方法用于创建一个适应新索引的新对象，<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。<code>method</code>选项可以在重新索引时做一些插值处理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">86</span>]: obj = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: obj</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: obj2 = obj.reindex([<span class="string">'q'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'r'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: obj2</span><br><span class="line">Out[<span class="number">89</span>]:</span><br><span class="line">q   NaN</span><br><span class="line">w   NaN</span><br><span class="line">e   NaN</span><br><span class="line">r   NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: obj2 = obj.reindex([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: obj2</span><br><span class="line">Out[<span class="number">91</span>]:</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">2.0</span></span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">d    <span class="number">4.0</span></span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: obj2 = obj.reindex([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>],fill_value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: obj2</span><br><span class="line">Out[<span class="number">95</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">e    <span class="number">0</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: obj3 = obj.reindex([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],method=<span class="string">'ffill'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: obj3</span><br><span class="line">Out[<span class="number">99</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">e    <span class="number">4</span></span><br><span class="line">f    <span class="number">4</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame,<code>reindex</code>可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用<code>columns</code>关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">105</span>]: frame = DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>)),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: frame2 = frame.reindex([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: frame2</span><br><span class="line">Out[<span class="number">107</span>]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">a   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">b   <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">c   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">d   NaN   NaN   NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: frame.reindex(columns=[<span class="string">'col_a'</span>,<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>])</span><br><span class="line">Out[<span class="number">108</span>]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a    NaN     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">b    NaN     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">c    NaN     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: frame.reindex(index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],method=<span class="string">'ffill'</span>,columns=[<span class="string">'col_a'</span>,<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>])</span><br><span class="line">Out[<span class="number">109</span>]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a      <span class="number">2</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">b      <span class="number">5</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span></span><br><span class="line">c      <span class="number">8</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line">d      <span class="number">8</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>利用ix的标签索引功能重新索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">111</span>]: frame.ix[[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],[<span class="string">'col_a'</span>,<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>]]</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">   col_a  col1  col2  col3</span><br><span class="line">a    NaN   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">b    NaN   <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">c    NaN   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">d    NaN   NaN   NaN   NaN</span><br></pre></td></tr></table></figure></p><h3 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h3><p>使用<code>drop</code>方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">112</span>]: obj = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: obj.drop(<span class="string">'a'</span>)</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: obj.drop([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">Out[<span class="number">114</span>]:</span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: frame = DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>)),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: frame.drop([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">Out[<span class="number">116</span>]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">c     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: frame.drop([<span class="string">'col1'</span>,<span class="string">'col2'</span>],axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">117</span>]:</span><br><span class="line">   col3</span><br><span class="line">a     <span class="number">2</span></span><br><span class="line">b     <span class="number">5</span></span><br><span class="line">c     <span class="number">8</span></span><br></pre></td></tr></table></figure></p><h3 id="索引、选取和过滤"><a href="#索引、选取和过滤" class="headerlink" title="索引、选取和过滤"></a>索引、选取和过滤</h3><p>Series索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 <strong>末端时包含的(封闭)</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: obj = Series(np.arange(<span class="number">4</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: obj</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: obj[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: obj[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: obj[<span class="string">'c'</span>:<span class="string">'d'</span>]</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: obj[[<span class="string">'a'</span>,<span class="string">'d'</span>]]</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: obj[<span class="string">'b'</span>:<span class="string">'c'</span>]=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: obj</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c    <span class="number">5</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: data = DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),</span><br><span class="line">    ...:                 index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],</span><br><span class="line">    ...:                 columns=[<span class="string">'col1'</span>,<span class="string">'col2'</span>,<span class="string">'col3'</span>,<span class="string">'col4'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: data</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">b     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">c     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: data[<span class="string">'col1'</span>]</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">a     <span class="number">0</span></span><br><span class="line">b     <span class="number">4</span></span><br><span class="line">c     <span class="number">8</span></span><br><span class="line">d    <span class="number">12</span></span><br><span class="line">Name: col1, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: data[[<span class="string">'col1'</span>,<span class="string">'col4'</span>]]</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">   col1  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">3</span></span><br><span class="line">b     <span class="number">4</span>     <span class="number">7</span></span><br><span class="line">c     <span class="number">8</span>    <span class="number">11</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: data[:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">b     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: data[data[<span class="string">'col3'</span>]&gt;<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">b     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">c     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: data&lt;<span class="number">5</span></span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">    col1   col2   col3   col4</span><br><span class="line">a   <span class="keyword">True</span>   <span class="keyword">True</span>   <span class="keyword">True</span>   <span class="keyword">True</span></span><br><span class="line">b   <span class="keyword">True</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">c  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">d  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: data[data&lt;<span class="number">5</span>] = <span class="number">-5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: data</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">   col1  col2  col3  col4</span><br><span class="line">a    <span class="number">-5</span>    <span class="number">-5</span>    <span class="number">-5</span>    <span class="number">-5</span></span><br><span class="line">b    <span class="number">-5</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span></span><br><span class="line">c     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br></pre></td></tr></table></figure></p><p>为了在DataFrame的行上进行标签索引，可以通过<code>loc</code>进行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: data.loc[<span class="string">'a'</span>,[<span class="string">'col1'</span>,<span class="string">'col2'</span>]]</span><br><span class="line">Out[<span class="number">48</span>]:</span><br><span class="line">col1   <span class="number">-5</span></span><br><span class="line">col2   <span class="number">-5</span></span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: data.loc[[<span class="string">'a'</span>,<span class="string">'d'</span>],[<span class="string">'col1'</span>,<span class="string">'col3'</span>]]</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">   col1  col3</span><br><span class="line">a    <span class="number">-5</span>    <span class="number">-5</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">14</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: data.loc[data.col3&gt;<span class="number">5</span>,:<span class="string">'col3'</span>]</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">   col1  col2  col3</span><br><span class="line">b    <span class="number">-5</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">c     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span></span><br><span class="line">d    <span class="number">12</span>    <span class="number">13</span>    <span class="number">14</span></span><br></pre></td></tr></table></figure></p><h3 id="算术运算和数据对齐"><a href="#算术运算和数据对齐" class="headerlink" title="算术运算和数据对齐"></a>算术运算和数据对齐</h3><p>pandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: s1 = Series(np.arange(<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: s2 = Series(np.arange(<span class="number">3</span>,<span class="number">9</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s1</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s2</span><br><span class="line">Out[<span class="number">58</span>]:</span><br><span class="line">a    <span class="number">3</span></span><br><span class="line">b    <span class="number">4</span></span><br><span class="line">c    <span class="number">5</span></span><br><span class="line">d    <span class="number">6</span></span><br><span class="line">e    <span class="number">7</span></span><br><span class="line">f    <span class="number">8</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: s1+s2</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">a    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">5.0</span></span><br><span class="line">c    <span class="number">7.0</span></span><br><span class="line">d    NaN</span><br><span class="line">e    NaN</span><br><span class="line">f    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">65</span>]: df1 = DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),columns=list(<span class="string">'abc'</span>),</span><br><span class="line">    ...:                 index=[<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: df2 = DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),columns=list(<span class="string">'abcd'</span>),</span><br><span class="line">    ...:                 index=[<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>,<span class="string">'row4'</span>])</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: df1</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">      a  b  c</span><br><span class="line">row1  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">row2  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">row3  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: df2</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">row2   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">row3   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">row4  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: df1+df2</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">         a     b     c   d</span><br><span class="line">row1   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span> NaN</span><br><span class="line">row2   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span> NaN</span><br><span class="line">row3  <span class="number">14.0</span>  <span class="number">16.0</span>  <span class="number">18.0</span> NaN</span><br><span class="line">row4   NaN   NaN   NaN NaN</span><br></pre></td></tr></table></figure></p><h4 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h4><ul><li>灵活的算术方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">add</td><td style="text-align:center">用于加法(+)的方法</td></tr><tr><td style="text-align:center">sub</td><td style="text-align:center">用于减法(-)的方法</td></tr><tr><td style="text-align:center">div</td><td style="text-align:center">用于除法(/)的方法</td></tr><tr><td style="text-align:center">mul</td><td style="text-align:center">用于乘法(*)的方法</td></tr></tbody></table><p>对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: df2.add(df1,fill_value=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">         a     b     c     d</span><br><span class="line">row1   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">3.0</span></span><br><span class="line">row2   <span class="number">7.0</span>   <span class="number">9.0</span>  <span class="number">11.0</span>   <span class="number">7.0</span></span><br><span class="line">row3  <span class="number">14.0</span>  <span class="number">16.0</span>  <span class="number">18.0</span>  <span class="number">11.0</span></span><br><span class="line">row4  <span class="number">12.0</span>  <span class="number">13.0</span>  <span class="number">14.0</span>  <span class="number">15.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: df1.reindex(columns=df2.columns,fill_value=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">row1  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span></span><br><span class="line">row2  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">0</span></span><br><span class="line">row3  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h4 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h4><p>默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">94</span>]: s1 = df2.loc[<span class="string">'row1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: df2</span><br><span class="line">Out[<span class="number">95</span>]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">row2   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">row3   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">row4  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: s1</span><br><span class="line">Out[<span class="number">96</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">Name: row1, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: df2-s1</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line">       a   b   c   d</span><br><span class="line">row1   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span></span><br><span class="line">row2   <span class="number">4</span>   <span class="number">4</span>   <span class="number">4</span>   <span class="number">4</span></span><br><span class="line">row3   <span class="number">8</span>   <span class="number">8</span>   <span class="number">8</span>   <span class="number">8</span></span><br><span class="line">row4  <span class="number">12</span>  <span class="number">12</span>  <span class="number">12</span>  <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: s2 = Series(range(<span class="number">3</span>),index=list(<span class="string">'abf'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: df2-s2</span><br><span class="line">Out[<span class="number">99</span>]:</span><br><span class="line">         a     b   c   d   f</span><br><span class="line">row1   <span class="number">0.0</span>   <span class="number">0.0</span> NaN NaN NaN</span><br><span class="line">row2   <span class="number">4.0</span>   <span class="number">4.0</span> NaN NaN NaN</span><br><span class="line">row3   <span class="number">8.0</span>   <span class="number">8.0</span> NaN NaN NaN</span><br><span class="line">row4  <span class="number">12.0</span>  <span class="number">12.0</span> NaN NaN NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: s3  = df2[<span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">101</span>]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">row1  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">row2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">row3  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">row4  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h3><p>NumPy的<a href="http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0">ufuncs</a>(元素级数组方法)也可用于操作pandas对象:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">102</span>]: frame = DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">3</span>),columns=list(<span class="string">'abc'</span>),</span><br><span class="line">     ...:                   index=[<span class="string">'row1'</span>,<span class="string">'row2'</span>,<span class="string">'row3'</span>,<span class="string">'row4'</span>])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: frame</span><br><span class="line">Out[<span class="number">103</span>]:</span><br><span class="line">             a         b         c</span><br><span class="line">row1  <span class="number">0.755289</span>  <span class="number">0.886977</span> <span class="number">-0.984527</span></span><br><span class="line">row2  <span class="number">0.460170</span> <span class="number">-0.514393</span>  <span class="number">0.180462</span></span><br><span class="line">row3  <span class="number">0.828386</span> <span class="number">-0.545317</span> <span class="number">-1.176786</span></span><br><span class="line">row4  <span class="number">0.860822</span> <span class="number">-1.659938</span>  <span class="number">0.952070</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: np.abs(frame)</span><br><span class="line">Out[<span class="number">104</span>]:</span><br><span class="line">             a         b         c</span><br><span class="line">row1  <span class="number">0.755289</span>  <span class="number">0.886977</span>  <span class="number">0.984527</span></span><br><span class="line">row2  <span class="number">0.460170</span>  <span class="number">0.514393</span>  <span class="number">0.180462</span></span><br><span class="line">row3  <span class="number">0.828386</span>  <span class="number">0.545317</span>  <span class="number">1.176786</span></span><br><span class="line">row4  <span class="number">0.860822</span>  <span class="number">1.659938</span>  <span class="number">0.952070</span></span><br></pre></td></tr></table></figure></p><p><code>apply</code>方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用<code>apply</code>方法；除标量外，传递给<code>apply</code>的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用<code>applymap</code>得到frame中各个浮点值的格式化字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">112</span>]: f = <span class="keyword">lambda</span> x:x.max() -x.min()</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: frame.apply(f)</span><br><span class="line">Out[<span class="number">113</span>]:</span><br><span class="line">a    <span class="number">0.400653</span></span><br><span class="line">b    <span class="number">2.546915</span></span><br><span class="line">c    <span class="number">2.128856</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">     ...:     <span class="keyword">return</span> Series([x.min(),x.max()],index=[<span class="string">'min'</span>,<span class="string">'max'</span>])</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: frame.apply(f)</span><br><span class="line">Out[<span class="number">115</span>]:</span><br><span class="line">            a         b         c</span><br><span class="line">min  <span class="number">0.460170</span> <span class="number">-1.659938</span> <span class="number">-1.176786</span></span><br><span class="line">max  <span class="number">0.860822</span>  <span class="number">0.886977</span>  <span class="number">0.952070</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: format = <span class="keyword">lambda</span> x: <span class="string">'%.2f'</span> % x</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: frame.applymap(format)</span><br><span class="line">Out[<span class="number">117</span>]:</span><br><span class="line">         a      b      c</span><br><span class="line">row1  <span class="number">0.76</span>   <span class="number">0.89</span>  <span class="number">-0.98</span></span><br><span class="line">row2  <span class="number">0.46</span>  <span class="number">-0.51</span>   <span class="number">0.18</span></span><br><span class="line">row3  <span class="number">0.83</span>  <span class="number">-0.55</span>  <span class="number">-1.18</span></span><br><span class="line">row4  <span class="number">0.86</span>  <span class="number">-1.66</span>   <span class="number">0.95</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: frame[<span class="string">'a'</span>].map(format)</span><br><span class="line">Out[<span class="number">118</span>]:</span><br><span class="line">row1    <span class="number">0.76</span></span><br><span class="line">row2    <span class="number">0.46</span></span><br><span class="line">row3    <span class="number">0.83</span></span><br><span class="line">row4    <span class="number">0.86</span></span><br><span class="line">Name: a, dtype: object</span><br></pre></td></tr></table></figure></p><h3 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>使用<code>sort_index</code>方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置<code>ascending=False</code>来降序排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">134</span>]: obj = Series(range(<span class="number">4</span>), index=list(<span class="string">'dabc'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: obj.sort_index()</span><br><span class="line">Out[<span class="number">135</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: frame = DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>,<span class="number">4</span>)),index=[<span class="string">'col2'</span>,<span class="string">'col1'</span>],</span><br><span class="line">     ...:                    columns=list(<span class="string">'badc'</span>))</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: frame.sort_index()</span><br><span class="line">Out[<span class="number">137</span>]:</span><br><span class="line">      b  a  d  c</span><br><span class="line">col1  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">col2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: frame.sort_index(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">138</span>]:</span><br><span class="line">      a  b  c  d</span><br><span class="line">col2  <span class="number">1</span>  <span class="number">0</span>  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">col1  <span class="number">5</span>  <span class="number">4</span>  <span class="number">7</span>  <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: frame.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</span><br><span class="line">Out[<span class="number">139</span>]:</span><br><span class="line">      d  c  b  a</span><br><span class="line">col2  <span class="number">2</span>  <span class="number">3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">col1  <span class="number">6</span>  <span class="number">7</span>  <span class="number">4</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p><code>sort_values</code>方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">144</span>]: obj.sort_values()</span><br><span class="line">Out[<span class="number">144</span>]:</span><br><span class="line"><span class="number">4</span>   <span class="number">-3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">150</span>]: frame  = DataFrame(&#123;<span class="string">'b'</span>:[<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>],<span class="string">'a'</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: frame</span><br><span class="line">Out[<span class="number">151</span>]:</span><br><span class="line">   a  b</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: frame.sort_values(by=<span class="string">'b'</span>)</span><br><span class="line">Out[<span class="number">152</span>]:</span><br><span class="line">   a  b</span><br><span class="line"><span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: frame.sort_values(by=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">Out[<span class="number">153</span>]:</span><br><span class="line">   a  b</span><br><span class="line"><span class="number">2</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure></p><h4 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h4><p>排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；<code>rank</code>是通过“为各组分配一个平均排名”的方式破坏平级关系<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><ul><li>排名用于破坏平级关系的method的选项</li></ul><table><thead><tr><th style="text-align:center">method</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">‘average’</td><td style="text-align:center">默认：在相等分组中，为各个值分配平均排名</td></tr><tr><td style="text-align:center">‘min’</td><td style="text-align:center">使用整个分组的最小排名</td></tr><tr><td style="text-align:center">‘max’</td><td style="text-align:center">使用整个分组的最大排名</td></tr><tr><td style="text-align:center">‘first’</td><td style="text-align:center">按值在原始数据中的出现顺序分配排名</td></tr></tbody></table><p>按降序进行排名使用<code>ascending=False</code>，其他的相似:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: obj = Series([<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: obj.rank()</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.5</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: obj.rank(method=<span class="string">'min'</span>)</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: obj.rank(method=<span class="string">'max'</span>)</span><br><span class="line">Out[<span class="number">12</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: obj.rank(method=<span class="string">'first'</span>)</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: obj = Series([<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: obj.rank()</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.5</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: obj.rank(method=<span class="string">'min'</span>)</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: obj.rank(method=<span class="string">'max'</span>)</span><br><span class="line">Out[<span class="number">12</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: obj.rank(method=<span class="string">'first'</span>)</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>DataFrame可以在行或列上计算排名:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: frame = DataFrame(&#123;<span class="string">'b'</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">-1</span>],<span class="string">'a'</span>:[<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>],<span class="string">'c'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: frame</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">-1</span>  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">-2</span> <span class="number">-1</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: frame.rank(axis=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">     a    b    c</span><br><span class="line"><span class="number">0</span>  <span class="number">3.0</span>  <span class="number">2.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: frame.rank(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line">     a    b    c</span><br><span class="line"><span class="number">0</span>  <span class="number">3.0</span>  <span class="number">1.5</span>  <span class="number">1.5</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  <span class="number">3.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span></span><br></pre></td></tr></table></figure></p><h3 id="带有重复值的轴索引"><a href="#带有重复值的轴索引" class="headerlink" title="带有重复值的轴索引"></a>带有重复值的轴索引</h3><p>带有重复索引值的Series和DataFrame可以使用<code>is_unique</code>属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: obj = Series(range(<span class="number">5</span>),index=list(<span class="string">'abbvd'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: obj</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">v    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: obj.index.is_unique</span><br><span class="line">Out[<span class="number">21</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: obj[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: obj[<span class="string">'b'</span>]</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">dtype: int32</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: df = DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: df</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line">a  <span class="number">2.139973</span>  <span class="number">0.102242</span>  <span class="number">0.366141</span></span><br><span class="line">a <span class="number">-0.999559</span>  <span class="number">0.324575</span> <span class="number">-0.808672</span></span><br><span class="line">b  <span class="number">1.121435</span>  <span class="number">1.508694</span>  <span class="number">1.151597</span></span><br><span class="line">c  <span class="number">0.610592</span>  <span class="number">1.623871</span> <span class="number">-1.331131</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: df.loc[<span class="string">'c'</span>]</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">0.610592</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.623871</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1.331131</span></span><br><span class="line">Name: c, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: df.loc[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line">a  <span class="number">2.139973</span>  <span class="number">0.102242</span>  <span class="number">0.366141</span></span><br><span class="line">a <span class="number">-0.999559</span>  <span class="number">0.324575</span> <span class="number">-0.808672</span></span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      主要记录操作Series和DataFrame中的数据的基本手段。后面将更深入地挖掘pandas在数据分析和处理方面的功能
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas入门(一)</title>
    <link href="http://coldjune.com/2018/03/19/pandas%E5%85%A5%E9%97%A8-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/19/pandas入门-一/</id>
    <published>2018-03-19T02:48:58.000Z</published>
    <updated>2018-03-26T01:33:06.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p><strong>Series</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过<code>index</code>参数指定索引来代替自动生成的索引:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: ser1 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: ser1</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: ser2 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: ser2</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: ser2[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: ser2[[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: ser2*<span class="number">2</span></span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">b    <span class="number">4</span></span><br><span class="line">c    <span class="number">4</span></span><br><span class="line">d    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: ser2[ser2&gt;=<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">2</span></span><br><span class="line">d    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="string">'a'</span> <span class="keyword">in</span> ser2</span><br><span class="line">Out[<span class="number">12</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="string">'g'</span> <span class="keyword">in</span> ser2</span><br><span class="line">Out[<span class="number">13</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用<code>NA</code>表示缺失数据,pandas的<code>isnull</code>和<code>notnull</code>函数可用于检测缺失数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: dics = Series(dic)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: dics</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: states = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: dicstates = Series(dic,index=states)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: dicstates</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">2.0</span></span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">d    NaN</span><br></pre></td></tr></table></figure></p><p><strong>Series在算数运算中会自动对齐不同索引的数据</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: dics</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: dicstates</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">2.0</span></span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">d    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: dics+dicstates</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">a    <span class="number">2.0</span></span><br><span class="line">b    <span class="number">4.0</span></span><br><span class="line">c    <span class="number">6.0</span></span><br><span class="line">d    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>Series本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: dics.name=<span class="string">'dics'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: dics.index.name=<span class="string">'letter'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: dics</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">letter</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">Name: dics, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: dics.index=[<span class="string">'z'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: dics</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">z    <span class="number">1</span></span><br><span class="line">x    <span class="number">2</span></span><br><span class="line">y    <span class="number">3</span></span><br><span class="line">Name: dics, dtype: int64</span><br></pre></td></tr></table></figure></p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><h3 id="构造DataFrame"><a href="#构造DataFrame" class="headerlink" title="构造DataFrame"></a>构造DataFrame</h3><ul><li>可以输入给DataFrame构造器的数据</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">二维ndarray</td><td style="text-align:center">数据矩阵，还可以传入行标和列标</td></tr><tr><td style="text-align:center">由数组、列标或元组组成的字典</td><td style="text-align:center">每个序列会变成DataFrame的一列，所有序列的长度必须相同</td></tr><tr><td style="text-align:center">NumPy的结构化/记录数组</td><td style="text-align:center">类似于“由数组组成的字典”</td></tr><tr><td style="text-align:center">由Series组成的字典</td><td style="text-align:center">每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引</td></tr><tr><td style="text-align:center">由字典组成的字典</td><td style="text-align:center">各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样</td></tr><tr><td style="text-align:center">字典或Series的列表</td><td style="text-align:center">各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标</td></tr><tr><td style="text-align:center">另一个DataFrame</td><td style="text-align:center">该DataFrame的索引将会被沿用，除非显式指定了其他索引</td></tr><tr><td style="text-align:center">NumPy的MaskedArray</td><td style="text-align:center">类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值</td></tr></tbody></table><p><strong>DataFrame</strong> 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。<br>构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: data =&#123;<span class="string">'state'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],</span><br><span class="line">    ...: <span class="string">'year'</span>:[<span class="number">2000</span>,<span class="number">2001</span>,<span class="number">2002</span>,<span class="number">2003</span>],</span><br><span class="line">    ...: <span class="string">'pop'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: frame = DataFrame(data)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: frame</span><br><span class="line">Out[<span class="number">32</span>]:</span><br><span class="line">   pop state  year</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span>     a  <span class="number">2000</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>     b  <span class="number">2001</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span>     c  <span class="number">2002</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span>     d  <span class="number">2003</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: DataFrame(data,columns=[<span class="string">'year'</span>,<span class="string">'pop'</span>,<span class="string">'state'</span>,<span class="string">'debt'</span>],index=[<span class="string">'i1'</span>,<span class="string">'i2'</span>,<span class="string">'i3'</span>,<span class="string">'i4'</span>])</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  NaN</span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b  NaN</span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  NaN</span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: frame.columns</span><br><span class="line">Out[<span class="number">35</span>]: Index([<span class="string">'pop'</span>, <span class="string">'state'</span>, <span class="string">'year'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure></p><p>可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其<code>name</code>属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: frame.state</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    c</span><br><span class="line"><span class="number">3</span>    d</span><br><span class="line">Name: state, dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: frame[<span class="string">'year'</span>]</span><br><span class="line">Out[<span class="number">41</span>]:</span><br><span class="line"><span class="number">0</span>    <span class="number">2000</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2001</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2002</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2003</span></span><br><span class="line">Name: year, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: frame.ix[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">42</span>]:</span><br><span class="line">pop         <span class="number">2</span></span><br><span class="line">state       b</span><br><span class="line">year     <span class="number">2001</span></span><br><span class="line">Name: <span class="number">1</span>, dtype: object</span><br></pre></td></tr></table></figure></p><p>列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字<code>del</code>可以删除列:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">49</span>]: frame2=DataFrame(data,columns=[<span class="string">'year'</span>,<span class="string">'pop'</span>,<span class="string">'state'</span>,<span class="string">'debt'</span>],index=[<span class="string">'i1'</span>,<span class="string">'i2'</span>,<span class="string">'i3'</span>,<span class="string">'i4'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: frame2</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  NaN</span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b  NaN</span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  NaN</span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: frame2[<span class="string">'debt'</span>]=np.arange(<span class="number">4.</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: frame2</span><br><span class="line">Out[<span class="number">52</span>]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a   <span class="number">0.0</span></span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b   <span class="number">1.0</span></span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c   <span class="number">2.0</span></span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d   <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: frame2=DataFrame(data,columns=[<span class="string">'year'</span>,<span class="string">'pop'</span>,<span class="string">'state'</span>,<span class="string">'debt'</span>],index=[<span class="string">'i1'</span>,<span class="string">'i2'</span>,<span class="string">'i3'</span>,<span class="string">'i4'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: frame2</span><br><span class="line">Out[<span class="number">54</span>]:</span><br><span class="line">    year  pop state debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  NaN</span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b  NaN</span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  NaN</span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: val = Series([<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>],index=[<span class="string">'i1'</span>,<span class="string">'i3'</span>,<span class="string">'i4'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: frame2[<span class="string">'debt'</span>]=val</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: frame2</span><br><span class="line">Out[<span class="number">57</span>]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  <span class="number">-1.0</span></span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b   NaN</span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  <span class="number">-2.0</span></span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  <span class="number">-3.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: frame2[<span class="string">'big'</span>]= frame2[<span class="string">'pop'</span>]&gt;=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: frame2</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">    year  pop state  debt    big</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  <span class="number">-1.0</span>  <span class="keyword">False</span></span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b   NaN  <span class="keyword">False</span></span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  <span class="number">-2.0</span>   <span class="keyword">True</span></span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  <span class="number">-3.0</span>   <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: <span class="keyword">del</span> frame2[<span class="string">'big'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: frame2</span><br><span class="line">Out[<span class="number">61</span>]:</span><br><span class="line">    year  pop state  debt</span><br><span class="line">i1  <span class="number">2000</span>    <span class="number">1</span>     a  <span class="number">-1.0</span></span><br><span class="line">i2  <span class="number">2001</span>    <span class="number">2</span>     b   NaN</span><br><span class="line">i3  <span class="number">2002</span>    <span class="number">3</span>     c  <span class="number">-2.0</span></span><br><span class="line">i4  <span class="number">2003</span>    <span class="number">4</span>     d  <span class="number">-3.0</span></span><br></pre></td></tr></table></figure></p><p>嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过<code>T</code>进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: pop = &#123;<span class="string">'out1'</span>:&#123;<span class="number">2002</span>:<span class="number">1.1</span>,<span class="number">2001</span>:<span class="number">1.2</span>&#125;,</span><br><span class="line">    ...: <span class="string">'out2'</span>:&#123;<span class="number">2001</span>:<span class="number">1.3</span>,<span class="number">2004</span>:<span class="number">1.4</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: frame3 = DataFrame(pop)</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: frame3</span><br><span class="line">Out[<span class="number">65</span>]:</span><br><span class="line">      out1  out2</span><br><span class="line"><span class="number">2001</span>   <span class="number">1.2</span>   <span class="number">1.3</span></span><br><span class="line"><span class="number">2002</span>   <span class="number">1.1</span>   NaN</span><br><span class="line"><span class="number">2004</span>   NaN   <span class="number">1.4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: frame3.T</span><br><span class="line">Out[<span class="number">66</span>]:</span><br><span class="line">      <span class="number">2001</span>  <span class="number">2002</span>  <span class="number">2004</span></span><br><span class="line">out1   <span class="number">1.2</span>   <span class="number">1.1</span>   NaN</span><br><span class="line">out2   <span class="number">1.3</span>   NaN   <span class="number">1.4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: DataFrame(pop,index=[<span class="number">2002</span>,<span class="number">2001</span>,<span class="number">2004</span>])</span><br><span class="line">Out[<span class="number">67</span>]:</span><br><span class="line">      out1  out2</span><br><span class="line"><span class="number">2002</span>   <span class="number">1.1</span>   NaN</span><br><span class="line"><span class="number">2001</span>   <span class="number">1.2</span>   <span class="number">1.3</span></span><br><span class="line"><span class="number">2004</span>   NaN   <span class="number">1.4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: sData = &#123;<span class="string">'out1'</span>:frame3[<span class="string">'out1'</span>][:<span class="number">-1</span>],</span><br><span class="line">    ...: <span class="string">'out2'</span>:frame3[<span class="string">'out2'</span>][:<span class="number">-1</span>]&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: DataFrame(sData)</span><br><span class="line">Out[<span class="number">69</span>]:</span><br><span class="line">      out1  out2</span><br><span class="line"><span class="number">2001</span>   <span class="number">1.2</span>   <span class="number">1.3</span></span><br><span class="line"><span class="number">2002</span>   <span class="number">1.1</span>   NaN</span><br></pre></td></tr></table></figure></p><p>设置了DataFrame的<code>index</code>和<code>columns</code>的<code>name</code>属性，这些信息将会被显示出来，<code>values</code>属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: frame3.index.name=<span class="string">'year'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: frame3.columns.name=<span class="string">'state'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: frame3</span><br><span class="line">Out[<span class="number">72</span>]:</span><br><span class="line">state  out1  out2</span><br><span class="line">year</span><br><span class="line"><span class="number">2001</span>    <span class="number">1.2</span>   <span class="number">1.3</span></span><br><span class="line"><span class="number">2002</span>    <span class="number">1.1</span>   NaN</span><br><span class="line"><span class="number">2004</span>    NaN   <span class="number">1.4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: frame3.values</span><br><span class="line">Out[<span class="number">73</span>]:</span><br><span class="line">array([[ <span class="number">1.2</span>,  <span class="number">1.3</span>],</span><br><span class="line">       [ <span class="number">1.1</span>,  nan],</span><br><span class="line">       [ nan,  <span class="number">1.4</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: frame2.values</span><br><span class="line">Out[<span class="number">74</span>]:</span><br><span class="line">array([[<span class="number">2000</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="number">-1.0</span>],</span><br><span class="line">       [<span class="number">2001</span>, <span class="number">2</span>, <span class="string">'b'</span>, nan],</span><br><span class="line">       [<span class="number">2002</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="number">-2.0</span>],</span><br><span class="line">       [<span class="number">2003</span>, <span class="number">4</span>, <span class="string">'d'</span>, <span class="number">-3.0</span>]], dtype=object)</span><br></pre></td></tr></table></figure></p><h3 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h3><p>pandas的索引对象负责管理轴标签和其他元数据。</p><ul><li>pandas中主要的Index对象</li></ul><table><thead><tr><th style="text-align:center">类</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Index</td><td style="text-align:center">最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组</td></tr><tr><td style="text-align:center">Int64Index</td><td style="text-align:center">针对整数的特殊Index</td></tr><tr><td style="text-align:center">MultiIndex</td><td style="text-align:center">“层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组</td></tr><tr><td style="text-align:center">DatetimeIndex</td><td style="text-align:center">存储纳秒级时间戳(用NumPy的datetime64类型表示)</td></tr><tr><td style="text-align:center">PeriodIndex</td><td style="text-align:center">针对Period数据(时间间隔)的特殊Index</td></tr></tbody></table><ul><li>Index的方法和属性</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">append</td><td style="text-align:center">连接另一个Index对象，产生一个新的Index</td></tr><tr><td style="text-align:center">diff</td><td style="text-align:center">计算差集，并得到一个Index</td></tr><tr><td style="text-align:center">intersection</td><td style="text-align:center">计算交集</td></tr><tr><td style="text-align:center">union</td><td style="text-align:center">计算并集</td></tr><tr><td style="text-align:center">isin</td><td style="text-align:center">计算一个指示各值是否都包含在参数集合中的布尔型数组</td></tr><tr><td style="text-align:center">delete</td><td style="text-align:center">删除索引i处的元素，并得到新的Index</td></tr><tr><td style="text-align:center">drop</td><td style="text-align:center">删除传入的值，并得到新的Index</td></tr><tr><td style="text-align:center">insert</td><td style="text-align:center">将元素插入到索引i处，并得到新的Index</td></tr><tr><td style="text-align:center">is_monotonic</td><td style="text-align:center">当各元素均大于等于前一个元素时，返回True</td></tr><tr><td style="text-align:center">is_unique</td><td style="text-align:center">当Index没有重复值时，返回True</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">计算Index中唯一值的数组</td></tr></tbody></table><p>构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 <strong>不可修改的</strong>，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: obj = Series(range(<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: index =obj.index</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: index</span><br><span class="line">Out[<span class="number">78</span>]: Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: index[:<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">79</span>]: Index([<span class="string">'a'</span>, <span class="string">'b'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: inde=pd.Index(np.arange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: obj2=Series([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],index=inde)</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: obj2.index <span class="keyword">is</span> inde</span><br><span class="line">Out[<span class="number">82</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: frame3</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">state  out1  out2</span><br><span class="line">year</span><br><span class="line"><span class="number">2001</span>    <span class="number">1.2</span>   <span class="number">1.3</span></span><br><span class="line"><span class="number">2002</span>    <span class="number">1.1</span>   NaN</span><br><span class="line"><span class="number">2004</span>    NaN   <span class="number">1.4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: <span class="string">'out1'</span> <span class="keyword">in</span> frame3.columns</span><br><span class="line">Out[<span class="number">84</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: <span class="number">2005</span> <span class="keyword">in</span> frame3.index</span><br><span class="line">Out[<span class="number">85</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      pandas含有使数据分析工作变得更快更简单的高级数据结构和操作工具。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="http://coldjune.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>numpy基础(二)</title>
    <link href="http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
    <id>http://coldjune.com/2018/03/17/numpy基础-二/</id>
    <published>2018-03-17T03:33:50.000Z</published>
    <updated>2018-03-26T01:32:48.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。</p><ul><li>一元ufunc</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">abs、fabs</td><td style="text-align:center">计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs</td></tr><tr><td style="text-align:center">sqrt</td><td style="text-align:center">计算各元素的平方根。相当于arr**0.5</td></tr><tr><td style="text-align:center">square</td><td style="text-align:center">计算各元素的平方。相当于arr**2</td></tr><tr><td style="text-align:center">exp</td><td style="text-align:center">计算各元素的指数e^x</td></tr><tr><td style="text-align:center">log、log10、log2、log1p</td><td style="text-align:center">分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)</td></tr><tr><td style="text-align:center">sign</td><td style="text-align:center">计算各元素的正负号:1(正数)、0(零)、-1(负数)</td></tr><tr><td style="text-align:center">ceil</td><td style="text-align:center">计算各元素的ceiling值，即大于等于该值的最小整数</td></tr><tr><td style="text-align:center">floor</td><td style="text-align:center">计算各元素的floor值，即小于等于该值的最大整数</td></tr><tr><td style="text-align:center">rint</td><td style="text-align:center">将各元素四舍五入到最接近的整数，保留dtype</td></tr><tr><td style="text-align:center">modf</td><td style="text-align:center">将数组的小数和整数部分以独立数组的形式返回</td></tr><tr><td style="text-align:center">isnan</td><td style="text-align:center">返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组</td></tr><tr><td style="text-align:center">isfinite、isinf</td><td style="text-align:center">分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组</td></tr><tr><td style="text-align:center">cos、cosh、sin、sinh、tan、tanh</td><td style="text-align:center">普通型和双曲型三角函数</td></tr><tr><td style="text-align:center">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td><td style="text-align:center">反三角函数</td></tr><tr><td style="text-align:center">logical_not</td><td style="text-align:center">计算各元素not x的真值。相当于-arr</td></tr></tbody></table><ul><li>二元ufunc</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">add</td><td style="text-align:center">将数组中对应的元素相加</td></tr><tr><td style="text-align:center">subtract</td><td style="text-align:center">从第一个数组中减去第二个数组中的元素</td></tr><tr><td style="text-align:center">multiply</td><td style="text-align:center">数组元素相乘</td></tr><tr><td style="text-align:center">divide、floor_divide</td><td style="text-align:center">除法或向下圆整除法(丢弃余数)</td></tr><tr><td style="text-align:center">power</td><td style="text-align:center">对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B</td></tr><tr><td style="text-align:center">maximum、fmax</td><td style="text-align:center">元素级的最大值计算。fmax将忽略NaN</td></tr><tr><td style="text-align:center">minimum、fmin</td><td style="text-align:center">元素级的最小值计算。fmin将忽略NaN</td></tr><tr><td style="text-align:center">mod</td><td style="text-align:center">元素级的求模计算(除法的余数)</td></tr><tr><td style="text-align:center">copysign</td><td style="text-align:center">将第二个数组中的值的符号复制给第一个数组中的值</td></tr><tr><td style="text-align:center">greater、greater_equal、less、less_equal、equal、not_equal</td><td style="text-align:center">执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td style="text-align:center">logical_and、logical_or、logical_xor</td><td style="text-align:center">执行元素级的真值逻辑运算。相当于中缀运算符&amp;、&#124;、^</td></tr></tbody></table><p>许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: arr  = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: arr</span><br><span class="line">Out[<span class="number">3</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: np.sqrt(arr)</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">array([<span class="number">0.</span>        , <span class="number">1.</span>        , <span class="number">1.41421356</span>, <span class="number">1.73205081</span>, <span class="number">2.</span>        ,</span><br><span class="line">       <span class="number">2.23606798</span>, <span class="number">2.44948974</span>, <span class="number">2.64575131</span>, <span class="number">2.82842712</span>, <span class="number">3.</span>        ])</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: np.exp(arr)</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">array([<span class="number">1.00000000e+00</span>, <span class="number">2.71828183e+00</span>, <span class="number">7.38905610e+00</span>, <span class="number">2.00855369e+01</span>,</span><br><span class="line">       <span class="number">5.45981500e+01</span>, <span class="number">1.48413159e+02</span>, <span class="number">4.03428793e+02</span>, <span class="number">1.09663316e+03</span>,</span><br><span class="line">       <span class="number">2.98095799e+03</span>, <span class="number">8.10308393e+03</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: x = randn(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: y = randn(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: x</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">array([<span class="number">-9.27415622e-01</span>, <span class="number">-1.67964296e-03</span>, <span class="number">-1.91023663e+00</span>, <span class="number">-1.31307986e-01</span>,</span><br><span class="line">       <span class="number">-1.17927352e+00</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: y</span><br><span class="line">Out[<span class="number">9</span>]: array([ <span class="number">0.82239493</span>,  <span class="number">0.43695129</span>, <span class="number">-0.00905311</span>,  <span class="number">0.31991891</span>, <span class="number">-0.34529735</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: np.maximum(x,y)</span><br><span class="line">Out[<span class="number">10</span>]: array([ <span class="number">0.82239493</span>,  <span class="number">0.43695129</span>, <span class="number">-0.00905311</span>,  <span class="number">0.31991891</span>, <span class="number">-0.34529735</span>])</span><br></pre></td></tr></table></figure></p><h2 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h2><p><strong>矢量化</strong> 将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: points = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: xs, ys = np.meshgrid(points,points)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: xs</span><br><span class="line">Out[<span class="number">13</span>]:</span><br><span class="line">array([[<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>],</span><br><span class="line">       [<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>],</span><br><span class="line">       [<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>],</span><br><span class="line">       ...,</span><br><span class="line">       [<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>],</span><br><span class="line">       [<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>],</span><br><span class="line">       [<span class="number">-5.</span>  , <span class="number">-4.99</span>, <span class="number">-4.98</span>, ...,  <span class="number">4.97</span>,  <span class="number">4.98</span>,  <span class="number">4.99</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: z = np.sqrt(np.square(xs)+np.square(ys))</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: z</span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">array([[<span class="number">7.07106781</span>, <span class="number">7.06400028</span>, <span class="number">7.05693985</span>, ..., <span class="number">7.04988652</span>, <span class="number">7.05693985</span>,</span><br><span class="line">        <span class="number">7.06400028</span>],</span><br><span class="line">       [<span class="number">7.06400028</span>, <span class="number">7.05692568</span>, <span class="number">7.04985815</span>, ..., <span class="number">7.04279774</span>, <span class="number">7.04985815</span>,</span><br><span class="line">        <span class="number">7.05692568</span>],</span><br><span class="line">       [<span class="number">7.05693985</span>, <span class="number">7.04985815</span>, <span class="number">7.04278354</span>, ..., <span class="number">7.03571603</span>, <span class="number">7.04278354</span>,</span><br><span class="line">        <span class="number">7.04985815</span>],</span><br><span class="line">       ...,</span><br><span class="line">       [<span class="number">7.04988652</span>, <span class="number">7.04279774</span>, <span class="number">7.03571603</span>, ..., <span class="number">7.0286414</span> , <span class="number">7.03571603</span>,</span><br><span class="line">        <span class="number">7.04279774</span>],</span><br><span class="line">       [<span class="number">7.05693985</span>, <span class="number">7.04985815</span>, <span class="number">7.04278354</span>, ..., <span class="number">7.03571603</span>, <span class="number">7.04278354</span>,</span><br><span class="line">        <span class="number">7.04985815</span>],</span><br><span class="line">       [<span class="number">7.06400028</span>, <span class="number">7.05692568</span>, <span class="number">7.04985815</span>, ..., <span class="number">7.04279774</span>, <span class="number">7.04985815</span>,</span><br><span class="line">        <span class="number">7.05692568</span>]])</span><br></pre></td></tr></table></figure></p><h3 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h3><p><code>np.where</code>是三元表达式<code>x if condition else y</code>的矢量化版本。<code>np.wehere</code>接受三个参数<code>cond、xarr、yarr</code>,当判定<code>cond</code>为true时选择执行<code>xarr</code>否则执行<code>yarr</code>。因此<code>np.where</code>也可以嵌套使用。<code>np.where</code>的第二个和第三个参数不必时数组，可以是标量值。<code>where</code>通常用于根据另一个数组产生新的数组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: xarr = np.array([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: yarr = np.array([<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1.3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: cond = np.array([<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">True</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: result = np.where(cond,xarr,yarr)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: result</span><br><span class="line">Out[<span class="number">27</span>]: array([<span class="number">0.1</span>, <span class="number">1.2</span>, <span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: arr = randn(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: arr</span><br><span class="line">Out[<span class="number">29</span>]:</span><br><span class="line">array([[ <span class="number">0.17276546</span>, <span class="number">-1.27954884</span>, <span class="number">-0.07326268</span>, <span class="number">-2.40995669</span>],</span><br><span class="line">       [<span class="number">-0.15796552</span>, <span class="number">-1.85102248</span>,  <span class="number">0.53499154</span>, <span class="number">-0.1332765</span> ],</span><br><span class="line">       [ <span class="number">0.81853502</span>,  <span class="number">1.35768841</span>,  <span class="number">1.55543773</span>,  <span class="number">1.01407613</span>],</span><br><span class="line">       [<span class="number">-1.05967769</span>,  <span class="number">0.39289449</span>,  <span class="number">0.13509303</span>, <span class="number">-0.68143339</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: np.where(arr&gt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">30</span>]:</span><br><span class="line">array([[ <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>],</span><br><span class="line">       [<span class="number">-1</span>, <span class="number">-1</span>,  <span class="number">1</span>, <span class="number">-1</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>],</span><br><span class="line">       [<span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: np.where(arr&gt;<span class="number">0</span>,<span class="number">1</span>,arr)</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line">array([[ <span class="number">1.</span>        , <span class="number">-1.27954884</span>, <span class="number">-0.07326268</span>, <span class="number">-2.40995669</span>],</span><br><span class="line">       [<span class="number">-0.15796552</span>, <span class="number">-1.85102248</span>,  <span class="number">1.</span>        , <span class="number">-0.1332765</span> ],</span><br><span class="line">       [ <span class="number">1.</span>        ,  <span class="number">1.</span>        ,  <span class="number">1.</span>        ,  <span class="number">1.</span>        ],</span><br><span class="line">       [<span class="number">-1.05967769</span>,  <span class="number">1.</span>        ,  <span class="number">1.</span>        , <span class="number">-0.68143339</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: cond2 = np.array([<span class="keyword">False</span>,<span class="keyword">False</span>,<span class="keyword">True</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: np.where(cond&amp;cond2,<span class="number">0</span>,np.where(cond,<span class="number">1</span>,np.where(cond,<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line">Out[<span class="number">33</span>]: array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><h3 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h3><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。<code>sum</code>、<code>mean</code>以及标准差<code>std</code>等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p><ul><li>基本数组统计方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">sum</td><td style="text-align:center">对数组中全部或某轴向的元素求和。零长度的数组的sum为0</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">算数平均数。零长度的数组的mean为NaN</td></tr><tr><td style="text-align:center">std、var</td><td style="text-align:center">分别为标准差和方差，自由度可调(默认为n)</td></tr><tr><td style="text-align:center">argmin、argmax</td><td style="text-align:center">分别为最大和最小元素的索引</td></tr><tr><td style="text-align:center">cumsum</td><td style="text-align:center">所有元素的累计和</td></tr><tr><td style="text-align:center">cumprod</td><td style="text-align:center">所有元素的累计积</td></tr></tbody></table><p><code>mean</code>和<code>sum</code>这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: arr =  np.random.randn(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: arr</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">array([[<span class="number">-0.00502805</span>,  <span class="number">0.23545272</span>,  <span class="number">0.04886622</span>, <span class="number">-0.46971953</span>],</span><br><span class="line">       [<span class="number">-1.08918278</span>,  <span class="number">1.19958904</span>, <span class="number">-0.54808552</span>, <span class="number">-1.60148873</span>],</span><br><span class="line">       [<span class="number">-0.60059372</span>, <span class="number">-0.9743709</span> ,  <span class="number">1.39660621</span>, <span class="number">-0.97132217</span>],</span><br><span class="line">       [<span class="number">-0.11917925</span>,  <span class="number">1.99922758</span>, <span class="number">-1.58943388</span>,  <span class="number">1.60237969</span>],</span><br><span class="line">       [<span class="number">-0.28361465</span>, <span class="number">-2.57463163</span>, <span class="number">-0.96786527</span>, <span class="number">-0.00376026</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: arr.mean()</span><br><span class="line">Out[<span class="number">38</span>]: <span class="number">-0.26580774446749256</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: np.mean(arr)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="number">-0.26580774446749256</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: arr.mean(axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">40</span>]: array([<span class="number">-0.04760716</span>, <span class="number">-0.509792</span>  , <span class="number">-0.28742014</span>,  <span class="number">0.47324854</span>, <span class="number">-0.95746796</span>])</span><br></pre></td></tr></table></figure></p><p><code>cumsum</code>和<code>cumprod</code>之类的方法不聚合，而是产生一个由中间结果组成的数组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: arr = np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: arr.cumsum(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">48</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: arr.cumsum(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">12</span>],</span><br><span class="line">       [ <span class="number">6</span>, <span class="number">13</span>, <span class="number">21</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: arr.cumprod(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">50</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">       [ <span class="number">0</span>,  <span class="number">4</span>, <span class="number">10</span>],</span><br><span class="line">       [ <span class="number">0</span>, <span class="number">28</span>, <span class="number">80</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: arr.cumprod(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">51</span>]:</span><br><span class="line">array([[  <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>],</span><br><span class="line">       [  <span class="number">3</span>,  <span class="number">12</span>,  <span class="number">60</span>],</span><br><span class="line">       [  <span class="number">6</span>,  <span class="number">42</span>, <span class="number">336</span>]])</span><br></pre></td></tr></table></figure></p><h3 id="用于布尔型数组的方法"><a href="#用于布尔型数组的方法" class="headerlink" title="用于布尔型数组的方法"></a>用于布尔型数组的方法</h3><p>上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以<code>sum</code>可以用来对布尔型数组中的True值计数。而<code>any</code>方法用来测试数组中是否存在一个或多个True，<code>all</code>用来检查数组中所有值是否都是True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: arr = randn(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: (arr &gt; <span class="number">0</span>).sum()</span><br><span class="line">Out[<span class="number">53</span>]: <span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: bools=np.array([<span class="keyword">False</span>,<span class="keyword">True</span>,<span class="keyword">False</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: bools.any()</span><br><span class="line">Out[<span class="number">55</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: np.all(bools)</span><br><span class="line">Out[<span class="number">56</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>NumPy数组通过<code>sort</code>方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给<code>sort</code>。顶级方法<code>np.sort</code>返回的是数组的已排序副本，而就地排序则会修改数组本身：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">57</span>]: arr = randn(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: arr</span><br><span class="line">Out[<span class="number">58</span>]:</span><br><span class="line">array([ <span class="number">0.20563118</span>, <span class="number">-0.6733116</span> , <span class="number">-1.44713961</span>,  <span class="number">0.49352122</span>,  <span class="number">0.73564391</span>,</span><br><span class="line">        <span class="number">1.71627219</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: arr.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: arr</span><br><span class="line">Out[<span class="number">60</span>]:</span><br><span class="line">array([<span class="number">-1.44713961</span>, <span class="number">-0.6733116</span> ,  <span class="number">0.20563118</span>,  <span class="number">0.49352122</span>,  <span class="number">0.73564391</span>,</span><br><span class="line">        <span class="number">1.71627219</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: arr = rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: arr</span><br><span class="line">Out[<span class="number">62</span>]:</span><br><span class="line">array([[<span class="number">0.18125744</span>, <span class="number">0.10766187</span>, <span class="number">0.46160903</span>],</span><br><span class="line">       [<span class="number">0.34363544</span>, <span class="number">0.28353683</span>, <span class="number">0.06096776</span>],</span><br><span class="line">       [<span class="number">0.52424935</span>, <span class="number">0.13756835</span>, <span class="number">0.78614215</span>],</span><br><span class="line">       [<span class="number">0.12944147</span>, <span class="number">0.95273729</span>, <span class="number">0.09078996</span>],</span><br><span class="line">       [<span class="number">0.85118943</span>, <span class="number">0.18928544</span>, <span class="number">0.23857278</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: np.sort(arr,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">63</span>]:</span><br><span class="line">array([[<span class="number">0.10766187</span>, <span class="number">0.18125744</span>, <span class="number">0.46160903</span>],</span><br><span class="line">       [<span class="number">0.06096776</span>, <span class="number">0.28353683</span>, <span class="number">0.34363544</span>],</span><br><span class="line">       [<span class="number">0.13756835</span>, <span class="number">0.52424935</span>, <span class="number">0.78614215</span>],</span><br><span class="line">       [<span class="number">0.09078996</span>, <span class="number">0.12944147</span>, <span class="number">0.95273729</span>],</span><br><span class="line">       [<span class="number">0.18928544</span>, <span class="number">0.23857278</span>, <span class="number">0.85118943</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: arr</span><br><span class="line">Out[<span class="number">64</span>]:</span><br><span class="line">array([[<span class="number">0.18125744</span>, <span class="number">0.10766187</span>, <span class="number">0.46160903</span>],</span><br><span class="line">       [<span class="number">0.34363544</span>, <span class="number">0.28353683</span>, <span class="number">0.06096776</span>],</span><br><span class="line">       [<span class="number">0.52424935</span>, <span class="number">0.13756835</span>, <span class="number">0.78614215</span>],</span><br><span class="line">       [<span class="number">0.12944147</span>, <span class="number">0.95273729</span>, <span class="number">0.09078996</span>],</span><br><span class="line">       [<span class="number">0.85118943</span>, <span class="number">0.18928544</span>, <span class="number">0.23857278</span>]])</span><br></pre></td></tr></table></figure></p><h3 id="唯一化及其他集合逻辑"><a href="#唯一化及其他集合逻辑" class="headerlink" title="唯一化及其他集合逻辑"></a>唯一化及其他集合逻辑</h3><p>NumPy提供了一些针对一维ndarray的基本集合运算。</p><ul><li>数组的集合运算</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">unique(x)</td><td style="text-align:center">计算x中的唯一元素，并返回有序结果</td></tr><tr><td style="text-align:center">intersect1d(x,y)</td><td style="text-align:center">计算x和y中的公共元素，并返回有序结果</td></tr><tr><td style="text-align:center">union1d(x,y)</td><td style="text-align:center">计算x和y的并集，并返回有序结果</td></tr><tr><td style="text-align:center">in1d(x,y)</td><td style="text-align:center">得到一个表示“x的元素是否包含于y”的布尔型数组</td></tr><tr><td style="text-align:center">setdiff1d(x,y)</td><td style="text-align:center">集合的差，即元素在x中且不在y中</td></tr><tr><td style="text-align:center">setxor1d(x,y)</td><td style="text-align:center">集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: np.unique(names)</span><br><span class="line">Out[<span class="number">66</span>]: array([<span class="string">'Jim'</span>, <span class="string">'Tom'</span>, <span class="string">'bob'</span>], dtype=<span class="string">'&lt;U3'</span>)</span><br></pre></td></tr></table></figure><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><h3 id="将数组以二进制格式保存到磁盘"><a href="#将数组以二进制格式保存到磁盘" class="headerlink" title="将数组以二进制格式保存到磁盘"></a>将数组以二进制格式保存到磁盘</h3><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 <em>.npy</em> 的文件中。<code>np.savez</code>可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 <em>.npz</em> 文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">68</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: np.save(<span class="string">'arr'</span>,arr)</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: np.load(<span class="string">'arr.npy'</span>)</span><br><span class="line">Out[<span class="number">70</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: np.savez(<span class="string">'arr_more'</span>,a=arr,b=arr)</span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: arr_more = np.load(<span class="string">'arr_more.npz'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: arr_more[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">73</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure></p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><ul><li>numpy.linalg函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">diag</td><td style="text-align:center">以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0)</td></tr><tr><td style="text-align:center">dot</td><td style="text-align:center">矩阵乘法</td></tr><tr><td style="text-align:center">trace</td><td style="text-align:center">计算对角线的和</td></tr><tr><td style="text-align:center">det</td><td style="text-align:center">计算矩阵行列式</td></tr><tr><td style="text-align:center">eig</td><td style="text-align:center">计算方阵的特征值和特征向量</td></tr><tr><td style="text-align:center">inv</td><td style="text-align:center">计算方阵的逆</td></tr><tr><td style="text-align:center">pinv</td><td style="text-align:center">计算矩阵的Moore-Penrose伪逆</td></tr><tr><td style="text-align:center">qr</td><td style="text-align:center">计算QR分解</td></tr><tr><td style="text-align:center">svd</td><td style="text-align:center">计算奇异值分解(SVD)</td></tr><tr><td style="text-align:center">solve</td><td style="text-align:center">解线性方程组Ax=b，其中A为一个方阵</td></tr><tr><td style="text-align:center">lstsq</td><td style="text-align:center">计算Ax=b的最小二乘解</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: x = randn(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: x</span><br><span class="line">Out[<span class="number">84</span>]:</span><br><span class="line">array([[ <span class="number">0.45880764</span>, <span class="number">-0.90269718</span>, <span class="number">-1.62963467</span>],</span><br><span class="line">       [<span class="number">-0.76727739</span>,  <span class="number">2.24799683</span>,  <span class="number">0.65118256</span>],</span><br><span class="line">       [ <span class="number">0.43217346</span>, <span class="number">-2.47319723</span>, <span class="number">-0.48442667</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: mat = x.T.dot(x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: mat</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line">array([[ <span class="number">0.98599295</span>, <span class="number">-3.20785172</span>, <span class="number">-1.45668284</span>],</span><br><span class="line">       [<span class="number">-3.20785172</span>, <span class="number">11.9850565</span> ,  <span class="number">4.13300564</span>],</span><br><span class="line">       [<span class="number">-1.45668284</span>,  <span class="number">4.13300564</span>,  <span class="number">3.31441709</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: inv(mat)</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line">array([[<span class="number">16.03043111</span>,  <span class="number">3.2650856</span> ,  <span class="number">2.97386734</span>],</span><br><span class="line">       [ <span class="number">3.2650856</span> ,  <span class="number">0.8114194</span> ,  <span class="number">0.42317945</span>],</span><br><span class="line">       [ <span class="number">2.97386734</span>,  <span class="number">0.42317945</span>,  <span class="number">1.08102824</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: mat</span><br><span class="line">Out[<span class="number">88</span>]:</span><br><span class="line">array([[ <span class="number">0.98599295</span>, <span class="number">-3.20785172</span>, <span class="number">-1.45668284</span>],</span><br><span class="line">       [<span class="number">-3.20785172</span>, <span class="number">11.9850565</span> ,  <span class="number">4.13300564</span>],</span><br><span class="line">       [<span class="number">-1.45668284</span>,  <span class="number">4.13300564</span>,  <span class="number">3.31441709</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: mat.dot(inv(mat))</span><br><span class="line">Out[<span class="number">89</span>]:</span><br><span class="line">array([[ <span class="number">1.00000000e+00</span>, <span class="number">-1.71619808e-16</span>,  <span class="number">2.22044605e-16</span>],</span><br><span class="line">       [ <span class="number">1.06801676e-14</span>,  <span class="number">1.00000000e+00</span>,  <span class="number">0.00000000e+00</span>],</span><br><span class="line">       [ <span class="number">3.55271368e-15</span>,  <span class="number">8.88178420e-16</span>,  <span class="number">1.00000000e+00</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: q,r = qr(mat)</span><br><span class="line"></span><br><span class="line">In [<span class="number">91</span>]: r</span><br><span class="line">Out[<span class="number">91</span>]:</span><br><span class="line">array([[<span class="number">-3.65847231</span>, <span class="number">13.01900838</span>,  <span class="number">5.33621718</span>],</span><br><span class="line">       [ <span class="number">0.</span>        , <span class="number">-1.23249681</span>,  <span class="number">1.27109691</span>],</span><br><span class="line">       [ <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.31324131</span>]])</span><br></pre></td></tr></table></figure><h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><ul><li>部分numpy.random函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">seed</td><td style="text-align:center">确定随机数生成器的种子</td></tr><tr><td style="text-align:center">permutation</td><td style="text-align:center">返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td style="text-align:center">shuffle</td><td style="text-align:center">对一个序列就地随机排序</td></tr><tr><td style="text-align:center">rand</td><td style="text-align:center">产生均匀分布的样本值</td></tr><tr><td style="text-align:center">randint</td><td style="text-align:center">从给定的上下限范围内随机选取整数</td></tr><tr><td style="text-align:center">randn</td><td style="text-align:center">产生正态分布(平均值为0，标准差为1)的样本值</td></tr><tr><td style="text-align:center">normal</td><td style="text-align:center">产生正态(高斯)分布的样本值</td></tr><tr><td style="text-align:center">binomial</td><td style="text-align:center">产生二项分布的样本值</td></tr><tr><td style="text-align:center">beta</td><td style="text-align:center">产生Beta分布的样本值</td></tr><tr><td style="text-align:center">chisquare</td><td style="text-align:center">产生卡方分布的样本值</td></tr><tr><td style="text-align:center">gamma</td><td style="text-align:center">产生Gamma分布的样本值</td></tr><tr><td style="text-align:center">uniform</td><td style="text-align:center">产生在[0,1）中均匀分布的样本值</td></tr></tbody></table><h3 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h3><p>使用<code>np.random</code>模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: nsteps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: draws = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=nsteps)</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: steps = np.where(draws&gt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: walk = steps.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: walk.min()</span><br><span class="line">Out[<span class="number">101</span>]: <span class="number">-24</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: walk.max()</span><br><span class="line">Out[<span class="number">102</span>]: <span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用<code>np.abs(walk)&gt;=10</code>得到一个布尔型数组，它表示的距离是否达到或超过10，使用<code>argmax</code>(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">103</span>]: (np.abs(walk)&gt;=<span class="number">10</span>).argmax()</span><br><span class="line">Out[<span class="number">103</span>]: <span class="number">107</span></span><br></pre></td></tr></table></figure></p><h3 id="一次模拟多个随机漫步"><a href="#一次模拟多个随机漫步" class="headerlink" title="一次模拟多个随机漫步"></a>一次模拟多个随机漫步</h3><p>通过给<code>numpy.random</code>函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用<code>any</code>进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用<code>argmax</code>在轴1上获取穿越时间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">104</span>]: nwalks = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: nsteps = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: draws = np.random.randint(<span class="number">0</span>,<span class="number">2</span>,size=(nwalks,nsteps))</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: steps = np.where(draws&gt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: walks = steps.cumsum(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: walks</span><br><span class="line">Out[<span class="number">109</span>]:</span><br><span class="line">array([[  <span class="number">-1</span>,   <span class="number">-2</span>,   <span class="number">-1</span>, ...,   <span class="number">20</span>,   <span class="number">19</span>,   <span class="number">18</span>],</span><br><span class="line">       [  <span class="number">-1</span>,    <span class="number">0</span>,    <span class="number">1</span>, ...,   <span class="number">16</span>,   <span class="number">17</span>,   <span class="number">18</span>],</span><br><span class="line">       [  <span class="number">-1</span>,    <span class="number">0</span>,    <span class="number">1</span>, ...,   <span class="number">80</span>,   <span class="number">79</span>,   <span class="number">78</span>],</span><br><span class="line">       ...,</span><br><span class="line">       [   <span class="number">1</span>,    <span class="number">2</span>,    <span class="number">3</span>, ...,    <span class="number">6</span>,    <span class="number">5</span>,    <span class="number">6</span>],</span><br><span class="line">       [   <span class="number">1</span>,    <span class="number">0</span>,   <span class="number">-1</span>, ..., <span class="number">-130</span>, <span class="number">-131</span>, <span class="number">-132</span>],</span><br><span class="line">       [   <span class="number">1</span>,    <span class="number">0</span>,    <span class="number">1</span>, ...,  <span class="number">-16</span>,  <span class="number">-17</span>,  <span class="number">-16</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: walks.max()</span><br><span class="line">Out[<span class="number">110</span>]: <span class="number">255</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: walks.min()</span><br><span class="line">Out[<span class="number">111</span>]: <span class="number">-235</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: hits30 = (np.abs(walks)&gt;=<span class="number">30</span>).any(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: hits30</span><br><span class="line">Out[<span class="number">113</span>]: array([ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>, ...,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: hits30.sum()</span><br><span class="line">Out[<span class="number">115</span>]: <span class="number">4992</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: crossing_time  =(np.abs(walks[hits30])&gt;=<span class="number">30</span>).argmax(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: crossing_time.mean()</span><br><span class="line">Out[<span class="number">118</span>]: <span class="number">883.0564903846154</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通用函数&quot;&gt;&lt;a href=&quot;#通用函数&quot; class=&quot;headerlink&quot; title=&quot;通用函数&quot;&gt;&lt;/a&gt;通用函数&lt;/h2&gt;&lt;p&gt;通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或
      
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="http://coldjune.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>numpy基础(一)</title>
    <link href="http://coldjune.com/2018/03/16/numpy%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://coldjune.com/2018/03/16/numpy基础-一/</id>
    <published>2018-03-16T00:38:29.000Z</published>
    <updated>2018-03-26T01:31:51.780Z</updated>
    
    <content type="html"><![CDATA[<p>NumPy<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的部分功能如下：</p><ul><li>ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组</li><li>用于对数组数据进行快速运算的标准数学函数</li><li>线性代数、随机数生成及傅里叶变换功能</li><li>用于集成C、C++、Fortran等语言编写的代码的工具</li></ul><p>对于大部分数据分析应用，关注的功能集中在：</p><ul><li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算</li><li>常用的数组算法，如排序、唯一化、集合运算等</li><li>高效的描述统计和数据聚合/摘要运算</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)</li><li>数据的分组运算(聚合、转换、函数应用等)</li></ul><h2 id="多维数组对象-ndarray"><a href="#多维数组对象-ndarray" class="headerlink" title="多维数组对象(ndarray)"></a>多维数组对象(ndarray)</h2><p>N维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: data = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: data</span><br><span class="line">Out[<span class="number">5</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: data*<span class="number">10</span></span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">array([[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">       [<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: data+data</span><br><span class="line">Out[<span class="number">7</span>]:</span><br><span class="line">array([[ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>],</span><br><span class="line">       [ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>]])</span><br></pre></td></tr></table></figure></p><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><p>array函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。</p><ul><li>数组创建函数</li></ul><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">array</td><td style="text-align:center">将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据</td></tr><tr><td style="text-align:center">asarray</td><td style="text-align:center">将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制</td></tr><tr><td style="text-align:center">arange</td><td style="text-align:center">类似于内置的range，但返回的是一个ndarray而不是列表</td></tr><tr><td style="text-align:center">ones、ones_like</td><td style="text-align:center">根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组</td></tr><tr><td style="text-align:center">zeros、zeros_like</td><td style="text-align:center">类似于ones、ones_like，产生全0数组</td></tr><tr><td style="text-align:center">empty、empty_like</td><td style="text-align:center">创建新数组，只分配内存空间但不填充任何值</td></tr><tr><td style="text-align:center">eye、identity</td><td style="text-align:center">创建一个正方的NXN单位矩阵(对角线为1，其余为0)</td></tr></tbody></table><ul><li>列表转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: arr1 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: arr1</span><br><span class="line">Out[<span class="number">9</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><ul><li>嵌套序列将会被转换为一个多维数组:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: arr2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: arr2</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>除非显式说明，<code>np.array</code>会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: arr1.dtype</span><br><span class="line">Out[<span class="number">12</span>]: dtype(<span class="string">'int32'</span>)</span><br></pre></td></tr></table></figure></p><p>除了<code>np.array</code>之外，<code>zeros</code>和<code>ones</code>可以创建指定长度或形状的全0或全1数组。<code>empty</code>可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: np.zeros(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">15</span>]: array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: np.zeros((<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: np.empty((<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">array([[[  <span class="number">6.23042070e-307</span>,   <span class="number">4.67296746e-307</span>,   <span class="number">1.69121096e-306</span>],</span><br><span class="line">        [  <span class="number">1.33511290e-306</span>,   <span class="number">1.15711989e-306</span>,   <span class="number">1.42418987e-306</span>]],</span><br><span class="line"></span><br><span class="line">       [[  <span class="number">1.37961641e-306</span>,   <span class="number">1.60220528e-306</span>,   <span class="number">1.24611266e-306</span>],</span><br><span class="line">        [  <span class="number">9.34598925e-307</span>,   <span class="number">1.24612081e-306</span>,   <span class="number">1.11260755e-306</span>]],</span><br><span class="line"></span><br><span class="line">       [[  <span class="number">1.60220393e-306</span>,   <span class="number">1.51320640e-306</span>,   <span class="number">9.34609790e-307</span>],</span><br><span class="line">        [  <span class="number">1.86921279e-306</span>,   <span class="number">1.24610723e-306</span>,   <span class="number">0.00000000e+000</span>]]])</span><br></pre></td></tr></table></figure></p><p><strong>使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0</strong><br><code>arange</code>是Python内置函数<code>range</code>的数组版:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: np.arange(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">18</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure></p><h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><ul><li>NumPy的数据类型</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">类型代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">int8、uint8</td><td style="text-align:center">i1、u1</td><td style="text-align:center">有符号和无符号的8位(1个字节)整型</td></tr><tr><td style="text-align:center">int16、uint16</td><td style="text-align:center">i2、u2</td><td style="text-align:center">有符号和无符号的18位(2个字节)整型</td></tr><tr><td style="text-align:center">int32、uint32</td><td style="text-align:center">i4、u4</td><td style="text-align:center">有符号和无符号的32位(4个字节)整型</td></tr><tr><td style="text-align:center">int64、uint64</td><td style="text-align:center">i8、u8</td><td style="text-align:center">有符号和无符号的64位(8个字节)整型</td></tr><tr><td style="text-align:center">float16</td><td style="text-align:center">f2</td><td style="text-align:center">半精度浮点数</td></tr><tr><td style="text-align:center">float32</td><td style="text-align:center">f4或f</td><td style="text-align:center">标准的单精度浮点数。与C的float兼容</td></tr><tr><td style="text-align:center">float64</td><td style="text-align:center">f8或d</td><td style="text-align:center">标准的双精度浮点数。与C的double和Python的float对象兼容</td></tr><tr><td style="text-align:center">float128</td><td style="text-align:center">f16或g</td><td style="text-align:center">扩展精度浮点数</td></tr><tr><td style="text-align:center">complex64、complex128、complex256</td><td style="text-align:center">c32</td><td style="text-align:center">复数</td></tr><tr><td style="text-align:center">bool</td><td style="text-align:center">?</td><td style="text-align:center">存储True和False的布尔类型</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">O</td><td style="text-align:center">Python对象类型</td></tr><tr><td style="text-align:center">string_</td><td style="text-align:center">S</td><td style="text-align:center">固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10</td></tr><tr><td style="text-align:center">unicode_</td><td style="text-align:center">U</td><td style="text-align:center">固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)</td></tr></tbody></table><p>可以再创建array对象时使用<code>dtype</code>参数设定数据类型，也可以通过<code>astype</code>方法显示转换其<code>dtype</code>,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用<code>astype</code>将其转换为数值形式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: arr = np.array([<span class="number">1.2</span>,<span class="number">-3.4</span>,<span class="number">5.6</span>], dtype=<span class="string">'f8'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: arr.dtype</span><br><span class="line">Out[<span class="number">20</span>]: dtype(<span class="string">'float64'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: arr.astype(np.int32)</span><br><span class="line">Out[<span class="number">21</span>]: array([ <span class="number">1</span>, <span class="number">-3</span>,  <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: numeric_string = np.array([<span class="string">'1.5'</span>,<span class="string">'2.5'</span>,<span class="string">'1.1'</span>],dtype=np.string_)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: numeric_string.astype(np.float64)</span><br><span class="line">Out[<span class="number">23</span>]: array([ <span class="number">1.5</span>,  <span class="number">2.5</span>,  <span class="number">1.1</span>])</span><br></pre></td></tr></table></figure></p><h3 id="数组和标量之间的运算"><a href="#数组和标量之间的运算" class="headerlink" title="数组和标量之间的运算"></a>数组和标量之间的运算</h3><p><strong>矢量化</strong> 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: arr = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: arr*arr</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: arr+arr</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">array([[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></p><p>数组和标量的运算会将标量值传播到各个元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: <span class="number">1</span>/arr</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">array([[ <span class="number">1.</span> ,  <span class="number">1.</span> ,  <span class="number">1.</span> ],</span><br><span class="line">       [ <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: arr ** <span class="number">0.5</span></span><br><span class="line">Out[<span class="number">28</span>]:</span><br><span class="line">array([[ <span class="number">1.</span>        ,  <span class="number">1.</span>        ,  <span class="number">1.</span>        ],</span><br><span class="line">       [ <span class="number">1.41421356</span>,  <span class="number">1.41421356</span>,  <span class="number">1.41421356</span>]])</span><br></pre></td></tr></table></figure></p><h3 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h3><p>将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: arr</span><br><span class="line">Out[<span class="number">36</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: arr_slice = arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: arr_slice</span><br><span class="line">Out[<span class="number">38</span>]: array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: arr_slice[<span class="number">1</span>:<span class="number">2</span>] = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: arr</span><br><span class="line">Out[<span class="number">40</span>]: array([   <span class="number">0</span>,    <span class="number">1</span>,    <span class="number">2</span>, <span class="number">1000</span>,    <span class="number">4</span>,    <span class="number">5</span>,    <span class="number">6</span>,    <span class="number">7</span>,    <span class="number">8</span>,    <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: arr_slice</span><br><span class="line">Out[<span class="number">41</span>]: array([   <span class="number">2</span>, <span class="number">1000</span>,    <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: arr</span><br><span class="line">Out[<span class="number">43</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: arr[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">44</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: arr[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">45</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: arr[<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">46</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: arr = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: arr</span><br><span class="line">Out[<span class="number">48</span>]:</span><br><span class="line">array([[[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: arr[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">49</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: arr[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">50</span>]: array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure></p><p>标量和数组都可以赋值给原数组:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: arr = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: arr</span><br><span class="line">Out[<span class="number">68</span>]:</span><br><span class="line">array([[[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: old_arr = arr[<span class="number">0</span>].copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: old_arr</span><br><span class="line">Out[<span class="number">70</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: arr[<span class="number">0</span>]= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: arr</span><br><span class="line">Out[<span class="number">72</span>]:</span><br><span class="line">array([[[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: arr[<span class="number">0</span>] = old_arr</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: arr</span><br><span class="line">Out[<span class="number">74</span>]:</span><br><span class="line">array([[[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</span><br></pre></td></tr></table></figure></p><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><p>ndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: arr2d = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: arr2d</span><br><span class="line">Out[<span class="number">76</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: arr2d[:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">77</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: arr2d[:<span class="number">2</span>,:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">78</span>]:</span><br><span class="line">array([[<span class="number">1</span>],</span><br><span class="line">       [<span class="number">3</span>]])</span><br></pre></td></tr></table></figure></p><p>同时传入索引和切片可以得到低纬度的切片:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">80</span>]: arr2d[<span class="number">1</span>,:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">80</span>]: array([<span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><p>只有<code>:</code>表示选取整个轴，可以通过这个对高纬度的进行切片：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">81</span>]: arr2d[:,:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">81</span>]:</span><br><span class="line">array([[<span class="number">1</span>],</span><br><span class="line">       [<span class="number">3</span>]])</span><br></pre></td></tr></table></figure></p><p>同时对切片表达式的赋值也会扩展到整个选区：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">82</span>]: arr2d[:,:<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: arr2d</span><br><span class="line">Out[<span class="number">83</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure></p><h4 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h4><p>可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回<code>True</code>对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: names = np.array([<span class="string">'bob'</span>,<span class="string">'john'</span>,<span class="string">'tom'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: data = randn(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: names</span><br><span class="line">Out[<span class="number">86</span>]:</span><br><span class="line">array([<span class="string">'bob'</span>, <span class="string">'john'</span>, <span class="string">'tom'</span>],</span><br><span class="line">      dtype=<span class="string">'&lt;U4'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: data</span><br><span class="line">Out[<span class="number">87</span>]:</span><br><span class="line">array([[<span class="number">-1.38783828</span>,  <span class="number">1.53823048</span>, <span class="number">-0.83396793</span>,  <span class="number">2.53149852</span>, <span class="number">-0.55033656</span>,</span><br><span class="line">         <span class="number">0.13621489</span>],</span><br><span class="line">       [<span class="number">-1.92912846</span>,  <span class="number">1.45011928</span>,  <span class="number">0.76228734</span>,  <span class="number">1.37168505</span>,  <span class="number">0.71817348</span>,</span><br><span class="line">        <span class="number">-0.48010419</span>],</span><br><span class="line">       [<span class="number">-0.27052654</span>,  <span class="number">0.72243318</span>, <span class="number">-0.53976533</span>, <span class="number">-0.55488584</span>, <span class="number">-0.18700473</span>,</span><br><span class="line">        <span class="number">-0.06341261</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: names == <span class="string">'bob'</span></span><br><span class="line">Out[<span class="number">88</span>]: array([ <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: data[names == <span class="string">'bob'</span>]</span><br><span class="line">Out[<span class="number">90</span>]:</span><br><span class="line">array([[<span class="number">-1.38783828</span>,  <span class="number">1.53823048</span>, <span class="number">-0.83396793</span>,  <span class="number">2.53149852</span>, <span class="number">-0.55033656</span>,</span><br><span class="line">         <span class="number">0.13621489</span>]])</span><br></pre></td></tr></table></figure></p><p>布尔型数组还可以和切片、整数(或整数序列)混合使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: data[names == <span class="string">'bob'</span>,<span class="number">2</span>:]</span><br><span class="line">Out[<span class="number">91</span>]: array([[<span class="number">-0.83396793</span>,  <span class="number">2.53149852</span>, <span class="number">-0.55033656</span>,  <span class="number">0.13621489</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: data[names == <span class="string">'bob'</span>,<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">92</span>]: array([<span class="number">-0.83396793</span>])</span><br></pre></td></tr></table></figure></p><p>要选取除某个元素以外的值，可以使用不等号(<code>!=</code>)，也可以通过<code>~</code>对条件进行否定；同时也可以使用<code>&amp;</code>(和)、<code>|</code>(或)之类的布尔运算符：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">93</span>]: data[names != <span class="string">'bob'</span>]</span><br><span class="line">Out[<span class="number">93</span>]:</span><br><span class="line">array([[<span class="number">-1.92912846</span>,  <span class="number">1.45011928</span>,  <span class="number">0.76228734</span>,  <span class="number">1.37168505</span>,  <span class="number">0.71817348</span>,</span><br><span class="line">        <span class="number">-0.48010419</span>],</span><br><span class="line">       [<span class="number">-0.27052654</span>,  <span class="number">0.72243318</span>, <span class="number">-0.53976533</span>, <span class="number">-0.55488584</span>, <span class="number">-0.18700473</span>,</span><br><span class="line">        <span class="number">-0.06341261</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: data[~(names == <span class="string">'bob'</span>)]</span><br><span class="line">Out[<span class="number">95</span>]:</span><br><span class="line">array([[<span class="number">-1.92912846</span>,  <span class="number">1.45011928</span>,  <span class="number">0.76228734</span>,  <span class="number">1.37168505</span>,  <span class="number">0.71817348</span>,</span><br><span class="line">        <span class="number">-0.48010419</span>],</span><br><span class="line">       [<span class="number">-0.27052654</span>,  <span class="number">0.72243318</span>, <span class="number">-0.53976533</span>, <span class="number">-0.55488584</span>, <span class="number">-0.18700473</span>,</span><br><span class="line">        <span class="number">-0.06341261</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: data[(names == <span class="string">'bob'</span>)| (names==<span class="string">'tom'</span>)]</span><br><span class="line">Out[<span class="number">97</span>]:</span><br><span class="line">array([[<span class="number">-1.38783828</span>,  <span class="number">1.53823048</span>, <span class="number">-0.83396793</span>,  <span class="number">2.53149852</span>, <span class="number">-0.55033656</span>,</span><br><span class="line">         <span class="number">0.13621489</span>],</span><br><span class="line">       [<span class="number">-0.27052654</span>,  <span class="number">0.72243318</span>, <span class="number">-0.53976533</span>, <span class="number">-0.55488584</span>, <span class="number">-0.18700473</span>,</span><br><span class="line">        <span class="number">-0.06341261</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: data[(names == <span class="string">'bob'</span>)&amp; (names==<span class="string">'tom'</span>)]</span><br><span class="line">Out[<span class="number">98</span>]: array([], shape=(<span class="number">0</span>, <span class="number">6</span>), dtype=float64)</span><br></pre></td></tr></table></figure></p><p>通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。</p><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">102</span>]: arr = np.empty((<span class="number">7</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">     ...:     arr[i]=i</span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: arr</span><br><span class="line">Out[<span class="number">104</span>]:</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">6.</span>,  <span class="number">6.</span>,  <span class="number">6.</span>,  <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: arr[[<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">105</span>]:</span><br><span class="line">array([[ <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>,  <span class="number">2.</span>]])</span><br></pre></td></tr></table></figure></p><p>使用负数索引将会从末尾开始选取行:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">106</span>]: arr[[<span class="number">-4</span>,<span class="number">-3</span>,<span class="number">-1</span>,<span class="number">-2</span>]]</span><br><span class="line">Out[<span class="number">106</span>]:</span><br><span class="line">array([[ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">6.</span>,  <span class="number">6.</span>,  <span class="number">6.</span>,  <span class="number">6.</span>],</span><br><span class="line">       [ <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>]])</span><br></pre></td></tr></table></figure></p><p>一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">107</span>]: arr = np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: arr</span><br><span class="line">Out[<span class="number">108</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">       [<span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>],</span><br><span class="line">       [<span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: arr[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: arr[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">Out[<span class="number">110</span>]: array([ <span class="number">4</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">19</span>])</span><br></pre></td></tr></table></figure></p><p>其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">111</span>]: arr[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]][:,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">Out[<span class="number">111</span>]:</span><br><span class="line">array([[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure></p><p>选取矩阵的另一个方法是使用<code>np.ix_</code>函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">112</span>]: arr[np.ix_([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])]</span><br><span class="line">Out[<span class="number">112</span>]:</span><br><span class="line">array([[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure></p><p>花式索引总是将数据复制到新数组中。</p><h3 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h3><p>转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有<code>transpose</code>方法，还有一个特殊的<code>T</code>属性，在计算内积的时候经常需要用到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">114</span>]: arr.T</span><br><span class="line">Out[<span class="number">114</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">4</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">28</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">29</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">30</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">31</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: np.dot(arr.T, arr)</span><br><span class="line">Out[<span class="number">115</span>]:</span><br><span class="line">array([[<span class="number">2240</span>, <span class="number">2352</span>, <span class="number">2464</span>, <span class="number">2576</span>],</span><br><span class="line">       [<span class="number">2352</span>, <span class="number">2472</span>, <span class="number">2592</span>, <span class="number">2712</span>],</span><br><span class="line">       [<span class="number">2464</span>, <span class="number">2592</span>, <span class="number">2720</span>, <span class="number">2848</span>],</span><br><span class="line">       [<span class="number">2576</span>, <span class="number">2712</span>, <span class="number">2848</span>, <span class="number">2984</span>]])</span><br></pre></td></tr></table></figure></p><p><code>transpose</code>需要得到一个由轴编号组成的元组才能对这些轴进行转置:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">126</span>]: arr</span><br><span class="line">Out[<span class="number">126</span>]:</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: arr.shape</span><br><span class="line">Out[<span class="number">127</span>]: (<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: arr.transpose((<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line">Out[<span class="number">128</span>]:</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">1</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">8</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">3</span>,  <span class="number">9</span>],</span><br><span class="line">        [ <span class="number">4</span>, <span class="number">10</span>],</span><br><span class="line">        [ <span class="number">5</span>, <span class="number">11</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: arr.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">129</span>]:</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br></pre></td></tr></table></figure></p><p>上面<code>arr.shape</code>返回的结果是<em>(2,2,3)</em> 表明这是一个三维数组，形状为2x2x3,执行<code>arr.transpose((1,2,0))</code>对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[[(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>)],</span><br><span class="line">  [(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)]],</span><br><span class="line">  [[(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), (<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>)],</span><br><span class="line">  [(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>), (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>)]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>进行轴变换之后的原下标变为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(0,0,0)-&gt;(0,0,0)</span><br><span class="line">(0,0,1)-&gt;(0,1,0)</span><br><span class="line">(0,0,2)-&gt;(0,2,0)</span><br><span class="line"></span><br><span class="line">(0,1,0)-&gt;(1,0,0)</span><br><span class="line">(0,1,1)-&gt;(1,1,0)</span><br><span class="line">(0,1,2)-&gt;(1,2,0)</span><br><span class="line"></span><br><span class="line">(1,0,0)-&gt;(0,0,1)</span><br><span class="line">(1,0,1)-&gt;(0,1,1)</span><br><span class="line">(1,0,2)-&gt;(0,2,1)</span><br><span class="line"></span><br><span class="line">(1,1,0)-&gt;(1,0,1)</span><br><span class="line">(1,1,1)-&gt;(1,1,1)</span><br><span class="line">(1,1,2)-&gt;(1,2,1)</span><br></pre></td></tr></table></figure></p><p>将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[[(0,0,0), (0,0,1)],    -&gt;  (0,0,0) ,(1,0,0) -&gt; 0,6</span><br><span class="line">  [(0,1,0), (0,1,1)],    -&gt;  (0,0,1) ,(1,0,1) -&gt; 1,7</span><br><span class="line">  [(0,2,0), (0,2,1)]],   -&gt;  (0,0,2) ,(1,0,2) -&gt; 2,8</span><br><span class="line"> [[(1,0,0), (1,0,1)],    -&gt;  (0,1,0) ,(1,1,0) -&gt; 3,9</span><br><span class="line">  [(1,1,0), (1,1,1)],    -&gt;  (0,1,1) ,(1,1,1) -&gt; 4,10</span><br><span class="line">  [(1,2,0), (1,2,1)]]    -&gt;  (0,1,2) ,(1,1,2) -&gt; 5, 11</span><br></pre></td></tr></table></figure></p><p>所以最后的数组变为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">1</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">8</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">3</span>,  <span class="number">9</span>],</span><br><span class="line">        [ <span class="number">4</span>, <span class="number">10</span>],</span><br><span class="line">        [ <span class="number">5</span>, <span class="number">11</span>]]])</span><br></pre></td></tr></table></figure></p><p><code>swapaxes</code>方法需要接受一对轴编号,其返回的事源数据的视图:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: arr.swapaxes(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">138</span>]:</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]])</span><br></pre></td></tr></table></figure></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">NumPy将通过语句<code>import numpy as np</code>导入</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">使用副本需要显式地进行复制操作，<code>arr[1:4].copy()</code></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      NumPy(Numerical Python的简称)是高性能科学计算和数据分析的基础包。NumPy本身并没有提供多么高级的数据分析功能，理解NumPy数组及面向数组的计算将在使用Pandas之类的工具时更加高效。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="NumPy" scheme="http://coldjune.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>IPython入门</title>
    <link href="http://coldjune.com/2018/03/15/IPython%E5%85%A5%E9%97%A8/"/>
    <id>http://coldjune.com/2018/03/15/IPython入门/</id>
    <published>2018-03-15T02:05:42.000Z</published>
    <updated>2018-03-26T01:29:53.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPython基础"><a href="#IPython基础" class="headerlink" title="IPython基础"></a>IPython基础</h2><p><a href="https://ipython.org/" target="_blank" rel="noopener">IPython</a>的环境需要自行安装。如果已经安装了Python，可以通过执行<code>pip install ipython</code>安装。然后只需要在命令行输入<code>ipython</code>就能启动：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (v3<span class="number">.6</span><span class="number">.4</span>:d48eceb, Dec <span class="number">19</span> <span class="number">2017</span>, <span class="number">06</span>:<span class="number">54</span>:<span class="number">40</span>) [MSC v<span class="number">.1900</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">6.2</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]:</span><br></pre></td></tr></table></figure></p><p>可以在IPython中执行任何Python语句，和使用Python解释器一样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: data = &#123;i:randn() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: data</span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">-0.24193324837938815</span>,</span><br><span class="line"> <span class="number">1</span>: <span class="number">0.22563840475528563</span>,</span><br><span class="line"> <span class="number">2</span>: <span class="number">0.14465306885873513</span>,</span><br><span class="line"> <span class="number">3</span>: <span class="number">0.5076262433687561</span>,</span><br><span class="line"> <span class="number">4</span>: <span class="number">0.9067731627966235</span>,</span><br><span class="line"> <span class="number">5</span>: <span class="number">0.23827518072962814</span>,</span><br><span class="line"> <span class="number">6</span>: <span class="number">0.3233586627456586</span>,</span><br><span class="line"> <span class="number">7</span>: <span class="number">0.0327013232275763</span>,</span><br><span class="line"> <span class="number">8</span>: <span class="number">-0.357340429464286</span>,</span><br><span class="line"> <span class="number">9</span>: <span class="number">-1.4105691657079547</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]:</span><br></pre></td></tr></table></figure></p><p>许多Python对象都被格式化为可读性更好的形式</p><h3 id="Tab键自动完成"><a href="#Tab键自动完成" class="headerlink" title="Tab键自动完成"></a>Tab键自动完成</h3><p>在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: an_example1 = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: an_example2 = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: an&lt;TAB&gt;</span><br><span class="line">           an_example1               AnalogCommonProxyStub.dll</span><br><span class="line">           an_example2               <span class="keyword">and</span></span><br><span class="line">           any()</span><br></pre></td></tr></table></figure></p><p>也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: a.&lt;TAB&gt;</span><br><span class="line">           append()  count()   insert()  reverse()</span><br><span class="line">           clear()   extend()  pop()     sort()</span><br><span class="line">           copy()    index()   remove()</span><br></pre></td></tr></table></figure></p><p>应用在模块上:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: datetime.</span><br><span class="line">                  date()        MAXYEAR       timedelta</span><br><span class="line">                  datetime      MINYEAR       timezone</span><br><span class="line">                  datetime_CAPI time()        tzinfo()</span><br></pre></td></tr></table></figure></p><p>IPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。<br>Tab键还可以找出电脑文件系统中与之匹配的东西：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: ca&lt;TAB&gt;</span><br><span class="line">           callable()</span><br><span class="line">           %%capture</span><br><span class="line">           catchLink/</span><br></pre></td></tr></table></figure></p><p>其中 <em>catchLibk/</em> 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。</p><h3 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h3><p>在变量前面或者后面加上一个问号(<strong>?</strong>)就可以将有关该对象的一些通用信息显示:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: b = []</span><br><span class="line"></span><br><span class="line">In [3]: b?</span><br><span class="line">Type:        list</span><br><span class="line">String form: []</span><br><span class="line">Length:      <span class="number">0</span></span><br><span class="line">Docstring:</span><br><span class="line">list() -&gt; new empty list</span><br><span class="line">list(iterable) -&gt; new list initialized from iterable's items</span><br></pre></td></tr></table></figure></p><p>如果该对象是一个函数或实例方法，则其docstring也会被显示出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(a,b)</span>:</span></span><br><span class="line">   ...:     <span class="string">"""</span></span><br><span class="line"><span class="string">   ...:     Add two numbers together</span></span><br><span class="line"><span class="string">   ...:     Returns</span></span><br><span class="line"><span class="string">   ...:     -----------------------</span></span><br><span class="line"><span class="string">   ...:     the sum: type of arguments</span></span><br><span class="line"><span class="string">   ...:     """</span></span><br><span class="line">   ...:     <span class="keyword">return</span> a+b</span><br><span class="line">   ...:</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [5]: add_number?</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Docstring:</span><br><span class="line">Add two numbers together</span><br><span class="line">Returns</span><br><span class="line">-----------------------</span><br><span class="line">the sum: type of arguments</span><br><span class="line">File:      d:\python\&lt;ipython-input<span class="number">-4</span><span class="number">-7144</span>b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p>使用<code>??</code>还将显示源代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [6]: add_number??</span><br><span class="line">Signature: add_number(a, b)</span><br><span class="line">Source:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Add two numbers together</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -----------------------</span></span><br><span class="line"><span class="string">    the sum: type of arguments</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">File:      d:\python\&lt;ipython-input<span class="number">-4</span><span class="number">-7144</span>b04645ed&gt;</span><br><span class="line">Type:      function</span><br></pre></td></tr></table></figure></p><p><code>?</code>还可以搜索IPython的命名空间，一些字符再配以通配符(*)即可显示出所有与该通配符表达式相匹配的名称:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [8]: np.*load*?</span><br><span class="line">np.__loader__</span><br><span class="line">np.load</span><br><span class="line">np.loads</span><br><span class="line">np.loadtxt</span><br><span class="line">np.pkgload</span><br></pre></td></tr></table></figure></p><h3 id="run命令"><a href="#run命令" class="headerlink" title="%run命令"></a>%run命令</h3><p>在IPython会话环境中，所有文件都可以通过<code>%run</code>命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x+y) /z</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: %run ipython_script_test.py</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: result</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: a</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="中断正在执行的代码"><a href="#中断正在执行的代码" class="headerlink" title="中断正在执行的代码"></a>中断正在执行的代码</h3><p>任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。</p><h3 id="执行剪切板中的代码"><a href="#执行剪切板中的代码" class="headerlink" title="执行剪切板中的代码"></a>执行剪切板中的代码</h3><p>使用<code>%paste</code>和<code>%cpaste</code>两个魔术函数粘贴代码在shell中以整体执行：</p><ul><li>%paste</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: %paste</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x+y) /z</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line">result = f(a, b, c)</span><br><span class="line"><span class="comment">## -- End pasted text --</span></span><br></pre></td></tr></table></figure><ul><li>%cpaste</li></ul><p>相比于<code>%paste</code>，<code>%cpaste</code>多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: %cpaste</span><br><span class="line">Pasting code; enter <span class="string">'--'</span> alone on the line to stop <span class="keyword">or</span> use Ctrl-D.</span><br><span class="line">:<span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">:    <span class="keyword">return</span> (x+y) /z</span><br><span class="line">:</span><br><span class="line">:a = <span class="number">1</span></span><br><span class="line">:b = <span class="number">2</span></span><br><span class="line">:c = <span class="number">3</span></span><br><span class="line">:result = f(a, b, c)</span><br><span class="line">:--</span><br></pre></td></tr></table></figure></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>IPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(<strong>C指代Ctrl或control</strong>)：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">C-P或上箭头</td><td style="text-align:center">后向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-N或下箭头</td><td style="text-align:center">前向搜索命令历史中以当前输入的文本开头的命令</td></tr><tr><td style="text-align:center">C-R</td><td style="text-align:center">按行读取的反向历史搜索(部分匹配)</td></tr><tr><td style="text-align:center">C-Shift-V/Command-Shift-V</td><td style="text-align:center">从剪切板粘贴文本</td></tr><tr><td style="text-align:center">C-C</td><td style="text-align:center">终止当前正在执行的代码</td></tr><tr><td style="text-align:center">C-A</td><td style="text-align:center">将光标移动到行首</td></tr><tr><td style="text-align:center">C-E</td><td style="text-align:center">将光标移动到行尾</td></tr><tr><td style="text-align:center">C-K</td><td style="text-align:center">删除从光标开始至行尾的文本</td></tr><tr><td style="text-align:center">C-U</td><td style="text-align:center">清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本)</td></tr><tr><td style="text-align:center">C-F</td><td style="text-align:center">将光标向前移动一个字符</td></tr><tr><td style="text-align:center">C-b</td><td style="text-align:center">将光标向后移动一个字符</td></tr><tr><td style="text-align:center">C-L</td><td style="text-align:center">清屏</td></tr></tbody></table><h3 id="异常和跟踪"><a href="#异常和跟踪" class="headerlink" title="异常和跟踪"></a>异常和跟踪</h3><p>如果<code>%run</code>某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py <span class="keyword">in</span> f(x, y, z)</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><h3 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h3><p>IPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 <code>%</code> 为前缀的命令。例如通过<code>%timeit</code>检测任何Python语句的执行时间:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: a = np.random.randn(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: %timeit np.dot(a,a)</span><br><span class="line"><span class="number">237</span> µs ± <span class="number">40</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000</span> loops each)</span><br></pre></td></tr></table></figure></p><p>魔术命令可以看做运行于IPython系统中的命令行程序，使用<code>?</code>即可查看其选项:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In [44]: %reset?</span><br><span class="line">Docstring:</span><br><span class="line">Resets the namespace by removing all names defined by the user, <span class="keyword">if</span></span><br><span class="line">called without arguments, <span class="keyword">or</span> by removing some types of objects, such</span><br><span class="line"><span class="keyword">as</span> everything currently <span class="keyword">in</span> IPython<span class="string">'s In[] and Out[] containers (see</span></span><br><span class="line"><span class="string">the parameters for details).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Parameters</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">-f : force reset without asking for confirmation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-s : '</span>Soft<span class="string">' reset: Only clears your namespace, leaving history intact.</span></span><br><span class="line"><span class="string">    References to objects may be kept. By default (without this option),</span></span><br><span class="line"><span class="string">    we do a '</span>hard<span class="string">' reset, giving you a new session and removing all</span></span><br><span class="line"><span class="string">    references to objects from the current session.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">in : reset input history</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out : reset output history</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dhist : reset directory history</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">array : reset only variables that are NumPy arrays</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">See Also</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">reset_selective : invoked as ``%reset_selective``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Examples</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  In [6]: a = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  In [7]: a</span></span><br><span class="line"><span class="string">  Out[7]: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  In [8]: '</span>a<span class="string">' in _ip.user_ns</span></span><br><span class="line"><span class="string">  Out[8]: True</span></span><br></pre></td></tr></table></figure></p><p>魔术命令可以不带百分号使用，只要没有定义与其同名的变量。</p><ul><li>常用的魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">%quickref</td><td style="text-align:center">显示Python的快速参考</td></tr><tr><td style="text-align:center">%magic</td><td style="text-align:center">显示所有魔术命令的详细文档</td></tr><tr><td style="text-align:center">%debug</td><td style="text-align:center">从最新的异常跟踪的底部进入交互式调试器</td></tr><tr><td style="text-align:center">%hist</td><td style="text-align:center">打印命令的输入(可选输出)历史</td></tr><tr><td style="text-align:center">%pdb</td><td style="text-align:center">在异常发生后自动进入调试器</td></tr><tr><td style="text-align:center">%paste</td><td style="text-align:center">执行剪切板中的Python代码</td></tr><tr><td style="text-align:center">%cpaste</td><td style="text-align:center">打开一个特殊提示符以便手工粘贴待执行的Python代码</td></tr><tr><td style="text-align:center">%reset</td><td style="text-align:center">删除interactive命名空间的全部变量/名称</td></tr><tr><td style="text-align:center">%page OBJECT</td><td style="text-align:center">通过分页器打印输出OBJECT</td></tr><tr><td style="text-align:center">%run script.py</td><td style="text-align:center">在IPython中执行一个Python脚本文件</td></tr><tr><td style="text-align:center">%prun statement</td><td style="text-align:center">通过cProfile执行statement，并打印分析器的输出结果</td></tr><tr><td style="text-align:center">%time statement</td><td style="text-align:center">报告statement的执行时间</td></tr><tr><td style="text-align:center">%timeit statement</td><td style="text-align:center">多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用</td></tr><tr><td style="text-align:center">%who、%who_is、%whos</td><td style="text-align:center">显示interactive命名空间中定义的变量，信息级别/冗余度可变</td></tr><tr><td style="text-align:center">%xdel variable</td><td style="text-align:center">删除variable，并参加过时清除其在IPython中的对象上的一切引用</td></tr></tbody></table><h3 id="matplotlib集成与pylab模式"><a href="#matplotlib集成与pylab模式" class="headerlink" title="matplotlib集成与pylab模式"></a>matplotlib集成与pylab模式</h3><p>启动IPython时加上<code>--pylab</code>标记来集成matplotlib<code>ipython --pylab</code>。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过<code>%gui</code>对此进行手工设置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (v3<span class="number">.6</span><span class="number">.4</span>:d48eceb, Dec <span class="number">19</span> <span class="number">2017</span>, <span class="number">06</span>:<span class="number">54</span>:<span class="number">40</span>) [MSC v<span class="number">.1900</span> <span class="number">64</span> bit (AMD64)]</span><br><span class="line">Type <span class="string">'copyright'</span>, <span class="string">'credits'</span> <span class="keyword">or</span> <span class="string">'license'</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">6.2</span><span class="number">.1</span> -- An enhanced Interactive Python. Type <span class="string">'?'</span> <span class="keyword">for</span> help.</span><br><span class="line">Using matplotlib backend: TkAgg</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]:</span><br></pre></td></tr></table></figure></p><h2 id="使用命令历史"><a href="#使用命令历史" class="headerlink" title="使用命令历史"></a>使用命令历史</h2><p>IPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：</p><ol><li>只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令</li><li>在会话间持久化命令历史</li><li>将输入/输出历史记录到日志文件</li></ol><h3 id="搜索并重用命令历史"><a href="#搜索并重用命令历史" class="headerlink" title="搜索并重用命令历史"></a>搜索并重用命令历史</h3><p>如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。</p><h3 id="输入和输出变量"><a href="#输入和输出变量" class="headerlink" title="输入和输出变量"></a>输入和输出变量</h3><p>IPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 <code>_</code>(一个下划线)和 <code>__</code>(两个下划线)变量中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: <span class="number">1</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: _</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: _+<span class="number">1</span></span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="number">3</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: __</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>输入的文本保存在名为<code>_ix</code>的变量中，其中 <strong>X</strong> 是输入行的行号。每个输入变量都有一个对应的输出变量<code>_x</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: _i6</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'1+1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: _6</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>由于输入变量是字符串，因此可以用Python的<code>exec()</code>方法重新执行:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: exec(_i6)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: _</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'1+1'</span></span><br></pre></td></tr></table></figure></p><p>有几个魔术命令可以用于控制输入和输出历史。<code>%hist</code>用于打印全部或部分输入历史，可以选择是否带行号。<code>%reset</code>用于清空interactive命名空间，并可选择是否清空输入和输出缓存。<code>%xdel</code>用于从IPython系统中移除特定对象的一切引用。</p><h3 id="记录输入和输出"><a href="#记录输入和输出" class="headerlink" title="记录输入和输出"></a>记录输入和输出</h3><p>IPython能够记录整个控制台会话，包括输入和输出。执行<code>%logstart</code>即可开始记录日志：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: %logstart</span><br><span class="line">Activating auto-logging. Current session state plus future input saved.</span><br><span class="line">Filename       : ipython_log.py</span><br><span class="line">Mode           : rotate</span><br><span class="line">Output logging : <span class="keyword">False</span></span><br><span class="line">Raw input log  : <span class="keyword">False</span></span><br><span class="line">Timestamping   : <span class="keyword">False</span></span><br><span class="line">State          : active</span><br></pre></td></tr></table></figure></p><p>IPython的日志功能可以在任何时刻开启。还有与<code>%logstart</code>配套的<code>%logoff</code>、<code>%logon</code>、<code>%logstate</code>和<code>%logstop</code>，可以参考其文档。</p><h3 id="与操作系统交互"><a href="#与操作系统交互" class="headerlink" title="与操作系统交互"></a>与操作系统交互</h3><p>可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中</p><ul><li>跟系统相关的IPython魔术命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">!cmd</td><td style="text-align:center">在系统shell中执行cmd</td></tr><tr><td style="text-align:center">output=!cmd args</td><td style="text-align:center">执行cmd，并将stout存放在output中</td></tr><tr><td style="text-align:center">%alias alias_name cmd</td><td style="text-align:center">为系统shell命令定义别名</td></tr><tr><td style="text-align:center">%bookmark</td><td style="text-align:center">使用IPython的目录书签系统</td></tr><tr><td style="text-align:center">%cd directory</td><td style="text-align:center">将系统工作目录更改为directory</td></tr><tr><td style="text-align:center">%pwd</td><td style="text-align:center">返回系统的当前工作目录</td></tr><tr><td style="text-align:center">%pushd directory</td><td style="text-align:center">将当前目录入栈，并转向目标目录</td></tr><tr><td style="text-align:center">%popd</td><td style="text-align:center">弹出栈顶目录，并转向该目录</td></tr><tr><td style="text-align:center">%dirs</td><td style="text-align:center">返回一个含有当前目录栈的列表</td></tr><tr><td style="text-align:center">%dhist</td><td style="text-align:center">打印目录访问历史</td></tr><tr><td style="text-align:center">%env</td><td style="text-align:center">以dict形式返回系统环境变量</td></tr></tbody></table><h4 id="shell命令和别名"><a href="#shell命令和别名" class="headerlink" title="shell命令和别名"></a>shell命令和别名</h4><p>在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: !python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (v3<span class="number">.6</span><span class="number">.4</span>:d48eceb, Dec <span class="number">19</span> <span class="number">2017</span>, <span class="number">06</span>:<span class="number">54</span>:<span class="number">40</span>) [MSC v<span class="number">.1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>还可以将shell命令的控制台输出存放到变量中，只需将 <code>!</code> 开头的表达式赋值给变量:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">152</span>]: ip_info = !ls</span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: ip_info</span><br><span class="line">Out[<span class="number">153</span>]: [<span class="string">'experiment.py'</span>, <span class="string">'ipython_bug.py'</span>, <span class="string">'ipython_script_test.py'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h2><p>IPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。</p><h3 id="交互式调试器"><a href="#交互式调试器" class="headerlink" title="交互式调试器"></a>交互式调试器</h3><p>IPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。<code>%debug</code>命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">45</span>]: %run ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">D:\Python\ipython\ipython_bug.py <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">D:\Python\ipython\ipython_bug.py <span class="keyword">in</span> f(x, y, z)</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: %debug</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">2</span>)f()</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入<code>u</code>(或up)和<code>d</code>(或down)即可在栈跟踪的各级别之间切换:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; u</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">7</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">----&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; d</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">2</span>)f()</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">----&gt; 2     return (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>执行<code>%pdp</code>命令可以让IPython在出现异常之后自动调用调试器。<br>如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有<code>-d</code>选项的<code>%run</code>命令，这会在执行脚本文件中的代码之前打开调试器，然后输入<code>s</code>(或step)步进才能进入脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint <span class="number">1</span> at d:\python\ipython\ipython_bug.py:<span class="number">1</span></span><br><span class="line">NOTE: Enter <span class="string">'c'</span> at the ipdb&gt;  prompt to <span class="keyword">continue</span> execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">1</span>)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      <span class="number">2</span>     <span class="keyword">return</span> (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">4</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">2</span>     <span class="keyword">return</span> (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">----&gt; 4 a = 1</span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">5</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">----&gt; 5 b = 2</span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">      <span class="number">7</span> result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">6</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">----&gt; 6 c = 0</span><br><span class="line">      <span class="number">7</span> result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><p>通过<code>b num</code>在num行出设置断点，输入<code>c</code>(或continue)使脚本一直运行下去直到该断点时为止,然后输入<code>n</code>(或next)直到执行下一行(即step over):<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">53</span>]: %run -d ipython_bug.py</span><br><span class="line">Breakpoint <span class="number">1</span> at d:\python\ipython\ipython_bug.py:<span class="number">1</span></span><br><span class="line">NOTE: Enter <span class="string">'c'</span> at the ipdb&gt;  prompt to <span class="keyword">continue</span> execution.</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">1</span>)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def f(x, y, z):</span><br><span class="line">      <span class="number">2</span>     <span class="keyword">return</span> (x+y) /z</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; b <span class="number">7</span></span><br><span class="line">Breakpoint <span class="number">2</span> at d:\python\ipython\ipython_bug.py:<span class="number">7</span></span><br><span class="line">ipdb&gt; c</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">7</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">7</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">--Return--</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">&gt; d:\python\ipython\ipython_bug.py(<span class="number">7</span>)&lt;module&gt;()</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> a = <span class="number">1</span></span><br><span class="line">      <span class="number">5</span> b = <span class="number">2</span></span><br><span class="line">      <span class="number">6</span> c = <span class="number">0</span></span><br><span class="line">2---&gt; 7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p><ul><li>IPython调试器命令</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">h(elp)</td><td style="text-align:center">显示命令列表</td></tr><tr><td style="text-align:center">help command</td><td style="text-align:center">显示command的文档</td></tr><tr><td style="text-align:center">c(ontinue)</td><td style="text-align:center">恢复程序的执行</td></tr><tr><td style="text-align:center">q(uit)</td><td style="text-align:center">退出调试器，不再执行任何代码</td></tr><tr><td style="text-align:center">b(readk) number</td><td style="text-align:center">在当前文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">b path/to/file.py:number</td><td style="text-align:center">在指定文件的第number行设置一个断点</td></tr><tr><td style="text-align:center">s(tep)</td><td style="text-align:center">单步进入函数调用</td></tr><tr><td style="text-align:center">n(ext)</td><td style="text-align:center">执行当前行，并前进到当前级别的下一行</td></tr><tr><td style="text-align:center">u(p)/d(own)</td><td style="text-align:center">在函数调用栈中向上或向下移动</td></tr><tr><td style="text-align:center">a(rgs)</td><td style="text-align:center">显示当前函数的参数</td></tr><tr><td style="text-align:center">debug statement</td><td style="text-align:center">在新的(递归)调试器中调用语句statement</td></tr><tr><td style="text-align:center">l(ist)  statement</td><td style="text-align:center">显示当前行，以及当前栈级别的上下文参考代码</td></tr><tr><td style="text-align:center">w(here)</td><td style="text-align:center">打印当前位置的完整栈跟踪(包括上下文参考代码)</td></tr></tbody></table><h3 id="测试代码的执行时间-time和-timeit"><a href="#测试代码的执行时间-time和-timeit" class="headerlink" title="测试代码的执行时间:%time和%timeit"></a>测试代码的执行时间:%time和%timeit</h3><p><code>%time</code>一次执行一条语句，然后报告总体执行时间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: strings = [<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="string">'abc'</span>,<span class="string">'foobar'</span>,<span class="string">'python'</span>,<span class="string">'Guide Peple'</span>]*<span class="number">100000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: %time method1 = [x <span class="keyword">for</span> x  <span class="keyword">in</span> strings <span class="keyword">if</span> x.startswith(<span class="string">'foo'</span>)]</span><br><span class="line">Wall time: <span class="number">102</span> ms</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: %time method2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> strings <span class="keyword">if</span> x[:<span class="number">3</span>] == <span class="string">'foo'</span>]</span><br><span class="line">Wall time: <span class="number">59.2</span> ms</span><br></pre></td></tr></table></figure></p><p><code>%timeit</code>对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">59</span>]: %timeit method1 = [x <span class="keyword">for</span> x  <span class="keyword">in</span> strings <span class="keyword">if</span> x.startswith(<span class="string">'foo'</span>)]</span><br><span class="line"><span class="number">100</span> ms ± <span class="number">5.73</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10</span> loops each)</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: %timeit method2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> strings <span class="keyword">if</span> x[:<span class="number">3</span>] == <span class="string">'foo'</span>]</span><br><span class="line"><span class="number">57</span> ms ± <span class="number">7.12</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10</span> loops each)</span><br></pre></td></tr></table></figure></p><h3 id="基本性能分析：-prun和-run-p"><a href="#基本性能分析：-prun和-run-p" class="headerlink" title="基本性能分析：%prun和%run -p"></a>基本性能分析：%prun和%run -p</h3><p>代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。<code>%prun</code>分析的是Python语句而不是整个.py文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">141</span>]: %cpaste</span><br><span class="line">Pasting code; enter <span class="string">'--'</span> alone on the line to stop <span class="keyword">or</span> use Ctrl-D.</span><br><span class="line">:<span class="function"><span class="keyword">def</span> <span class="title">run_experiment</span><span class="params">(niter=<span class="number">100</span>)</span>:</span></span><br><span class="line">    k = <span class="number">100</span></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(niter):</span><br><span class="line">        mat = np.random.randn(k, k)</span><br><span class="line">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class="line">        results.append(max_eigenvalue)</span><br><span class="line">    <span class="keyword">return</span> results:::::::</span><br><span class="line">:</span><br><span class="line">:--</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: %prun -l <span class="number">7</span> -s cumulative run_experiment()</span><br><span class="line">         <span class="number">3804</span> function calls <span class="keyword">in</span> <span class="number">0.901</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced <span class="keyword">from</span> <span class="number">31</span> to <span class="number">7</span> due to restriction &lt;<span class="number">7</span>&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.901</span>    <span class="number">0.901</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="keyword">exec</span>&#125;</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.901</span>    <span class="number">0.901</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.002</span>    <span class="number">0.002</span>    <span class="number">0.901</span>    <span class="number">0.901</span> &lt;ipython-input<span class="number">-141</span><span class="number">-78</span>ef833ef08b&gt;:<span class="number">1</span>(run_experiment)</span><br><span class="line">      <span class="number">100</span>    <span class="number">0.814</span>    <span class="number">0.008</span>    <span class="number">0.838</span>    <span class="number">0.008</span> linalg.py:<span class="number">834</span>(eigvals)</span><br><span class="line">      <span class="number">100</span>    <span class="number">0.060</span>    <span class="number">0.001</span>    <span class="number">0.060</span>    <span class="number">0.001</span> &#123;method <span class="string">'randn'</span> of <span class="string">'mtrand.RandomState'</span> objects&#125;</span><br><span class="line">      <span class="number">100</span>    <span class="number">0.012</span>    <span class="number">0.000</span>    <span class="number">0.018</span>    <span class="number">0.000</span> linalg.py:<span class="number">213</span>(_assertFinite)</span><br><span class="line">      <span class="number">300</span>    <span class="number">0.008</span>    <span class="number">0.000</span>    <span class="number">0.008</span>    <span class="number">0.000</span> &#123;method <span class="string">'reduce'</span> of <span class="string">'numpy.ufunc'</span> objects&#125;</span><br></pre></td></tr></table></figure></p><p>执行<code>%run -p -s cumulative experiment.py</code>也能达到以上的效果，无需退出IPython:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: %run -p -l <span class="number">7</span> -s cumulative experiment.py</span><br><span class="line">Largest one we saw:<span class="number">11.9165340849</span></span><br><span class="line">         <span class="number">3888</span> function calls (<span class="number">3887</span> primitive calls) <span class="keyword">in</span> <span class="number">0.467</span> seconds</span><br><span class="line"></span><br><span class="line">   Ordered by: cumulative time</span><br><span class="line">   List reduced <span class="keyword">from</span> <span class="number">77</span> to <span class="number">7</span> due to restriction &lt;<span class="number">7</span>&gt;</span><br><span class="line"></span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">      <span class="number">2</span>/<span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.467</span>    <span class="number">0.467</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="keyword">exec</span>&#125;</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.467</span>    <span class="number">0.467</span> &lt;string&gt;:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.467</span>    <span class="number">0.467</span> interactiveshell.py:<span class="number">2445</span>(safe_execfile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.467</span>    <span class="number">0.467</span> py3compat.py:<span class="number">182</span>(execfile)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.467</span>    <span class="number">0.467</span> experiment.py:<span class="number">1</span>(&lt;module&gt;)</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.001</span>    <span class="number">0.001</span>    <span class="number">0.466</span>    <span class="number">0.466</span> experiment.py:<span class="number">5</span>(run_experiment)</span><br><span class="line">      <span class="number">100</span>    <span class="number">0.431</span>    <span class="number">0.004</span>    <span class="number">0.436</span>    <span class="number">0.004</span> linalg.py:<span class="number">819</span>(eigvals)</span><br></pre></td></tr></table></figure></p><h2 id="ipython-html-notebook"><a href="#ipython-html-notebook" class="headerlink" title="ipython html notebook"></a>ipython html notebook</h2><p>需要安装 <em>jupyter</em> 来使用该功能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure></p><p>这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。</p>]]></content>
    
    <summary type="html">
    
      IPython有一个可以直接进行绘图的GUI控制台、一个基于Web的交互式笔记本，以及一个轻量级的快速并行计算引擎。
    
    </summary>
    
      <category term="数据分析" scheme="http://coldjune.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="IPython" scheme="http://coldjune.com/tags/IPython/"/>
    
      <category term="数据分析" scheme="http://coldjune.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python文本处理</title>
    <link href="http://coldjune.com/2018/03/13/Python%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <id>http://coldjune.com/2018/03/13/Python文本处理/</id>
    <published>2018-03-13T06:48:15.000Z</published>
    <updated>2018-03-26T00:55:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逗号分割值-CSV"><a href="#逗号分割值-CSV" class="headerlink" title="逗号分割值(CSV)"></a>逗号分割值(CSV)</h2><h3 id="CSV简介"><a href="#CSV简介" class="headerlink" title="CSV简介"></a>CSV简介</h3><p><strong>逗号分割值(Comma-Spearated Value, CSV)</strong> 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用<code>str.splt(&#39;,&#39;)</code>来解析，因为会处理单个字段中含有逗号的情形。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment">#  创建需要导入的数据源</span></span><br><span class="line">DATA = (</span><br><span class="line">    (<span class="number">1</span>, <span class="string">'Web Clients and Servers'</span>, <span class="string">'base64,urllib'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'Web program：CGI &amp; WSGI'</span>, <span class="string">'cgi, time, wsgiref'</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'Web Services'</span>, <span class="string">'urllib,twython'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'*** WRITTING CSV DATA'</span>)</span><br><span class="line"><span class="comment"># 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> w:</span><br><span class="line">    <span class="comment"># csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象</span></span><br><span class="line">    <span class="comment"># 可以用来在打开的文件中逐行写入逗号分隔的数据。</span></span><br><span class="line">    writer = csv.writer(w)</span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> DATA:</span><br><span class="line">        writer.writerow(record)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># writer对象提供一个writerow()方法</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'****REVIEW OF SAVED DATA'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'bookdata.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> r:</span><br><span class="line">    <span class="comment"># csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行</span></span><br><span class="line">    <span class="comment"># csv.reader()使用一个已打开文件的句柄，返回一个reader对象</span></span><br><span class="line">    <span class="comment"># 当逐行迭代数据时，CSV数据会自动解析并返回给用户</span></span><br><span class="line">    reader = csv.reader(r)</span><br><span class="line">    <span class="keyword">for</span> chap, title, modpkgs <span class="keyword">in</span> reader:</span><br><span class="line">        print(<span class="string">'Chapter %s: %r (featureing %s)'</span> % (chap, title, modpkgs))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*** WRITTING CSV DATA</span><br><span class="line">****REVIEW OF SAVED DATA</span><br><span class="line">Chapter 1: &apos;Web Clients and Servers&apos; (featureing base64,urllib)</span><br><span class="line">Chapter 2: &apos;Web program：CGI &amp; WSGI&apos; (featureing cgi, time, wsgiref)</span><br><span class="line">Chapter 3: &apos;Web Services&apos; (featureing urllib,twython)</span><br></pre></td></tr></table></figure><p>csv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。</p><ul><li>JSON和Python类型之间的区别</li></ul><table><thead><tr><th style="text-align:center">JSON</th><th style="text-align:center">Python3</th></tr></thead><tbody><tr><td style="text-align:center">object</td><td style="text-align:center">dict</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">list tuple</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">str</td></tr><tr><td style="text-align:center">number(int)</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">number(real)</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">True</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">False</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">None</td></tr></tbody></table><p>json提供了<code>dump()</code>/<code>load()</code>和<code>dumps()</code>/<code>loads()</code>。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个表示Python对象的字符串</span></span><br><span class="line"><span class="comment"># 用来美观地输出Python对象</span></span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: [<span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Jerry'</span>],</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示转储的Python字典</span></span><br><span class="line">print(<span class="string">'***RAW DICT***'</span>)</span><br><span class="line">print(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用更美观的方法输出</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED DICT***'</span>)</span><br><span class="line">pprint(Books)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.dumps()内置的美观的输出方式，传递缩进级别</span></span><br><span class="line">print(<span class="string">'***PRETTY_PRINTED JSON***'</span>)</span><br><span class="line">print(dumps(Books, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">***RAW DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;title&apos;: &apos;Core&apos;, &apos;edition&apos;: 2, &apos;year&apos;: 2007&#125;, &apos;0000002&apos;: &#123;&apos;title&apos;: &apos;Python Programming&apos;, &apos;edition&apos;: 3, &apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;], &apos;year&apos;: 2009&#125;, &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED DICT***</span><br><span class="line">&#123;&apos;0000001&apos;: &#123;&apos;edition&apos;: 2, &apos;title&apos;: &apos;Core&apos;, &apos;year&apos;: 2007&#125;,</span><br><span class="line"> &apos;0000002&apos;: &#123;&apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;],</span><br><span class="line">             &apos;edition&apos;: 3,</span><br><span class="line">             &apos;title&apos;: &apos;Python Programming&apos;,</span><br><span class="line">             &apos;year&apos;: 2009&#125;,</span><br><span class="line"> &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class="line">***PRETTY_PRINTED JSON***</span><br><span class="line">&#123;</span><br><span class="line">    &quot;0000001&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Core&quot;,</span><br><span class="line">        &quot;edition&quot;: 2,</span><br><span class="line">        &quot;year&quot;: 2007</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000002&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Python Programming&quot;,</span><br><span class="line">        &quot;edition&quot;: 3,</span><br><span class="line">        &quot;authors&quot;: [</span><br><span class="line">            &quot;Jack&quot;,</span><br><span class="line">            &quot;Bob&quot;,</span><br><span class="line">            &quot;Jerry&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;0000003&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;Programming&quot;,</span><br><span class="line">        &quot;year&quot;: 2009</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。</p><ul><li><p>将字典转化为XML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, tostring</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parseString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class="line"><span class="comment"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class="line">Books = &#123;</span><br><span class="line">    <span class="string">'0000001'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Core'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2007</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000002'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Python Programming'</span>,</span><br><span class="line">        <span class="string">'edition'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'authors'</span>: <span class="string">'Jack:Bob:Jerry'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'0000003'</span>: &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Programming'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="number">2009</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶层对象</span></span><br><span class="line"><span class="comment"># 将所有其他内容添加到该节点下</span></span><br><span class="line">books = Element(<span class="string">'books'</span>)</span><br><span class="line"><span class="keyword">for</span> isbn, info <span class="keyword">in</span> Books.items():</span><br><span class="line">    <span class="comment"># 对于每一本书添加一个book子节点</span></span><br><span class="line">    <span class="comment"># 如果原字典没有提供作者和版本，则使用提供的默认值。</span></span><br><span class="line">    book = SubElement(books, <span class="string">'book'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'authors'</span>, <span class="string">'Bob'</span>)</span><br><span class="line">    info.setdefault(<span class="string">'edition'</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="comment"># 遍历所有键值对，将这些内容作为其他子节点添加到每个book中</span></span><br><span class="line">        SubElement(book, key).text = <span class="string">', '</span>.join(str(val).split(<span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">xml = tostring(books)</span><br><span class="line">print(<span class="string">'*** RAW XML***'</span>)</span><br><span class="line">print(xml)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***PRETTY-PRINTED XML***'</span>)</span><br><span class="line">dom = parseString(xml)</span><br><span class="line">print(dom.toprettyxml(<span class="string">'     '</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'***FLAT STRUCTURE***'</span>)</span><br><span class="line"><span class="keyword">for</span> elmt <span class="keyword">in</span> books.iter():</span><br><span class="line">    print(elmt.tag, <span class="string">'-'</span>, elmt.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n***TITLE ONLY***'</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books.findall(<span class="string">'.//title'</span>):</span><br><span class="line">    print(book.text)</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">*** RAW XML***</span><br><span class="line">b&apos;&lt;books&gt;&lt;book&gt;&lt;title&gt;Core&lt;/title&gt;&lt;edition&gt;2&lt;/edition&gt;&lt;year&gt;2007&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;edition&gt;3&lt;/edition&gt;&lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;&lt;year&gt;2009&lt;/year&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Programming&lt;/title&gt;&lt;year&gt;2009&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;edition&gt;1&lt;/edition&gt;&lt;/book&gt;&lt;/books&gt;&apos;</span><br><span class="line">***PRETTY-PRINTED XML***</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Core&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;2&lt;/edition&gt;</span><br><span class="line">          &lt;year&gt;2007&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Python Programming&lt;/title&gt;</span><br><span class="line">          &lt;edition&gt;3&lt;/edition&gt;</span><br><span class="line">          &lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">     &lt;book&gt;</span><br><span class="line">          &lt;title&gt;Programming&lt;/title&gt;</span><br><span class="line">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class="line">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class="line">          &lt;edition&gt;1&lt;/edition&gt;</span><br><span class="line">     &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br><span class="line"></span><br><span class="line">***FLAT STRUCTURE***</span><br><span class="line">books - None</span><br><span class="line">book - None</span><br><span class="line">title - Core</span><br><span class="line">edition - 2</span><br><span class="line">year - 2007</span><br><span class="line">authors - Bob</span><br><span class="line">book - None</span><br><span class="line">title - Python Programming</span><br><span class="line">edition - 3</span><br><span class="line">authors - Jack, Bob, Jerry</span><br><span class="line">year - 2009</span><br><span class="line">book - None</span><br><span class="line">title - Programming</span><br><span class="line">year - 2009</span><br><span class="line">authors - Bob</span><br><span class="line">edition - 1</span><br><span class="line"></span><br><span class="line">***TITLE ONLY***</span><br><span class="line">Core</span><br><span class="line">Python Programming</span><br><span class="line">Programming</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      无论什么类型的应用，都需要处理成可读的数据，而数据一般是文本。Python标准库有3个文本处理模块和包，它们分别可以处理csv、json、xml
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="文本处理" scheme="http://coldjune.com/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Web框架:Django</title>
    <link href="http://coldjune.com/2018/03/12/Web%E6%A1%86%E6%9E%B6-Django/"/>
    <id>http://coldjune.com/2018/03/12/Web框架-Django/</id>
    <published>2018-03-12T08:46:21.000Z</published>
    <updated>2018-03-26T00:55:08.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h2><ul><li><p>安装<br>在使用<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>开发之前，必须安装必需的组件，包括依赖组件和Django本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure></li><li><p>项目和应用<br><strong>项目</strong> 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 <strong>应用</strong>。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。</p></li></ul><ol><li><p><strong>在Django中创建项目</strong><br>Django自带有一个名为<code>django-admin.py</code>/<code>django-admin.exe</code>的工具，它可以简.<br>化任务。在POSIX平台上，一般在<code>/usr/local/bin</code>、<code>/usr/bin</code>这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如<code>E:\Python\Python36\Scripts</code>。两种系统都应该确保文件位于PATH环境变量中。<br>在项目文件加下执行命令创建项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure></li><li><p><strong>Django项目文件</strong></p></li></ol><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/用途</th></tr></thead><tbody><tr><td style="text-align:center"><strong>init</strong>.py</td><td style="text-align:center">告诉Python这是一个软件包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">全局URL配置(“URLconf”)</td></tr><tr><td style="text-align:center">setting.py</td><td style="text-align:center">项目相关的配置</td></tr><tr><td style="text-align:center">manage.py</td><td style="text-align:center">应用的命令行接口</td></tr></tbody></table><ul><li>运行开发服务器<br>Django内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：</li></ul><ol><li>可以直接运行与测试项目和应用，无需完整的生产环境</li><li>当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启</li><li>开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容</li></ol><blockquote><p>启动服务器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>在项目目录下使用如下命令创建一个应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py startapp blog</span><br></pre></td></tr></table></figure></p><p>这样就建立了一个blog目录，其中有如下内容：</p><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">描述/目的</th></tr></thead><tbody><tr><td style="text-align:center">__init.py</td><td style="text-align:center">告诉Python这是一个包</td></tr><tr><td style="text-align:center">urls.py</td><td style="text-align:center">应用的URL配置文件(“URLconf”)，这个文件并不像项目的URLconf那样自动创建</td></tr><tr><td style="text-align:center">models.py</td><td style="text-align:center">数据模型</td></tr><tr><td style="text-align:center">views.py</td><td style="text-align:center">视图函数(即MVC中的控制器)</td></tr><tr><td style="text-align:center">tests.py</td><td style="text-align:center">单元测试</td></tr></tbody></table><p>与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 <em>settings.py</em>，将应用名称(<strong>blog</strong>)添加到元组的末尾。Django使用 <strong>INSTALLED_APPS</strong> 来配置系统的不同部分，包括自动管理应用程序和测试框架。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="创建模型添加数据库服务"><a href="#创建模型添加数据库服务" class="headerlink" title="创建模型添加数据库服务"></a>创建模型添加数据库服务</h3><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p><em>models.py</em> 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多<a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/" target="_blank" rel="noopener">字段类型</a>，用来将数据映射到应用中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br></pre></td></tr></table></figure></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>在项目的<em>setting.py</em>文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):<strong>ENGINE</strong>、<strong>NAME</strong>、<strong>HOST</strong>、<strong>PORT</strong>、<strong>USER</strong>、<strong>PASSWORD</strong>。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。</p><ul><li><p>使用MySQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用mysql</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django_test'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用SQLite<br>SQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 使用sqlite</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>使用 <em>makemigrations</em> 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py makemigrations</span><br></pre></td></tr></table></figure></p><p>使用 <em>migrate</em> 映射到数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py migrate</span><br></pre></td></tr></table></figure></p><h3 id="Python应用Shell"><a href="#Python应用Shell" class="headerlink" title="Python应用Shell"></a>Python应用Shell</h3><h4 id="在Django中使用Python-shell"><a href="#在Django中使用Python-shell" class="headerlink" title="在Django中使用Python shell"></a>在Django中使用Python shell</h4><p>即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class="line">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure></p><p><a href="https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api" target="_blank" rel="noopener">Django shell</a>和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 <em>-i</em> 来强制使用普通解释器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python3 ./manage.py shell -i python</span><br><span class="line"></span><br><span class="line">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="测试数据模型"><a href="#测试数据模型" class="headerlink" title="测试数据模型"></a>测试数据模型</h4><p>在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from datetime import datetime</span><br><span class="line"></span><br><span class="line">In [2]: from blog.models import BlogPost</span><br><span class="line"></span><br><span class="line">In [3]: BlogPost.objects.all()</span><br><span class="line">Out[3]: &lt;QuerySet [&lt;BlogPost: BlogPost object (1)&gt;, &lt;BlogPost: BlogPost object (2)&gt;, &lt;BlogPost: BlogPost object (3)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: bp = BlogPost(title=&apos;my blog&apos;, body=&apos;&apos;&apos;</span><br><span class="line">   ...: my 1st blog...</span><br><span class="line">   ...: yoooo!&apos;&apos;&apos;,</span><br><span class="line">   ...: timestamp=datetime.now())</span><br><span class="line"></span><br><span class="line">In [5]: bp</span><br><span class="line">Out[5]: &lt;BlogPost: BlogPost object (None)&gt;</span><br><span class="line"></span><br><span class="line">In [6]: bp.save()</span><br><span class="line"></span><br><span class="line">In [7]: BlogPost.objects.count()</span><br><span class="line">Out[7]: 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [9]: bp = BlogPost.objects.all()[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [11]: print(bp.title)</span><br><span class="line">test shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [13]: print(bp.body)</span><br><span class="line"></span><br><span class="line">my 1st blog post...</span><br><span class="line">yo!</span><br><span class="line"></span><br><span class="line">In [14]: bp.timestamp.ctime()</span><br><span class="line">Out[14]: &apos;Sun Mar 11 08:13:31 2018&apos;</span><br></pre></td></tr></table></figure></p><p>前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。<br>设置时区:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Django管理应用"><a href="#Django管理应用" class="headerlink" title="Django管理应用"></a>Django管理应用</h3><p>admin应用让开发者在完成完整的UI之前验证处理数据的代码。</p><h4 id="设置admin"><a href="#设置admin" class="headerlink" title="设置admin"></a>设置admin</h4><p>在 <em>setting.py</em> 的<code>INSTALLED_APP</code>中添加<code>&#39;django.contrib.admin&#39;,</code>，然后运行<code>python3 ./manage.py makemigrations</code>和<code>python3 ./manage.py migrate</code>两条命令来创建其对应的表。在admin设置完之后于 <em>urls.py</em> 中设置url路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 <em>admin.py</em> 中注册BlogPost：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(models.BlogPost)</span><br></pre></td></tr></table></figure></p><h4 id="使用admin"><a href="#使用admin" class="headerlink" title="使用admin"></a>使用admin</h4><p>使用命令<code>python3 ./manage.py runserver</code>启动服务，然后在浏览器中输入 <em><a href="http://localhost:8000/admin" target="_blank" rel="noopener">http://localhost:8000/admin</a></em> 访问admin页面。在访问之前使用<code>python3 manage.py createsuperuser</code>创建的超级用户的用户名和密码用于登录管理页面。（账号：<em>root</em>，密码：<em>Aa123456</em>）<br>为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'timestamp'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(models.BlogPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></p><h3 id="创建博客的用户界面"><a href="#创建博客的用户界面" class="headerlink" title="创建博客的用户界面"></a>创建博客的用户界面</h3><p>Django shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：</p><ol><li><strong>模板</strong>，用于显示通过Python类字典对象传入的信息</li><li><strong>视图函数</strong>，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果</li><li><strong>模式</strong>，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图</li></ol><p>Django是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：</p><ol><li>因为需要一些可观察对象，所以先创建基本的模板</li><li>设计一个简单的URL模式，让Django可以立刻访问应用</li><li>开发出一个视图函数原型，然后在此基础上迭代开发<br>在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 <em>测试驱动模型(TDD)</em> 的开发模式。</li></ol><h4 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a><a href="https://docs.djangoproject.com/en/2.0/topics/templates/#tags" target="_blank" rel="noopener">创建模板</a></h4><ul><li><p><em>变量标签</em><br><strong>变量标签</strong> 是由 <em>花括号()</em> 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 <em>点分割标识</em> 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号”()”来表示这个函数或方法可调用。</p></li><li><p><em>过滤器</em><br><strong>过滤器</strong> 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 <em>管道符号(“|”)</em>，接着跟上过滤器名称。<code>&lt;h2&gt; { { post.title | title } } &lt;/h2&gt;</code></p></li><li><p><em>上下文</em><br><strong>上下文</strong> 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为”post”。通过上下文传入所有的博文，这样可以通过循环显示所有文章。</p></li><li><p><em>块标签</em><br><strong>块标签</strong> 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。</p></li></ul><p>将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 <strong>templates</strong> 目录下，模版名称任取，但模版目录一定是 <em>templates</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建URL模式"><a href="#创建URL模式" class="headerlink" title="创建URL模式"></a>创建URL模式</h4><ul><li>项目的URLconf<br>服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># include函数将动作推迟到其他URLconf</span></span><br><span class="line">    <span class="comment"># 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py</span></span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p><em>include()</em> 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（<em>当输入’<a href="http://localhost:8080/blog/foo/bar" target="_blank" rel="noopener">http://localhost:8080/blog/foo/bar</a>‘ 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py</em>）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 <strong>字符串</strong>，未使用include传递的是 <strong>对象</strong>。</p><ul><li>应用的URLconf<br>在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。</p><h4 id="创建视图函数"><a href="#创建视图函数" class="headerlink" title="创建视图函数"></a>创建视图函数</h4><p>一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：</p><ol><li>向数据库查询所有博客条目</li><li>载入模板文件</li><li>为模板创建上下文字典</li><li>将模板渲染到HTML中</li><li>通过HTTP响应返回HTML<br>在应用的views.py中添加如下代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader, Context</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = BlogPost.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="改进输出"><a href="#改进输出" class="headerlink" title="改进输出"></a>改进输出</h3><p>现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。</p><blockquote><p>BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。</p></blockquote><p>实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><p>为了测试限制显示数目，先启动Django shell添加数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python ./manage.py shell</span><br><span class="line">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; from blog.models import BlogPost</span><br><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     bp = BlogPost(title=&apos;post $%d&apos; % i ,body=&apos;body of post $%d&apos; %d, timestamp=datetime.now())</span><br><span class="line">...     bp.save()</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后使用切片的方式获取最新的10篇(views.py)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all().order_by(<span class="string">'-timestamp'</span>)[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>设置模型的默认排序方式</li></ul><p>如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 <strong>Meta</strong> 的内部类，在其中设置一个名为 <strong>ordering</strong> 的属性(models.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class="line"><span class="string">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class="line"><span class="string">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = (<span class="string">'-timestamp'</span>,)</span><br></pre></td></tr></table></figure></p><p>取消视图函数中的排序(views.py):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h3><ol><li><p>添加一个HTML表单，让用户可以输入数据(archive.html),为了防止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%for post in posts%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入(URL，视图)这样的URLConf项<br>使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> blog.views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class="line">    path(<span class="string">''</span>, blog.views.archive),</span><br><span class="line">    path(<span class="string">r'create/'</span>, blog.views.create_blogpost)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>创建视图来处理用户输入<br>在应用的views.py中添加上面定义的处理方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        BlogPost(</span><br><span class="line">            title=request.POST.get(<span class="string">'title'</span>),</span><br><span class="line">            body=request.POST.get(<span class="string">'body'</span>),</span><br><span class="line">            timestamp=datetime.now()</span><br><span class="line">        ).save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 <em>跨站点请求伪造（Cross-site Request Forgery,CSRF）</em> 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/blog/create/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>&#123;%csrf_token%&#125;</span><br><span class="line">    Title:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Body:</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;%for post in posts%&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过模板发送向这些标记请求的上下文实例，这里将<code>archive()</code>方法调用的<code>render_to_response()</code>改为<code>render</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class="line">    posts = BlogPost.objects.all()[:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'archive.html'</span>, &#123;<span class="string">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="表单和模型表单"><a href="#表单和模型表单" class="headerlink" title="表单和模型表单"></a>表单和模型表单</h3><ul><li><p>如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。</span></span><br><span class="line">        <span class="comment"># 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。</span></span><br><span class="line">        model = BlogPost</span><br><span class="line">        exclude = (<span class="string">'timestamp'</span>,)</span><br></pre></td></tr></table></figure></li><li><p>使用ModelForm来生成HTML表单(archive.html):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/blog/create/"</span> method=<span class="string">"post"</span>&gt;&#123;%csrf_token%&#125;</span><br><span class="line">  &lt;table&gt;&#123;&#123;form&#125;&#125;&lt;/table&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &#123;%<span class="keyword">for</span> post <span class="keyword">in</span> posts%&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123;post.title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.timestamp&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;post.body&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中<code>create_blogpost()</code>方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blogpost</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 检查POST请求</span></span><br><span class="line">        <span class="comment"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class="line">        <span class="comment"># BlogPost(</span></span><br><span class="line">        <span class="comment">#     title=request.POST.get('title'),</span></span><br><span class="line">        <span class="comment">#     body=request.POST.get('body'),</span></span><br><span class="line">        <span class="comment">#     timestamp=datetime.now()</span></span><br><span class="line">        <span class="comment"># ).save()</span></span><br><span class="line">        form = BlogPostForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            post = form.save(commit=<span class="keyword">False</span>)</span><br><span class="line">            post.timestamp = datetime.now()</span><br><span class="line">            post.save()</span><br><span class="line">    <span class="comment"># 重定向会/blog</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h3><p>Django通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 <em>文档测试(doctest)</em></p><blockquote><p>应用的tests.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.test.client <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostTest</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># 测试方法必须以“test_”开头，方法名后面的部分随意。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_obj_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 这里仅仅通过测试确保对象成功创建，并验证标题内容</span></span><br><span class="line">        BlogPost.objects.create(</span><br><span class="line">            title=<span class="string">'raw title'</span>, body=<span class="string">'raw body'</span>, timestamp=datetime.now())</span><br><span class="line">        <span class="comment"># 如果两个参数相等则测试成功，否则该测试失败</span></span><br><span class="line">        <span class="comment"># 这里验证对象的数目和标题</span></span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'raw title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">200</span>, ))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_slash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试确认重定向</span></span><br><span class="line">        response = self.client.get(<span class="string">'/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_empty_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，</span></span><br><span class="line">        <span class="comment"># 代码应该忽略掉这个请求，然后重定向到'/blog'</span></span><br><span class="line">        response = self.client.get(<span class="string">'/blog/create/'</span>)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_post_create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到"/blog"</span></span><br><span class="line">        response = self.client.post(<span class="string">'/blog/create/'</span>, &#123;</span><br><span class="line">            <span class="string">'title'</span>: <span class="string">'post title'</span>,</span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'post body'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        self.assertIn(response.status_code, (<span class="number">301</span>, <span class="number">302</span>))</span><br><span class="line">        self.assertEqual(<span class="number">1</span>, BlogPost.objects.count())</span><br><span class="line">        self.assertEqual(<span class="string">'post title'</span>, BlogPost.objects.get(id=<span class="number">1</span>).title)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/mysite" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      Web框架可以用于提供Web应用的所有相关服务，如Web服务器、数据库ORM、模板和所有需要的中间件hook
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web框架" scheme="http://coldjune.com/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Django" scheme="http://coldjune.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CGI和WSGI</title>
    <link href="http://coldjune.com/2018/03/08/CGI%E5%92%8CWSGI/"/>
    <id>http://coldjune.com/2018/03/08/CGI和WSGI/</id>
    <published>2018-03-08T01:08:11.000Z</published>
    <updated>2018-03-26T00:55:08.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用</p><h3 id="CGI简介"><a href="#CGI简介" class="headerlink" title="CGI简介"></a>CGI简介</h3><ul><li><p><strong>通用网关接口(Common Gateway Interface CGI)</strong> 在Web服务器和应用之间充当了交互作用</p><ol><li>Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序</li><li>Web服务器和客户端等待HTML页面</li><li>应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户</li><li>表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端<br>含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。<em>CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)</em></li></ol></li><li><p>CGI应用程序和和相关模块</p><ol><li><p>CGI应用程序<br>CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 <em>请求(request)</em>。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。<strong>用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间</strong>。</p></li><li><p>cgi模块<br>cgi模块有一个主要类 <em>FieldStorage</em> 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。<br>这些值有三个对象：<em>FieldStorage</em> 对象；<em>MiniFieldStorage</em> 对象用在没有文件上传或mulitple-part格式数据的情况下，<em>MiniFieldStorage</em> 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。</p></li><li><p>cgitb模块<br>cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。</p></li></ol></li></ul><h3 id="CGI应用程序"><a href="#CGI应用程序" class="headerlink" title="CGI应用程序"></a>CGI应用程序</h3><blockquote><p>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们</p></blockquote><ul><li>CGI服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> FieldStorage</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvCGI</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量</span></span><br><span class="line">    header = <span class="string">'Content-Type:text/html\n\n'</span></span><br><span class="line">    url = <span class="string">'/cgi-bin/advcgi.py'</span></span><br><span class="line">    <span class="comment"># HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素</span></span><br><span class="line">    formhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;HTML&gt;</span></span><br><span class="line"><span class="string">            &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">            &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                &lt;H2&gt;Advanced CGI Demo&lt;/H2&gt;</span></span><br><span class="line"><span class="string">                &lt;FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;My Cookie Setting&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;LI&gt;</span></span><br><span class="line"><span class="string">                        &lt;CODE&gt;&lt;B&gt;CPPuser = %s&lt;/B&gt;&lt;/CODE&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter cookie value&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=cookie value='%s'/&gt;(&lt;I&gt;optional&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter your name&lt;BR&gt;</span></span><br><span class="line"><span class="string">                            &lt;INPUT NAME=person VALUE='%s'/&gt;(&lt;I&gt;required&lt;/I&gt;)</span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;What languages can you program in ?</span></span><br><span class="line"><span class="string">                        (&lt;I&gt;at least one required&lt;/I&gt;)  </span></span><br><span class="line"><span class="string">                        &lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">                        &lt;H3&gt;Enter file to upload&lt;SMALL&gt;(max size 4k)&lt;/SMALL&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45&gt;</span></span><br><span class="line"><span class="string">                        &lt;P&gt;&lt;INPUT TYPE=submit /&gt;</span></span><br><span class="line"><span class="string">                    &lt;/LI&gt;</span></span><br><span class="line"><span class="string">                &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">            &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">        &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    langset = (<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'C++'</span>, <span class="string">'C'</span>, <span class="string">'JavaScript'</span>)</span><br><span class="line"></span><br><span class="line">    langItem = <span class="string">'&lt;INPUT TYPE=checkbox NAME=lang VALUE="%s"%s&gt; %s\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 通过HTTP_COOKIE访问这些值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'HTTP_COOKIE'</span> <span class="keyword">in</span> environ:</span><br><span class="line">            cookies = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> environ[<span class="string">'HTTP_COOKIE'</span>].split(<span class="string">';'</span>)]</span><br><span class="line">            <span class="keyword">for</span> eachCookie <span class="keyword">in</span> cookies:</span><br><span class="line">                <span class="comment"># 寻找以CPP开头的字符串</span></span><br><span class="line">                <span class="comment"># 只查找，名为“CPPuser”和“CPPinfo”的cookie值</span></span><br><span class="line">                <span class="keyword">if</span> len(eachCookie) &gt; <span class="number">6</span> <span class="keyword">and</span> eachCookie[:<span class="number">3</span>] == <span class="string">'CPP'</span>:</span><br><span class="line">                    <span class="comment"># 去除索引8处的值进行计算，计算结果保存到Python对象中</span></span><br><span class="line">                    tag = eachCookie[<span class="number">3</span>:<span class="number">7</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。</span></span><br><span class="line">                        self.cookies[tag] = eval(unquote(eachCookie[<span class="number">8</span>:]))</span><br><span class="line">                    <span class="keyword">except</span> (NameError, SyntaxError):</span><br><span class="line">                        self.cookies[tag] = unquote(eachCookie[<span class="number">8</span>:])</span><br><span class="line">            <span class="comment"># 如果这个cookie丢失，就给他指定一个空字符串</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'info'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'info'</span>] = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'user'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.cookies:</span><br><span class="line">                self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cookies[<span class="string">'info'</span>] = self.cookies[<span class="string">'user'</span>] = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cookies[<span class="string">'info'</span>] != <span class="string">''</span>:</span><br><span class="line">            self.who, langstr, self.fn = self.cookies[<span class="string">'info'</span>].split(<span class="string">';'</span>)</span><br><span class="line">            self.langs = langstr.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.who = self.fn = <span class="string">''</span></span><br><span class="line">            self.langs = [<span class="string">'Python'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_form</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将表单显示给用户</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式</span></span><br><span class="line">        self.get_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        langstr = []</span><br><span class="line">        <span class="keyword">for</span> eachLang <span class="keyword">in</span> AdvCGI.langset:</span><br><span class="line">            langstr.append(AdvCGI.langItem % (</span><br><span class="line">                eachLang, <span class="string">' CHECKED'</span> <span class="keyword">if</span> eachLang <span class="keyword">in</span> self.langs <span class="keyword">else</span> <span class="string">''</span>, eachLang))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.formhtml % (</span><br><span class="line">            AdvCGI.url, cookstatus, usercook, self.who,</span><br><span class="line">            <span class="string">''</span>.join(langstr), self.fn)))</span><br><span class="line"></span><br><span class="line">    errhtml = <span class="string">'''</span></span><br><span class="line"><span class="string">            &lt;HTML&gt;</span></span><br><span class="line"><span class="string">                &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">                    &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">                &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">                &lt;BODY&gt;</span></span><br><span class="line"><span class="string">                    &lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">                    &lt;B&gt;%s&lt;/B&gt;</span></span><br><span class="line"><span class="string">                    &lt;P&gt;</span></span><br><span class="line"><span class="string">                    &lt;FORM&gt;</span></span><br><span class="line"><span class="string">                        &lt;INPUT TYPE= button VALUE=Back ONCLICK="window.history.back()"&gt;&lt;/INPUT&gt;</span></span><br><span class="line"><span class="string">                    &lt;/FORM&gt;</span></span><br><span class="line"><span class="string">                &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;/HTML&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成错误页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (AdvCGI.header, AdvCGI.errhtml % (self.error)))</span><br><span class="line"></span><br><span class="line">    reshtml = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;HTML&gt;</span></span><br><span class="line"><span class="string">        &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">            &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">        &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">        &lt;BODY&gt;</span></span><br><span class="line"><span class="string">            &lt;H2&gt;Your Uploaded Data&lt;/H2&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your cookie value is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your name is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;You can program in the following languages:&lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;UL&gt;%s&lt;/UL&gt;</span></span><br><span class="line"><span class="string">            &lt;H3&gt;Your uploaded file...&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Name: &lt;I&gt;%s&lt;/I&gt;&lt;BR&gt;</span></span><br><span class="line"><span class="string">                Contents:</span></span><br><span class="line"><span class="string">            &lt;/H3&gt;</span></span><br><span class="line"><span class="string">            &lt;PRE&gt;%s&lt;/PRE&gt;</span></span><br><span class="line"><span class="string">            Click &lt;A HREF="%s"&gt;&lt;B&gt;here&lt;/B&gt;&lt;/A&gt; to return to form.</span></span><br><span class="line"><span class="string">        &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">    &lt;/HTML&gt;'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_cpp_cookies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> eachCookie <span class="keyword">in</span> self.cookies:</span><br><span class="line">            print(<span class="string">'Set-Cookie: CPP%s=%s; path=/'</span> % (</span><br><span class="line">                eachCookie, quote(self.cookies[eachCookie])))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成结果页面</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        MAXBYTES = <span class="number">4096</span></span><br><span class="line">        langlist = <span class="string">''</span>.join(<span class="string">'&lt;LI&gt;%s&lt;BR&gt;'</span> % eachLang <span class="keyword">for</span> eachLang <span class="keyword">in</span> self.langs)</span><br><span class="line">        filedata = self.fp.read(MAXBYTES)</span><br><span class="line">        <span class="keyword">if</span> len(filedata) == MAXBYTES <span class="keyword">and</span> f.read():</span><br><span class="line">            filedata = <span class="string">'%s%s'</span> % (filedata, <span class="string">'...&lt;B&gt;&lt;I&gt;(file truncated due to size)&lt;/I&gt;&lt;/B&gt;'</span>)</span><br><span class="line">        self.fp.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filedata == <span class="string">''</span>:</span><br><span class="line">            filedata = <span class="string">'&lt;B&gt;&lt;I&gt;(file not give or upload error)&lt;/I&gt;&lt;/B&gt;'</span></span><br><span class="line">        filename = self.fn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'user'</span> <span class="keyword">in</span> self.cookies <span class="keyword">and</span> self.cookies[<span class="string">'user'</span>]):</span><br><span class="line">            cookstatus = <span class="string">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class="line">            usercook = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usercook = cookstatus = self.cookies[<span class="string">'user'</span>]</span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'info'</span>] = <span class="string">':'</span>.join((self.who, <span class="string">','</span>.join(self.langs), filename))</span><br><span class="line">        self.set_cpp_cookies()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'%s%s'</span> % (</span><br><span class="line">            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cookies = &#123;&#125;</span><br><span class="line">        self.error = <span class="string">''</span></span><br><span class="line">        form = FieldStorage()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list(form.keys()):</span><br><span class="line">            self.show_form()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'person'</span> <span class="keyword">in</span> form:</span><br><span class="line">            print(form.keys())</span><br><span class="line">            self.who = form[<span class="string">'person'</span>].value.strip().title()</span><br><span class="line">            <span class="keyword">if</span> self.who == <span class="string">''</span>:</span><br><span class="line">                self.error = <span class="string">'Your name is required.(blank)'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'Your name is required.(missing)'</span></span><br><span class="line"></span><br><span class="line">        self.cookies[<span class="string">'user'</span>] = unquote(form[<span class="string">'cookie'</span>].value.strip())</span><br><span class="line">                                                      <span class="keyword">if</span> <span class="string">'cookie'</span> <span class="keyword">in</span> form <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'lang'</span> <span class="keyword">in</span> form:</span><br><span class="line">            lang_data = form[<span class="string">'lang'</span>]</span><br><span class="line">            <span class="keyword">if</span> isinstance(lang_data, list):</span><br><span class="line">                self.langs = [eachLang.value <span class="keyword">for</span> eachLang <span class="keyword">in</span> lang_data]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.langs = [lang_data.value]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error = <span class="string">'At least one language required'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'upfile'</span> <span class="keyword">in</span> form:</span><br><span class="line">            upfile = form[<span class="string">'upfile'</span>]</span><br><span class="line">            self.fn = upfile.filename <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> upfile.file:</span><br><span class="line">                self.fp = upfile.file</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.fp = StringIO(<span class="string">'(no data)'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.fp = StringIO(<span class="string">'(no file)'</span>)</span><br><span class="line">            self.fn = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.error:</span><br><span class="line">            self.doResult()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.show_error()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    page = AdvCGI()</span><br><span class="line">    page.go()</span><br></pre></td></tr></table></figure><ul><li>启动程序<blockquote><p>将启动程序放在启动目录中，然后执行。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> CGIHTTPRequestHandler, test</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test(CGIHTTPRequestHandler)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/web" target="_blank" rel="noopener">源代码</a></p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><em>WSGI</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是为了替代CGI而出现的。</p><h3 id="服务器集成和外部进程"><a href="#服务器集成和外部进程" class="headerlink" title="服务器集成和外部进程"></a>服务器集成和外部进程</h3><ul><li>服务器集成<br>服务器集成也叫 <strong>服务器API</strong>，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。<br>服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。</li><li>外部进程<br>外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。<br>因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。</li></ul><h3 id="WSGI简介"><a href="#WSGI简介" class="headerlink" title="WSGI简介"></a>WSGI简介</h3><p>WSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。<br>根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。</p><h3 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h3><p>在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">WSGI只是做一个简单的了解，可以结合框架一起看。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      对Python Web编程的广泛概述，从Web浏览到创建用户反馈表单，从识别URL到生成动态Web页面。本文先介绍通用网关接口CGI然后是Web服务器网关接口WSGI。
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Web编程" scheme="http://coldjune.com/tags/Web%E7%BC%96%E7%A8%8B/"/>
    
      <category term="CGI" scheme="http://coldjune.com/tags/CGI/"/>
    
      <category term="WSGI" scheme="http://coldjune.com/tags/WSGI/"/>
    
  </entry>
  
  <entry>
    <title>Python Web客户端和服务器</title>
    <link href="http://coldjune.com/2018/03/06/Python-Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://coldjune.com/2018/03/06/Python-Web客户端和服务器/</id>
    <published>2018-03-06T01:20:10.000Z</published>
    <updated>2018-03-26T00:55:08.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-Web客户端工具"><a href="#Python-Web客户端工具" class="headerlink" title="Python Web客户端工具"></a>Python Web客户端工具</h2><p>浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。</p><h3 id="统一资源定位符"><a href="#统一资源定位符" class="headerlink" title="统一资源定位符"></a>统一资源定位符</h3><blockquote><p>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。</p></blockquote><p>URL使用以下格式：<br><code>post_sch://net_loc/path;parans?query#frag</code></p><ul><li>Web地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">URL组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">post_sch</td><td style="text-align:center">网络协议或下载方案</td></tr><tr><td style="text-align:center">net_loc</td><td style="text-align:center">服务器所在地(也许含有用户信息)</td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">使用斜杠(/)分割的文件或CGI应用的路径</td></tr><tr><td style="text-align:center">params</td><td style="text-align:center">可选参数</td></tr><tr><td style="text-align:center">query</td><td style="text-align:center">连接符(&amp;)分割的一系列键值对</td></tr><tr><td style="text-align:center">frag</td><td style="text-align:center">指定文档内特定锚的部分</td></tr></tbody></table><p>net_loc可以拆分为多个组件，一些可选一些必备：<br><code>user:passwd@host:port</code></p><ul><li>网络地址的各个组件</li></ul><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">用户名或登录(FTP)</td></tr><tr><td style="text-align:center">passwd</td><td style="text-align:center">用户密码(FTP)</td></tr><tr><td style="text-align:center">host</td><td style="text-align:center">运行Web服务器的计算机名称或地址(必需的)</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">端口号(如果不是默认的80)</td></tr></tbody></table><p>Python3 使用<a href="https://docs.python.org/3/library/urllib.parse.html" target="_blank" rel="noopener">urllib.parse</a>和<a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noopener">urllib.request</a>两种不同的模块分别以不同的功能和兼容性来处理URL</p><h3 id="urllib-parse模块"><a href="#urllib-parse模块" class="headerlink" title="urllib.parse模块"></a>urllib.parse模块</h3><ul><li>urllib.parse核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.parse函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</td><td style="text-align:center">将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.urlunparse(parts)</td><td style="text-align:center">将URL数据的一个元组拼成URL字符串</td></tr><tr><td style="text-align:center">urllib.parse.urljoin(base,url,allow_fragments=True)</td><td style="text-align:center">将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段</td></tr><tr><td style="text-align:center">urllib.parse.quote(string,safe=’/‘,encoding=None,errors=None)</td><td style="text-align:center">对string在URL里无法使用的字符进行编码，safe中的字符无需编码</td></tr><tr><td style="text-align:center">urllib.parse.quote_plus(string,safe=’’,encoding,errors)</td><td style="text-align:center">除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似</td></tr><tr><td style="text-align:center">urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">将string编译过的字符解码</td></tr><tr><td style="text-align:center">urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</td><td style="text-align:center">除了将加好转换为空格，其他功能与unquote()相同</td></tr><tr><td style="text-align:center">urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</td><td style="text-align:center">将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码</td></tr></tbody></table><p>下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法<br><code>from urllib.parse import *</code></p><ul><li><p><em>urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlparse(<span class="string">'http://coldjune.com/categories/'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'coldjune.com'</span>, path=<span class="string">'/categories/'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlunparse(parts)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlunparse((<span class="string">'http'</span>, <span class="string">'coldjune.com'</span>, <span class="string">'/categories/'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urljoin(base,url,allow_fragments=True)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是绝对路径将整个替换除根域名以外的所有内容</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'/tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/tags/2.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是相对路径将会将末端文件去掉与心得url连接</span></span><br><span class="line">urljoin(<span class="string">'http://coldjune.com/categories/1.html'</span>,<span class="string">'tags/2.html'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://coldjune.com/categories/tags/2.html'</span></span><br><span class="line">``</span><br><span class="line">* *urllib.parse.quote(string,safe=<span class="string">'/'</span>,encoding=<span class="keyword">None</span>,errors=<span class="keyword">None</span>)*</span><br><span class="line">&gt; 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)</span><br><span class="line"></span><br><span class="line">  ```Python</span><br><span class="line">  quote(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line">  <span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote(<span class="string">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.quote_plus(string,safe=’’,encoding,errors)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quote_plus(<span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unquote_plus(<span class="string">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure></li><li><p><em>urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query=&#123;<span class="string">'name'</span>:<span class="string">'coldjune'</span>,<span class="string">'search'</span>:<span class="string">'6'</span>&#125;</span><br><span class="line">urlencode(query)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">'name=coldjune&amp;search=6'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="urllib-request模块-包"><a href="#urllib-request模块-包" class="headerlink" title="urllib.request模块/包"></a>urllib.request模块/包</h3><ul><li>urllib.request模块核心函数</li></ul><table><thead><tr><th style="text-align:center">urllib.request函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None)</td><td style="text-align:center">打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证</td></tr><tr><td style="text-align:center">urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)</td><td style="text-align:center">将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息</td></tr></tbody></table><ol><li><em>urllib.request.urlopen(url, data=None, [timeout,],</em><br><em>cafile=None, capath=None,cadefault=False,context=None)</em><blockquote><p>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入”file”方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用”GET”请求，向Web服务器发送的请求字符串应该是url的一部分；使用”POST”请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象</p></blockquote></li></ol><ul><li>urlopen()文件类型对象的方法</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">f.read([bytes])</td><td style="text-align:center">从f中读出所有或bytes个字节</td></tr><tr><td style="text-align:center">f.readline()</td><td style="text-align:center">从f中读取一行</td></tr><tr><td style="text-align:center">f.readlines()</td><td style="text-align:center">从f中读取所有行，作为列表返回</td></tr><tr><td style="text-align:center">f.close()</td><td style="text-align:center">关闭f的URL连接</td></tr><tr><td style="text-align:center">f.fileno()</td><td style="text-align:center">返回f的文件句柄</td></tr><tr><td style="text-align:center">f.info()</td><td style="text-align:center">获取f的MIME头文件</td></tr><tr><td style="text-align:center">f.geturl()</td><td style="text-align:center">返回f的真正URL</td></tr></tbody></table><ol><li><em>urllib.request.urlretrieve(url,</em><br><em>filename=None,reporthook=None,data=None)</em><blockquote><p>urlretrieve（）用于下载完整的HTML</p></blockquote></li></ol><p>如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。<code>urlretrieve()</code>返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。</p><h3 id="HTTP验证示例"><a href="#HTTP验证示例" class="headerlink" title="HTTP验证示例"></a>HTTP验证示例</h3><blockquote><p>需要先启动本地的tomcat并访问tomcat地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化过程</span></span><br><span class="line"><span class="comment"># 后续脚本使用的常量</span></span><br><span class="line">LOGIN = <span class="string">'wesly'</span></span><br><span class="line">PASSWD = <span class="string">"you'llNeverGuess"</span></span><br><span class="line">URL = <span class="string">'http://localhost:8080/docs/setup.html'</span></span><br><span class="line">REALM = <span class="string">'Secure Archive'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 分配了一个基本处理程序类，添加了验证信息。</span></span><br><span class="line">    <span class="comment"># 用该处理程序建立一个URL开启器</span></span><br><span class="line">    <span class="comment"># 安装该开启器以便所有已打开的URL都能用到这些验证信息</span></span><br><span class="line">    hdlr = urllib.request.HTTPBasicAuthHandler()</span><br><span class="line">    hdlr.add_password(REALM,</span><br><span class="line">                      urllib.parse.urlparse(url)[<span class="number">1</span>],</span><br><span class="line">                      LOGIN,</span><br><span class="line">                      PASSWD)</span><br><span class="line">    opener = urllib.request.build_opener(hdlr)</span><br><span class="line">    urllib.request.install_opener(opener=opener)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_version</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头</span></span><br><span class="line">    <span class="comment"># 该请求用来替换其中的URL字符串</span></span><br><span class="line">    <span class="keyword">from</span> base64 <span class="keyword">import</span> encodebytes</span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    b64str = encodebytes(bytes(<span class="string">'%s %s'</span> % (LOGIN, PASSWD), <span class="string">'utf-8'</span>))[:<span class="number">-1</span>]</span><br><span class="line">    req.add_header(<span class="string">"Authorization"</span>, <span class="string">'Basic %s'</span> % b64str)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> funcType <span class="keyword">in</span> (<span class="string">'handler'</span>, <span class="string">'request'</span>):</span><br><span class="line">    <span class="comment"># 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行</span></span><br><span class="line">    print(<span class="string">'***Using %s:'</span> % funcType.upper())</span><br><span class="line">    url = eval(<span class="string">'%s_version'</span> % funcType)(URL)</span><br><span class="line">    f = urllib.request.urlopen(url)</span><br><span class="line">    print(str(f.readline(), <span class="string">'utf-8'</span>))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***Using HANDLER:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br><span class="line"></span><br><span class="line">***Using REQUEST:</span><br><span class="line">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Web客户端"><a href="#Web客户端" class="headerlink" title="Web客户端"></a>Web客户端</h2><p>一个稍微复杂的Web客户端例子就是 <em>网络爬虫</em>。这些程序可以为了不同目的在因特网上探索和下载页面。</p><blockquote><p>通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Retriever</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入"to-do"队列。</span></span><br><span class="line"><span class="string">    __slots__变量表示实例只能拥有self.url和self.file属性</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = (<span class="string">'url'</span>, <span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建Retriever对象时调用，将get_file()返回的URL字符串和对</span></span><br><span class="line"><span class="string">        应的文件名作为实例属性存储起来</span></span><br><span class="line"><span class="string">        :param url: 需要抓取的连接</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.url, self.file = self.get_file(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, url, default=<span class="string">'index.html'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件</span></span><br><span class="line"><span class="string">        :param url: 指定URL获取页面</span></span><br><span class="line"><span class="string">        :param default: 默认的文件名</span></span><br><span class="line"><span class="string">        :return: 返回url和对应的文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 将URL的http://前缀移除，丢掉任何为获取主机名</span></span><br><span class="line">        <span class="comment"># 而附加的额外信息，如用户名、密码和端口号</span></span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将字符进行解码，连接域名创建文件名</span></span><br><span class="line">        filepath = <span class="string">'%s%s'</span> % (host, urllib.parse.unquote(parsed.path))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.splitext(parsed.path)[<span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 如果URL没有文件扩展名后这将default文件加上</span></span><br><span class="line">            filepath = os.path.join(filepath, default)</span><br><span class="line">        <span class="comment"># 获取文件路径</span></span><br><span class="line">        linkdir = os.path.dirname(filepath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(linkdir):</span><br><span class="line">            <span class="comment"># 如果linkdir不是一个目录</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(linkdir):</span><br><span class="line">                <span class="comment"># 如果linkdir存在则删除</span></span><br><span class="line">                os.unlink(linkdir)</span><br><span class="line">            <span class="comment"># 创建同名目录</span></span><br><span class="line">            os.makedirs(linkdir)</span><br><span class="line">        <span class="keyword">return</span> url, filepath</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()</span></span><br><span class="line"><span class="string">        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串</span></span><br><span class="line"><span class="string">        :return: 文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            retval = urllib.request.urlretrieve(self.url, filename=self.file)</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            retval = ((<span class="string">'***ERROR: bad URL "%s": %s'</span> % (self.url, e)),)</span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过BeautifulSoup解析文件，查看文件包含的额外连接。</span></span><br><span class="line"><span class="string">        :return: 文件中包含连接的集合</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        soup = BeautifulSoup(data, <span class="string">'html.parser'</span>)</span><br><span class="line">        parse_links = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> x.attrs:</span><br><span class="line">                parse_links.append(x[<span class="string">'href'</span>])</span><br><span class="line">        <span class="keyword">return</span> parse_links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长</span></span><br><span class="line"><span class="string">        self.seen 是已下载连接的集合</span></span><br><span class="line"><span class="string">        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致</span></span><br><span class="line"><span class="string">        :param url: 抓取的url</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.q = [url]</span><br><span class="line">        self.seen = set()</span><br><span class="line">        parsed = urllib.parse.urlparse(url)</span><br><span class="line">        host = parsed.netloc.split(<span class="string">'@'</span>)[<span class="number">-1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        self.dom = <span class="string">'.'</span>.join(host.split(<span class="string">'.'</span>)[<span class="number">-2</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self, url, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用于下载页面并记录连接信息</span></span><br><span class="line"><span class="string">        :param url:</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 实例化Retriever类并传入需要抓取的连接</span></span><br><span class="line">        <span class="comment"># 下在对应连接并取到文件名</span></span><br><span class="line">        r = Retriever(url)</span><br><span class="line">        fname = r.download()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>] == <span class="string">'*'</span>:</span><br><span class="line">            print(fname, <span class="string">'....skipping parse'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        Crawler.count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'\n('</span>, Crawler.count, <span class="string">')'</span>)</span><br><span class="line">        print(<span class="string">'URL:'</span>, url)</span><br><span class="line">        print(<span class="string">'FILE:'</span>, fname)</span><br><span class="line">        self.seen.add(url)</span><br><span class="line">        <span class="comment"># 跳过所有非Web页面</span></span><br><span class="line">        ftype = os.path.splitext(fname)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ftype <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'.htm'</span>, <span class="string">'.html'</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> r.parse_links():</span><br><span class="line">            <span class="keyword">if</span> link.startswith(<span class="string">'mailto:'</span>):</span><br><span class="line">                print(<span class="string">'...discarded , mailto link'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> media:</span><br><span class="line">                ftype = os.path.splitext(link)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> ftype <span class="keyword">in</span> (<span class="string">'.mp3'</span>, <span class="string">'.mp4'</span>, <span class="string">'.m4av'</span>, <span class="string">'.wav'</span>):</span><br><span class="line">                    print(<span class="string">'... discarded, media file'</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="string">':'</span> <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                link = urllib.parse.quote(link, safe=<span class="string">'#'</span>)</span><br><span class="line">                link = urllib.parse.urljoin(url, link)</span><br><span class="line">            print(<span class="string">'*'</span>, link)</span><br><span class="line">            <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.seen:</span><br><span class="line">                <span class="keyword">if</span> self.dom <span class="keyword">not</span> <span class="keyword">in</span> link:</span><br><span class="line">                    print(<span class="string">'... discarded, not in domain'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有下载过并且是属于该网站就加入待下载列表</span></span><br><span class="line">                    <span class="keyword">if</span> link <span class="keyword">not</span> <span class="keyword">in</span> self.q:</span><br><span class="line">                        self.q.append(link)</span><br><span class="line">                        print(<span class="string">'...New, added to Q'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        print(<span class="string">'...discarded, already in Q'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'...discarded, already processed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, media=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理所有待下载连接</span></span><br><span class="line"><span class="string">        :param media:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> self.q:</span><br><span class="line">            url = self.q.pop()</span><br><span class="line">            self.get_page(url, media)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = input(<span class="string">'Enter starting URL:'</span>)</span><br><span class="line">        <span class="keyword">except</span> (KeyboardInterrupt, EOFError):</span><br><span class="line">            url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">'http://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'ftp://'</span>) <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">'https://'</span>):</span><br><span class="line">        url = <span class="string">'http://%s'</span> % url</span><br><span class="line"></span><br><span class="line">    robot = Crawler(url)</span><br><span class="line">    robot.go()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="解析Web页面"><a href="#解析Web页面" class="headerlink" title="解析Web页面"></a>解析Web页面</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup</a>是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。</p><h3 id="可编程的Web浏览"><a href="#可编程的Web浏览" class="headerlink" title="可编程的Web浏览"></a>可编程的Web浏览</h3><p>可以使用<a href="https://pypi.python.org/pypi/MechanicalSoup/" target="_blank" rel="noopener">MechanicalSoup</a>用来模拟浏览器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-Web客户端工具&quot;&gt;&lt;a href=&quot;#Python-Web客户端工具&quot; class=&quot;headerlink&quot; title=&quot;Python Web客户端工具&quot;&gt;&lt;/a&gt;Python Web客户端工具&lt;/h2&gt;&lt;p&gt;浏览器只是Web客户端的一种。任何一
      
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="Web客户端和服务器" scheme="http://coldjune.com/tags/Web%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OFFICE转换工具</title>
    <link href="http://coldjune.com/2018/03/06/OFFICE%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <id>http://coldjune.com/2018/03/06/OFFICE转换工具/</id>
    <published>2018-03-06T01:19:39.000Z</published>
    <updated>2018-03-26T00:55:08.175Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全双工聊天室</title>
    <link href="http://coldjune.com/2018/03/04/%E5%85%A8%E5%8F%8C%E5%B7%A5%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://coldjune.com/2018/03/04/全双工聊天室/</id>
    <published>2018-03-04T06:33:16.000Z</published>
    <updated>2018-03-26T00:55:08.184Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。<br><a id="more"></a></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ul><li>GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类</li><li>客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容</li><li>编程线程的通用类，使所有线程的实现都通过该类，便于统一管理</li><li>完成客户端和服务器端的代码并进行整合调试</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="GUI的基类"><a href="#GUI的基类" class="headerlink" title="GUI的基类"></a>GUI的基类</h3><blockquote><p>chat_base.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatWindowBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 窗口的基类，创建通用的窗口布局</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 创建tkinter.TK()顶层窗口</span></span><br><span class="line">        <span class="comment"># 所有主要控件都是构建在顶层窗口对象之上</span></span><br><span class="line">        <span class="comment"># 通过tkinter.TK()创建</span></span><br><span class="line">        self.top = tk.Tk()</span><br><span class="line">        <span class="comment"># 在顶层窗口上添加Label控件</span></span><br><span class="line">        self.label = tk.Label(self.top, text=<span class="string">'聊天室'</span>)</span><br><span class="line">        <span class="comment"># 通过Packer来管理和显示控件</span></span><br><span class="line">        <span class="comment"># 调用pack()方法显示布局</span></span><br><span class="line">        self.label.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过Frame控件创建子容器，用于存放其他控件</span></span><br><span class="line">        <span class="comment"># 该对象将作为单个子对象代替父对象</span></span><br><span class="line">        self.chatfm = tk.Frame(self.top)</span><br><span class="line">        <span class="comment"># Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表</span></span><br><span class="line">        self.chatsb = tk.Scrollbar(self.chatfm)</span><br><span class="line">        <span class="comment"># 将Scrollbar放置在子容器的右侧，并且是针对y轴</span></span><br><span class="line">        self.chatsb.pack(side=<span class="string">'right'</span>, fill=<span class="string">'y'</span>)</span><br><span class="line">        <span class="comment"># 在子容器中创建高为15宽为50的Listbox</span></span><br><span class="line">        <span class="comment"># 将Listbox和Scrollbar关联起来</span></span><br><span class="line">        <span class="comment"># 显示列表</span></span><br><span class="line">        <span class="comment"># 显示子容器</span></span><br><span class="line">        <span class="comment"># 控件的显示应该内部控件先显示，再显示外部控件</span></span><br><span class="line">        self.chats = tk.Listbox(self.chatfm, height=<span class="number">15</span>,</span><br><span class="line">                                width=<span class="number">50</span>, yscrollcommand=self.chatsb.set)</span><br><span class="line">        self.chatsb.config(command=self.chats.yview())</span><br><span class="line">        self.chats.pack(side=<span class="string">'left'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.chatfm.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建发送消息的子容器</span></span><br><span class="line">        self.sendfm = tk.Frame(self.top, width=<span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 创建输入框</span></span><br><span class="line">        <span class="comment"># 绑定回车键，并且绑定send方法</span></span><br><span class="line">        <span class="comment"># 绑定一个方法是指在触发一个事件时会去调用的方法</span></span><br><span class="line">        self.chatn = tk.Entry(self.sendfm, width=<span class="number">40</span>)</span><br><span class="line">        self.chatn.bind(<span class="string">'&lt;Return&gt;'</span>, self.send)</span><br><span class="line">        self.chatn.pack(side=<span class="string">'left'</span>)</span><br><span class="line">        <span class="comment"># 添加按钮控件、绑定方法</span></span><br><span class="line">        self.sendchat = tk.Button(self.sendfm, text=<span class="string">'发送'</span>, command=self.send)</span><br><span class="line">        self.sendchat.pack(side=<span class="string">'right'</span>, fill=<span class="string">'both'</span>)</span><br><span class="line">        self.sendfm.pack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 创建发送消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建接受消息的方法</span></span><br><span class="line">        <span class="comment"># 空实现是为了继承时扩展</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="线程的通用类"><a href="#线程的通用类" class="headerlink" title="线程的通用类"></a>线程的通用类</h3><blockquote><p>chat_thread.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="comment"># 继承自threading.Thread，用于创建聊天室的通用线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        <span class="comment"># func: 方法</span></span><br><span class="line">        <span class="comment"># args：方法所需要的参数</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实现run方法，将参数传给相应的方法</span></span><br><span class="line">        self.func(*self.args)</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><blockquote><p>chat_s.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#  -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatS</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 服务器的实现类，继承自ChatWindowBase</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__()方法</span></span><br><span class="line">        super(ChatS, self).__init__()</span><br><span class="line">        self.label.configure(text=<span class="string">'服务器'</span>)</span><br><span class="line">        <span class="comment"># 设置属性</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接对象</span></span><br><span class="line">        <span class="comment"># 用于保存客户端链接地址</span></span><br><span class="line">        self.send_sock = <span class="keyword">None</span></span><br><span class="line">        self.addr = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 在服务器窗口创建时调用</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 获取输入框信息</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        ChatThread(self.send_s, (message,)).start()</span><br><span class="line">        <span class="comment"># 将输入框信息按照格式显示在Listbox</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s\n'</span> % (ctime(), self.addr))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框内容</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        <span class="comment"># 绑定地址</span></span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        <span class="comment"># 阻塞直到有链接调用，然后保存链接的客户端对象和地址</span></span><br><span class="line">        sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        sock.bind(ADDR)</span><br><span class="line">        sock.listen(<span class="number">5</span>)</span><br><span class="line">        cli_sock, addr = sock.accept()</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.send_sock = cli_sock</span><br><span class="line">        print(<span class="string">'addr'</span>, addr)</span><br><span class="line">        <span class="comment"># 有链接接入时在Listbox中显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s 上线'</span> % str(addr))</span><br><span class="line">        <span class="comment"># 更新顶层窗口</span></span><br><span class="line">        self.top.update()</span><br><span class="line">        <span class="comment"># 启动接受消息的线程</span></span><br><span class="line">        ChatThread(self.receive_s, (cli_sock, addr)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_s</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 向客户端发送消息</span></span><br><span class="line">        self.send_sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_s</span><span class="params">(self, cli_sock, addr)</span>:</span></span><br><span class="line">        <span class="comment"># 接受消息</span></span><br><span class="line">        <span class="comment"># cli_sock: 客户端sock</span></span><br><span class="line">        <span class="comment"># addr: 客户端地址</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入无限循环接受消息，并在Listbox显示消息</span></span><br><span class="line">            receiveData = cli_sock.recv(BUFSIZ)</span><br><span class="line">            print(<span class="string">'接受到消息'</span>, receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), addr))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % receiveData.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建服务器窗口</span></span><br><span class="line">    s = ChatS()</span><br><span class="line">    <span class="comment"># 调用mainloop()运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>chat_c.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> chat_base <span class="keyword">import</span> ChatWindowBase</span><br><span class="line"><span class="keyword">from</span> chat_thread <span class="keyword">import</span> ChatThread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">12345</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatC</span><span class="params">(ChatWindowBase)</span>:</span></span><br><span class="line">    <span class="comment"># 客户端的实现类，继承子ChatWindowBase方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 在子类中必须调用父类的__init__()方法</span></span><br><span class="line">        super(ChatC, self).__init__()</span><br><span class="line">        <span class="comment"># 设置label的标题</span></span><br><span class="line">        self.label.configure(text=<span class="string">'客户端'</span>)</span><br><span class="line">        <span class="comment"># 设置属性，用于保存sock对象用于发送和接受消息</span></span><br><span class="line">        self.sock = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 在创建窗口时链接服务器，</span></span><br><span class="line">        <span class="comment"># 客户端需要比服务器后创建</span></span><br><span class="line">        <span class="comment"># 否则链接会创建失败</span></span><br><span class="line">        self.receive()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, ev=None)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类，为控件调用的方法</span></span><br><span class="line">        <span class="comment"># 获取输入框的值</span></span><br><span class="line">        message = self.chatn.get()</span><br><span class="line">        <span class="comment"># 创建发送消息的线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.send_c, (message,)).start()</span><br><span class="line">        <span class="comment"># 在Listbox中按格式显示消息</span></span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:to %s'</span> % (ctime(), ADDR))</span><br><span class="line">        self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % message)</span><br><span class="line">        <span class="comment"># 删除输入框中的消息</span></span><br><span class="line">        self.chatn.delete(first=<span class="number">0</span>, last=len(message)+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 通过更新顶层窗口显示消息</span></span><br><span class="line">        self.top.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 继承自父类</span></span><br><span class="line">        <span class="comment"># 创建socket链接</span></span><br><span class="line">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.sock.connect(ADDR)</span><br><span class="line">        <span class="comment"># 启动线程</span></span><br><span class="line">        <span class="comment"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class="line">        ChatThread(self.receive_c, (self.sock,)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_c</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        <span class="comment"># 调用sock的send方法，向服务器发送消息</span></span><br><span class="line">        self.sock.send(bytes(message, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_c</span><span class="params">(self, sock)</span>:</span></span><br><span class="line">        <span class="comment"># 接受服务器数据的方法</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 进入循环，等待服务器发送的消息</span></span><br><span class="line">            data = sock.recv(BUFSIZ)</span><br><span class="line">            <span class="comment"># 将消息按照格式显示到Listbox中</span></span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'[%s]:from %s'</span> % (ctime(), ADDR))</span><br><span class="line">            self.chats.insert(<span class="string">'end'</span>, <span class="string">'%s'</span> % data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="comment"># 更新控件</span></span><br><span class="line">            self.top.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 实例化客户端窗口</span></span><br><span class="line">    c = ChatC()</span><br><span class="line">    <span class="comment"># 调用mainloop方法运行整个GUI</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/coldJune/Python/tree/master/chat" target="_blank" rel="noopener">源代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://coldjune.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://coldjune.com/tags/Python/"/>
    
      <category term="多线程" scheme="http://coldjune.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="网络编程" scheme="http://coldjune.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="GUI" scheme="http://coldjune.com/tags/GUI/"/>
    
  </entry>
  
</feed>
