{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518311061113},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1518056960563},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1518056960565},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1518056960564},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1518056960571},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1518056960580},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1518056960580},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1518056960581},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1518056960582},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1518056960583},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1518056960584},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1518056960585},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1518056960586},{"_id":"themes/next/_config.yml","hash":"69b34db8b4356d2d2050e262ef38150b9fc0e194","modified":1518311061113},{"_id":"themes/next/_config.yml.bak","hash":"a54015eaceb9c432e7f1e947029434daa6b1045a","modified":1518144390222},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1518056960589},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1518056960590},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1518056960696},{"_id":"source/.DS_Store","hash":"a627d09924b2e85382a3cbc017cff5da0ddb7fdd","modified":1518311061113},{"_id":"source/CNAME","hash":"9bb16ec27c6fb3c9443c8a4796f626b8361991ec","modified":1518145711926},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1518056960592},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1518056960593},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1518056960591},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1518056960594},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1518056960598},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1518056960595},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1518056960596},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1518056960599},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1518056960600},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1518056960602},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1518056960601},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1518056960603},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1bdebc9b07744c202670e3565d0ef6ef45726b23","modified":1518141938042},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1518056960604},{"_id":"themes/next/languages/zh-Hans.yml.bak","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1518056960605},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1518056960607},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1518056960606},{"_id":"themes/next/layout/_layout.swig","hash":"aee81ccdb88bc4588bef34c7a88068554ba0944c","modified":1518143011722},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1518056960690},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1518056960691},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1518056960691},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1518056960692},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1518056960693},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1518056960694},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1518056960695},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1518056960698},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1518056960700},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1518056961005},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1518056961007},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1518056961008},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1518311061113},{"_id":"source/_posts/Python多线程-一.md","hash":"d48ad8587cae047764c83c74d42270b2123aaa08","modified":1519463439113},{"_id":"source/_posts/Python正则表达式-一.md","hash":"1855bd2d86c5c8da59ed4fbd9ebb7ec1e588317c","modified":1518311061113},{"_id":"source/_posts/Python正则表达式-三.md","hash":"d4ca953e70e86470742325e2b576202371bbda19","modified":1519285139798},{"_id":"source/_posts/Python正则表达式-二.md","hash":"bfdbb73fb5937cfb3eb6aff3b88ca853ef87d9c7","modified":1518337135912},{"_id":"source/_posts/Python网络编程-一.md","hash":"22d38f161166b79e77c97d3f227cfb21783f3c48","modified":1519459974037},{"_id":"source/_posts/Python网络编程-二.md","hash":"afe35e1492462164087a97e5c0003ae0dee1da6a","modified":1519459984925},{"_id":"source/categories/index.md","hash":"93b22b0ccda23e0c2180feacd63565bf525cdb83","modified":1518311061113},{"_id":"source/tags/index.md","hash":"339c69d40799c4cdbaa67be4eaebb38557621dd2","modified":1518311061113},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960836},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"b0e86adc94d495ef5094de0a04e870d96e7b6e2a","modified":1518076155824},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1518056960610},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"45d9a5fefec6ef7976718b3238a8517a97f457b0","modified":1518074627375},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1518056960609},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1518056960613},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1518056960614},{"_id":"themes/next/layout/_macro/post.swig","hash":"cb68ae25ebad9142d7317a76229c8c2ec64a49f3","modified":1518139931055},{"_id":"themes/next/layout/_macro/post.swig.bak","hash":"0eff295f27fea91cbb4f375ecd2d099049581701","modified":1518139903702},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1518056960616},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1518056960617},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1518056960619},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1518056960620},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1518142007009},{"_id":"themes/next/layout/_partials/footer.swig.bak","hash":"532d8cc5d089143f47d626c270137224788e11d4","modified":1518141350803},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1518076065906},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1518056960627},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1518056960627},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1518056960629},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1518056960630},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1518056960640},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1518056960642},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1518056960648},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1518056960674},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1518056960675},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1518056960676},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1518056960677},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1518056960678},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1518056960679},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1518056960680},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1518056960702},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1518056960703},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1518056960704},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1518056960705},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1518056960706},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1518056960707},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1518056960708},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1518056960709},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1518056960710},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1518056960835},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1518056960838},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1518056960839},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1518056960840},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1518056960841},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1518056960842},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1518056960843},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1518056960844},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1518056960846},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1518056960847},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1518056960848},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1518056960848},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1518056960849},{"_id":"themes/next/source/images/favicon.ico","hash":"afd7d4fc98251541ae276f6620db122ca7d057e3","modified":1518080397380},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518056960850},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1518056960851},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518056960852},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1518056960853},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1518056960854},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1518056960855},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960646},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960646},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960797},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960798},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960800},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960831},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960834},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1518056960626},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1518056960624},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1518056960631},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1518056960633},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1518056960634},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1518056960635},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1518056960637},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1518056960638},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1518056960639},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1518056960643},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518056960645},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518056960647},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1518056960650},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1518056960652},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1518056960653},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1518056960654},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1518056960655},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1518056960656},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1518056960657},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1518056960659},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1518056960658},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1518056960660},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1518056960661},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1518056960662},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1518056960663},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1518056960665},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1518056960666},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1518056960667},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1518056960668},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1518056960669},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1518056960670},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1518056960672},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1518056960671},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1518056960673},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1518056960685},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1518056960686},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1518056960687},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1518056960688},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1518056960796},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"615e1f318c15ed8aa599111fd6517df7144ec790","modified":1518075168506},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1518056960799},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1518056960800},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1518056960829},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1518056960831},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1518056960832},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1518056960833},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1518056960857},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1518056960859},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1518056960860},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1518056960861},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1518056960862},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1518056960863},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1518056960865},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1518056960864},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1518056960867},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1518056960868},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1518056960870},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1518056960885},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518056960891},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1518056960893},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1518056960915},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1518056960916},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1518056960917},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1518056960918},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1518056960894},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1518056960896},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1518056960923},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1518056960925},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1518056960925},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1518056960926},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1518056960927},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1518056960952},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1518056960955},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1518056960957},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1518056960958},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1518056960959},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1518056960960},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1518056960961},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1518056960964},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1518056960966},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1518056960967},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1518056960984},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1518056960985},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1518056960986},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518056960968},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518056960970},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518056960971},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518056960972},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518056960973},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518056960974},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518056960975},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518056960976},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518056960977},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518056960978},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518056960979},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518056960980},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518056960981},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1518056960982},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1518056960996},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1518056960997},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1518056961001},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1518056961003},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1518056961004},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1518056960954},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1518056960683},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1518056960684},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1518056960714},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1518056960715},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1518056960716},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1518056960718},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1518056960717},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1518056960736},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1518056960764},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1518056960786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1518056960788},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1518056960789},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1518056960790},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1518056960791},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1518056960792},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1518056960793},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1518056960803},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1518056960804},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1518056960806},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1518056960806},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1518056960807},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1518056960808},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518056960809},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1518056960811},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1518056960815},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1518056960816},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1518056960817},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518056960818},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1518056960819},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1518056960822},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1518056960824},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1518056960825},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1518056960826},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1518056960827},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1518056960828},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1518056960866},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1518056960879},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1518056960882},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1518056960884},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1518056960920},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1518056960921},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1518056960897},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1518056960898},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1518056960901},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1518056960900},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1518056960899},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1518056960902},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1518056960911},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1518056960912},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1518056960913},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1518056960929},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1518056960931},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1518056960932},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1518056960993},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1518056960994},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1518056960881},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1518056960949},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1518056960950},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1518056961000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1518056960720},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1518056960721},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1518056960722},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1518056960723},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1518056960725},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1518056960724},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1518056960727},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1518056960728},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1518056960730},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1518056960731},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1518056960733},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1518056960733},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1518056960734},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1518056960735},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1518056960739},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1518076211469},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1518056960738},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1518056960740},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1518056960741},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1518056960742},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1518056960743},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1518056960744},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1518056960745},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1518056960747},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1518056960748},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1518056960746},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1518056960749},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1518056960750},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1518056960751},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ee5ca6329adb65ab9980242fdffa84741f149cd4","modified":1518076316365},{"_id":"themes/next/source/css/_common/components/post/post.styl.bak","hash":"6ffca9bca005c64d7cd0dbeefb55203c6eca76be","modified":1518073367768},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1518056960754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0f9f1c10a47ca0599f4818ad7d00064255c9afb6","modified":1518075011073},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl.bak","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1518056960755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1518056960756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1518056960757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1518056960758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1518056960760},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1518056960759},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1518056960761},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1518056960762},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1518056960763},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1518056960766},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1518056960767},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1518056960768},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1518056960769},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1518056960770},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1518056960772},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1518056960772},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1518056960773},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1518056960774},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1518056960776},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1518056960777},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1518056960778},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1518056960779},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1518056960780},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1518056960781},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1518056960782},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1518056960783},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1518056960784},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1518056960785},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1518056960812},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518056960814},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518056960821},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1518056960876},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1518056960875},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1518056960877},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1518056960878},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1518056960873},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1518056960904},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1518056960905},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1518056960906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1518056960908},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1518056960908},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1518056960910},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1518056960935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1518056960939},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1518056960947},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1518056960890},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1518056960991},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1518056960944},{"_id":"public/baidu_urls.txt","hash":"2ce67a6db41774579d2789f2446038d585a98307","modified":1519463485421},{"_id":"public/baidusitemap.xml","hash":"38c0474db722e9a3d88db6b0673d0f71055a0a95","modified":1519463485437},{"_id":"public/atom.xml","hash":"f273014ba996a78e7df2b7eeb90443500389f103","modified":1519463485437},{"_id":"public/search.xml","hash":"67f204e002a3cac87b2b90835fb96500befbe802","modified":1519463485437},{"_id":"public/sitemap.xml","hash":"0f9871f929ad09ba15fad6efa38534a2b42b6870","modified":1519463485437},{"_id":"public/categories/index.html","hash":"50aada0853a68b14cfe288f1c6120c9db6b96aee","modified":1519463485437},{"_id":"public/tags/index.html","hash":"544da10cfd0c082803fa66c82972019c8200db90","modified":1519463485437},{"_id":"public/2018/02/24/Python多线程-一/index.html","hash":"20617490cbb81b181883f1293a6cfae7d87ac1ed","modified":1519463485437},{"_id":"public/2018/02/24/Python网络编程-二/index.html","hash":"1bd787443645bb21fc9dfab94132b0bc4b30f885","modified":1519463485437},{"_id":"public/2018/02/22/Python网络编程-一/index.html","hash":"5dd618a0694f1504f6619b2d02336441c2f995ae","modified":1519463485437},{"_id":"public/2018/02/12/Python正则表达式-三/index.html","hash":"4a0d949a33b5941179ea51e980a7585566066a7e","modified":1519463485437},{"_id":"public/2018/02/10/Python正则表达式-二/index.html","hash":"84b8036b00da77dc9ba8942081cf677b4b7b72ea","modified":1519463485437},{"_id":"public/2018/02/09/Python正则表达式-一/index.html","hash":"1149b9d6d03edd8498638b2ce34f37955272f0cd","modified":1519463485437},{"_id":"public/archives/index.html","hash":"0ce413cb7338afce7bd939ca3fd7d697f1839358","modified":1519463485437},{"_id":"public/archives/2018/index.html","hash":"2368619e0123a5f89ae644d84d6a1c83f3b2730a","modified":1519463485437},{"_id":"public/archives/2018/02/index.html","hash":"2827cd40fdc26608c7187d7896964b9a0063924e","modified":1519463485437},{"_id":"public/categories/Python/index.html","hash":"b0b386554e5afe2471d0df64abb11e94cbcd7318","modified":1519463485437},{"_id":"public/index.html","hash":"3bbb29ba83b3deaf8f781965ce5af1f9eb0c823a","modified":1519463485437},{"_id":"public/tags/Python/index.html","hash":"a88a37fd253bc6f4ca29c6dea00841531d4b772d","modified":1519463485437},{"_id":"public/tags/多线程/index.html","hash":"f536eb1e5871267068c27cb7e8d30ca115482444","modified":1519463485437},{"_id":"public/tags/正则表达式/index.html","hash":"024ff27eed3f3c451da3e218589db40aa90ba89b","modified":1519463485437},{"_id":"public/tags/网络编程/index.html","hash":"dd405e06a0441ab9d409f618304d5a000850d1bf","modified":1519463485437},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519463485468},{"_id":"public/CNAME","hash":"9bb16ec27c6fb3c9443c8a4796f626b8361991ec","modified":1519463485468},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1519463485468},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1519463485468},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1519463485468},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1519463485468},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1519463485468},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1519463485468},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1519463485468},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1519463485468},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1519463485468},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1519463485468},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1519463485468},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1519463485468},{"_id":"public/images/favicon.ico","hash":"afd7d4fc98251541ae276f6620db122ca7d057e3","modified":1519463485468},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519463485468},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1519463485468},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519463485468},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1519463485468},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1519463485468},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1519463485468},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1519463485468},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1519463485468},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519463485468},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519463485468},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519463485468},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519463485468},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519463485468},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519463485468},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1519463485484},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1519463485484},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1519463485484},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1519463485484},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1519463485484},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1519463485484},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519463485484},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1519463486124},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1519463486140},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1519463486155},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1519463486155},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1519463486155},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1519463486155},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1519463486155},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1519463486155},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1519463486155},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1519463486155},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1519463486155},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1519463486155},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1519463486155},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1519463486155},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519463486155},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1519463486155},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1519463486155},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1519463486155},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1519463486155},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1519463486155},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1519463486155},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1519463486155},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1519463486155},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1519463486155},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1519463486155},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1519463486155},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1519463486155},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1519463486155},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1519463486155},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1519463486155},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1519463486155},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1519463486155},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1519463486155},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1519463486155},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1519463486155},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519463486155},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1519463486155},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519463486155},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1519463486155},{"_id":"public/css/main.css","hash":"e8e808d9de3f5419acecd1990c367b8eeff980d4","modified":1519463486155},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1519463486155},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1519463486155},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1519463486155},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1519463486155},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1519463486155},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1519463486155},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1519463486155},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519463486155},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1519463486155},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1519463486155},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1519463486155},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1519463486155},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1519463486155},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1519463486155},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1519463486155},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1519463486155},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1519463486155},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1519463486155},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1519463486155},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1519463486155},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1519463486155},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1519463486155},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1519463486155},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1519463486187}],"Category":[{"name":"Python","_id":"cje15bqwa0002lwn9jhh3zj6n"}],"Data":[],"Page":[{"title":"分类","date":"2018-02-10T09:37:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-10 17:37:47\ntype: \"categories\"\n---\n","updated":"2018-02-11T01:04:21.113Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cje15bqyg000rlwn9949phr3r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-10T09:40:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-10 17:40:02\ntype: \"tags\"\n---\n","updated":"2018-02-11T01:04:21.113Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cje15bqyg000tlwn992nuwod7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Python多线程(一)","date":"2018-02-24T08:13:37.000Z","copyright":true,"description":null,"_content":"多线程编程对于以下编程任务是非常理想的：\n* 本质上是一步的\n* 需要多个并发活动\n* 每个活动的处理顺序可能是不确定的(随机、不可预测的)\n<!--Mare-->\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程\n* UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中\n* RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出\n* ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中\n\n## 线程和进程\n\n* 进程\n  > 计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。**进程** （有时称为 **重量级进程**）则是一个执行中的程序。\n    每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。\n  进程可以通过 **派生**(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 *进程间通信(IPC)* 的方式共享信息\n\n* 线程\n  > **线程**（有时称为 **轻量级进程**）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）\n    和临时挂起（睡眠），这种做法叫 *让步(yielding)*。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队\n    等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。\n\n## 线程与Python\n\n### 全局解释锁\n  对Python虚拟机的访问是由 **全局解释锁(GIL)** 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。\n  1. 设置GIL\n  2. 切换进一个线程去运行\n  3. 执行下面操作之一\n      a. 指定数量的字节码指令\n      b. 线程主动让出控制权(可以调用time.sleep(0)来完成)\n  4. 把线程设置回睡眠状态(切换出线程)\n  5. 解锁GIL\n  6. 重复上述步骤\n  当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。\n\n### 退出线程\n  当一个线程完成函数的执行时，就会退出。还可以通过调用`thread.exit()`或者`sys.exit()`退出进程，或者抛出SystemExit异常，是线程退出。\n","source":"_posts/Python多线程-一.md","raw":"---\ntitle: Python多线程(一)\ndate: 2018-02-24 16:13:37\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 多线程\ndescription:\n---\n多线程编程对于以下编程任务是非常理想的：\n* 本质上是一步的\n* 需要多个并发活动\n* 每个活动的处理顺序可能是不确定的(随机、不可预测的)\n<!--Mare-->\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程\n* UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中\n* RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出\n* ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中\n\n## 线程和进程\n\n* 进程\n  > 计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。**进程** （有时称为 **重量级进程**）则是一个执行中的程序。\n    每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。\n  进程可以通过 **派生**(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 *进程间通信(IPC)* 的方式共享信息\n\n* 线程\n  > **线程**（有时称为 **轻量级进程**）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）\n    和临时挂起（睡眠），这种做法叫 *让步(yielding)*。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队\n    等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。\n\n## 线程与Python\n\n### 全局解释锁\n  对Python虚拟机的访问是由 **全局解释锁(GIL)** 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。\n  1. 设置GIL\n  2. 切换进一个线程去运行\n  3. 执行下面操作之一\n      a. 指定数量的字节码指令\n      b. 线程主动让出控制权(可以调用time.sleep(0)来完成)\n  4. 把线程设置回睡眠状态(切换出线程)\n  5. 解锁GIL\n  6. 重复上述步骤\n  当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。\n\n### 退出线程\n  当一个线程完成函数的执行时，就会退出。还可以通过调用`thread.exit()`或者`sys.exit()`退出进程，或者抛出SystemExit异常，是线程退出。\n","slug":"Python多线程-一","published":1,"updated":"2018-02-24T09:10:39.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqwa0000lwn9azzz6vb0","content":"<p>多线程编程对于以下编程任务是非常理想的：</p>\n<ul>\n<li>本质上是一步的</li>\n<li>需要多个并发活动</li>\n<li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare-->\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</li>\n<li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li>\n<li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li>\n<li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li>\n</ul>\n<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><ul>\n<li><p>进程</p>\n<blockquote>\n<p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。<br>  每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。<br>进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p>\n</blockquote>\n</li>\n<li><p>线程</p>\n<blockquote>\n<p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）<br>  和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队<br>  等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"线程与Python\"><a href=\"#线程与Python\" class=\"headerlink\" title=\"线程与Python\"></a>线程与Python</h2><h3 id=\"全局解释锁\"><a href=\"#全局解释锁\" class=\"headerlink\" title=\"全局解释锁\"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由 <strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p>\n<ol>\n<li>设置GIL</li>\n<li>切换进一个线程去运行</li>\n<li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li>\n<li>把线程设置回睡眠状态(切换出线程)</li>\n<li>解锁GIL</li>\n<li>重复上述步骤<br>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</li>\n</ol>\n<h3 id=\"退出线程\"><a href=\"#退出线程\" class=\"headerlink\" title=\"退出线程\"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>多线程编程对于以下编程任务是非常理想的：</p>\n<ul>\n<li>本质上是一步的</li>\n<li>需要多个并发活动</li>\n<li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare-->\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</li>\n<li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li>\n<li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li>\n<li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li>\n</ul>\n<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><ul>\n<li><p>进程</p>\n<blockquote>\n<p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。<br>  每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。<br>进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p>\n</blockquote>\n</li>\n<li><p>线程</p>\n<blockquote>\n<p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）<br>  和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队<br>  等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"线程与Python\"><a href=\"#线程与Python\" class=\"headerlink\" title=\"线程与Python\"></a>线程与Python</h2><h3 id=\"全局解释锁\"><a href=\"#全局解释锁\" class=\"headerlink\" title=\"全局解释锁\"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由 <strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p>\n<ol>\n<li>设置GIL</li>\n<li>切换进一个线程去运行</li>\n<li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li>\n<li>把线程设置回睡眠状态(切换出线程)</li>\n<li>解锁GIL</li>\n<li>重复上述步骤<br>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</li>\n</ol>\n<h3 id=\"退出线程\"><a href=\"#退出线程\" class=\"headerlink\" title=\"退出线程\"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p>\n"},{"title":"Python正则表达式(一)","date":"2018-02-09T07:08:05.000Z","copyright":true,"_content":"在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。\n<!--More-->\n\n## 特殊符号和字符\n\n| 表示法                     | 描述                                                                                           | 正则表达式示例           | 备注                                                                                     |\n| :--------------:           | :----------------------------------------------------------------------------:                 | :----------------------: | :----------------------------------------------------:                                   |\n| 符号                       |                                                                                                |                          |                                                                                          |\n| literal                    | 匹配文本字符串的字面值literal                                                                  | foo                      | 只是匹配foo，相当于取等                                                                  |\n| re1&#124; re2              | 匹配正则表达式re1或re2                                                                         | foo&#124; bar            | 匹配foo或者bar，二选一                                                                   |\n| .                          | 匹配任何字符(除了\\n之外)                                                                       | a.a                      | 匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符                                     |\n| ^                          | 匹配字符串起始部分                                                                             | ^Foo                     | 匹配Foo，不匹配aFoo                                                                      |\n| $                          | 匹配字符串终止部分                                                                             | Bar$                     | 只匹配Bar,不匹配aBar等                                                                   |\n| *                          | 匹配0次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]*             | 匹配任意多个字母或数字                                                                   |\n| +                          | 匹配1次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]+             | 匹配一到多个个字母或数字                                                                 |\n| ?                          | 匹配0次或者1次前面出现的正则表达式                                                             | [A-Za-z0-9]              | 要么有一个字母或数字要么没有                                                             |\n| {N}                        | 匹配N次前面出现的正则表达式                                                                    | [0-9]{3}                 | 匹配三个数字                                                                             |\n| {M,N}                      | 匹配M~N次前面出现的正则表达式                                                                  | [0-9]{5,9}               | 匹配5到9个数字(包括5个和9个)                                                             |\n| [...]                      | 匹配来自字符集的任意单一字符                                                                   | [aeiou]                  | 匹配一个元音字母                                                                         |\n| [..x~y..]                  | 匹配x~y范围内的任意单一字符                                                                    | [A-Za-z]                 | 匹配任意一个英文字母                                                                     |\n| [^...]                     | 不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)                   | [\\^aeiou][\\^A-Za-z0-9]   | 匹配一个非元音字母和一个非字母数字字符                                                   |\n| (*&#124;+&#124;?&#124;{})? | 用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})                                     | .*?[a-z]                 | (非贪婪是指尽可能少的匹配)                                                               |\n| (...)                      | 匹配封闭的正则表达式,然后另存为子组                                                            | f(oo&#124; u)bar         | 匹配foobar,fubar                                                                         |\n| 特殊字符                   |                                                                                                |                          |                                                                                          |\n| \\d                         | 匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)                          | data\\d+.txt              | 匹配data1.txt、data12.txt                                                                |\n| \\w                         | 匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)                                            | [A-Za-z_]\\w+             | 匹配任意字母或_加一个或多个字母数字字符(asda,_asda)                                      |\n| \\s                         | 匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)                                               | of\\sthe                  | 匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符) |\n| \\b                         | 匹配任何单词边界(\\B与之相反)                                                                   | \\bThe\\b                  | 匹配of The a，不匹配ofThe a                                                              |\n| \\N                         | 匹配已保存的子组N(与上面(...)配合使用)                                                         | price:\\16                | 匹配price:和前面第16个子组的值                                                           |\n| \\c                         | 逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)              | \\*                       | 匹配*                                                                                    |\n| \\A(\\Z)                     | 匹配字符串的起始(结束)(另见上面的^和$)                                                         | \\ADear                   | 匹配以Dear开头的                                                                         |\n| 扩展表示法                 |                                                                                                |                          |                                                                                          |\n| （?iLmsux）                | 在正则表达式中嵌入一个或多个特殊\"标记\"参数(或者通过函数/方法)                                  | （?x）,(?im)             |                                                                                          |\n| (?:...)                    | 表示一个匹配不用保存的分组                                                                     | (?:\\w+\\.)*             | 匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组                                |\n| (?P<name>...)              | 像一个仅由name标识而不是数字ID标识的正则分组匹配                                               | (?P<data>)               | 给匹配的分组命名为data                                                                   |\n| (?P=name)                  | 在同一个字符串中匹配由(?P<name>)分组之前的文本                                                 | (?P=data)                | 匹配名字为data的串                                                                       |\n| (?#...)                    | 表示注释，所有内容都被忽略                                                                     | (?#comment)              |                                                                                          |\n| (?=...)                    | 匹配条件是如果...出现在之后的位置，而不使用输入字符串；称作正向前视断言                        | (?=.com)                 | 如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串                         |\n| (?!...)                    | 匹配条件是如果...不出现在之后的位置，而不使用输入字符串；称作负向前视断言                      | (?!.net)                 | 如果一个字符串后面不是跟着“.net”，才做匹配操作                                           |\n| (?<=...)                   | 匹配条件是如果...出现在之前的位置，而不使用输入字符串；称作正向后视断言                        | (?<=800-)                | 如果字符串之前为“800-”才做匹配，并不使用任何输入字符串                                   |\n| (?<\\!...)                  | 匹配条件是如果...不出现在之前的位置，而不使用输入字符串；称作负向后视断言                      | (?<\\!192\\\\.168\\\\.)         | 如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串                         |\n| (?(id/name)Y&#124;N        | 如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项 | (?(1)y&#124;x)           | 如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配                                                                                                                                                     |\n以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。\n","source":"_posts/Python正则表达式-一.md","raw":"---\ntitle: Python正则表达式(一)\ndate: 2018-02-09 15:08:05\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\n---\n在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。\n<!--More-->\n\n## 特殊符号和字符\n\n| 表示法                     | 描述                                                                                           | 正则表达式示例           | 备注                                                                                     |\n| :--------------:           | :----------------------------------------------------------------------------:                 | :----------------------: | :----------------------------------------------------:                                   |\n| 符号                       |                                                                                                |                          |                                                                                          |\n| literal                    | 匹配文本字符串的字面值literal                                                                  | foo                      | 只是匹配foo，相当于取等                                                                  |\n| re1&#124; re2              | 匹配正则表达式re1或re2                                                                         | foo&#124; bar            | 匹配foo或者bar，二选一                                                                   |\n| .                          | 匹配任何字符(除了\\n之外)                                                                       | a.a                      | 匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符                                     |\n| ^                          | 匹配字符串起始部分                                                                             | ^Foo                     | 匹配Foo，不匹配aFoo                                                                      |\n| $                          | 匹配字符串终止部分                                                                             | Bar$                     | 只匹配Bar,不匹配aBar等                                                                   |\n| *                          | 匹配0次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]*             | 匹配任意多个字母或数字                                                                   |\n| +                          | 匹配1次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]+             | 匹配一到多个个字母或数字                                                                 |\n| ?                          | 匹配0次或者1次前面出现的正则表达式                                                             | [A-Za-z0-9]              | 要么有一个字母或数字要么没有                                                             |\n| {N}                        | 匹配N次前面出现的正则表达式                                                                    | [0-9]{3}                 | 匹配三个数字                                                                             |\n| {M,N}                      | 匹配M~N次前面出现的正则表达式                                                                  | [0-9]{5,9}               | 匹配5到9个数字(包括5个和9个)                                                             |\n| [...]                      | 匹配来自字符集的任意单一字符                                                                   | [aeiou]                  | 匹配一个元音字母                                                                         |\n| [..x~y..]                  | 匹配x~y范围内的任意单一字符                                                                    | [A-Za-z]                 | 匹配任意一个英文字母                                                                     |\n| [^...]                     | 不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)                   | [\\^aeiou][\\^A-Za-z0-9]   | 匹配一个非元音字母和一个非字母数字字符                                                   |\n| (*&#124;+&#124;?&#124;{})? | 用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})                                     | .*?[a-z]                 | (非贪婪是指尽可能少的匹配)                                                               |\n| (...)                      | 匹配封闭的正则表达式,然后另存为子组                                                            | f(oo&#124; u)bar         | 匹配foobar,fubar                                                                         |\n| 特殊字符                   |                                                                                                |                          |                                                                                          |\n| \\d                         | 匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)                          | data\\d+.txt              | 匹配data1.txt、data12.txt                                                                |\n| \\w                         | 匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)                                            | [A-Za-z_]\\w+             | 匹配任意字母或_加一个或多个字母数字字符(asda,_asda)                                      |\n| \\s                         | 匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)                                               | of\\sthe                  | 匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符) |\n| \\b                         | 匹配任何单词边界(\\B与之相反)                                                                   | \\bThe\\b                  | 匹配of The a，不匹配ofThe a                                                              |\n| \\N                         | 匹配已保存的子组N(与上面(...)配合使用)                                                         | price:\\16                | 匹配price:和前面第16个子组的值                                                           |\n| \\c                         | 逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)              | \\*                       | 匹配*                                                                                    |\n| \\A(\\Z)                     | 匹配字符串的起始(结束)(另见上面的^和$)                                                         | \\ADear                   | 匹配以Dear开头的                                                                         |\n| 扩展表示法                 |                                                                                                |                          |                                                                                          |\n| （?iLmsux）                | 在正则表达式中嵌入一个或多个特殊\"标记\"参数(或者通过函数/方法)                                  | （?x）,(?im)             |                                                                                          |\n| (?:...)                    | 表示一个匹配不用保存的分组                                                                     | (?:\\w+\\.)*             | 匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组                                |\n| (?P<name>...)              | 像一个仅由name标识而不是数字ID标识的正则分组匹配                                               | (?P<data>)               | 给匹配的分组命名为data                                                                   |\n| (?P=name)                  | 在同一个字符串中匹配由(?P<name>)分组之前的文本                                                 | (?P=data)                | 匹配名字为data的串                                                                       |\n| (?#...)                    | 表示注释，所有内容都被忽略                                                                     | (?#comment)              |                                                                                          |\n| (?=...)                    | 匹配条件是如果...出现在之后的位置，而不使用输入字符串；称作正向前视断言                        | (?=.com)                 | 如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串                         |\n| (?!...)                    | 匹配条件是如果...不出现在之后的位置，而不使用输入字符串；称作负向前视断言                      | (?!.net)                 | 如果一个字符串后面不是跟着“.net”，才做匹配操作                                           |\n| (?<=...)                   | 匹配条件是如果...出现在之前的位置，而不使用输入字符串；称作正向后视断言                        | (?<=800-)                | 如果字符串之前为“800-”才做匹配，并不使用任何输入字符串                                   |\n| (?<\\!...)                  | 匹配条件是如果...不出现在之前的位置，而不使用输入字符串；称作负向后视断言                      | (?<\\!192\\\\.168\\\\.)         | 如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串                         |\n| (?(id/name)Y&#124;N        | 如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项 | (?(1)y&#124;x)           | 如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配                                                                                                                                                     |\n以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。\n","slug":"Python正则表达式-一","published":1,"updated":"2018-02-11T01:04:21.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqwa0001lwn9sz6949x7","content":"<p>在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。<br><a id=\"more\"></a></p>\n<h2 id=\"特殊符号和字符\"><a href=\"#特殊符号和字符\" class=\"headerlink\" title=\"特殊符号和字符\"></a>特殊符号和字符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">正则表达式示例</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">literal</td>\n<td style=\"text-align:center\">匹配文本字符串的字面值literal</td>\n<td style=\"text-align:center\">foo</td>\n<td style=\"text-align:center\">只是匹配foo，相当于取等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re1&#124; re2</td>\n<td style=\"text-align:center\">匹配正则表达式re1或re2</td>\n<td style=\"text-align:center\">foo&#124; bar</td>\n<td style=\"text-align:center\">匹配foo或者bar，二选一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">匹配任何字符(除了\\n之外)</td>\n<td style=\"text-align:center\">a.a</td>\n<td style=\"text-align:center\">匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">匹配字符串起始部分</td>\n<td style=\"text-align:center\">^Foo</td>\n<td style=\"text-align:center\">匹配Foo，不匹配aFoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">匹配字符串终止部分</td>\n<td style=\"text-align:center\">Bar$</td>\n<td style=\"text-align:center\">只匹配Bar,不匹配aBar等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配0次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]*</td>\n<td style=\"text-align:center\">匹配任意多个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">匹配1次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]+</td>\n<td style=\"text-align:center\">匹配一到多个个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">匹配0次或者1次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]</td>\n<td style=\"text-align:center\">要么有一个字母或数字要么没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{N}</td>\n<td style=\"text-align:center\">匹配N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{3}</td>\n<td style=\"text-align:center\">匹配三个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{M,N}</td>\n<td style=\"text-align:center\">匹配M~N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{5,9}</td>\n<td style=\"text-align:center\">匹配5到9个数字(包括5个和9个)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[…]</td>\n<td style=\"text-align:center\">匹配来自字符集的任意单一字符</td>\n<td style=\"text-align:center\">[aeiou]</td>\n<td style=\"text-align:center\">匹配一个元音字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[..x~y..]</td>\n<td style=\"text-align:center\">匹配x~y范围内的任意单一字符</td>\n<td style=\"text-align:center\">[A-Za-z]</td>\n<td style=\"text-align:center\">匹配任意一个英文字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^…]</td>\n<td style=\"text-align:center\">不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)</td>\n<td style=\"text-align:center\">[\\^aeiou][\\^A-Za-z0-9]</td>\n<td style=\"text-align:center\">匹配一个非元音字母和一个非字母数字字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(*&#124;+&#124;?&#124;{})?</td>\n<td style=\"text-align:center\">用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})</td>\n<td style=\"text-align:center\">.*?[a-z]</td>\n<td style=\"text-align:center\">(非贪婪是指尽可能少的匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(…)</td>\n<td style=\"text-align:center\">匹配封闭的正则表达式,然后另存为子组</td>\n<td style=\"text-align:center\">f(oo&#124; u)bar</td>\n<td style=\"text-align:center\">匹配foobar,fubar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特殊字符</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)</td>\n<td style=\"text-align:center\">data\\d+.txt</td>\n<td style=\"text-align:center\">匹配data1.txt、data12.txt</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)</td>\n<td style=\"text-align:center\">[A-Za-z_]\\w+</td>\n<td style=\"text-align:center\">匹配任意字母或_加一个或多个字母数字字符(asda,_asda)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)</td>\n<td style=\"text-align:center\">of\\sthe</td>\n<td style=\"text-align:center\">匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">匹配任何单词边界(\\B与之相反)</td>\n<td style=\"text-align:center\">\\bThe\\b</td>\n<td style=\"text-align:center\">匹配of The a，不匹配ofThe a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\N</td>\n<td style=\"text-align:center\">匹配已保存的子组N(与上面(…)配合使用)</td>\n<td style=\"text-align:center\">price:\\16</td>\n<td style=\"text-align:center\">匹配price:和前面第16个子组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\c</td>\n<td style=\"text-align:center\">逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配*</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\A(\\Z)</td>\n<td style=\"text-align:center\">匹配字符串的起始(结束)(另见上面的^和$)</td>\n<td style=\"text-align:center\">\\ADear</td>\n<td style=\"text-align:center\">匹配以Dear开头的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展表示法</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">（?iLmsux）</td>\n<td style=\"text-align:center\">在正则表达式中嵌入一个或多个特殊”标记”参数(或者通过函数/方法)</td>\n<td style=\"text-align:center\">（?x）,(?im)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:…)</td>\n<td style=\"text-align:center\">表示一个匹配不用保存的分组</td>\n<td style=\"text-align:center\">(?:\\w+.)*</td>\n<td style=\"text-align:center\">匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</name></td>\n<td style=\"text-align:center\">像一个仅由name标识而不是数字ID标识的正则分组匹配</td>\n<td style=\"text-align:center\">(?P<data>)</data></td>\n<td style=\"text-align:center\">给匹配的分组命名为data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:center\">在同一个字符串中匹配由(?P<name>)分组之前的文本</name></td>\n<td style=\"text-align:center\">(?P=data)</td>\n<td style=\"text-align:center\">匹配名字为data的串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?#…)</td>\n<td style=\"text-align:center\">表示注释，所有内容都被忽略</td>\n<td style=\"text-align:center\">(?#comment)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td>\n<td style=\"text-align:center\">(?=.com)</td>\n<td style=\"text-align:center\">如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td>\n<td style=\"text-align:center\">(?!.net)</td>\n<td style=\"text-align:center\">如果一个字符串后面不是跟着“.net”，才做匹配操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td>\n<td style=\"text-align:center\">(?&lt;=800-)</td>\n<td style=\"text-align:center\">如果字符串之前为“800-”才做匹配，并不使用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td>\n<td style=\"text-align:center\">(?&lt;!192\\.168\\.)</td>\n<td style=\"text-align:center\">如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?(id/name)Y&#124;N</td>\n<td style=\"text-align:center\">如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项</td>\n<td style=\"text-align:center\">(?(1)y&#124;x)</td>\n<td style=\"text-align:center\">如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配</td>\n</tr>\n</tbody>\n</table>\n<p>以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。</p>\n","site":{"data":{}},"excerpt":"<p>在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。<br>","more":"</p>\n<h2 id=\"特殊符号和字符\"><a href=\"#特殊符号和字符\" class=\"headerlink\" title=\"特殊符号和字符\"></a>特殊符号和字符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">正则表达式示例</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">literal</td>\n<td style=\"text-align:center\">匹配文本字符串的字面值literal</td>\n<td style=\"text-align:center\">foo</td>\n<td style=\"text-align:center\">只是匹配foo，相当于取等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re1&#124; re2</td>\n<td style=\"text-align:center\">匹配正则表达式re1或re2</td>\n<td style=\"text-align:center\">foo&#124; bar</td>\n<td style=\"text-align:center\">匹配foo或者bar，二选一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">匹配任何字符(除了\\n之外)</td>\n<td style=\"text-align:center\">a.a</td>\n<td style=\"text-align:center\">匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">匹配字符串起始部分</td>\n<td style=\"text-align:center\">^Foo</td>\n<td style=\"text-align:center\">匹配Foo，不匹配aFoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">匹配字符串终止部分</td>\n<td style=\"text-align:center\">Bar$</td>\n<td style=\"text-align:center\">只匹配Bar,不匹配aBar等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配0次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]*</td>\n<td style=\"text-align:center\">匹配任意多个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">匹配1次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]+</td>\n<td style=\"text-align:center\">匹配一到多个个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">匹配0次或者1次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]</td>\n<td style=\"text-align:center\">要么有一个字母或数字要么没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{N}</td>\n<td style=\"text-align:center\">匹配N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{3}</td>\n<td style=\"text-align:center\">匹配三个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{M,N}</td>\n<td style=\"text-align:center\">匹配M~N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{5,9}</td>\n<td style=\"text-align:center\">匹配5到9个数字(包括5个和9个)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[…]</td>\n<td style=\"text-align:center\">匹配来自字符集的任意单一字符</td>\n<td style=\"text-align:center\">[aeiou]</td>\n<td style=\"text-align:center\">匹配一个元音字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[..x~y..]</td>\n<td style=\"text-align:center\">匹配x~y范围内的任意单一字符</td>\n<td style=\"text-align:center\">[A-Za-z]</td>\n<td style=\"text-align:center\">匹配任意一个英文字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^…]</td>\n<td style=\"text-align:center\">不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)</td>\n<td style=\"text-align:center\">[\\^aeiou][\\^A-Za-z0-9]</td>\n<td style=\"text-align:center\">匹配一个非元音字母和一个非字母数字字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(*&#124;+&#124;?&#124;{})?</td>\n<td style=\"text-align:center\">用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})</td>\n<td style=\"text-align:center\">.*?[a-z]</td>\n<td style=\"text-align:center\">(非贪婪是指尽可能少的匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(…)</td>\n<td style=\"text-align:center\">匹配封闭的正则表达式,然后另存为子组</td>\n<td style=\"text-align:center\">f(oo&#124; u)bar</td>\n<td style=\"text-align:center\">匹配foobar,fubar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特殊字符</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)</td>\n<td style=\"text-align:center\">data\\d+.txt</td>\n<td style=\"text-align:center\">匹配data1.txt、data12.txt</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)</td>\n<td style=\"text-align:center\">[A-Za-z_]\\w+</td>\n<td style=\"text-align:center\">匹配任意字母或_加一个或多个字母数字字符(asda,_asda)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)</td>\n<td style=\"text-align:center\">of\\sthe</td>\n<td style=\"text-align:center\">匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">匹配任何单词边界(\\B与之相反)</td>\n<td style=\"text-align:center\">\\bThe\\b</td>\n<td style=\"text-align:center\">匹配of The a，不匹配ofThe a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\N</td>\n<td style=\"text-align:center\">匹配已保存的子组N(与上面(…)配合使用)</td>\n<td style=\"text-align:center\">price:\\16</td>\n<td style=\"text-align:center\">匹配price:和前面第16个子组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\c</td>\n<td style=\"text-align:center\">逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配*</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\A(\\Z)</td>\n<td style=\"text-align:center\">匹配字符串的起始(结束)(另见上面的^和$)</td>\n<td style=\"text-align:center\">\\ADear</td>\n<td style=\"text-align:center\">匹配以Dear开头的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展表示法</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">（?iLmsux）</td>\n<td style=\"text-align:center\">在正则表达式中嵌入一个或多个特殊”标记”参数(或者通过函数/方法)</td>\n<td style=\"text-align:center\">（?x）,(?im)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:…)</td>\n<td style=\"text-align:center\">表示一个匹配不用保存的分组</td>\n<td style=\"text-align:center\">(?:\\w+.)*</td>\n<td style=\"text-align:center\">匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</name></td>\n<td style=\"text-align:center\">像一个仅由name标识而不是数字ID标识的正则分组匹配</td>\n<td style=\"text-align:center\">(?P<data>)</data></td>\n<td style=\"text-align:center\">给匹配的分组命名为data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:center\">在同一个字符串中匹配由(?P<name>)分组之前的文本</name></td>\n<td style=\"text-align:center\">(?P=data)</td>\n<td style=\"text-align:center\">匹配名字为data的串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?#…)</td>\n<td style=\"text-align:center\">表示注释，所有内容都被忽略</td>\n<td style=\"text-align:center\">(?#comment)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td>\n<td style=\"text-align:center\">(?=.com)</td>\n<td style=\"text-align:center\">如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td>\n<td style=\"text-align:center\">(?!.net)</td>\n<td style=\"text-align:center\">如果一个字符串后面不是跟着“.net”，才做匹配操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td>\n<td style=\"text-align:center\">(?&lt;=800-)</td>\n<td style=\"text-align:center\">如果字符串之前为“800-”才做匹配，并不使用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td>\n<td style=\"text-align:center\">(?&lt;!192\\.168\\.)</td>\n<td style=\"text-align:center\">如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?(id/name)Y&#124;N</td>\n<td style=\"text-align:center\">如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项</td>\n<td style=\"text-align:center\">(?(1)y&#124;x)</td>\n<td style=\"text-align:center\">如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配</td>\n</tr>\n</tbody>\n</table>\n<p>以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。</p>"},{"title":"Python正则表达式(三)","date":"2018-02-12T01:55:17.000Z","copyright":true,"_content":"在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。\n<!--More-->\n## 正则表达式\n1. > 识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。\n   ```Python\n   import re\n   mode = re.compile(r'bat|bit|but|hat|hit|hut')\n   #mode  = re.compile(r'[bh][iau]t')\n   strs = ['bat', 'bit', 'but', 'hat', 'hit', 'hut']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'bat'\n   'bit'\n   'but'\n   'hat'\n   'hit'\n   'hut'\n   ```\n\n2. > 匹配由单个空格分隔的任意单词对，也就是姓和名。\n   ```Python\n   import re\n   mode  = re.compile(r'^[A-Za-z]+ [A-Za-z]+$')\n   strs = ['david Bob', 'D.Jone Steven', 'Lucy D May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david Bob'\n   ```\n\n3. > 匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。\n   ```Python\n   import re\n   mode = re.compile(r'[A-Za-z]+,\\s[A-Za-z]+')\n   strs = ['david, Bob', 'D.Jone, Steven', 'Lucy, D, May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david, Bob'\n   'Lucy, D'\n   ```\n\n4. > 匹配所有有效Python 标识符[^1]的集合。\n   ```Python\n   import re\n   mode = re.compile(r'[^0-9][\\w_]+')#用in排除关键字\n   strs = ['1var', 'v_ar', '_var', 'var', 'var_9', 'var_']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'v_ar'\n   '_var'\n   'var'\n   'var_9'\n   'var_'\n   ```\n5. > 根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数\n量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux\nDrive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz\nBoulevard。\n    ```Python\n    import re\n    mode = re.compile(r'^\\d{4}( [A-Z][a-z]+)+$')\n    strs = ['1221 Bordeaux Drive', '54565 Bordeaux Drive', 'Bordeaux Drive', '1221 Bordeaux Drive Drive']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1221 Bordeaux Drive'\n    '1221 Bordeaux Drive Drive'\n    ```\n6. > 匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。\n选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，\nhttp://www.foothill.edu）。\n   ```Python\n   import re\n   mode = re.compile(r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$')\n   strs=['https://www.baidu.com', 'http://www.bilibili.com', 'www.baidu.com', 'baidu.com', 'www.cqupt.edu']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'https://www.baidu.com'\n   'http://www.bilibili.com'\n   'www.baidu.com'\n   'www.cqupt.edu'\n   ```\n7. > 匹配所有能够表示Python 整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]?$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123'\n   '123l'\n   '12312L'\n   ```\n8. > 匹配所有能够表示Python 长整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123l'\n   '12312L'\n   ```\n\n9. > 匹配所有能够表示Python 浮点数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'(0|[1-9]\\d*)(\\.\\d+)?$')\n   strs = ['00.10', '0.123', '12.23', '12', '12.36l']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()   \n\n   #输出结果\n   '0.123'\n   '12.23'\n   '12'\n   ```\n10. > 匹配所有能够表示Python 复数的字符串集。\n    ```Python\n    import re\n    mode = re.compile(r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$')\n    strs = ['12.3+1.2j', '1+2j', '4j']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12.3+1.2j'\n    '1+2j'\n    '4j'\n    ```\n11. > 匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然\n后尝试使它尽可能严谨，不过要保持正确的功能）。\n    ```Python\n    import re\n    mode = re.compile(r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$')\n    strs = ['12345@qq.com', 'sina@163.com', 'qq@sina.com.cn', 'net@21cn.com', 'new123@163.sina.com']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12345@qq.com'\n    'sina@163.com'\n    'qq@sina.com.cn'\n    'net@21cn.com'\n    'new123@163.sina.com'\n    ```\n12. > type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic\n类型的字符串。\n    ```Python\n    import re\n    mode = re.compile(r'<type \\'(.*)\\'>')\n    strs = ['<type \\'int\\'>', '<type \\'float\\'>', '<type \\'builtin_function_or_method\\'>']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group(1)\n\n    #输出结果\n    'int'\n    'float'\n    'builtin_function_or_method'\n    ```\n13. > 处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～\n9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。\n    ```Python\n    import re\n    mode = re.compile(r'1[0-2]')\n    strs = ['10', '11', '12']\n    for s in strs:\n         if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '10'\n    '11'\n    '12'\n    ```\n14. > 创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号\n码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。\n    ```Python\n    import re\n    mode = re.compile(r'\\d{4}-((\\d{6}-\\d{5})|(\\d{4}-\\d{4}-\\d{4}))')\n    strs = ['1234-567890-12345', '1234-5678-8012-3456']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1234-567890-12345'\n    '1234-5678-8012-3456'\n    ```\n[^1]:标识符有字母、数字、下划线组成，但不能由数字开头\n","source":"_posts/Python正则表达式-三.md","raw":"---\ntitle: Python正则表达式(三)\ndate: 2018-02-12 09:55:17\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\n---\n在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。\n<!--More-->\n## 正则表达式\n1. > 识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。\n   ```Python\n   import re\n   mode = re.compile(r'bat|bit|but|hat|hit|hut')\n   #mode  = re.compile(r'[bh][iau]t')\n   strs = ['bat', 'bit', 'but', 'hat', 'hit', 'hut']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'bat'\n   'bit'\n   'but'\n   'hat'\n   'hit'\n   'hut'\n   ```\n\n2. > 匹配由单个空格分隔的任意单词对，也就是姓和名。\n   ```Python\n   import re\n   mode  = re.compile(r'^[A-Za-z]+ [A-Za-z]+$')\n   strs = ['david Bob', 'D.Jone Steven', 'Lucy D May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david Bob'\n   ```\n\n3. > 匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。\n   ```Python\n   import re\n   mode = re.compile(r'[A-Za-z]+,\\s[A-Za-z]+')\n   strs = ['david, Bob', 'D.Jone, Steven', 'Lucy, D, May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david, Bob'\n   'Lucy, D'\n   ```\n\n4. > 匹配所有有效Python 标识符[^1]的集合。\n   ```Python\n   import re\n   mode = re.compile(r'[^0-9][\\w_]+')#用in排除关键字\n   strs = ['1var', 'v_ar', '_var', 'var', 'var_9', 'var_']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'v_ar'\n   '_var'\n   'var'\n   'var_9'\n   'var_'\n   ```\n5. > 根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数\n量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux\nDrive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz\nBoulevard。\n    ```Python\n    import re\n    mode = re.compile(r'^\\d{4}( [A-Z][a-z]+)+$')\n    strs = ['1221 Bordeaux Drive', '54565 Bordeaux Drive', 'Bordeaux Drive', '1221 Bordeaux Drive Drive']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1221 Bordeaux Drive'\n    '1221 Bordeaux Drive Drive'\n    ```\n6. > 匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。\n选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，\nhttp://www.foothill.edu）。\n   ```Python\n   import re\n   mode = re.compile(r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$')\n   strs=['https://www.baidu.com', 'http://www.bilibili.com', 'www.baidu.com', 'baidu.com', 'www.cqupt.edu']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'https://www.baidu.com'\n   'http://www.bilibili.com'\n   'www.baidu.com'\n   'www.cqupt.edu'\n   ```\n7. > 匹配所有能够表示Python 整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]?$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123'\n   '123l'\n   '12312L'\n   ```\n8. > 匹配所有能够表示Python 长整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123l'\n   '12312L'\n   ```\n\n9. > 匹配所有能够表示Python 浮点数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'(0|[1-9]\\d*)(\\.\\d+)?$')\n   strs = ['00.10', '0.123', '12.23', '12', '12.36l']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()   \n\n   #输出结果\n   '0.123'\n   '12.23'\n   '12'\n   ```\n10. > 匹配所有能够表示Python 复数的字符串集。\n    ```Python\n    import re\n    mode = re.compile(r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$')\n    strs = ['12.3+1.2j', '1+2j', '4j']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12.3+1.2j'\n    '1+2j'\n    '4j'\n    ```\n11. > 匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然\n后尝试使它尽可能严谨，不过要保持正确的功能）。\n    ```Python\n    import re\n    mode = re.compile(r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$')\n    strs = ['12345@qq.com', 'sina@163.com', 'qq@sina.com.cn', 'net@21cn.com', 'new123@163.sina.com']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12345@qq.com'\n    'sina@163.com'\n    'qq@sina.com.cn'\n    'net@21cn.com'\n    'new123@163.sina.com'\n    ```\n12. > type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic\n类型的字符串。\n    ```Python\n    import re\n    mode = re.compile(r'<type \\'(.*)\\'>')\n    strs = ['<type \\'int\\'>', '<type \\'float\\'>', '<type \\'builtin_function_or_method\\'>']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group(1)\n\n    #输出结果\n    'int'\n    'float'\n    'builtin_function_or_method'\n    ```\n13. > 处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～\n9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。\n    ```Python\n    import re\n    mode = re.compile(r'1[0-2]')\n    strs = ['10', '11', '12']\n    for s in strs:\n         if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '10'\n    '11'\n    '12'\n    ```\n14. > 创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号\n码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。\n    ```Python\n    import re\n    mode = re.compile(r'\\d{4}-((\\d{6}-\\d{5})|(\\d{4}-\\d{4}-\\d{4}))')\n    strs = ['1234-567890-12345', '1234-5678-8012-3456']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1234-567890-12345'\n    '1234-5678-8012-3456'\n    ```\n[^1]:标识符有字母、数字、下划线组成，但不能由数字开头\n","slug":"Python正则表达式-三","published":1,"updated":"2018-02-22T07:38:59.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqwq0004lwn9v3evdst3","content":"<p>在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。<br><a id=\"more\"></a></p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ol>\n<li><blockquote>\n<p>识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'bat|bit|but|hat|hit|hut'</span>)</span><br><span class=\"line\"><span class=\"comment\">#mode  = re.compile(r'[bh][iau]t')</span></span><br><span class=\"line\">strs = [<span class=\"string\">'bat'</span>, <span class=\"string\">'bit'</span>, <span class=\"string\">'but'</span>, <span class=\"string\">'hat'</span>, <span class=\"string\">'hit'</span>, <span class=\"string\">'hut'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'bat'</span></span><br><span class=\"line\"><span class=\"string\">'bit'</span></span><br><span class=\"line\"><span class=\"string\">'but'</span></span><br><span class=\"line\"><span class=\"string\">'hat'</span></span><br><span class=\"line\"><span class=\"string\">'hit'</span></span><br><span class=\"line\"><span class=\"string\">'hut'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个空格分隔的任意单词对，也就是姓和名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode  = re.compile(<span class=\"string\">r'^[A-Za-z]+ [A-Za-z]+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david Bob'</span>, <span class=\"string\">'D.Jone Steven'</span>, <span class=\"string\">'Lucy D May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david Bob'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[A-Za-z]+,\\s[A-Za-z]+'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david, Bob'</span>, <span class=\"string\">'D.Jone, Steven'</span>, <span class=\"string\">'Lucy, D, May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david, Bob'</span></span><br><span class=\"line\"><span class=\"string\">'Lucy, D'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有有效Python 标识符<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的集合。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[^0-9][\\w_]+'</span>)<span class=\"comment\">#用in排除关键字</span></span><br><span class=\"line\">strs = [<span class=\"string\">'1var'</span>, <span class=\"string\">'v_ar'</span>, <span class=\"string\">'_var'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'var_9'</span>, <span class=\"string\">'var_'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'v_ar'</span></span><br><span class=\"line\"><span class=\"string\">'_var'</span></span><br><span class=\"line\"><span class=\"string\">'var'</span></span><br><span class=\"line\"><span class=\"string\">'var_9'</span></span><br><span class=\"line\"><span class=\"string\">'var_'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数<br>量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux<br>Drive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz<br>Boulevard。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d&#123;4&#125;( [A-Z][a-z]+)+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1221 Bordeaux Drive'</span>, <span class=\"string\">'54565 Bordeaux Drive'</span>, <span class=\"string\">'Bordeaux Drive'</span>, <span class=\"string\">'1221 Bordeaux Drive Drive'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive'</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive Drive'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。<br>选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，<br><a href=\"http://www.foothill.edu）。\" target=\"_blank\" rel=\"noopener\">http://www.foothill.edu）。</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$'</span>)</span><br><span class=\"line\">strs=[<span class=\"string\">'https://www.baidu.com'</span>, <span class=\"string\">'http://www.bilibili.com'</span>, <span class=\"string\">'www.baidu.com'</span>, <span class=\"string\">'baidu.com'</span>, <span class=\"string\">'www.cqupt.edu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'https://www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'http://www.bilibili.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.cqupt.edu'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 长整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 浮点数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'(0|[1-9]\\d*)(\\.\\d+)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'00.10'</span>, <span class=\"string\">'0.123'</span>, <span class=\"string\">'12.23'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'12.36l'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'0.123'</span></span><br><span class=\"line\"><span class=\"string\">'12.23'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 复数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12.3+1.2j'</span>, <span class=\"string\">'1+2j'</span>, <span class=\"string\">'4j'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12.3+1.2j'</span></span><br><span class=\"line\"><span class=\"string\">'1+2j'</span></span><br><span class=\"line\"><span class=\"string\">'4j'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然<br>后尝试使它尽可能严谨，不过要保持正确的功能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12345@qq.com'</span>, <span class=\"string\">'sina@163.com'</span>, <span class=\"string\">'qq@sina.com.cn'</span>, <span class=\"string\">'net@21cn.com'</span>, <span class=\"string\">'new123@163.sina.com'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12345@qq.com'</span></span><br><span class=\"line\"><span class=\"string\">'sina@163.com'</span></span><br><span class=\"line\"><span class=\"string\">'qq@sina.com.cn'</span></span><br><span class=\"line\"><span class=\"string\">'net@21cn.com'</span></span><br><span class=\"line\"><span class=\"string\">'new123@163.sina.com'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic<br>类型的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'&lt;type \\'(.*)\\'&gt;'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'&lt;type \\'int\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'float\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'builtin_function_or_method\\'&gt;'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'int'</span></span><br><span class=\"line\"><span class=\"string\">'float'</span></span><br><span class=\"line\"><span class=\"string\">'builtin_function_or_method'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～<br>9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'1[0-2]'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'10'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'12'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">     <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'10'</span></span><br><span class=\"line\"><span class=\"string\">'11'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号<br>码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'\\d&#123;4&#125;-((\\d&#123;6&#125;-\\d&#123;5&#125;)|(\\d&#123;4&#125;-\\d&#123;4&#125;-\\d&#123;4&#125;))'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1234-567890-12345'</span>, <span class=\"string\">'1234-5678-8012-3456'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1234-567890-12345'</span></span><br><span class=\"line\"><span class=\"string\">'1234-5678-8012-3456'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">标识符有字母、数字、下划线组成，但不能由数字开头</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。<br>","more":"</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ol>\n<li><blockquote>\n<p>识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'bat|bit|but|hat|hit|hut'</span>)</span><br><span class=\"line\"><span class=\"comment\">#mode  = re.compile(r'[bh][iau]t')</span></span><br><span class=\"line\">strs = [<span class=\"string\">'bat'</span>, <span class=\"string\">'bit'</span>, <span class=\"string\">'but'</span>, <span class=\"string\">'hat'</span>, <span class=\"string\">'hit'</span>, <span class=\"string\">'hut'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'bat'</span></span><br><span class=\"line\"><span class=\"string\">'bit'</span></span><br><span class=\"line\"><span class=\"string\">'but'</span></span><br><span class=\"line\"><span class=\"string\">'hat'</span></span><br><span class=\"line\"><span class=\"string\">'hit'</span></span><br><span class=\"line\"><span class=\"string\">'hut'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个空格分隔的任意单词对，也就是姓和名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode  = re.compile(<span class=\"string\">r'^[A-Za-z]+ [A-Za-z]+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david Bob'</span>, <span class=\"string\">'D.Jone Steven'</span>, <span class=\"string\">'Lucy D May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david Bob'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[A-Za-z]+,\\s[A-Za-z]+'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david, Bob'</span>, <span class=\"string\">'D.Jone, Steven'</span>, <span class=\"string\">'Lucy, D, May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david, Bob'</span></span><br><span class=\"line\"><span class=\"string\">'Lucy, D'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有有效Python 标识符<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的集合。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[^0-9][\\w_]+'</span>)<span class=\"comment\">#用in排除关键字</span></span><br><span class=\"line\">strs = [<span class=\"string\">'1var'</span>, <span class=\"string\">'v_ar'</span>, <span class=\"string\">'_var'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'var_9'</span>, <span class=\"string\">'var_'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'v_ar'</span></span><br><span class=\"line\"><span class=\"string\">'_var'</span></span><br><span class=\"line\"><span class=\"string\">'var'</span></span><br><span class=\"line\"><span class=\"string\">'var_9'</span></span><br><span class=\"line\"><span class=\"string\">'var_'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数<br>量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux<br>Drive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz<br>Boulevard。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d&#123;4&#125;( [A-Z][a-z]+)+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1221 Bordeaux Drive'</span>, <span class=\"string\">'54565 Bordeaux Drive'</span>, <span class=\"string\">'Bordeaux Drive'</span>, <span class=\"string\">'1221 Bordeaux Drive Drive'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive'</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive Drive'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。<br>选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，<br><a href=\"http://www.foothill.edu）。\" target=\"_blank\" rel=\"noopener\">http://www.foothill.edu）。</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$'</span>)</span><br><span class=\"line\">strs=[<span class=\"string\">'https://www.baidu.com'</span>, <span class=\"string\">'http://www.bilibili.com'</span>, <span class=\"string\">'www.baidu.com'</span>, <span class=\"string\">'baidu.com'</span>, <span class=\"string\">'www.cqupt.edu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'https://www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'http://www.bilibili.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.cqupt.edu'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 长整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 浮点数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'(0|[1-9]\\d*)(\\.\\d+)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'00.10'</span>, <span class=\"string\">'0.123'</span>, <span class=\"string\">'12.23'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'12.36l'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'0.123'</span></span><br><span class=\"line\"><span class=\"string\">'12.23'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 复数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12.3+1.2j'</span>, <span class=\"string\">'1+2j'</span>, <span class=\"string\">'4j'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12.3+1.2j'</span></span><br><span class=\"line\"><span class=\"string\">'1+2j'</span></span><br><span class=\"line\"><span class=\"string\">'4j'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然<br>后尝试使它尽可能严谨，不过要保持正确的功能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12345@qq.com'</span>, <span class=\"string\">'sina@163.com'</span>, <span class=\"string\">'qq@sina.com.cn'</span>, <span class=\"string\">'net@21cn.com'</span>, <span class=\"string\">'new123@163.sina.com'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12345@qq.com'</span></span><br><span class=\"line\"><span class=\"string\">'sina@163.com'</span></span><br><span class=\"line\"><span class=\"string\">'qq@sina.com.cn'</span></span><br><span class=\"line\"><span class=\"string\">'net@21cn.com'</span></span><br><span class=\"line\"><span class=\"string\">'new123@163.sina.com'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic<br>类型的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'&lt;type \\'(.*)\\'&gt;'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'&lt;type \\'int\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'float\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'builtin_function_or_method\\'&gt;'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'int'</span></span><br><span class=\"line\"><span class=\"string\">'float'</span></span><br><span class=\"line\"><span class=\"string\">'builtin_function_or_method'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～<br>9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'1[0-2]'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'10'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'12'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">     <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'10'</span></span><br><span class=\"line\"><span class=\"string\">'11'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号<br>码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'\\d&#123;4&#125;-((\\d&#123;6&#125;-\\d&#123;5&#125;)|(\\d&#123;4&#125;-\\d&#123;4&#125;-\\d&#123;4&#125;))'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1234-567890-12345'</span>, <span class=\"string\">'1234-5678-8012-3456'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1234-567890-12345'</span></span><br><span class=\"line\"><span class=\"string\">'1234-5678-8012-3456'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">标识符有字母、数字、下划线组成，但不能由数字开头</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python正则表达式(二)","date":"2018-02-10T13:28:04.000Z","copyright":true,"description":null,"_content":"正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。\n由于个人兴趣和想要专研的方向，在这里将会使用Python [^1] 语言进行描述。\n<!--More-->\n\n## 正则表达式和Python语言\n\n### re模块：核心函数和方法\n| 函数方法                                         | 描述                                                                                                                                        |\n| :-----:                                          | :----:                                                                                                                                      |\n| 仅仅是re函数模块                                 |                                                                                                                                             |\n| compile(pattern, flags=0)                        | 使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象                                                                        |\n| re模块函数和正则表达式对象的方法                 |                                                                                                                                             |\n| match(pattern, string, flags=0)                  | 尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None                                    |\n| search(pattern, string, flags=0)                 | 使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None                                  |\n| findall(pattern, string [,flags])                | 查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表                                                                            |\n| finditer(pattern, string[,flags])                | 与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象                                         |\n| split(pattern, string, max=0)                     | 根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)                  |\n| sub(pattern, repl, string, count=0)              | 使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目） |\n| purge()                                          | 清除隐式编译的正则表达式模式                                                                                                                |\n| 常见的匹配对象方法                               |                                                                                                                                             |\n| group(num=0)                                     | 返回整个匹配对象，或者编号为num的特定子组                                                                                                   |\n| groups(default=None)                             | 返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)                                                                          |\n| groupdict(default=None)                          | 返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)                                        |\n| 常用的模块属性（用于大多数正则表达式函数的标记） |                                                                                                                                             |\n| re.I,re.IGNORECASE                               | 不去分大小写的匹配                                                                                                                          |\n| re.L,re.LOCALE                                   | 根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配                                                                                  |\n| re.M,re.MULTILINE                                | ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾                                                            |\n| re.S,re.DOTALL                                   | \".\"(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示\".\"(点号)能匹配全部字符                                                        |\n| re.X,re.VERBOSE                                  | 通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性                                                                                                                                            |\n\n### 部分方法总结\n\n- *compile(pattern, flags=0)[^2]*\n  >使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以[查阅文档](https://docs.python.org/3/library/re.html?highlight=re#module-re)),标志位通过 （|）合并\n\n- *group(num=0)* 和 *groups(default=None)*\n  >匹配对象[^3]的两个主要方法。 *group()* 要么返回整个匹配对象，要么按要求返回特定子组。 *groups()* 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，*group()* 返回整个匹配，*groups()* 返回一个空元组。\n\n- *match(pattern, string, flags=0)*\n   > *match()* 方法试图从字符串的**起始部分**对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None\n   ``` python\n   #匹配成功\n   m = re.match('foo', 'foo') #模式匹配字符串\n   if m is not None:         #如果匹配成功，就输出匹配内容\n       m.group()\n\n  'foo'                       #输出结果\n\n  #匹配失败\n  m  = re.match('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:           #如果匹配成功，就输出匹配内容\n      m.group()\n\n                              #因为起始字符为'B',所以匹配不成功，无任何输出\n    ```\n\n- *search(pattern, string, flags=0)*\n  > *search()* 的工作方式和 *match()* 相同，不同之处在于 *search()* 会用它的字符串参数在**任意位置**对给定正则表达式模式搜索**第一次**出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。\n  ```python\n  #将上面使用match()方法匹配的串改用search()匹配\n  m = re.search('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:            #如果匹配成功，就输出匹配内容\n      m.group()\n\n  'foo'                        #可以看到就算起始位置未能匹配，也能匹配成功\n  ```\n\n- *findall(pattern, string[,flags])* 和 *finditer(pattern, string[,flags])*\n  > *findall()* 总是返回一个列表，如果没有找到匹配对象，返回一个空列表  \n    *finditer()* 是一个与 *findall()* 类似但更节省内存的变体，*finditer()* 在匹配对象中迭代[^4]\n  ```Python\n  #findall()匹配\n  re.findall('car', 'carry the barcardi to the car') #模式匹配字符串\n\n  ['car', 'car', 'car']                              #返回结果\n\n  #finditer()匹配\n  iter = re.finditer('car', 'carry the barcardi to the car') #模式匹配字符串\n  for i in iter:                                            #遍历迭代器\n      print(i.group())\n\n  #输出结果\n  car\n  car\n  car\n  ```\n\n- *sub(pattern, repl, string, count=0)* 和 *subn(pattern, repl, string, count=0)*\n  > *sub()* 和 *subn()* 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 *sub()* 不同的是，*subn()* 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回\n  ```Python\n  #sub()\n  re.sub('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n\n  'My cat is not only a cat.'                         #输出结果\n\n  #subn()\n  re.subn('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n  ('My cat is not only a cat.', 2)                   #输出结果\n  ```\n\n- *split(pattern, string, max=0)*\n  > 正则表达式对象的 *split()* 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。\n  ```Python\n  re.split(':', 'str1:str2:str3')               #模式匹配字符串\n\n  ['str1', 'str2', 'str3']                      #输出结果，与'str1:str2:str3'.split(':')相同\n\n  #split()复杂用法\n  #使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格\n  #使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串\n  import re\n  DATA = (\n    'Mountain View, CA 94040',\n    'Sunnyvale, CA',\n    'Los Altos, 94023',\n    'Cupertino 95014',\n    'Palo Alto CA',\n  )\n  for datum in DATA:\n      print(re.split(', |(?= (?:\\d{5}|[A-Z]{2})) ', datum))\n\n  #输出结果\n  ['Mountain View', 'CA', '94040']\n  ['Sunnyvale', 'CA']\n  ['Los Altos', '94023']\n  ['Cupertino', '95014']\n  ['Palo Alto', 'CA']\n  ```\n### 符号的使用\n#### `|` 与 `.` 和 `[]`\n  > 包括择一匹配符号`|`、点号`.`，点号不匹配非字符或换行付\\n（即空字符）\n    字符集`[]`中的字符只取其一\n\n#### 重复、特殊字符[^5]以及分组\n  > `?`操作符表示前面的模式出现零次或一次\n  > `+`操作符表示前面的模式出现至少一次\n  > `*`操作符表示前面的模式出现任意次(包括0次)\n  > 分组从左起第一个括号开始算第一个分组\n  ```Python\n  m  = re.match('(\\w(\\w\\w))-(\\d\\d\\d)','abc-123')\n  m.group()                           #完整匹配\n  'abc-123'                           #输出结果\n\n  m.group(1)                          #第一组\n  'abc'                               #输出结果    \n\n  m.group(2)                          #第二组\n  'bc'                                #输出结果\n\n  m.group(3)                          #第三组\n  '123'                               #输出结果\n\n  m.groups()                          #全部子组\n  ('abc', 'bc', '123')                #输出结果\n  ```\n\n[^1]:这里Python指代的是Python3.6.4\n\n[^2]:预编译可以提升执行效率，而 `re.compile()` 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 `match()` 和 `search()` 在执行时编译的正则表达式,还是使用 `compile()` 编译的表达式,在再次使用时都会查询缓存。但使用 `compile()` 同样可以节省查询缓存的时间\n\n[^3]:除了正则表达式对象之外，还有另外一个对象类型：**匹配对象**。这些是成功调用 `match()` 和 `search()` 返回的对象。\n\n[^4]:如果遇到无法调用 `next()`方法，可以使用 `\\_\\_next\\_\\_()`方法代替。\n\n[^5]:特殊字符的详情可以参考[上一篇博文](http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/)\n","source":"_posts/Python正则表达式-二.md","raw":"---\ntitle: Python正则表达式(二)\ndate: 2018-02-10 21:28:04\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\ndescription:\n---\n正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。\n由于个人兴趣和想要专研的方向，在这里将会使用Python [^1] 语言进行描述。\n<!--More-->\n\n## 正则表达式和Python语言\n\n### re模块：核心函数和方法\n| 函数方法                                         | 描述                                                                                                                                        |\n| :-----:                                          | :----:                                                                                                                                      |\n| 仅仅是re函数模块                                 |                                                                                                                                             |\n| compile(pattern, flags=0)                        | 使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象                                                                        |\n| re模块函数和正则表达式对象的方法                 |                                                                                                                                             |\n| match(pattern, string, flags=0)                  | 尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None                                    |\n| search(pattern, string, flags=0)                 | 使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None                                  |\n| findall(pattern, string [,flags])                | 查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表                                                                            |\n| finditer(pattern, string[,flags])                | 与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象                                         |\n| split(pattern, string, max=0)                     | 根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)                  |\n| sub(pattern, repl, string, count=0)              | 使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目） |\n| purge()                                          | 清除隐式编译的正则表达式模式                                                                                                                |\n| 常见的匹配对象方法                               |                                                                                                                                             |\n| group(num=0)                                     | 返回整个匹配对象，或者编号为num的特定子组                                                                                                   |\n| groups(default=None)                             | 返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)                                                                          |\n| groupdict(default=None)                          | 返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)                                        |\n| 常用的模块属性（用于大多数正则表达式函数的标记） |                                                                                                                                             |\n| re.I,re.IGNORECASE                               | 不去分大小写的匹配                                                                                                                          |\n| re.L,re.LOCALE                                   | 根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配                                                                                  |\n| re.M,re.MULTILINE                                | ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾                                                            |\n| re.S,re.DOTALL                                   | \".\"(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示\".\"(点号)能匹配全部字符                                                        |\n| re.X,re.VERBOSE                                  | 通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性                                                                                                                                            |\n\n### 部分方法总结\n\n- *compile(pattern, flags=0)[^2]*\n  >使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以[查阅文档](https://docs.python.org/3/library/re.html?highlight=re#module-re)),标志位通过 （|）合并\n\n- *group(num=0)* 和 *groups(default=None)*\n  >匹配对象[^3]的两个主要方法。 *group()* 要么返回整个匹配对象，要么按要求返回特定子组。 *groups()* 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，*group()* 返回整个匹配，*groups()* 返回一个空元组。\n\n- *match(pattern, string, flags=0)*\n   > *match()* 方法试图从字符串的**起始部分**对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None\n   ``` python\n   #匹配成功\n   m = re.match('foo', 'foo') #模式匹配字符串\n   if m is not None:         #如果匹配成功，就输出匹配内容\n       m.group()\n\n  'foo'                       #输出结果\n\n  #匹配失败\n  m  = re.match('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:           #如果匹配成功，就输出匹配内容\n      m.group()\n\n                              #因为起始字符为'B',所以匹配不成功，无任何输出\n    ```\n\n- *search(pattern, string, flags=0)*\n  > *search()* 的工作方式和 *match()* 相同，不同之处在于 *search()* 会用它的字符串参数在**任意位置**对给定正则表达式模式搜索**第一次**出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。\n  ```python\n  #将上面使用match()方法匹配的串改用search()匹配\n  m = re.search('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:            #如果匹配成功，就输出匹配内容\n      m.group()\n\n  'foo'                        #可以看到就算起始位置未能匹配，也能匹配成功\n  ```\n\n- *findall(pattern, string[,flags])* 和 *finditer(pattern, string[,flags])*\n  > *findall()* 总是返回一个列表，如果没有找到匹配对象，返回一个空列表  \n    *finditer()* 是一个与 *findall()* 类似但更节省内存的变体，*finditer()* 在匹配对象中迭代[^4]\n  ```Python\n  #findall()匹配\n  re.findall('car', 'carry the barcardi to the car') #模式匹配字符串\n\n  ['car', 'car', 'car']                              #返回结果\n\n  #finditer()匹配\n  iter = re.finditer('car', 'carry the barcardi to the car') #模式匹配字符串\n  for i in iter:                                            #遍历迭代器\n      print(i.group())\n\n  #输出结果\n  car\n  car\n  car\n  ```\n\n- *sub(pattern, repl, string, count=0)* 和 *subn(pattern, repl, string, count=0)*\n  > *sub()* 和 *subn()* 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 *sub()* 不同的是，*subn()* 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回\n  ```Python\n  #sub()\n  re.sub('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n\n  'My cat is not only a cat.'                         #输出结果\n\n  #subn()\n  re.subn('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n  ('My cat is not only a cat.', 2)                   #输出结果\n  ```\n\n- *split(pattern, string, max=0)*\n  > 正则表达式对象的 *split()* 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。\n  ```Python\n  re.split(':', 'str1:str2:str3')               #模式匹配字符串\n\n  ['str1', 'str2', 'str3']                      #输出结果，与'str1:str2:str3'.split(':')相同\n\n  #split()复杂用法\n  #使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格\n  #使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串\n  import re\n  DATA = (\n    'Mountain View, CA 94040',\n    'Sunnyvale, CA',\n    'Los Altos, 94023',\n    'Cupertino 95014',\n    'Palo Alto CA',\n  )\n  for datum in DATA:\n      print(re.split(', |(?= (?:\\d{5}|[A-Z]{2})) ', datum))\n\n  #输出结果\n  ['Mountain View', 'CA', '94040']\n  ['Sunnyvale', 'CA']\n  ['Los Altos', '94023']\n  ['Cupertino', '95014']\n  ['Palo Alto', 'CA']\n  ```\n### 符号的使用\n#### `|` 与 `.` 和 `[]`\n  > 包括择一匹配符号`|`、点号`.`，点号不匹配非字符或换行付\\n（即空字符）\n    字符集`[]`中的字符只取其一\n\n#### 重复、特殊字符[^5]以及分组\n  > `?`操作符表示前面的模式出现零次或一次\n  > `+`操作符表示前面的模式出现至少一次\n  > `*`操作符表示前面的模式出现任意次(包括0次)\n  > 分组从左起第一个括号开始算第一个分组\n  ```Python\n  m  = re.match('(\\w(\\w\\w))-(\\d\\d\\d)','abc-123')\n  m.group()                           #完整匹配\n  'abc-123'                           #输出结果\n\n  m.group(1)                          #第一组\n  'abc'                               #输出结果    \n\n  m.group(2)                          #第二组\n  'bc'                                #输出结果\n\n  m.group(3)                          #第三组\n  '123'                               #输出结果\n\n  m.groups()                          #全部子组\n  ('abc', 'bc', '123')                #输出结果\n  ```\n\n[^1]:这里Python指代的是Python3.6.4\n\n[^2]:预编译可以提升执行效率，而 `re.compile()` 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 `match()` 和 `search()` 在执行时编译的正则表达式,还是使用 `compile()` 编译的表达式,在再次使用时都会查询缓存。但使用 `compile()` 同样可以节省查询缓存的时间\n\n[^3]:除了正则表达式对象之外，还有另外一个对象类型：**匹配对象**。这些是成功调用 `match()` 和 `search()` 返回的对象。\n\n[^4]:如果遇到无法调用 `next()`方法，可以使用 `\\_\\_next\\_\\_()`方法代替。\n\n[^5]:特殊字符的详情可以参考[上一篇博文](http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/)\n","slug":"Python正则表达式-二","published":1,"updated":"2018-02-11T08:18:55.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqwq0005lwn93pthtgy7","content":"<p>正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。<br>由于个人兴趣和想要专研的方向，在这里将会使用Python <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 语言进行描述。<br><a id=\"more\"></a></p>\n<h2 id=\"正则表达式和Python语言\"><a href=\"#正则表达式和Python语言\" class=\"headerlink\" title=\"正则表达式和Python语言\"></a>正则表达式和Python语言</h2><h3 id=\"re模块：核心函数和方法\"><a href=\"#re模块：核心函数和方法\" class=\"headerlink\" title=\"re模块：核心函数和方法\"></a>re模块：核心函数和方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">仅仅是re函数模块</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compile(pattern, flags=0)</td>\n<td style=\"text-align:center\">使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re模块函数和正则表达式对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">match(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">search(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findall(pattern, string [,flags])</td>\n<td style=\"text-align:center\">查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">finditer(pattern, string[,flags])</td>\n<td style=\"text-align:center\">与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">split(pattern, string, max=0)</td>\n<td style=\"text-align:center\">根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub(pattern, repl, string, count=0)</td>\n<td style=\"text-align:center\">使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">purge()</td>\n<td style=\"text-align:center\">清除隐式编译的正则表达式模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见的匹配对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">group(num=0)</td>\n<td style=\"text-align:center\">返回整个匹配对象，或者编号为num的特定子组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groups(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groupdict(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常用的模块属性（用于大多数正则表达式函数的标记）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.I,re.IGNORECASE</td>\n<td style=\"text-align:center\">不去分大小写的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.L,re.LOCALE</td>\n<td style=\"text-align:center\">根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.M,re.MULTILINE</td>\n<td style=\"text-align:center\">^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.S,re.DOTALL</td>\n<td style=\"text-align:center\">“.”(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示”.”(点号)能匹配全部字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.X,re.VERBOSE</td>\n<td style=\"text-align:center\">通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分方法总结\"><a href=\"#部分方法总结\" class=\"headerlink\" title=\"部分方法总结\"></a>部分方法总结</h3><ul>\n<li><p><em>compile(pattern, flags=0)<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></em></p>\n<blockquote>\n<p>使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以<a href=\"https://docs.python.org/3/library/re.html?highlight=re#module-re\" target=\"_blank\" rel=\"noopener\">查阅文档</a>),标志位通过 （|）合并</p>\n</blockquote>\n</li>\n<li><p><em>group(num=0)</em> 和 <em>groups(default=None)</em></p>\n<blockquote>\n<p>匹配对象<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>的两个主要方法。 <em>group()</em> 要么返回整个匹配对象，要么按要求返回特定子组。 <em>groups()</em> 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，<em>group()</em> 返回整个匹配，<em>groups()</em> 返回一个空元组。</p>\n</blockquote>\n</li>\n<li><p><em>match(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>match()</em> 方法试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#匹配成功</span></span><br><span class=\"line\"> m = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'foo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:         <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">     m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                       <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配失败</span></span><br><span class=\"line\">m  = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:           <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">#因为起始字符为'B',所以匹配不成功，无任何输出</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>search(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>search()</em> 的工作方式和 <em>match()</em> 相同，不同之处在于 <em>search()</em> 会用它的字符串参数在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次</strong>出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将上面使用match()方法匹配的串改用search()匹配</span></span><br><span class=\"line\">m = re.search(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:            <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                        <span class=\"comment\">#可以看到就算起始位置未能匹配，也能匹配成功</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>findall(pattern, string[,flags])</em> 和 <em>finditer(pattern, string[,flags])</em></p>\n<blockquote>\n<p><em>findall()</em> 总是返回一个列表，如果没有找到匹配对象，返回一个空列表<br>  <em>finditer()</em> 是一个与 <em>findall()</em> 类似但更节省内存的变体，<em>finditer()</em> 在匹配对象中迭代<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#findall()匹配</span></span><br><span class=\"line\">re.findall(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>]                              <span class=\"comment\">#返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#finditer()匹配</span></span><br><span class=\"line\">iter = re.finditer(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iter:                                            <span class=\"comment\">#遍历迭代器</span></span><br><span class=\"line\">    print(i.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>sub(pattern, repl, string, count=0)</em> 和 <em>subn(pattern, repl, string, count=0)</em></p>\n<blockquote>\n<p><em>sub()</em> 和 <em>subn()</em> 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 <em>sub()</em> 不同的是，<em>subn()</em> 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sub()</span></span><br><span class=\"line\">re.sub(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'My cat is not only a cat.'</span>                         <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#subn()</span></span><br><span class=\"line\">re.subn(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'My cat is not only a cat.'</span>, <span class=\"number\">2</span>)                   <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>split(pattern, string, max=0)</em></p>\n<blockquote>\n<p>正则表达式对象的 <em>split()</em> 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.split(<span class=\"string\">':'</span>, <span class=\"string\">'str1:str2:str3'</span>)               <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'str1'</span>, <span class=\"string\">'str2'</span>, <span class=\"string\">'str3'</span>]                      <span class=\"comment\">#输出结果，与'str1:str2:str3'.split(':')相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#split()复杂用法</span></span><br><span class=\"line\"><span class=\"comment\">#使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格</span></span><br><span class=\"line\"><span class=\"comment\">#使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">  <span class=\"string\">'Mountain View, CA 94040'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Sunnyvale, CA'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Los Altos, 94023'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Cupertino 95014'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Palo Alto CA'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> datum <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">    print(re.split(<span class=\"string\">', |(?= (?:\\d&#123;5&#125;|[A-Z]&#123;2&#125;)) '</span>, datum))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">[<span class=\"string\">'Mountain View'</span>, <span class=\"string\">'CA'</span>, <span class=\"string\">'94040'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Sunnyvale'</span>, <span class=\"string\">'CA'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Los Altos'</span>, <span class=\"string\">'94023'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Cupertino'</span>, <span class=\"string\">'95014'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Palo Alto'</span>, <span class=\"string\">'CA'</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"符号的使用\"><a href=\"#符号的使用\" class=\"headerlink\" title=\"符号的使用\"></a>符号的使用</h3><h4 id=\"与-和\"><a href=\"#与-和\" class=\"headerlink\" title=\"| 与 . 和 []\"></a><code>|</code> 与 <code>.</code> 和 <code>[]</code></h4><blockquote>\n<p>包括择一匹配符号<code>|</code>、点号<code>.</code>，点号不匹配非字符或换行付\\n（即空字符）<br>    字符集<code>[]</code>中的字符只取其一</p>\n</blockquote>\n<h4 id=\"重复、特殊字符5以及分组\"><a href=\"#重复、特殊字符5以及分组\" class=\"headerlink\" title=\"重复、特殊字符5以及分组\"></a>重复、特殊字符<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>以及分组</h4><blockquote>\n<p><code>?</code>操作符表示前面的模式出现零次或一次<br><code>+</code>操作符表示前面的模式出现至少一次<br><code>*</code>操作符表示前面的模式出现任意次(包括0次)<br>分组从左起第一个括号开始算第一个分组<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m  = re.match(<span class=\"string\">'(\\w(\\w\\w))-(\\d\\d\\d)'</span>,<span class=\"string\">'abc-123'</span>)</span><br><span class=\"line\">m.group()                           <span class=\"comment\">#完整匹配</span></span><br><span class=\"line\"><span class=\"string\">'abc-123'</span>                           <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">1</span>)                          <span class=\"comment\">#第一组</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>                               <span class=\"comment\">#输出结果    </span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">2</span>)                          <span class=\"comment\">#第二组</span></span><br><span class=\"line\"><span class=\"string\">'bc'</span>                                <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">3</span>)                          <span class=\"comment\">#第三组</span></span><br><span class=\"line\"><span class=\"string\">'123'</span>                               <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.groups()                          <span class=\"comment\">#全部子组</span></span><br><span class=\"line\">(<span class=\"string\">'abc'</span>, <span class=\"string\">'bc'</span>, <span class=\"string\">'123'</span>)                <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">这里Python指代的是Python3.6.4</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">预编译可以提升执行效率，而 <code>re.compile()</code> 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 <code>match()</code> 和 <code>search()</code> 在执行时编译的正则表达式,还是使用 <code>compile()</code> 编译的表达式,在再次使用时都会查询缓存。但使用 <code>compile()</code> 同样可以节省查询缓存的时间</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">除了正则表达式对象之外，还有另外一个对象类型：<strong>匹配对象</strong>。这些是成功调用 <code>match()</code> 和 <code>search()</code> 返回的对象。</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li><li id=\"fn:4\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">4.</span><span style=\"display: inline-block; vertical-align: top;\">如果遇到无法调用 <code>next()</code>方法，可以使用 <code>__next__()</code>方法代替。</span><a href=\"#fnref:4\" rev=\"footnote\"> ↩</a></li><li id=\"fn:5\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">5.</span><span style=\"display: inline-block; vertical-align: top;\">特殊字符的详情可以参考<a href=\"http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/\">上一篇博文</a></span><a href=\"#fnref:5\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。<br>由于个人兴趣和想要专研的方向，在这里将会使用Python <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 语言进行描述。<br>","more":"</p>\n<h2 id=\"正则表达式和Python语言\"><a href=\"#正则表达式和Python语言\" class=\"headerlink\" title=\"正则表达式和Python语言\"></a>正则表达式和Python语言</h2><h3 id=\"re模块：核心函数和方法\"><a href=\"#re模块：核心函数和方法\" class=\"headerlink\" title=\"re模块：核心函数和方法\"></a>re模块：核心函数和方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">仅仅是re函数模块</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compile(pattern, flags=0)</td>\n<td style=\"text-align:center\">使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re模块函数和正则表达式对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">match(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">search(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findall(pattern, string [,flags])</td>\n<td style=\"text-align:center\">查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">finditer(pattern, string[,flags])</td>\n<td style=\"text-align:center\">与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">split(pattern, string, max=0)</td>\n<td style=\"text-align:center\">根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub(pattern, repl, string, count=0)</td>\n<td style=\"text-align:center\">使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">purge()</td>\n<td style=\"text-align:center\">清除隐式编译的正则表达式模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见的匹配对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">group(num=0)</td>\n<td style=\"text-align:center\">返回整个匹配对象，或者编号为num的特定子组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groups(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groupdict(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常用的模块属性（用于大多数正则表达式函数的标记）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.I,re.IGNORECASE</td>\n<td style=\"text-align:center\">不去分大小写的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.L,re.LOCALE</td>\n<td style=\"text-align:center\">根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.M,re.MULTILINE</td>\n<td style=\"text-align:center\">^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.S,re.DOTALL</td>\n<td style=\"text-align:center\">“.”(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示”.”(点号)能匹配全部字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.X,re.VERBOSE</td>\n<td style=\"text-align:center\">通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分方法总结\"><a href=\"#部分方法总结\" class=\"headerlink\" title=\"部分方法总结\"></a>部分方法总结</h3><ul>\n<li><p><em>compile(pattern, flags=0)<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></em></p>\n<blockquote>\n<p>使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以<a href=\"https://docs.python.org/3/library/re.html?highlight=re#module-re\" target=\"_blank\" rel=\"noopener\">查阅文档</a>),标志位通过 （|）合并</p>\n</blockquote>\n</li>\n<li><p><em>group(num=0)</em> 和 <em>groups(default=None)</em></p>\n<blockquote>\n<p>匹配对象<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>的两个主要方法。 <em>group()</em> 要么返回整个匹配对象，要么按要求返回特定子组。 <em>groups()</em> 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，<em>group()</em> 返回整个匹配，<em>groups()</em> 返回一个空元组。</p>\n</blockquote>\n</li>\n<li><p><em>match(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>match()</em> 方法试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#匹配成功</span></span><br><span class=\"line\"> m = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'foo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:         <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">     m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                       <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配失败</span></span><br><span class=\"line\">m  = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:           <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">#因为起始字符为'B',所以匹配不成功，无任何输出</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>search(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>search()</em> 的工作方式和 <em>match()</em> 相同，不同之处在于 <em>search()</em> 会用它的字符串参数在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次</strong>出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将上面使用match()方法匹配的串改用search()匹配</span></span><br><span class=\"line\">m = re.search(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:            <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                        <span class=\"comment\">#可以看到就算起始位置未能匹配，也能匹配成功</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>findall(pattern, string[,flags])</em> 和 <em>finditer(pattern, string[,flags])</em></p>\n<blockquote>\n<p><em>findall()</em> 总是返回一个列表，如果没有找到匹配对象，返回一个空列表<br>  <em>finditer()</em> 是一个与 <em>findall()</em> 类似但更节省内存的变体，<em>finditer()</em> 在匹配对象中迭代<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#findall()匹配</span></span><br><span class=\"line\">re.findall(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>]                              <span class=\"comment\">#返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#finditer()匹配</span></span><br><span class=\"line\">iter = re.finditer(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iter:                                            <span class=\"comment\">#遍历迭代器</span></span><br><span class=\"line\">    print(i.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>sub(pattern, repl, string, count=0)</em> 和 <em>subn(pattern, repl, string, count=0)</em></p>\n<blockquote>\n<p><em>sub()</em> 和 <em>subn()</em> 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 <em>sub()</em> 不同的是，<em>subn()</em> 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sub()</span></span><br><span class=\"line\">re.sub(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'My cat is not only a cat.'</span>                         <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#subn()</span></span><br><span class=\"line\">re.subn(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'My cat is not only a cat.'</span>, <span class=\"number\">2</span>)                   <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>split(pattern, string, max=0)</em></p>\n<blockquote>\n<p>正则表达式对象的 <em>split()</em> 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.split(<span class=\"string\">':'</span>, <span class=\"string\">'str1:str2:str3'</span>)               <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'str1'</span>, <span class=\"string\">'str2'</span>, <span class=\"string\">'str3'</span>]                      <span class=\"comment\">#输出结果，与'str1:str2:str3'.split(':')相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#split()复杂用法</span></span><br><span class=\"line\"><span class=\"comment\">#使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格</span></span><br><span class=\"line\"><span class=\"comment\">#使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">  <span class=\"string\">'Mountain View, CA 94040'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Sunnyvale, CA'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Los Altos, 94023'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Cupertino 95014'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Palo Alto CA'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> datum <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">    print(re.split(<span class=\"string\">', |(?= (?:\\d&#123;5&#125;|[A-Z]&#123;2&#125;)) '</span>, datum))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">[<span class=\"string\">'Mountain View'</span>, <span class=\"string\">'CA'</span>, <span class=\"string\">'94040'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Sunnyvale'</span>, <span class=\"string\">'CA'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Los Altos'</span>, <span class=\"string\">'94023'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Cupertino'</span>, <span class=\"string\">'95014'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Palo Alto'</span>, <span class=\"string\">'CA'</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"符号的使用\"><a href=\"#符号的使用\" class=\"headerlink\" title=\"符号的使用\"></a>符号的使用</h3><h4 id=\"与-和\"><a href=\"#与-和\" class=\"headerlink\" title=\"| 与 . 和 []\"></a><code>|</code> 与 <code>.</code> 和 <code>[]</code></h4><blockquote>\n<p>包括择一匹配符号<code>|</code>、点号<code>.</code>，点号不匹配非字符或换行付\\n（即空字符）<br>    字符集<code>[]</code>中的字符只取其一</p>\n</blockquote>\n<h4 id=\"重复、特殊字符5以及分组\"><a href=\"#重复、特殊字符5以及分组\" class=\"headerlink\" title=\"重复、特殊字符5以及分组\"></a>重复、特殊字符<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>以及分组</h4><blockquote>\n<p><code>?</code>操作符表示前面的模式出现零次或一次<br><code>+</code>操作符表示前面的模式出现至少一次<br><code>*</code>操作符表示前面的模式出现任意次(包括0次)<br>分组从左起第一个括号开始算第一个分组<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m  = re.match(<span class=\"string\">'(\\w(\\w\\w))-(\\d\\d\\d)'</span>,<span class=\"string\">'abc-123'</span>)</span><br><span class=\"line\">m.group()                           <span class=\"comment\">#完整匹配</span></span><br><span class=\"line\"><span class=\"string\">'abc-123'</span>                           <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">1</span>)                          <span class=\"comment\">#第一组</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>                               <span class=\"comment\">#输出结果    </span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">2</span>)                          <span class=\"comment\">#第二组</span></span><br><span class=\"line\"><span class=\"string\">'bc'</span>                                <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">3</span>)                          <span class=\"comment\">#第三组</span></span><br><span class=\"line\"><span class=\"string\">'123'</span>                               <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.groups()                          <span class=\"comment\">#全部子组</span></span><br><span class=\"line\">(<span class=\"string\">'abc'</span>, <span class=\"string\">'bc'</span>, <span class=\"string\">'123'</span>)                <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">这里Python指代的是Python3.6.4</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">预编译可以提升执行效率，而 <code>re.compile()</code> 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 <code>match()</code> 和 <code>search()</code> 在执行时编译的正则表达式,还是使用 <code>compile()</code> 编译的表达式,在再次使用时都会查询缓存。但使用 <code>compile()</code> 同样可以节省查询缓存的时间</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">除了正则表达式对象之外，还有另外一个对象类型：<strong>匹配对象</strong>。这些是成功调用 <code>match()</code> 和 <code>search()</code> 返回的对象。</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li><li id=\"fn:4\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">4.</span><span style=\"display: inline-block; vertical-align: top;\">如果遇到无法调用 <code>next()</code>方法，可以使用 <code>__next__()</code>方法代替。</span><a href=\"#fnref:4\" rev=\"footnote\"> ↩</a></li><li id=\"fn:5\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">5.</span><span style=\"display: inline-block; vertical-align: top;\">特殊字符的详情可以参考<a href=\"http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/\">上一篇博文</a></span><a href=\"#fnref:5\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python网络编程(一)","date":"2018-02-22T07:53:42.000Z","copyright":true,"description":null,"_content":"使用Python的一些模块来创建网络应用程序\n<!--More-->\n## socket()函数模块\n要创建套接字，必须使用`socket.socket()`函数`socket(socket_family, socket_type, protocol = 0)`,\n其中`socket_family`是 *AF_UNIX* 或 *AF_INET*,`socket_type`是 *SOCK_STREAM* 或 *SOCK_DGRAM*。[^1]\n`protocol`通常省略，默认为0。\n1. >创建TCP/IP套接字\n   ```Python\n   tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n   ```\n2. >创建UDP/IP套接字\n   ```Python\n   udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n   ```\n\n### 套接字对象内接方法\n|         名称         |                                 描述                                  |\n|:--------------------:|:---------------------------------------------------------------------:|\n|   服务器套接字方法   |                                                                       |\n|       s.bind()       |                将地址(主机名、端口号对)绑定到套接字上                 |\n|      s.listen()      |                          设置并启动TCP监听器                          |\n|      s.accept()      |           被动接受TCP客户端连接，一直等待知道连接到达(阻塞)           |\n|   客户端套接字方法   |                                                                       |\n|     s.connect()      |                         主动发起TCP服务器连接                         |\n|    s.connect_ex()    | connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常 |\n|   普通的套接字方法   |                                                                       |\n|       s.recv()       |                              接受TCP消息                              |\n|    s.recv_into()     |                       接受TCP消息到指定的缓冲区                       |\n|       s.send()       |                              发送TCP消息                              |\n|     s.sendall()      |                           完整地发送TCP消息                           |\n|     s.recvfrom()     |                              接受UDP消息                              |\n|  s.recvfrom_into()   |                       接受UDP消息到指定的缓冲区                       |\n|      s.sendto()      |                              发送UDP消息                              |\n|   s.getpeername()    |                      连接到套接字(TCP)的远程地址                      |\n|   s.getsockname()    |                           当前套接字的地址                            |\n|    s.getsockopt()    |                        返回给定套接字选项的值                         |\n|    s.setsockopt()    |                        设置给定套接字选项的值                         |\n|     s.shutdown()     |                               关闭连接                                |\n|      s.close()       |                              关闭套接字                               |\n|      s.detach()      |         在未关闭文件描述符的情况下关闭套接字，返回文件描述符          |\n|      s.ioctl()       |                    控制套接字的模式(仅支持Windows)                    |\n| 面向阻塞的套接字方法 |                                                                       |\n|   s.setblocking()    |                     设置套接字的阻塞或非阻塞模式                      |\n|    s.settimeout()    |                     设置阻塞套接字操作的超时时间                      |\n|    s.gettimeout()    |                     获取阻塞套接字操作的超时时间                      |\n| 面向文件的套接字方法 |                                                                       |\n|      s.fileno()      |                          套接字的文件描述符                           |\n|     s.makefile()     |                      创建与套接字关联的文件对象                       |\n|       数据属性       |                                                                       |\n|       s.family       |                              套接字家族                               |\n|        s.type        |                              套接字类型                               |\n|       s.proto        | 套接字协议                                                                      |\n\n### socket模块属性\n|                    属性名称                     |                                       描述                                       |\n|:-----------------------------------------------:|:--------------------------------------------------------------------------------:|\n|                    数据属性                     |                                                                                  |\n| AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC |                           Python中支持的套接字地址家族                           |\n|               SO_STREAM、SO_DGRAM               |                          套接字类型(TCP=流，UDP=数据报)                          |\n|                    has_ipv6                     |                            指示是否支持IPv6的布尔标记                            |\n|                      异常                       |                                                                                  |\n|                      error                      |                                  套接字相关错误                                  |\n|                     herror                      |                                主机和地址相关错误                                |\n|                    gaierror                     |                                   地址相关错误                                   |\n|                     timeout                     |                                     超时时间                                     |\n|                      函数                       |                                                                                  |\n|                    socket()                     |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|                  socketpair()                   |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|               create_connection()               |            常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象            |\n|                    fromfd()                     |                     以一个打开的文件描述符创建一个套接字对象                     |\n|                      ssl()                      |                通过套接字启动一个安全套接字层连接；不执行证书验证                |\n|                  getaddrinfo()                  |                         获取一个五元组序列形式的地址信息                         |\n|                  getnameinfo()                  |                  给定一个套接字地址，返回(主机名，端口号)二元组                  |\n|                    getfqdn()                    |                                  返回完整的域名                                  |\n|                  gethostname()                  |                                  返回当前主机名                                  |\n|                 gethostbyname()                 |                           将一个主机名映射到它的IP地址                           |\n|               gethostbyname_ex()                |        gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表         |\n|                 gethostbyaddr()                 |         讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组          |\n|                getprotobyname()                 |                       将一个协议名(如‘TCP’)映射到一个数字                        |\n|         getservbyname()/getservbyport()         | 将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的 |\n|                 ntohl()/ntohs()                 |                         将来自网络的整数装换为主机字节序                         |\n|                 htonl()/htons()                 |                         将来自主机的整数转换为网络字节序                         |\n|             inet_aton()/inet_ntoa()             |        将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)        |\n|             inet_pton()/inet_ntop()             |      将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)      |\n|     getdefaulttimeout()/setdefaulttimeout()     | 以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间                                                                                 |\n\n详情参阅[socket模块文档](https://docs.python.org/3/library/socket.html?highlight=socket#module-socket)\n## 创建TCP服务器/客户端\n\n### TCP服务器\n* 下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器\n  ```Python\n  ss = socket()                 #创建服务器套接字\n  ss.bind()                     #套接字与地址绑定\n  ss.listen()                   #监听连接\n  inf_loop:                     #服务器无线循环\n      cs = ss.accept()          #接受客户端连接\n      comm_loop:                #通信循环\n          cs.recv()/cs.send()   #对话(接收/发送)\n      cs.close()                #关闭客户端套接字\n  ss.close()                    #关闭服务器套接字\n  ```\n\n* TCP时间戳服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的所有属性\n  from socket import *\n  from time import ctime\n\n  # HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址\n  # 选择一个随机的端口号\n  # 缓冲区大小为1KB\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP服务套接字\n  # 将套接字绑定到服务器地址\n  # 开启TCP的监听调用\n  # listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数\n  tcpSerSock = socket(AF_INET, SOCK_STREAM)\n  tcpSerSock.bind(ADDR)\n  tcpSerSock.listen(5)\n\n  while True:\n      # 服务器循环，等待客户端的连接的连接\n      print('waiting for connection...')\n      tcpCliSock, addr = tcpSerSock.accept()\n      print('...connected from:', addr)\n\n      while True:\n          # 当一个连接请求出现时，进入对话循环，接收消息\n          data = tcpCliSock.recv(BUFSIZE)\n          if not data:\n              # 当消息为空时，退出对话循环\n              # 关闭客户端连接，等待下一个连接请求\n              break\n          tcpCliSock.send(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n      tcpCliSock.close()\n\n  ```\n### TCP客户端\n* 下面是TCP客户端的通用伪码\n  ```Python\n  cs = socket()           #创建客户端套接字\n  cs.connect()            #尝试连接服务器\n  comm_loop:              #通信循环\n      cs.send()/cs.recv   #对话(发送/接收)\n  cs.close()              #关闭客户端套接字\n  ```\n* TCP时间戳客户端\n  ```Python\n  #!usr/bin/python3\n  # -*- coding: UTF-8 -*-\n\n  # 导入socket模块所有属性\n  from socket import *\n\n  # 服务器的主机名\n  # 服务器的端口号,应与服务器设置的完全相同\n  # 缓冲区大小为1KB\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP客户端套接字\n  # 主动调用并连接到服务器\n  tcpCliSock = socket(AF_INET, SOCK_STREAM)\n  tcpCliSock.connect(ADDR)\n\n  while True:\n      # 无限循环，输入消息\n      data = bytes(input('> '), 'utf-8')\n      if not data:\n          # 消息为空则退出循环\n          break\n      # 发送输入的信息\n      # 接收服务器返回的信息，最后打印\n      tcpCliSock.send(data)\n      data = tcpCliSock.recv(BUFSIZE)\n      if not data:\n          # 消息为空则退出循环\n          break\n      print(data.decode('utf-8'))\n  # 关闭客户端\n  tcpCliSock.close()\n  ```\n### TCP服务器和客户端运行结果\n  在运行程序时，必须 **首先运行服务器** 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。\n  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求\n* 服务器运行结果\n  ```\n  waiting for connection...\n  ...connected from: ('127.0.0.1', 53220)\n  waiting for connection...\n  ```\n* 客户端运行结果\n  ```\n  > hello\n  [Fri Feb 23 14:22:58 2018] hello\n  > hi\n  [Fri Feb 23 14:23:02 2018] hi\n  > hello world\n  [Fri Feb 23 14:23:09 2018] hello world\n  >\n  Process finished with exit code 0\n  ```\n\n## 创建UDP服务器/客户端\n### UDP服务器\n* 下面是UDP服务器的伪码\n  ```Python\n  ss = socket()                           #创建服务器套接字\n  ss.bind()                               #绑定服务器套接字\n  inf_loop:                               #服务器无线循环\n      cs = ss.recvfrom()/ss.sendto()      #关闭(接收/发送)\n  ss.close()                              #关闭服务器套接字\n  ```\n* UDP时间戳服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的全部属性\n  from socket import *\n  from time import ctime\n\n  # 与TCP相同，由于是无连接，所以没有调用监听传入连接\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpSerSock = socket(AF_INET, SOCK_DGRAM)\n  udpSerSock.bind(ADDR)\n\n  while True:\n      # 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息\n      print('waiting for message...')\n      data, addr = udpSerSock.recvfrom(BUFSIZE)\n      udpSerSock.sendto(bytes('[%s] %s' % (\n          ctime(), data.decode('utf-8')), 'utf-8'), addr)\n      print('...received from and returned to:', addr)\n\n  ```\n### UDP客户端\n* 下面是客户端的伪码\n  ```Python\n  cs = socket()                         #创建客户端套接字\n  comm_loop:                            #通信循环\n      cs.sendto()/cs.recvfrom()         #对话(发送/接收)\n  cs.close()                            #关闭客户端套接字\n  ```\n* UDP时间戳客户端\n ```Python\n #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  from socket import *\n\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpClienSock = socket(AF_INET, SOCK_DGRAM)\n\n  while True:\n      data = bytes(input('>'), 'utf-8')\n      if not data:\n          break\n      udpClienSock.sendto(data, ADDR)\n      data, ADDR = udpClienSock.recvfrom(BUFSIZE)\n      if not data:\n          break\n      print(data.decode('utf-8'))\n  udpClienSock.close()\n\n ```\n### UDP服务器和客户端运行结果\n  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理\n* 服务器运行结果\n  ```\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ```\n* 客户端运行结果\n  ```\n  >hello\n  [Fri Feb 23 15:23:57 2018] hello\n  >hi\n  [Fri Feb 23 15:24:03 2018] hi\n  >\n\n  Process finished with exit code 0\n  ```\n[^1]: *AF_UNIX* 是基于文件的套接字，代表 *地址家族(address family):UNIX*，*AF_INET* 是基于网络的套接字，代表 *地址家族：因特网*， *AF_INET6* 用于底6版因特网协议(IPv6)寻址。 *SOCK_STREAM* 表示面向连接的TCP套接字， *SOCK_DGRAM* 代表无连接的UDP套接字。\n","source":"_posts/Python网络编程-一.md","raw":"---\ntitle: Python网络编程(一)\ndate: 2018-02-22 15:53:42\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 网络编程\ndescription:\n---\n使用Python的一些模块来创建网络应用程序\n<!--More-->\n## socket()函数模块\n要创建套接字，必须使用`socket.socket()`函数`socket(socket_family, socket_type, protocol = 0)`,\n其中`socket_family`是 *AF_UNIX* 或 *AF_INET*,`socket_type`是 *SOCK_STREAM* 或 *SOCK_DGRAM*。[^1]\n`protocol`通常省略，默认为0。\n1. >创建TCP/IP套接字\n   ```Python\n   tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n   ```\n2. >创建UDP/IP套接字\n   ```Python\n   udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n   ```\n\n### 套接字对象内接方法\n|         名称         |                                 描述                                  |\n|:--------------------:|:---------------------------------------------------------------------:|\n|   服务器套接字方法   |                                                                       |\n|       s.bind()       |                将地址(主机名、端口号对)绑定到套接字上                 |\n|      s.listen()      |                          设置并启动TCP监听器                          |\n|      s.accept()      |           被动接受TCP客户端连接，一直等待知道连接到达(阻塞)           |\n|   客户端套接字方法   |                                                                       |\n|     s.connect()      |                         主动发起TCP服务器连接                         |\n|    s.connect_ex()    | connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常 |\n|   普通的套接字方法   |                                                                       |\n|       s.recv()       |                              接受TCP消息                              |\n|    s.recv_into()     |                       接受TCP消息到指定的缓冲区                       |\n|       s.send()       |                              发送TCP消息                              |\n|     s.sendall()      |                           完整地发送TCP消息                           |\n|     s.recvfrom()     |                              接受UDP消息                              |\n|  s.recvfrom_into()   |                       接受UDP消息到指定的缓冲区                       |\n|      s.sendto()      |                              发送UDP消息                              |\n|   s.getpeername()    |                      连接到套接字(TCP)的远程地址                      |\n|   s.getsockname()    |                           当前套接字的地址                            |\n|    s.getsockopt()    |                        返回给定套接字选项的值                         |\n|    s.setsockopt()    |                        设置给定套接字选项的值                         |\n|     s.shutdown()     |                               关闭连接                                |\n|      s.close()       |                              关闭套接字                               |\n|      s.detach()      |         在未关闭文件描述符的情况下关闭套接字，返回文件描述符          |\n|      s.ioctl()       |                    控制套接字的模式(仅支持Windows)                    |\n| 面向阻塞的套接字方法 |                                                                       |\n|   s.setblocking()    |                     设置套接字的阻塞或非阻塞模式                      |\n|    s.settimeout()    |                     设置阻塞套接字操作的超时时间                      |\n|    s.gettimeout()    |                     获取阻塞套接字操作的超时时间                      |\n| 面向文件的套接字方法 |                                                                       |\n|      s.fileno()      |                          套接字的文件描述符                           |\n|     s.makefile()     |                      创建与套接字关联的文件对象                       |\n|       数据属性       |                                                                       |\n|       s.family       |                              套接字家族                               |\n|        s.type        |                              套接字类型                               |\n|       s.proto        | 套接字协议                                                                      |\n\n### socket模块属性\n|                    属性名称                     |                                       描述                                       |\n|:-----------------------------------------------:|:--------------------------------------------------------------------------------:|\n|                    数据属性                     |                                                                                  |\n| AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC |                           Python中支持的套接字地址家族                           |\n|               SO_STREAM、SO_DGRAM               |                          套接字类型(TCP=流，UDP=数据报)                          |\n|                    has_ipv6                     |                            指示是否支持IPv6的布尔标记                            |\n|                      异常                       |                                                                                  |\n|                      error                      |                                  套接字相关错误                                  |\n|                     herror                      |                                主机和地址相关错误                                |\n|                    gaierror                     |                                   地址相关错误                                   |\n|                     timeout                     |                                     超时时间                                     |\n|                      函数                       |                                                                                  |\n|                    socket()                     |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|                  socketpair()                   |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|               create_connection()               |            常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象            |\n|                    fromfd()                     |                     以一个打开的文件描述符创建一个套接字对象                     |\n|                      ssl()                      |                通过套接字启动一个安全套接字层连接；不执行证书验证                |\n|                  getaddrinfo()                  |                         获取一个五元组序列形式的地址信息                         |\n|                  getnameinfo()                  |                  给定一个套接字地址，返回(主机名，端口号)二元组                  |\n|                    getfqdn()                    |                                  返回完整的域名                                  |\n|                  gethostname()                  |                                  返回当前主机名                                  |\n|                 gethostbyname()                 |                           将一个主机名映射到它的IP地址                           |\n|               gethostbyname_ex()                |        gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表         |\n|                 gethostbyaddr()                 |         讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组          |\n|                getprotobyname()                 |                       将一个协议名(如‘TCP’)映射到一个数字                        |\n|         getservbyname()/getservbyport()         | 将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的 |\n|                 ntohl()/ntohs()                 |                         将来自网络的整数装换为主机字节序                         |\n|                 htonl()/htons()                 |                         将来自主机的整数转换为网络字节序                         |\n|             inet_aton()/inet_ntoa()             |        将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)        |\n|             inet_pton()/inet_ntop()             |      将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)      |\n|     getdefaulttimeout()/setdefaulttimeout()     | 以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间                                                                                 |\n\n详情参阅[socket模块文档](https://docs.python.org/3/library/socket.html?highlight=socket#module-socket)\n## 创建TCP服务器/客户端\n\n### TCP服务器\n* 下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器\n  ```Python\n  ss = socket()                 #创建服务器套接字\n  ss.bind()                     #套接字与地址绑定\n  ss.listen()                   #监听连接\n  inf_loop:                     #服务器无线循环\n      cs = ss.accept()          #接受客户端连接\n      comm_loop:                #通信循环\n          cs.recv()/cs.send()   #对话(接收/发送)\n      cs.close()                #关闭客户端套接字\n  ss.close()                    #关闭服务器套接字\n  ```\n\n* TCP时间戳服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的所有属性\n  from socket import *\n  from time import ctime\n\n  # HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址\n  # 选择一个随机的端口号\n  # 缓冲区大小为1KB\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP服务套接字\n  # 将套接字绑定到服务器地址\n  # 开启TCP的监听调用\n  # listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数\n  tcpSerSock = socket(AF_INET, SOCK_STREAM)\n  tcpSerSock.bind(ADDR)\n  tcpSerSock.listen(5)\n\n  while True:\n      # 服务器循环，等待客户端的连接的连接\n      print('waiting for connection...')\n      tcpCliSock, addr = tcpSerSock.accept()\n      print('...connected from:', addr)\n\n      while True:\n          # 当一个连接请求出现时，进入对话循环，接收消息\n          data = tcpCliSock.recv(BUFSIZE)\n          if not data:\n              # 当消息为空时，退出对话循环\n              # 关闭客户端连接，等待下一个连接请求\n              break\n          tcpCliSock.send(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n      tcpCliSock.close()\n\n  ```\n### TCP客户端\n* 下面是TCP客户端的通用伪码\n  ```Python\n  cs = socket()           #创建客户端套接字\n  cs.connect()            #尝试连接服务器\n  comm_loop:              #通信循环\n      cs.send()/cs.recv   #对话(发送/接收)\n  cs.close()              #关闭客户端套接字\n  ```\n* TCP时间戳客户端\n  ```Python\n  #!usr/bin/python3\n  # -*- coding: UTF-8 -*-\n\n  # 导入socket模块所有属性\n  from socket import *\n\n  # 服务器的主机名\n  # 服务器的端口号,应与服务器设置的完全相同\n  # 缓冲区大小为1KB\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP客户端套接字\n  # 主动调用并连接到服务器\n  tcpCliSock = socket(AF_INET, SOCK_STREAM)\n  tcpCliSock.connect(ADDR)\n\n  while True:\n      # 无限循环，输入消息\n      data = bytes(input('> '), 'utf-8')\n      if not data:\n          # 消息为空则退出循环\n          break\n      # 发送输入的信息\n      # 接收服务器返回的信息，最后打印\n      tcpCliSock.send(data)\n      data = tcpCliSock.recv(BUFSIZE)\n      if not data:\n          # 消息为空则退出循环\n          break\n      print(data.decode('utf-8'))\n  # 关闭客户端\n  tcpCliSock.close()\n  ```\n### TCP服务器和客户端运行结果\n  在运行程序时，必须 **首先运行服务器** 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。\n  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求\n* 服务器运行结果\n  ```\n  waiting for connection...\n  ...connected from: ('127.0.0.1', 53220)\n  waiting for connection...\n  ```\n* 客户端运行结果\n  ```\n  > hello\n  [Fri Feb 23 14:22:58 2018] hello\n  > hi\n  [Fri Feb 23 14:23:02 2018] hi\n  > hello world\n  [Fri Feb 23 14:23:09 2018] hello world\n  >\n  Process finished with exit code 0\n  ```\n\n## 创建UDP服务器/客户端\n### UDP服务器\n* 下面是UDP服务器的伪码\n  ```Python\n  ss = socket()                           #创建服务器套接字\n  ss.bind()                               #绑定服务器套接字\n  inf_loop:                               #服务器无线循环\n      cs = ss.recvfrom()/ss.sendto()      #关闭(接收/发送)\n  ss.close()                              #关闭服务器套接字\n  ```\n* UDP时间戳服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的全部属性\n  from socket import *\n  from time import ctime\n\n  # 与TCP相同，由于是无连接，所以没有调用监听传入连接\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpSerSock = socket(AF_INET, SOCK_DGRAM)\n  udpSerSock.bind(ADDR)\n\n  while True:\n      # 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息\n      print('waiting for message...')\n      data, addr = udpSerSock.recvfrom(BUFSIZE)\n      udpSerSock.sendto(bytes('[%s] %s' % (\n          ctime(), data.decode('utf-8')), 'utf-8'), addr)\n      print('...received from and returned to:', addr)\n\n  ```\n### UDP客户端\n* 下面是客户端的伪码\n  ```Python\n  cs = socket()                         #创建客户端套接字\n  comm_loop:                            #通信循环\n      cs.sendto()/cs.recvfrom()         #对话(发送/接收)\n  cs.close()                            #关闭客户端套接字\n  ```\n* UDP时间戳客户端\n ```Python\n #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  from socket import *\n\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpClienSock = socket(AF_INET, SOCK_DGRAM)\n\n  while True:\n      data = bytes(input('>'), 'utf-8')\n      if not data:\n          break\n      udpClienSock.sendto(data, ADDR)\n      data, ADDR = udpClienSock.recvfrom(BUFSIZE)\n      if not data:\n          break\n      print(data.decode('utf-8'))\n  udpClienSock.close()\n\n ```\n### UDP服务器和客户端运行结果\n  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理\n* 服务器运行结果\n  ```\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ```\n* 客户端运行结果\n  ```\n  >hello\n  [Fri Feb 23 15:23:57 2018] hello\n  >hi\n  [Fri Feb 23 15:24:03 2018] hi\n  >\n\n  Process finished with exit code 0\n  ```\n[^1]: *AF_UNIX* 是基于文件的套接字，代表 *地址家族(address family):UNIX*，*AF_INET* 是基于网络的套接字，代表 *地址家族：因特网*， *AF_INET6* 用于底6版因特网协议(IPv6)寻址。 *SOCK_STREAM* 表示面向连接的TCP套接字， *SOCK_DGRAM* 代表无连接的UDP套接字。\n","slug":"Python网络编程-一","published":1,"updated":"2018-02-24T08:12:54.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqyg000qlwn9ache4g7m","content":"<p>使用Python的一些模块来创建网络应用程序<br><a id=\"more\"></a></p>\n<h2 id=\"socket-函数模块\"><a href=\"#socket-函数模块\" class=\"headerlink\" title=\"socket()函数模块\"></a>socket()函数模块</h2><p>要创建套接字，必须使用<code>socket.socket()</code>函数<code>socket(socket_family, socket_type, protocol = 0)</code>,<br>其中<code>socket_family</code>是 <em>AF_UNIX</em> 或 <em>AF_INET</em>,<code>socket_type</code>是 <em>SOCK_STREAM</em> 或 <em>SOCK_DGRAM</em>。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup><br><code>protocol</code>通常省略，默认为0。</p>\n<ol>\n<li><blockquote>\n<p>创建TCP/IP套接字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建UDP/IP套接字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"套接字对象内接方法\"><a href=\"#套接字对象内接方法\" class=\"headerlink\" title=\"套接字对象内接方法\"></a>套接字对象内接方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">服务器套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.bind()</td>\n<td style=\"text-align:center\">将地址(主机名、端口号对)绑定到套接字上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen()</td>\n<td style=\"text-align:center\">设置并启动TCP监听器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">被动接受TCP客户端连接，一直等待知道连接到达(阻塞)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">客户端套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect()</td>\n<td style=\"text-align:center\">主动发起TCP服务器连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex()</td>\n<td style=\"text-align:center\">connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv()</td>\n<td style=\"text-align:center\">接受TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv_into()</td>\n<td style=\"text-align:center\">接受TCP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send()</td>\n<td style=\"text-align:center\">发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall()</td>\n<td style=\"text-align:center\">完整地发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom()</td>\n<td style=\"text-align:center\">接受UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom_into()</td>\n<td style=\"text-align:center\">接受UDP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto()</td>\n<td style=\"text-align:center\">发送UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getpeername()</td>\n<td style=\"text-align:center\">连接到套接字(TCP)的远程地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockname()</td>\n<td style=\"text-align:center\">当前套接字的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockopt()</td>\n<td style=\"text-align:center\">返回给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setsockopt()</td>\n<td style=\"text-align:center\">设置给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.shutdown()</td>\n<td style=\"text-align:center\">关闭连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.detach()</td>\n<td style=\"text-align:center\">在未关闭文件描述符的情况下关闭套接字，返回文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.ioctl()</td>\n<td style=\"text-align:center\">控制套接字的模式(仅支持Windows)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向阻塞的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setblocking()</td>\n<td style=\"text-align:center\">设置套接字的阻塞或非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.settimeout()</td>\n<td style=\"text-align:center\">设置阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.gettimeout()</td>\n<td style=\"text-align:center\">获取阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向文件的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.fileno()</td>\n<td style=\"text-align:center\">套接字的文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.makefile()</td>\n<td style=\"text-align:center\">创建与套接字关联的文件对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.family</td>\n<td style=\"text-align:center\">套接字家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.type</td>\n<td style=\"text-align:center\">套接字类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.proto</td>\n<td style=\"text-align:center\">套接字协议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socket模块属性\"><a href=\"#socket模块属性\" class=\"headerlink\" title=\"socket模块属性\"></a>socket模块属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC</td>\n<td style=\"text-align:center\">Python中支持的套接字地址家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SO_STREAM、SO_DGRAM</td>\n<td style=\"text-align:center\">套接字类型(TCP=流，UDP=数据报)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has_ipv6</td>\n<td style=\"text-align:center\">指示是否支持IPv6的布尔标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">套接字相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">herror</td>\n<td style=\"text-align:center\">主机和地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gaierror</td>\n<td style=\"text-align:center\">地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socketpair()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">create_connection()</td>\n<td style=\"text-align:center\">常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fromfd()</td>\n<td style=\"text-align:center\">以一个打开的文件描述符创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ssl()</td>\n<td style=\"text-align:center\">通过套接字启动一个安全套接字层连接；不执行证书验证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getaddrinfo()</td>\n<td style=\"text-align:center\">获取一个五元组序列形式的地址信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getnameinfo()</td>\n<td style=\"text-align:center\">给定一个套接字地址，返回(主机名，端口号)二元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getfqdn()</td>\n<td style=\"text-align:center\">返回完整的域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostname()</td>\n<td style=\"text-align:center\">返回当前主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname()</td>\n<td style=\"text-align:center\">将一个主机名映射到它的IP地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname_ex()</td>\n<td style=\"text-align:center\">gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyaddr()</td>\n<td style=\"text-align:center\">讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getprotobyname()</td>\n<td style=\"text-align:center\">将一个协议名(如‘TCP’)映射到一个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getservbyname()/getservbyport()</td>\n<td style=\"text-align:center\">将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ntohl()/ntohs()</td>\n<td style=\"text-align:center\">将来自网络的整数装换为主机字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htonl()/htons()</td>\n<td style=\"text-align:center\">将来自主机的整数转换为网络字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_aton()/inet_ntoa()</td>\n<td style=\"text-align:center\">将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_pton()/inet_ntop()</td>\n<td style=\"text-align:center\">将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getdefaulttimeout()/setdefaulttimeout()</td>\n<td style=\"text-align:center\">以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间</td>\n</tr>\n</tbody>\n</table>\n<p>详情参阅<a href=\"https://docs.python.org/3/library/socket.html?highlight=socket#module-socket\" target=\"_blank\" rel=\"noopener\">socket模块文档</a></p>\n<h2 id=\"创建TCP服务器-客户端\"><a href=\"#创建TCP服务器-客户端\" class=\"headerlink\" title=\"创建TCP服务器/客户端\"></a>创建TCP服务器/客户端</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><ul>\n<li><p>下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                 <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                     <span class=\"comment\">#套接字与地址绑定</span></span><br><span class=\"line\">ss.listen()                   <span class=\"comment\">#监听连接</span></span><br><span class=\"line\">inf_loop:                     <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.accept()          <span class=\"comment\">#接受客户端连接</span></span><br><span class=\"line\">    comm_loop:                <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">        cs.recv()/cs.send()   <span class=\"comment\">#对话(接收/发送)</span></span><br><span class=\"line\">    cs.close()                <span class=\"comment\">#关闭客户端套接字</span></span><br><span class=\"line\">ss.close()                    <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 选择一个随机的端口号</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP服务套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 将套接字绑定到服务器地址</span></span><br><span class=\"line\"><span class=\"comment\"># 开启TCP的监听调用</span></span><br><span class=\"line\"><span class=\"comment\"># listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数</span></span><br><span class=\"line\">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpSerSock.bind(ADDR)</span><br><span class=\"line\">tcpSerSock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 服务器循环，等待客户端的连接的连接</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class=\"line\">    print(<span class=\"string\">'...connected from:'</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 当一个连接请求出现时，进入对话循环，接收消息</span></span><br><span class=\"line\">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># 当消息为空时，退出对话循环</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭客户端连接，等待下一个连接请求</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        tcpCliSock.send(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><ul>\n<li><p>下面是TCP客户端的通用伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()           <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">cs.connect()            <span class=\"comment\">#尝试连接服务器</span></span><br><span class=\"line\">comm_loop:              <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.send()/cs.recv   <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()              <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器的主机名</span></span><br><span class=\"line\"><span class=\"comment\"># 服务器的端口号,应与服务器设置的完全相同</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP客户端套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 主动调用并连接到服务器</span></span><br><span class=\"line\">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpCliSock.connect(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 无限循环，输入消息</span></span><br><span class=\"line\">    data = bytes(input(<span class=\"string\">'&gt; '</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送输入的信息</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收服务器返回的信息，最后打印</span></span><br><span class=\"line\">    tcpCliSock.send(data)</span><br><span class=\"line\">    data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 关闭客户端</span></span><br><span class=\"line\">tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h3><p>  在运行程序时，必须 <strong>首先运行服务器</strong> 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。<br>  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 53220)</span><br><span class=\"line\">waiting for connection...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Fri Feb 23 14:22:58 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Fri Feb 23 14:23:02 2018] hi</span><br><span class=\"line\">&gt; hello world</span><br><span class=\"line\">[Fri Feb 23 14:23:09 2018] hello world</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建UDP服务器-客户端\"><a href=\"#创建UDP服务器-客户端\" class=\"headerlink\" title=\"创建UDP服务器/客户端\"></a>创建UDP服务器/客户端</h2><h3 id=\"UDP服务器\"><a href=\"#UDP服务器\" class=\"headerlink\" title=\"UDP服务器\"></a>UDP服务器</h3><ul>\n<li><p>下面是UDP服务器的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                           <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                               <span class=\"comment\">#绑定服务器套接字</span></span><br><span class=\"line\">inf_loop:                               <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.recvfrom()/ss.sendto()      <span class=\"comment\">#关闭(接收/发送)</span></span><br><span class=\"line\">ss.close()                              <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与TCP相同，由于是无连接，所以没有调用监听传入连接</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">udpSerSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">udpSerSock.bind(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for message...'</span>)</span><br><span class=\"line\">    data, addr = udpSerSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">    udpSerSock.sendto(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">        ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>), addr)</span><br><span class=\"line\">    print(<span class=\"string\">'...received from and returned to:'</span>, addr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h3><ul>\n<li><p>下面是客户端的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()                         <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">comm_loop:                            <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.sendto()/cs.recvfrom()         <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()                            <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"> <span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"> HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\"> PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"> BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\"> ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"> udpClienSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">     data = bytes(input(<span class=\"string\">'&gt;'</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     udpClienSock.sendto(data, ADDR)</span><br><span class=\"line\">     data, ADDR = udpClienSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"> udpClienSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP服务器和客户端运行结果\"><a href=\"#UDP服务器和客户端运行结果\" class=\"headerlink\" title=\"UDP服务器和客户端运行结果\"></a>UDP服务器和客户端运行结果</h3><p>  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;hello</span><br><span class=\"line\">[Fri Feb 23 15:23:57 2018] hello</span><br><span class=\"line\">&gt;hi</span><br><span class=\"line\">[Fri Feb 23 15:24:03 2018] hi</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><em>AF_UNIX</em> 是基于文件的套接字，代表 <em>地址家族(address family):UNIX</em>，<em>AF_INET</em> 是基于网络的套接字，代表 <em>地址家族：因特网</em>， <em>AF_INET6</em> 用于底6版因特网协议(IPv6)寻址。 <em>SOCK_STREAM</em> 表示面向连接的TCP套接字， <em>SOCK_DGRAM</em> 代表无连接的UDP套接字。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>使用Python的一些模块来创建网络应用程序<br>","more":"</p>\n<h2 id=\"socket-函数模块\"><a href=\"#socket-函数模块\" class=\"headerlink\" title=\"socket()函数模块\"></a>socket()函数模块</h2><p>要创建套接字，必须使用<code>socket.socket()</code>函数<code>socket(socket_family, socket_type, protocol = 0)</code>,<br>其中<code>socket_family</code>是 <em>AF_UNIX</em> 或 <em>AF_INET</em>,<code>socket_type</code>是 <em>SOCK_STREAM</em> 或 <em>SOCK_DGRAM</em>。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup><br><code>protocol</code>通常省略，默认为0。</p>\n<ol>\n<li><blockquote>\n<p>创建TCP/IP套接字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建UDP/IP套接字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"套接字对象内接方法\"><a href=\"#套接字对象内接方法\" class=\"headerlink\" title=\"套接字对象内接方法\"></a>套接字对象内接方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">服务器套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.bind()</td>\n<td style=\"text-align:center\">将地址(主机名、端口号对)绑定到套接字上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen()</td>\n<td style=\"text-align:center\">设置并启动TCP监听器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">被动接受TCP客户端连接，一直等待知道连接到达(阻塞)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">客户端套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect()</td>\n<td style=\"text-align:center\">主动发起TCP服务器连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex()</td>\n<td style=\"text-align:center\">connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv()</td>\n<td style=\"text-align:center\">接受TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv_into()</td>\n<td style=\"text-align:center\">接受TCP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send()</td>\n<td style=\"text-align:center\">发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall()</td>\n<td style=\"text-align:center\">完整地发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom()</td>\n<td style=\"text-align:center\">接受UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom_into()</td>\n<td style=\"text-align:center\">接受UDP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto()</td>\n<td style=\"text-align:center\">发送UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getpeername()</td>\n<td style=\"text-align:center\">连接到套接字(TCP)的远程地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockname()</td>\n<td style=\"text-align:center\">当前套接字的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockopt()</td>\n<td style=\"text-align:center\">返回给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setsockopt()</td>\n<td style=\"text-align:center\">设置给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.shutdown()</td>\n<td style=\"text-align:center\">关闭连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.detach()</td>\n<td style=\"text-align:center\">在未关闭文件描述符的情况下关闭套接字，返回文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.ioctl()</td>\n<td style=\"text-align:center\">控制套接字的模式(仅支持Windows)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向阻塞的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setblocking()</td>\n<td style=\"text-align:center\">设置套接字的阻塞或非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.settimeout()</td>\n<td style=\"text-align:center\">设置阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.gettimeout()</td>\n<td style=\"text-align:center\">获取阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向文件的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.fileno()</td>\n<td style=\"text-align:center\">套接字的文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.makefile()</td>\n<td style=\"text-align:center\">创建与套接字关联的文件对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.family</td>\n<td style=\"text-align:center\">套接字家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.type</td>\n<td style=\"text-align:center\">套接字类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.proto</td>\n<td style=\"text-align:center\">套接字协议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socket模块属性\"><a href=\"#socket模块属性\" class=\"headerlink\" title=\"socket模块属性\"></a>socket模块属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC</td>\n<td style=\"text-align:center\">Python中支持的套接字地址家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SO_STREAM、SO_DGRAM</td>\n<td style=\"text-align:center\">套接字类型(TCP=流，UDP=数据报)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has_ipv6</td>\n<td style=\"text-align:center\">指示是否支持IPv6的布尔标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">套接字相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">herror</td>\n<td style=\"text-align:center\">主机和地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gaierror</td>\n<td style=\"text-align:center\">地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socketpair()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">create_connection()</td>\n<td style=\"text-align:center\">常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fromfd()</td>\n<td style=\"text-align:center\">以一个打开的文件描述符创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ssl()</td>\n<td style=\"text-align:center\">通过套接字启动一个安全套接字层连接；不执行证书验证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getaddrinfo()</td>\n<td style=\"text-align:center\">获取一个五元组序列形式的地址信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getnameinfo()</td>\n<td style=\"text-align:center\">给定一个套接字地址，返回(主机名，端口号)二元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getfqdn()</td>\n<td style=\"text-align:center\">返回完整的域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostname()</td>\n<td style=\"text-align:center\">返回当前主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname()</td>\n<td style=\"text-align:center\">将一个主机名映射到它的IP地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname_ex()</td>\n<td style=\"text-align:center\">gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyaddr()</td>\n<td style=\"text-align:center\">讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getprotobyname()</td>\n<td style=\"text-align:center\">将一个协议名(如‘TCP’)映射到一个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getservbyname()/getservbyport()</td>\n<td style=\"text-align:center\">将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ntohl()/ntohs()</td>\n<td style=\"text-align:center\">将来自网络的整数装换为主机字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htonl()/htons()</td>\n<td style=\"text-align:center\">将来自主机的整数转换为网络字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_aton()/inet_ntoa()</td>\n<td style=\"text-align:center\">将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_pton()/inet_ntop()</td>\n<td style=\"text-align:center\">将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getdefaulttimeout()/setdefaulttimeout()</td>\n<td style=\"text-align:center\">以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间</td>\n</tr>\n</tbody>\n</table>\n<p>详情参阅<a href=\"https://docs.python.org/3/library/socket.html?highlight=socket#module-socket\" target=\"_blank\" rel=\"noopener\">socket模块文档</a></p>\n<h2 id=\"创建TCP服务器-客户端\"><a href=\"#创建TCP服务器-客户端\" class=\"headerlink\" title=\"创建TCP服务器/客户端\"></a>创建TCP服务器/客户端</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><ul>\n<li><p>下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                 <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                     <span class=\"comment\">#套接字与地址绑定</span></span><br><span class=\"line\">ss.listen()                   <span class=\"comment\">#监听连接</span></span><br><span class=\"line\">inf_loop:                     <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.accept()          <span class=\"comment\">#接受客户端连接</span></span><br><span class=\"line\">    comm_loop:                <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">        cs.recv()/cs.send()   <span class=\"comment\">#对话(接收/发送)</span></span><br><span class=\"line\">    cs.close()                <span class=\"comment\">#关闭客户端套接字</span></span><br><span class=\"line\">ss.close()                    <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 选择一个随机的端口号</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP服务套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 将套接字绑定到服务器地址</span></span><br><span class=\"line\"><span class=\"comment\"># 开启TCP的监听调用</span></span><br><span class=\"line\"><span class=\"comment\"># listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数</span></span><br><span class=\"line\">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpSerSock.bind(ADDR)</span><br><span class=\"line\">tcpSerSock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 服务器循环，等待客户端的连接的连接</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class=\"line\">    print(<span class=\"string\">'...connected from:'</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 当一个连接请求出现时，进入对话循环，接收消息</span></span><br><span class=\"line\">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># 当消息为空时，退出对话循环</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭客户端连接，等待下一个连接请求</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        tcpCliSock.send(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><ul>\n<li><p>下面是TCP客户端的通用伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()           <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">cs.connect()            <span class=\"comment\">#尝试连接服务器</span></span><br><span class=\"line\">comm_loop:              <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.send()/cs.recv   <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()              <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器的主机名</span></span><br><span class=\"line\"><span class=\"comment\"># 服务器的端口号,应与服务器设置的完全相同</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP客户端套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 主动调用并连接到服务器</span></span><br><span class=\"line\">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpCliSock.connect(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 无限循环，输入消息</span></span><br><span class=\"line\">    data = bytes(input(<span class=\"string\">'&gt; '</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送输入的信息</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收服务器返回的信息，最后打印</span></span><br><span class=\"line\">    tcpCliSock.send(data)</span><br><span class=\"line\">    data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 关闭客户端</span></span><br><span class=\"line\">tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h3><p>  在运行程序时，必须 <strong>首先运行服务器</strong> 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。<br>  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 53220)</span><br><span class=\"line\">waiting for connection...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Fri Feb 23 14:22:58 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Fri Feb 23 14:23:02 2018] hi</span><br><span class=\"line\">&gt; hello world</span><br><span class=\"line\">[Fri Feb 23 14:23:09 2018] hello world</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建UDP服务器-客户端\"><a href=\"#创建UDP服务器-客户端\" class=\"headerlink\" title=\"创建UDP服务器/客户端\"></a>创建UDP服务器/客户端</h2><h3 id=\"UDP服务器\"><a href=\"#UDP服务器\" class=\"headerlink\" title=\"UDP服务器\"></a>UDP服务器</h3><ul>\n<li><p>下面是UDP服务器的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                           <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                               <span class=\"comment\">#绑定服务器套接字</span></span><br><span class=\"line\">inf_loop:                               <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.recvfrom()/ss.sendto()      <span class=\"comment\">#关闭(接收/发送)</span></span><br><span class=\"line\">ss.close()                              <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与TCP相同，由于是无连接，所以没有调用监听传入连接</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">udpSerSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">udpSerSock.bind(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for message...'</span>)</span><br><span class=\"line\">    data, addr = udpSerSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">    udpSerSock.sendto(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">        ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>), addr)</span><br><span class=\"line\">    print(<span class=\"string\">'...received from and returned to:'</span>, addr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h3><ul>\n<li><p>下面是客户端的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()                         <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">comm_loop:                            <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.sendto()/cs.recvfrom()         <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()                            <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"> <span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"> HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\"> PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"> BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\"> ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"> udpClienSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">     data = bytes(input(<span class=\"string\">'&gt;'</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     udpClienSock.sendto(data, ADDR)</span><br><span class=\"line\">     data, ADDR = udpClienSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"> udpClienSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP服务器和客户端运行结果\"><a href=\"#UDP服务器和客户端运行结果\" class=\"headerlink\" title=\"UDP服务器和客户端运行结果\"></a>UDP服务器和客户端运行结果</h3><p>  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;hello</span><br><span class=\"line\">[Fri Feb 23 15:23:57 2018] hello</span><br><span class=\"line\">&gt;hi</span><br><span class=\"line\">[Fri Feb 23 15:24:03 2018] hi</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><em>AF_UNIX</em> 是基于文件的套接字，代表 <em>地址家族(address family):UNIX</em>，<em>AF_INET</em> 是基于网络的套接字，代表 <em>地址家族：因特网</em>， <em>AF_INET6</em> 用于底6版因特网协议(IPv6)寻址。 <em>SOCK_STREAM</em> 表示面向连接的TCP套接字， <em>SOCK_DGRAM</em> 代表无连接的UDP套接字。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python网络编程(二)","date":"2018-02-24T01:40:06.000Z","copyright":true,"description":null,"_content":"上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录\n<!--More-->\n## socketserver模块\n[socketserver](https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver)是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。\n\n### socketserver模块类\n|                     类                      |                                                              描述                                                              |\n|:-------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n|                 BaseServer                  |        包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例        |\n|             TCPServer/UDPServer             |                                                  基础的网络同步TCP/UDP服务器                                                   |\n|     UnixStreamServer/UnixDatagramServer     |                                                基于文件的基础同步TCP/UDP服务器                                                 |\n|         ForkingMixIn/ThreadingMixIn         |                    核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类                    |\n|      ForkingTCPServer/ForkingUDPServer      |                                            ForkingMaxIn和TCPServer/UDPServer的组合                                             |\n|    ThreadingTCPServer/ThreadingUDPServer    |                                           ThreadingMixIn和TCPServer/UDPServer的组合                                            |\n|             BaseRequestHandler              | 包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例 |\n| StreamRequestHandler/DatagramRequestHandler |                                                 实现TCP/UDP服务器的服务处理器                                                  |\n\n### socketserver TCP服务器/客户端\n在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用\n\n#### TCP服务器\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    # 导入socketserver相关的类和time.ctime()的全部属性\n    from socketserver import (TCPServer as TCP,\n                              StreamRequestHandler as SRH)\n    from time import ctime\n\n    HOST = ''\n    PORT = 12345\n    ADDR = (HOST, PORT)\n\n\n    class MyRequestHandler(SRH):\n        # MyRequestHandler继承自StreamRequestHandler\n\n        def handle(self):\n            # 重写handle方法，当接收到一个客户端消息是，会调用handle()方法\n            print('...connected from:', self.client_address)\n            # StreamRequestHandler将输入和输出套接字看做类似文件的对象\n            # 所以使用write()将字符串返回客户端，用readline()来获取客户端信息\n            self.wfile.write(bytes('[%s] %s' % (\n                ctime(), self.rfile.readline().decode('utf-8')), 'utf-8'))\n\n    # 利用给定的主机信息和请求处理类创建了TCP服务器\n    # 然后无限循环地等待并服务于客户端请求\n    tcpServ = TCP(ADDR, MyRequestHandler)\n    print('waiting for connection...')\n    tcpServ.serve_forever()\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    from socket import *\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n    BUFSIZE = 1024\n    ADDR = (HOST, PORT)\n\n    while True:\n        tcpSocket = socket(AF_INET, SOCK_STREAM)\n        tcpSocket.connect(ADDR)\n        data = input('> ')\n        if not data:\n            break\n        # 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。\n        # 而服务器只是保留并重用这里发送的终止符\n        tcpSocket.send(bytes('%s\\r\\n' % data, 'utf-8'))\n        data = tcpSocket.recv(BUFSIZE)\n        if not data:\n            break\n        # 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符\n        print(data.decode('utf-8').strip())\n        tcpSocket.close()\n\n  ```\n#### socketserver TCP服务器和客户端运行结果\n  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器\n  * TCP服务器运行结果\n      ````\n      waiting for connection...\n      ...connected from: ('127.0.0.1', 51835)\n      ...connected from: ('127.0.0.1', 51877)\n      ...connected from: ('127.0.0.1', 51893)\n      ...connected from: ('127.0.0.1', 51901)\n\n      ````\n\n  * TCP客户端运行结果\n      ```\n      > hello\n      [Sat Feb 24 10:29:28 2018] hello\n      > hello\n      [Sat Feb 24 10:29:44 2018] hello\n      > hi\n      [Sat Feb 24 10:29:50 2018] hi\n      >\n      ```\n\n## Twisted框架的简单使用\n  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独[下载](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted)和安装它[^1]。\n  ```\n   pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  ```\n  安装成功显示\n  ```\n  Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  Requirement already satisfied: Automat>=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: zope.interface>=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: incremental>=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: hyperlink>=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: constantly>=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface>=4.0.2->Twisted==17.9.0)\n  Installing collected packages: Twisted\n  Successfully installed Twisted-17.9.0\n  ```\n### Twisted Reactor TCP 服务器/客户端\n#### TCP服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 常用模块导入，特别是twisted.internet的protocol和reactor\n  from twisted.internet import protocol, reactor\n  from time import ctime\n\n  # 设置端口号\n  PORT = 12345\n\n\n  class TWServProtocol(protocol.Protocol):\n      # 继承Protocol类\n      def connectionMade(self):\n          # 重写connectionMade()方法\n          # 当一个客户端连接到服务器是会执行这个方法\n          client = self.client = self.transport.getPeer().host\n          print('...connected from:', client)\n\n      def dataReceived(self, data):\n          # 重写dataReceived()方法\n          # 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法\n          self.transport.write(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n  # 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例\n  # 在reactor中安装一个TCP监听器，以此检查服务请求\n  # 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务\n  factory = protocol.Factory()\n  factory.protocol = TWServProtocol\n  print('waiting for connection...')\n  reactor.listenTCP(PORT, factory)\n  reactor.run()\n\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python\n    # -*- coding:UTF-8 -*-\n\n    from twisted.internet import  protocol, reactor\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n\n\n    class TWClientProtocol(protocol.Protocol):\n        def sendData(self):\n            # 需要发送数据时调用\n            # 会在一个循环中继续，直到不输入任何内容来关闭连接\n            data = input('> ')\n            if data:\n                print('...send %s...' % data)\n                self.transport.write(bytes(data, 'utf-8'))\n            else:\n                self.transport.loseConnection()\n\n        def connectionMade(self):\n            #\n            self.sendData()\n\n        def dataReceived(self, data):\n            print(data.decode('utf-8'))\n            self.sendData()\n\n\n    class TWClientFactory(protocol.ClientFactory):\n        # 创建了一个客户端工厂\n        protocol = TWClientProtocol\n        clientConnectionLost = clientConnectionFailed = \\\n            lambda self, connector, reason: reactor.stop()\n    # 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂\n    # 因为这里不是服务器，需要等待客户端与我们通信\n    # 并且这个工厂为每一次连接都创建一个新的协议对象。\n    # 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信\n    reactor.connectTCP(HOST, PORT, TWClientFactory())\n    reactor.run()\n  ```\n#### TCP服务器和客户端运行结果\n  * 服务器结果\n  ```\n  waiting for connection...\n  ...connected from: 127.0.0.1\n\n  ```\n  * 客户端结果\n  ```\n  > hello\n  ...send hello...\n  [Sat Feb 24 11:19:49 2018] hello\n  > hi\n  ...send hi...\n  [Sat Feb 24 11:20:02 2018] hi\n  >\n  ```\n\n[^1]:需要安装python对应的版本和位数\n","source":"_posts/Python网络编程-二.md","raw":"---\ntitle: Python网络编程(二)\ndate: 2018-02-24 09:40:06\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 网络编程\ndescription:\n---\n上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录\n<!--More-->\n## socketserver模块\n[socketserver](https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver)是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。\n\n### socketserver模块类\n|                     类                      |                                                              描述                                                              |\n|:-------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n|                 BaseServer                  |        包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例        |\n|             TCPServer/UDPServer             |                                                  基础的网络同步TCP/UDP服务器                                                   |\n|     UnixStreamServer/UnixDatagramServer     |                                                基于文件的基础同步TCP/UDP服务器                                                 |\n|         ForkingMixIn/ThreadingMixIn         |                    核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类                    |\n|      ForkingTCPServer/ForkingUDPServer      |                                            ForkingMaxIn和TCPServer/UDPServer的组合                                             |\n|    ThreadingTCPServer/ThreadingUDPServer    |                                           ThreadingMixIn和TCPServer/UDPServer的组合                                            |\n|             BaseRequestHandler              | 包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例 |\n| StreamRequestHandler/DatagramRequestHandler |                                                 实现TCP/UDP服务器的服务处理器                                                  |\n\n### socketserver TCP服务器/客户端\n在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用\n\n#### TCP服务器\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    # 导入socketserver相关的类和time.ctime()的全部属性\n    from socketserver import (TCPServer as TCP,\n                              StreamRequestHandler as SRH)\n    from time import ctime\n\n    HOST = ''\n    PORT = 12345\n    ADDR = (HOST, PORT)\n\n\n    class MyRequestHandler(SRH):\n        # MyRequestHandler继承自StreamRequestHandler\n\n        def handle(self):\n            # 重写handle方法，当接收到一个客户端消息是，会调用handle()方法\n            print('...connected from:', self.client_address)\n            # StreamRequestHandler将输入和输出套接字看做类似文件的对象\n            # 所以使用write()将字符串返回客户端，用readline()来获取客户端信息\n            self.wfile.write(bytes('[%s] %s' % (\n                ctime(), self.rfile.readline().decode('utf-8')), 'utf-8'))\n\n    # 利用给定的主机信息和请求处理类创建了TCP服务器\n    # 然后无限循环地等待并服务于客户端请求\n    tcpServ = TCP(ADDR, MyRequestHandler)\n    print('waiting for connection...')\n    tcpServ.serve_forever()\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    from socket import *\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n    BUFSIZE = 1024\n    ADDR = (HOST, PORT)\n\n    while True:\n        tcpSocket = socket(AF_INET, SOCK_STREAM)\n        tcpSocket.connect(ADDR)\n        data = input('> ')\n        if not data:\n            break\n        # 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。\n        # 而服务器只是保留并重用这里发送的终止符\n        tcpSocket.send(bytes('%s\\r\\n' % data, 'utf-8'))\n        data = tcpSocket.recv(BUFSIZE)\n        if not data:\n            break\n        # 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符\n        print(data.decode('utf-8').strip())\n        tcpSocket.close()\n\n  ```\n#### socketserver TCP服务器和客户端运行结果\n  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器\n  * TCP服务器运行结果\n      ````\n      waiting for connection...\n      ...connected from: ('127.0.0.1', 51835)\n      ...connected from: ('127.0.0.1', 51877)\n      ...connected from: ('127.0.0.1', 51893)\n      ...connected from: ('127.0.0.1', 51901)\n\n      ````\n\n  * TCP客户端运行结果\n      ```\n      > hello\n      [Sat Feb 24 10:29:28 2018] hello\n      > hello\n      [Sat Feb 24 10:29:44 2018] hello\n      > hi\n      [Sat Feb 24 10:29:50 2018] hi\n      >\n      ```\n\n## Twisted框架的简单使用\n  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独[下载](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted)和安装它[^1]。\n  ```\n   pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  ```\n  安装成功显示\n  ```\n  Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  Requirement already satisfied: Automat>=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: zope.interface>=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: incremental>=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: hyperlink>=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: constantly>=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface>=4.0.2->Twisted==17.9.0)\n  Installing collected packages: Twisted\n  Successfully installed Twisted-17.9.0\n  ```\n### Twisted Reactor TCP 服务器/客户端\n#### TCP服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 常用模块导入，特别是twisted.internet的protocol和reactor\n  from twisted.internet import protocol, reactor\n  from time import ctime\n\n  # 设置端口号\n  PORT = 12345\n\n\n  class TWServProtocol(protocol.Protocol):\n      # 继承Protocol类\n      def connectionMade(self):\n          # 重写connectionMade()方法\n          # 当一个客户端连接到服务器是会执行这个方法\n          client = self.client = self.transport.getPeer().host\n          print('...connected from:', client)\n\n      def dataReceived(self, data):\n          # 重写dataReceived()方法\n          # 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法\n          self.transport.write(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n  # 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例\n  # 在reactor中安装一个TCP监听器，以此检查服务请求\n  # 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务\n  factory = protocol.Factory()\n  factory.protocol = TWServProtocol\n  print('waiting for connection...')\n  reactor.listenTCP(PORT, factory)\n  reactor.run()\n\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python\n    # -*- coding:UTF-8 -*-\n\n    from twisted.internet import  protocol, reactor\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n\n\n    class TWClientProtocol(protocol.Protocol):\n        def sendData(self):\n            # 需要发送数据时调用\n            # 会在一个循环中继续，直到不输入任何内容来关闭连接\n            data = input('> ')\n            if data:\n                print('...send %s...' % data)\n                self.transport.write(bytes(data, 'utf-8'))\n            else:\n                self.transport.loseConnection()\n\n        def connectionMade(self):\n            #\n            self.sendData()\n\n        def dataReceived(self, data):\n            print(data.decode('utf-8'))\n            self.sendData()\n\n\n    class TWClientFactory(protocol.ClientFactory):\n        # 创建了一个客户端工厂\n        protocol = TWClientProtocol\n        clientConnectionLost = clientConnectionFailed = \\\n            lambda self, connector, reason: reactor.stop()\n    # 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂\n    # 因为这里不是服务器，需要等待客户端与我们通信\n    # 并且这个工厂为每一次连接都创建一个新的协议对象。\n    # 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信\n    reactor.connectTCP(HOST, PORT, TWClientFactory())\n    reactor.run()\n  ```\n#### TCP服务器和客户端运行结果\n  * 服务器结果\n  ```\n  waiting for connection...\n  ...connected from: 127.0.0.1\n\n  ```\n  * 客户端结果\n  ```\n  > hello\n  ...send hello...\n  [Sat Feb 24 11:19:49 2018] hello\n  > hi\n  ...send hi...\n  [Sat Feb 24 11:20:02 2018] hi\n  >\n  ```\n\n[^1]:需要安装python对应的版本和位数\n","slug":"Python网络编程-二","published":1,"updated":"2018-02-24T08:13:04.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje15bqyg000slwn9z0fg3gkw","content":"<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br><a id=\"more\"></a></p>\n<h2 id=\"socketserver模块\"><a href=\"#socketserver模块\" class=\"headerlink\" title=\"socketserver模块\"></a>socketserver模块</h2><p><a href=\"https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver\" target=\"_blank\" rel=\"noopener\">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p>\n<h3 id=\"socketserver模块类\"><a href=\"#socketserver模块类\" class=\"headerlink\" title=\"socketserver模块类\"></a>socketserver模块类</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BaseServer</td>\n<td style=\"text-align:center\">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCPServer/UDPServer</td>\n<td style=\"text-align:center\">基础的网络同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UnixStreamServer/UnixDatagramServer</td>\n<td style=\"text-align:center\">基于文件的基础同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingMixIn/ThreadingMixIn</td>\n<td style=\"text-align:center\">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingTCPServer/ForkingUDPServer</td>\n<td style=\"text-align:center\">ForkingMaxIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ThreadingTCPServer/ThreadingUDPServer</td>\n<td style=\"text-align:center\">ThreadingMixIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BaseRequestHandler</td>\n<td style=\"text-align:center\">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">StreamRequestHandler/DatagramRequestHandler</td>\n<td style=\"text-align:center\">实现TCP/UDP服务器的服务处理器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socketserver-TCP服务器-客户端\"><a href=\"#socketserver-TCP服务器-客户端\" class=\"headerlink\" title=\"socketserver TCP服务器/客户端\"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p>\n<h4 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socketserver <span class=\"keyword\">import</span> (TCPServer <span class=\"keyword\">as</span> TCP,</span><br><span class=\"line\">                          StreamRequestHandler <span class=\"keyword\">as</span> SRH)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequestHandler</span><span class=\"params\">(SRH)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, self.client_address)</span><br><span class=\"line\">        <span class=\"comment\"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class=\"line\">        self.wfile.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), self.rfile.readline().decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class=\"line\">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">    tcpSocket.connect(ADDR)</span><br><span class=\"line\">    data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class=\"line\">    <span class=\"comment\"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class=\"line\">    tcpSocket.send(bytes(<span class=\"string\">'%s\\r\\n'</span> % data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    data = tcpSocket.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>).strip())</span><br><span class=\"line\">    tcpSocket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"socketserver-TCP服务器和客户端运行结果\"><a href=\"#socketserver-TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"socketserver TCP服务器和客户端运行结果\"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p>\n<ul>\n<li><p>TCP服务器运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP客户端运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:28 2018] hello</span><br><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:44 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Sat Feb 24 10:29:50 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Twisted框架的简单使用\"><a href=\"#Twisted框架的简单使用\" class=\"headerlink\" title=\"Twisted框架的简单使用\"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" target=\"_blank\" rel=\"noopener\">下载</a>和安装它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p>\n<p>  安装成功显示<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class=\"line\">Requirement already satisfied: Automat&gt;=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: incremental&gt;=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: constantly&gt;=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Installing collected packages: Twisted</span><br><span class=\"line\">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Twisted-Reactor-TCP-服务器-客户端\"><a href=\"#Twisted-Reactor-TCP-服务器-客户端\" class=\"headerlink\" title=\"Twisted Reactor TCP 服务器/客户端\"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id=\"TCP服务器-1\"><a href=\"#TCP服务器-1\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span> protocol, reactor</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置端口号</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWServProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承Protocol类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写connectionMade()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class=\"line\">        client = self.client = self.transport.getPeer().host</span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, client)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写dataReceived()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class=\"line\">        self.transport.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class=\"line\"><span class=\"comment\"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class=\"line\"><span class=\"comment\"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class=\"line\">factory = protocol.Factory()</span><br><span class=\"line\">factory.protocol = TWServProtocol</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">reactor.listenTCP(PORT, factory)</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端-1\"><a href=\"#TCP客户端-1\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span>  protocol, reactor</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendData</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 需要发送数据时调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class=\"line\">        data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            print(<span class=\"string\">'...send %s...'</span> % data)</span><br><span class=\"line\">            self.transport.write(bytes(data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.transport.loseConnection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientFactory</span><span class=\"params\">(protocol.ClientFactory)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个客户端工厂</span></span><br><span class=\"line\">    protocol = TWClientProtocol</span><br><span class=\"line\">    clientConnectionLost = clientConnectionFailed = \\</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> self, connector, reason: reactor.stop()</span><br><span class=\"line\"><span class=\"comment\"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class=\"line\"><span class=\"comment\"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class=\"line\"><span class=\"comment\"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class=\"line\">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h4><ul>\n<li><p>服务器结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">...send hello...</span><br><span class=\"line\">[Sat Feb 24 11:19:49 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">...send hi...</span><br><span class=\"line\">[Sat Feb 24 11:20:02 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">需要安装python对应的版本和位数</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br>","more":"</p>\n<h2 id=\"socketserver模块\"><a href=\"#socketserver模块\" class=\"headerlink\" title=\"socketserver模块\"></a>socketserver模块</h2><p><a href=\"https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver\" target=\"_blank\" rel=\"noopener\">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p>\n<h3 id=\"socketserver模块类\"><a href=\"#socketserver模块类\" class=\"headerlink\" title=\"socketserver模块类\"></a>socketserver模块类</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BaseServer</td>\n<td style=\"text-align:center\">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCPServer/UDPServer</td>\n<td style=\"text-align:center\">基础的网络同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UnixStreamServer/UnixDatagramServer</td>\n<td style=\"text-align:center\">基于文件的基础同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingMixIn/ThreadingMixIn</td>\n<td style=\"text-align:center\">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingTCPServer/ForkingUDPServer</td>\n<td style=\"text-align:center\">ForkingMaxIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ThreadingTCPServer/ThreadingUDPServer</td>\n<td style=\"text-align:center\">ThreadingMixIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BaseRequestHandler</td>\n<td style=\"text-align:center\">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">StreamRequestHandler/DatagramRequestHandler</td>\n<td style=\"text-align:center\">实现TCP/UDP服务器的服务处理器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socketserver-TCP服务器-客户端\"><a href=\"#socketserver-TCP服务器-客户端\" class=\"headerlink\" title=\"socketserver TCP服务器/客户端\"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p>\n<h4 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socketserver <span class=\"keyword\">import</span> (TCPServer <span class=\"keyword\">as</span> TCP,</span><br><span class=\"line\">                          StreamRequestHandler <span class=\"keyword\">as</span> SRH)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequestHandler</span><span class=\"params\">(SRH)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, self.client_address)</span><br><span class=\"line\">        <span class=\"comment\"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class=\"line\">        self.wfile.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), self.rfile.readline().decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class=\"line\">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">    tcpSocket.connect(ADDR)</span><br><span class=\"line\">    data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class=\"line\">    <span class=\"comment\"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class=\"line\">    tcpSocket.send(bytes(<span class=\"string\">'%s\\r\\n'</span> % data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    data = tcpSocket.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>).strip())</span><br><span class=\"line\">    tcpSocket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"socketserver-TCP服务器和客户端运行结果\"><a href=\"#socketserver-TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"socketserver TCP服务器和客户端运行结果\"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p>\n<ul>\n<li><p>TCP服务器运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP客户端运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:28 2018] hello</span><br><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:44 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Sat Feb 24 10:29:50 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Twisted框架的简单使用\"><a href=\"#Twisted框架的简单使用\" class=\"headerlink\" title=\"Twisted框架的简单使用\"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" target=\"_blank\" rel=\"noopener\">下载</a>和安装它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p>\n<p>  安装成功显示<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class=\"line\">Requirement already satisfied: Automat&gt;=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: incremental&gt;=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: constantly&gt;=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Installing collected packages: Twisted</span><br><span class=\"line\">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Twisted-Reactor-TCP-服务器-客户端\"><a href=\"#Twisted-Reactor-TCP-服务器-客户端\" class=\"headerlink\" title=\"Twisted Reactor TCP 服务器/客户端\"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id=\"TCP服务器-1\"><a href=\"#TCP服务器-1\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span> protocol, reactor</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置端口号</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWServProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承Protocol类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写connectionMade()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class=\"line\">        client = self.client = self.transport.getPeer().host</span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, client)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写dataReceived()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class=\"line\">        self.transport.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class=\"line\"><span class=\"comment\"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class=\"line\"><span class=\"comment\"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class=\"line\">factory = protocol.Factory()</span><br><span class=\"line\">factory.protocol = TWServProtocol</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">reactor.listenTCP(PORT, factory)</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端-1\"><a href=\"#TCP客户端-1\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span>  protocol, reactor</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendData</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 需要发送数据时调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class=\"line\">        data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            print(<span class=\"string\">'...send %s...'</span> % data)</span><br><span class=\"line\">            self.transport.write(bytes(data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.transport.loseConnection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientFactory</span><span class=\"params\">(protocol.ClientFactory)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个客户端工厂</span></span><br><span class=\"line\">    protocol = TWClientProtocol</span><br><span class=\"line\">    clientConnectionLost = clientConnectionFailed = \\</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> self, connector, reason: reactor.stop()</span><br><span class=\"line\"><span class=\"comment\"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class=\"line\"><span class=\"comment\"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class=\"line\"><span class=\"comment\"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class=\"line\">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h4><ul>\n<li><p>服务器结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">...send hello...</span><br><span class=\"line\">[Sat Feb 24 11:19:49 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">...send hi...</span><br><span class=\"line\">[Sat Feb 24 11:20:02 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">需要安装python对应的版本和位数</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cje15bqwq0005lwn93pthtgy7","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqx60008lwn90jhc8cni"},{"post_id":"cje15bqwa0000lwn9azzz6vb0","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqx6000blwn9x3xbcmfz"},{"post_id":"cje15bqwa0001lwn9sz6949x7","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqx6000dlwn9a2x0j3zb"},{"post_id":"cje15bqwq0004lwn9v3evdst3","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqx6000glwn9drr9vmcs"},{"post_id":"cje15bqyg000qlwn9ache4g7m","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqyg000vlwn93v6opbkg"},{"post_id":"cje15bqyg000slwn9z0fg3gkw","category_id":"cje15bqwa0002lwn9jhh3zj6n","_id":"cje15bqyg000wlwn9786wek30"}],"PostTag":[{"post_id":"cje15bqwa0000lwn9azzz6vb0","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqx6000clwn9gmrebnfa"},{"post_id":"cje15bqwa0000lwn9azzz6vb0","tag_id":"cje15bqwq0007lwn93v5ojhlz","_id":"cje15bqx6000elwn9kcvb36pa"},{"post_id":"cje15bqwa0001lwn9sz6949x7","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqx6000ilwn9gb2pec3x"},{"post_id":"cje15bqwa0001lwn9sz6949x7","tag_id":"cje15bqx6000flwn9we34g67g","_id":"cje15bqx6000jlwn9eli48nm9"},{"post_id":"cje15bqwq0004lwn9v3evdst3","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqx6000mlwn9vxi60wxv"},{"post_id":"cje15bqwq0004lwn9v3evdst3","tag_id":"cje15bqx6000flwn9we34g67g","_id":"cje15bqx6000nlwn9uyi5343j"},{"post_id":"cje15bqwq0005lwn93pthtgy7","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqx6000olwn9cg5xs5p5"},{"post_id":"cje15bqwq0005lwn93pthtgy7","tag_id":"cje15bqx6000flwn9we34g67g","_id":"cje15bqx6000plwn9zutdfsec"},{"post_id":"cje15bqyg000qlwn9ache4g7m","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqyg000ylwn9pyy8b27x"},{"post_id":"cje15bqyg000qlwn9ache4g7m","tag_id":"cje15bqyg000ulwn9xlltio25","_id":"cje15bqyg000zlwn9vauo1tpq"},{"post_id":"cje15bqyg000slwn9z0fg3gkw","tag_id":"cje15bqwq0003lwn9e3u15wlm","_id":"cje15bqyg0010lwn9fziov2cz"},{"post_id":"cje15bqyg000slwn9z0fg3gkw","tag_id":"cje15bqyg000ulwn9xlltio25","_id":"cje15bqyg0011lwn9tflqkg0g"}],"Tag":[{"name":"Python","_id":"cje15bqwq0003lwn9e3u15wlm"},{"name":"多线程","_id":"cje15bqwq0007lwn93v5ojhlz"},{"name":"正则表达式","_id":"cje15bqx6000flwn9we34g67g"},{"name":"网络编程","_id":"cje15bqyg000ulwn9xlltio25"}]}}