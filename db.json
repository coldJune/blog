{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518311061113},{"_id":"source/CNAME","hash":"9bb16ec27c6fb3c9443c8a4796f626b8361991ec","modified":1518145711926},{"_id":"source/.DS_Store","hash":"d710ebb62c91e3b4844cd8dea78858fbcd2708d3","modified":1521505938469},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1518056960564},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1518056960563},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1518056960565},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1518056960571},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1518056960580},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1518056960580},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1518056960581},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1518056960582},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1518056960583},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1518056960584},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1518056960585},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1518056960586},{"_id":"themes/next/_config.yml","hash":"be26d83fbae97dea766567e8397818e083f5ca77","modified":1519605048049},{"_id":"themes/next/_config.yml.bak","hash":"a54015eaceb9c432e7f1e947029434daa6b1045a","modified":1518144390222},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1518056960589},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1518056960590},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1518056960696},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1518311061113},{"_id":"source/_posts/CGI和WSGI.md","hash":"5643596669c0f0f5ef6d20d04084366fc2edb563","modified":1520560214029},{"_id":"source/_posts/IPython入门.md","hash":"a85418b3abbf1c352df978378c0ca795d9bd28c7","modified":1521160605930},{"_id":"source/_posts/OFFICE转换工具.md","hash":"246844d70b8b680ba08b329f87ae83c227b9410e","modified":1520299179736},{"_id":"source/_posts/Python-Web客户端和服务器.md","hash":"cce3aefe2cd68fa4ac8fd2c43ea65496473e3763","modified":1520407781550},{"_id":"source/_posts/Python多线程-一.md","hash":"a1cc43af3c92c5f6bf04ca2c8ad148e5bc70350f","modified":1519691427921},{"_id":"source/_posts/Python多线程-二.md","hash":"e7de6d85e072cc167ce6cae9866694b1efbc8bd1","modified":1519782106600},{"_id":"source/_posts/Python数据库编程-一.md","hash":"48219f0716bef5faef4bdf12c6f4313f9267d4c5","modified":1519809460585},{"_id":"source/_posts/Python数据库编程-二.md","hash":"ff8f5298e7e3334f97e8830b5545d9e4d7abf518","modified":1519973746334},{"_id":"source/_posts/Python文本处理.md","hash":"bd75dcec6de0467fdf167169b54895970c7adb30","modified":1520934071630},{"_id":"source/_posts/Python正则表达式-一.md","hash":"1855bd2d86c5c8da59ed4fbd9ebb7ec1e588317c","modified":1518311061113},{"_id":"source/_posts/Python正则表达式-三.md","hash":"d4ca953e70e86470742325e2b576202371bbda19","modified":1519285139798},{"_id":"source/_posts/Python正则表达式-二.md","hash":"bfdbb73fb5937cfb3eb6aff3b88ca853ef87d9c7","modified":1518337135912},{"_id":"source/_posts/Python网络编程-一.md","hash":"8a35126b516c27881e85a4d34c6edc490497944c","modified":1519605048048},{"_id":"source/_posts/Python网络编程-二.md","hash":"afe35e1492462164087a97e5c0003ae0dee1da6a","modified":1519459984925},{"_id":"source/_posts/Web框架-Django.md","hash":"f72e894ce7b9693f7e87b44d88697148e22fc8c0","modified":1520923651675},{"_id":"source/_posts/numpy基础-一.md","hash":"c5e6ed84be28da01350819e630bb38025b102f6e","modified":1521186280312},{"_id":"source/_posts/numpy基础-二.md","hash":"5b619c2923e325bfd353ad014219328c001f02ce","modified":1521452830491},{"_id":"source/_posts/pandas入门-一.md","hash":"72523d288f7edcc830f531fd356f50ffdfde55e4","modified":1521444871211},{"_id":"source/_posts/pandas入门-三.md","hash":"c8f29ee7125381574d92c7648f176f4d9c86355c","modified":1521531358195},{"_id":"source/_posts/pandas入门-二.md","hash":"bff84253454202c512bff1d5454b2b6af117848f","modified":1521509279644},{"_id":"source/_posts/全双工聊天室.md","hash":"889f5b3ca49b3de5223947b55a94fbf2ac8ad66a","modified":1520296281805},{"_id":"source/tags/index.md","hash":"339c69d40799c4cdbaa67be4eaebb38557621dd2","modified":1518311061113},{"_id":"source/categories/index.md","hash":"93b22b0ccda23e0c2180feacd63565bf525cdb83","modified":1518311061113},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1518056960591},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1518056960592},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1518056960594},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1518056960593},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1518056960595},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1518056960596},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1518056960598},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1518056960599},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1518056960600},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1518056960601},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1518056960602},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1518056960603},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1518056960604},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1bdebc9b07744c202670e3565d0ef6ef45726b23","modified":1518141938042},{"_id":"themes/next/languages/zh-Hans.yml.bak","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1518056960605},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1518056960606},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1518056960607},{"_id":"themes/next/layout/_layout.swig","hash":"aee81ccdb88bc4588bef34c7a88068554ba0944c","modified":1518143011722},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1518056960690},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1518056960691},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1518056960691},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1518056960692},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1518056960694},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1518056960693},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1518056960695},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1518056960698},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1518056960700},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1518056961005},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1518056961007},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1518056961008},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960836},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1518056960609},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1518056960610},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1518056960620},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1518142007009},{"_id":"themes/next/layout/_partials/footer.swig.bak","hash":"532d8cc5d089143f47d626c270137224788e11d4","modified":1518141350803},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1518076065906},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1518056960627},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1518056960627},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1518056960629},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1518056960630},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"45d9a5fefec6ef7976718b3238a8517a97f457b0","modified":1518074627375},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"b0e86adc94d495ef5094de0a04e870d96e7b6e2a","modified":1518076155824},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1518056960613},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1518056960614},{"_id":"themes/next/layout/_macro/post.swig","hash":"cb68ae25ebad9142d7317a76229c8c2ec64a49f3","modified":1518139931055},{"_id":"themes/next/layout/_macro/post.swig.bak","hash":"0eff295f27fea91cbb4f375ecd2d099049581701","modified":1518139903702},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1518056960617},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1518056960616},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1518056960619},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1518056960640},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1518056960642},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1518056960648},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1518056960674},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1518056960675},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1518056960676},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1518056960677},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1518056960678},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1518056960679},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1518056960680},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1518056960702},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1518056960703},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1518056960704},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1518056960705},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1518056960706},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1518056960707},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1518056960708},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1518056960709},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1518056960710},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1518056960835},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1518056960838},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1518056960839},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1518056960840},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1518056960841},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1518056960842},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1518056960843},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1518056960844},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1518056960847},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1518056960846},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1518056960848},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1518056960848},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1518056960849},{"_id":"themes/next/source/images/favicon.ico","hash":"afd7d4fc98251541ae276f6620db122ca7d057e3","modified":1518080397380},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518056960850},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1518056960851},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518056960852},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1518056960853},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1518056960855},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1518056960854},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960646},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960646},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960797},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960798},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960800},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960831},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518056960834},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1518056960626},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1518056960624},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1518056960631},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1518056960633},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1518056960634},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1518056960635},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1518056960637},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1518056960638},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1518056960639},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1518056960643},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518056960645},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1518056960647},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1518056960650},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1518056960652},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1518056960653},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1518056960654},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1518056960655},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1518056960656},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1518056960657},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1518056960658},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1518056960659},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1518056960660},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1518056960661},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1518056960662},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1518056960663},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1518056960665},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1518056960666},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1518056960667},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1518056960668},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1518056960669},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1518056960670},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1518056960671},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1518056960672},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1518056960673},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1518056960685},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1518056960686},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1518056960687},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1518056960688},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"615e1f318c15ed8aa599111fd6517df7144ec790","modified":1518075168506},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1518056960799},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1518056960796},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1518056960800},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1518056960829},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1518056960831},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1518056960832},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1518056960833},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1518056960857},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1518056960859},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1518056960860},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1518056960862},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1518056960861},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1518056960863},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1518056960864},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1518056960865},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1518056960867},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1518056960868},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1518056960870},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1518056960885},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518056960891},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1518056960894},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1518056960893},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1518056960896},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1518056960915},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1518056960917},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1518056960918},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1518056960916},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1518056960923},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1518056960925},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1518056960925},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1518056960926},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1518056960927},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1518056960952},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1518056960955},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1518056960957},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1518056960958},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1518056960959},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1518056960960},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1518056960961},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1518056960964},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1518056960966},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1518056960967},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518056960968},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518056960970},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518056960971},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518056960972},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518056960973},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518056960974},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518056960975},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518056960976},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518056960977},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518056960978},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518056960979},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518056960980},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518056960981},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1518056960982},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1518056960984},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1518056960985},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1518056960986},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1518056960996},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1518056960997},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1518056961001},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1518056961004},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1518056961003},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1518056960954},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1518056960684},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1518056960683},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1518056960714},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1518056960715},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1518056960717},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1518056960716},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1518056960736},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1518056960764},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1518056960786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1518056960788},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1518056960789},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1518056960790},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1518056960791},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1518056960792},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1518056960793},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1518056960803},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1518056960804},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1518056960806},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1518056960806},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1518056960807},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1518056960808},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518056960809},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1518056960718},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1518056960811},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1518056960815},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1518056960816},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1518056960817},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1518056960818},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1518056960819},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1518056960822},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1518056960824},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1518056960825},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1518056960826},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1518056960827},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1518056960828},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1518056960866},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1518056960879},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1518056960882},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1518056960884},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1518056960897},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1518056960898},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1518056960899},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1518056960901},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1518056960900},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1518056960902},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1518056960911},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1518056960912},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1518056960913},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1518056960920},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1518056960921},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1518056960929},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1518056960931},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1518056960932},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1518056960993},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1518056960994},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1518056960881},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1518056960949},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1518056960950},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1518056961000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1518056960720},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1518056960722},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1518056960721},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1518056960723},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1518056960725},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1518056960724},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1518056960727},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1518056960728},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1518056960730},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1518076211469},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1518056960738},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1518056960739},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1518056960740},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1518056960741},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1518056960742},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1518056960743},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1518056960744},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1518056960745},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1518056960746},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1518056960747},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1518056960748},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1518056960749},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1518056960750},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1518056960751},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ee5ca6329adb65ab9980242fdffa84741f149cd4","modified":1518076316365},{"_id":"themes/next/source/css/_common/components/post/post.styl.bak","hash":"6ffca9bca005c64d7cd0dbeefb55203c6eca76be","modified":1518073367768},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1518056960754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0f9f1c10a47ca0599f4818ad7d00064255c9afb6","modified":1518075011073},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl.bak","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1518056960755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1518056960756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1518056960757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1518056960758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1518056960759},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1518056960760},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1518056960761},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1518056960762},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1518056960763},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1518056960766},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1518056960767},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1518056960768},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1518056960769},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1518056960770},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1518056960772},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1518056960772},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1518056960773},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1518056960774},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1518056960776},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1518056960777},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1518056960778},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1518056960779},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1518056960780},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1518056960781},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1518056960782},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1518056960783},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1518056960784},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1518056960785},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1518056960731},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1518056960733},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1518056960733},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1518056960734},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1518056960735},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1518056960812},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518056960814},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1518056960821},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1518056960873},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1518056960875},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1518056960876},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1518056960877},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1518056960878},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1518056960904},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1518056960906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1518056960908},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1518056960908},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1518056960910},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1518056960905},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1518056960935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1518056960939},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1518056960947},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1518056960890},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1518056960991},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1518056960944},{"_id":"public/baidu_urls.txt","hash":"ee4380fa8354cbdfacf148998d69f64fe908a4fa","modified":1521531398993},{"_id":"public/baidusitemap.xml","hash":"1e2f02294a0c06743bc556d9dee350c8da5b0c7b","modified":1521531399024},{"_id":"public/atom.xml","hash":"110016ed82cd2853bcca42b49890702c090f96e8","modified":1521531399024},{"_id":"public/search.xml","hash":"c99ac809068876e737874e107492b36843739267","modified":1521531399024},{"_id":"public/sitemap.xml","hash":"1e85a60cca54fbe13d6352c9f35bdaa6b0000ae9","modified":1521531399024},{"_id":"public/tags/index.html","hash":"eb89cdd6b45c595dc5389f0a913eb3645aac4c3c","modified":1521531399052},{"_id":"public/categories/index.html","hash":"771d4446ab04e2c30c011b15f5dadf26e40bc5d1","modified":1521531399052},{"_id":"public/2018/03/20/pandas入门-三/index.html","hash":"4b4da8d444516603e60a3fa1bbe7d25bf6658e15","modified":1521531399053},{"_id":"public/2018/03/19/pandas入门-二/index.html","hash":"eaaeff30d7d48c061f154fe0855072dc0c3d25f4","modified":1521531399053},{"_id":"public/2018/03/19/pandas入门-一/index.html","hash":"2918adee695bb37c3edbf92dd4bb4bf6945379f5","modified":1521531399053},{"_id":"public/2018/03/17/numpy基础-二/index.html","hash":"3b0970eba40496e53ad450a787dc97bf9e5a5753","modified":1521531399053},{"_id":"public/2018/03/16/numpy基础-一/index.html","hash":"3592400c10c0a420943f172458dbc7ba01dbf0f0","modified":1521531399053},{"_id":"public/2018/03/15/IPython入门/index.html","hash":"d43c386e449900bd099fa635df32a3f8bc83977f","modified":1521531399053},{"_id":"public/2018/03/13/Python文本处理/index.html","hash":"1ab354e39cd1ba522258f85f59b33ecabcd1e949","modified":1521531399053},{"_id":"public/2018/03/12/Web框架-Django/index.html","hash":"a2c39c628d237a37b303cb4d7cabe0c5b1d35833","modified":1521531399054},{"_id":"public/2018/03/08/CGI和WSGI/index.html","hash":"7a92b60199e414518d0c0cc923b26ccc94a0f42c","modified":1521531399054},{"_id":"public/2018/03/06/Python-Web客户端和服务器/index.html","hash":"fb9b44ca0d1e64844b182f0bc081c27823d8d41a","modified":1521531399054},{"_id":"public/2018/03/06/OFFICE转换工具/index.html","hash":"9c88ccf19d6112d724961be3343180830fbceaa6","modified":1521531399054},{"_id":"public/2018/03/04/全双工聊天室/index.html","hash":"f6628065fd12c5a7af566785aefb05dbce1eca0b","modified":1521531399054},{"_id":"public/2018/02/28/Python数据库编程-二/index.html","hash":"34228e2b4b021a881896a327079db2cbb9c5fc65","modified":1521531399054},{"_id":"public/2018/02/28/Python数据库编程-一/index.html","hash":"9892e68277a0565b799dee243c74aed7ff863c94","modified":1521531399054},{"_id":"public/2018/02/26/Python多线程-二/index.html","hash":"d2fbadf0841e6860e5427bd6f2a88241a04674f6","modified":1521531399054},{"_id":"public/2018/02/24/Python多线程-一/index.html","hash":"863aed40fe8103f3ca8c7f267d53fed898d36600","modified":1521531399054},{"_id":"public/2018/02/24/Python网络编程-二/index.html","hash":"208354aa90d34268fdaaeef95852be8e19bf82df","modified":1521531399055},{"_id":"public/2018/02/22/Python网络编程-一/index.html","hash":"5c20366866e96f091be59c945345c957e637eb69","modified":1521531399055},{"_id":"public/2018/02/12/Python正则表达式-三/index.html","hash":"ab96b5a60419cbb12ed3ba59d8e813915b37a42f","modified":1521531399055},{"_id":"public/2018/02/10/Python正则表达式-二/index.html","hash":"d803e76defdba014bc24ad388a1d16111fd2bc3f","modified":1521531399055},{"_id":"public/2018/02/09/Python正则表达式-一/index.html","hash":"a3bfe234b9dc2f2bed1a78003ff169ba476546a4","modified":1521531399055},{"_id":"public/archives/index.html","hash":"989e5aef8ea466aa9902a83a0216ca92b4ab65c1","modified":1521531399055},{"_id":"public/archives/page/2/index.html","hash":"02697039f653f68d6173adbca29b75d914519e3b","modified":1521531399055},{"_id":"public/archives/page/3/index.html","hash":"979ada82d4f77461aca64a11f22a49242e4a1328","modified":1521531399055},{"_id":"public/archives/2018/index.html","hash":"c1b9bb92adcf6acbacfb6b7273a22cbaad23323d","modified":1521531399055},{"_id":"public/archives/2018/page/2/index.html","hash":"c339cc65a96792c285d720bd215fc8e89ec5e253","modified":1521531399055},{"_id":"public/archives/2018/page/3/index.html","hash":"494136aa526fb1917920a4c7bacb9c5293a4123c","modified":1521531399055},{"_id":"public/archives/2018/02/index.html","hash":"cc29f25c43dab6e70722108db9e842612c51748f","modified":1521531399056},{"_id":"public/archives/2018/03/index.html","hash":"177c459abd78f9f8e2271640b3319789d2b84985","modified":1521531399056},{"_id":"public/archives/2018/03/page/2/index.html","hash":"b48454ea070d8240ec4efe42a609d2c7cae9bbb1","modified":1521531399056},{"_id":"public/categories/Python/index.html","hash":"1e7f436c1c7b845e634309f9a55d7080235429dc","modified":1521531399056},{"_id":"public/categories/Python/page/2/index.html","hash":"6101cd412e7faa7acaba7c789002739883b83fec","modified":1521531399056},{"_id":"public/categories/true/index.html","hash":"cccdccb2e20ef9424e8d9b1f29cd315dfaef7565","modified":1521531399056},{"_id":"public/index.html","hash":"e39f9e51c5835e3912a57ffd9c56000dfa635c75","modified":1521531399056},{"_id":"public/page/2/index.html","hash":"2a0ddb97a675492922ea8545006d4b057ff4411b","modified":1521531399056},{"_id":"public/page/3/index.html","hash":"e03823643b04c89411d69400d08dc164c7d1bbdf","modified":1521531399056},{"_id":"public/tags/Web编程/index.html","hash":"cb7d6299a23007c2727f807f3817144e5f9bd410","modified":1521531399056},{"_id":"public/tags/CGI/index.html","hash":"0d230197f0a5bd601260a45ada12c765a58084ed","modified":1521531399056},{"_id":"public/tags/WSGI/index.html","hash":"c4c3a2a60394270cf27a86cced6dc61202b20cf1","modified":1521531399057},{"_id":"public/tags/IPython/index.html","hash":"d01ddb3d7ccc39ff29d2b20ba8b3f84c46178b18","modified":1521531399057},{"_id":"public/tags/数据分析/index.html","hash":"ea62296c791d474c5d6525734773ddea0a6723b1","modified":1521531399057},{"_id":"public/tags/Python/index.html","hash":"8999b20d6ee51390afa0d7aa6f54bc4acc4c4fd4","modified":1521531399057},{"_id":"public/tags/Python/page/2/index.html","hash":"9268033ef7aaa554ca0c7f990cffd68f52d646ac","modified":1521531399057},{"_id":"public/tags/多线程/index.html","hash":"221f9af975579bd0f380c20bcb324b13af5594da","modified":1521531399057},{"_id":"public/tags/Web客户端和服务器/index.html","hash":"185050336629c995cac44458d2c6cdf41adb3e29","modified":1521531399057},{"_id":"public/tags/数据库编程/index.html","hash":"d26a3e94493d7cbf4e0c22bd9fd863c331953a2e","modified":1521531399057},{"_id":"public/tags/文本处理/index.html","hash":"1279c9e490aa94f9e059444ad8e76f4219a4cd2f","modified":1521531399057},{"_id":"public/tags/正则表达式/index.html","hash":"b330b2517eb980d603efeb72cab8e79eae0e73a1","modified":1521531399057},{"_id":"public/tags/网络编程/index.html","hash":"6136b1a6cad027f7f7832b99480807f1b382795f","modified":1521531399057},{"_id":"public/tags/NumPy/index.html","hash":"14786f6a0725f91829ad0241f4625b91c4072177","modified":1521531399057},{"_id":"public/tags/Web框架/index.html","hash":"c02803b282efa67e9ea44d483581b05907c5707d","modified":1521531399057},{"_id":"public/tags/Django/index.html","hash":"2d31757403c4182ed8f7b8653963947fae08d744","modified":1521531399058},{"_id":"public/tags/pandas/index.html","hash":"ca99da3576ab66d9cb58ce1e1461bdfdc9bd55dc","modified":1521531399058},{"_id":"public/tags/GUI/index.html","hash":"41f58cee5d821f5f3a25468ed7c2db331b7e4c1e","modified":1521531399058},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521531399073},{"_id":"public/CNAME","hash":"9bb16ec27c6fb3c9443c8a4796f626b8361991ec","modified":1521531399099},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1521531399099},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521531399099},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521531399099},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1521531399099},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1521531399099},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1521531399099},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1521531399099},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1521531399099},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1521531399099},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1521531399099},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521531399099},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521531399099},{"_id":"public/images/favicon.ico","hash":"afd7d4fc98251541ae276f6620db122ca7d057e3","modified":1521531399099},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521531399099},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1521531399099},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521531399099},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1521531399099},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521531399099},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1521531399099},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1521531399099},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1521531399099},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521531399099},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521531399099},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521531399099},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521531399099},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521531399099},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521531399099},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1521531399099},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1521531399099},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1521531399099},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1521531399099},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1521531399099},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1521531399099},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521531399099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521531400168},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521531400168},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521531400183},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521531400183},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1521531400183},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1521531400183},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521531400183},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521531400183},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1521531400183},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1521531400183},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521531400183},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521531400183},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1521531400183},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1521531400199},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1521531400199},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1521531400199},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1521531400199},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1521531400199},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1521531400199},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1521531400199},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1521531400199},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1521531400199},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1521531400199},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1521531400199},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1521531400199},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1521531400199},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1521531400199},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1521531400199},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521531400199},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1521531400199},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1521531400199},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521531400199},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521531400199},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521531400199},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1521531400199},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521531400199},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1521531400199},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1521531400199},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521531400199},{"_id":"public/css/main.css","hash":"5bd30cc58ecf9c41f3e6aae93604a72dc7fd0cfa","modified":1521531400199},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1521531400199},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1521531400199},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1521531400199},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1521531400199},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1521531400199},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521531400199},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521531400199},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521531400199},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1521531400199},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1521531400199},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1521531400199},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1521531400199},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1521531400199},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1521531400199},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521531400199},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521531400199},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1521531400199},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521531400199},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1521531400199},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1521531400199},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521531400199},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521531400199},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521531400199},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1521531400261}],"Category":[{"name":"Python","_id":"cjezchw3j0004twn9nzrp4cva"},{"name":"true","_id":"cjezchw3z0009twn94ncnsk9p"}],"Data":[],"Page":[{"title":"标签","date":"2018-02-10T09:40:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-10 17:40:02\ntype: \"tags\"\n---\n","updated":"2018-02-11T01:04:21.113Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjezchw3j0001twn9nlnjymyt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-02-10T09:37:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-10 17:37:47\ntype: \"categories\"\n---\n","updated":"2018-02-11T01:04:21.113Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjezchw3j0003twn9xv4zzh5p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CGI和WSGI","date":"2018-03-08T01:08:11.000Z","copyright":true,"description":"对Python Web编程的广泛概述，从Web浏览到创建用户反馈表单，从识别URL到生成动态Web页面。本文先介绍通用网关接口CGI然后是Web服务器网关接口WSGI。","_content":"## CGI\n这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用\n### CGI简介\n* **通用网关接口(Common Gateway Interface CGI)** 在Web服务器和应用之间充当了交互作用\n  1. Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序\n  2. Web服务器和客户端等待HTML页面\n  3. 应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户\n  4. 表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端\n 含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。*CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)*\n\n* CGI应用程序和和相关模块\n  1. CGI应用程序\n  CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 *请求(request)*。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。**用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间**。\n\n  2. cgi模块\n  cgi模块有一个主要类 *FieldStorage* 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。\n  这些值有三个对象：*FieldStorage* 对象；*MiniFieldStorage* 对象用在没有文件上传或mulitple-part格式数据的情况下，*MiniFieldStorage* 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。\n\n  3. cgitb模块\n  cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。\n\n### CGI应用程序\n>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们\n\n* CGI服务器\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom cgi import FieldStorage\nfrom os import environ\nfrom io import StringIO\nfrom urllib.parse import quote, unquote\n\n\nclass AdvCGI(object):\n    # 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量\n    header = 'Content-Type:text/html\\n\\n'\n    url = '/cgi-bin/advcgi.py'\n    # HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素\n    formhtml = '''\n        <HTML>\n            <HEAD>\n                <TITLE>Advanced CGI Demo</TITLE>\n            </HEAD>\n            <BODY>\n                <H2>Advanced CGI Demo</H2>\n                <FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'>\n                    <H3>My Cookie Setting</H3>\n                    <LI>\n                        <CODE><B>CPPuser = %s</B></CODE>\n                        <H3>Enter cookie value<BR>\n                            <INPUT NAME=cookie value='%s'/>(<I>optional</I>)\n                        </H3>\n                        <H3>Enter your name<BR>\n                            <INPUT NAME=person VALUE='%s'/>(<I>required</I>)\n                        </H3>\n                        <H3>What languages can you program in ?\n                        (<I>at least one required</I>)  \n                        </H3>\n                        %s\n                        <H3>Enter file to upload<SMALL>(max size 4k)</SMALL></H3>\n                        <INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45>\n                        <P><INPUT TYPE=submit />\n                    </LI>\n                </FORM>\n            </BODY>\n        </HTML>\n    '''\n    langset = ('Python', 'Java', 'C++', 'C', 'JavaScript')\n\n    langItem = '<INPUT TYPE=checkbox NAME=lang VALUE=\"%s\"%s> %s\\n'\n\n\n    def get_cpp_cookies(self):\n        \"\"\"\n        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器\n        :return:\n        \"\"\"\n        # 通过HTTP_COOKIE访问这些值\n        if 'HTTP_COOKIE' in environ:\n            cookies = [x.strip() for x in environ['HTTP_COOKIE'].split(';')]\n            for eachCookie in cookies:\n                # 寻找以CPP开头的字符串\n                # 只查找，名为“CPPuser”和“CPPinfo”的cookie值\n                if len(eachCookie) > 6 and eachCookie[:3] == 'CPP':\n                    # 去除索引8处的值进行计算，计算结果保存到Python对象中\n                    tag = eachCookie[3:7]\n                    try:\n                        # 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。\n                        self.cookies[tag] = eval(unquote(eachCookie[8:]))\n                    except (NameError, SyntaxError):\n                        self.cookies[tag] = unquote(eachCookie[8:])\n            # 如果这个cookie丢失，就给他指定一个空字符串\n            if 'info' not in self.cookies:\n                self.cookies['info'] = ''\n            if 'user' not in self.cookies:\n                self.cookies['user'] = ''\n        else:\n            self.cookies['info'] = self.cookies['user'] = ''\n\n        if self.cookies['info'] != '':\n            self.who, langstr, self.fn = self.cookies['info'].split(';')\n            self.langs = langstr.split(',')\n        else:\n            self.who = self.fn = ''\n            self.langs = ['Python']\n\n    def show_form(self):\n        \"\"\"\n        将表单显示给用户\n        :return:\n        \"\"\"\n        # 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式\n        self.get_cpp_cookies()\n\n        langstr = []\n        for eachLang in AdvCGI.langset:\n            langstr.append(AdvCGI.langItem % (\n                eachLang, ' CHECKED' if eachLang in self.langs else '', eachLang))\n\n        if not ('user' in self.cookies and self.cookies['user']):\n            cookstatus = '<I>(cookie has not been set yet)</I>'\n            usercook = ''\n        else:\n            usercook = cookstatus = self.cookies['user']\n\n        print('%s%s' % (AdvCGI.header, AdvCGI.formhtml % (\n            AdvCGI.url, cookstatus, usercook, self.who,\n            ''.join(langstr), self.fn)))\n\n    errhtml = '''\n            <HTML>\n                <HEAD>\n                    <TITLE>Advanced CGI Demo</TITLE>\n                </HEAD>\n                <BODY>\n                    <H3>ERROR</H3>\n                    <B>%s</B>\n                    <P>\n                    <FORM>\n                        <INPUT TYPE= button VALUE=Back ONCLICK=\"window.history.back()\"></INPUT>\n                    </FORM>\n                </BODY>\n            </HTML>\n    '''\n\n    def show_error(self):\n        \"\"\"\n        生成错误页面\n        :return:\n        \"\"\"\n        print('%s%s' % (AdvCGI.header, AdvCGI.errhtml % (self.error)))\n\n    reshtml = '''\n    <HTML>\n        <HEAD>\n            <TITLE>Advanced CGI Demo</TITLE>\n        </HEAD>\n        <BODY>\n            <H2>Your Uploaded Data</H2>\n            <H3>Your cookie value is: <B>%s</B></H3>\n            <H3>Your name is: <B>%s</B></H3>\n            <H3>You can program in the following languages:</H3>\n            <UL>%s</UL>\n            <H3>Your uploaded file...<BR>\n                Name: <I>%s</I><BR>\n                Contents:\n            </H3>\n            <PRE>%s</PRE>\n            Click <A HREF=\"%s\"><B>here</B></A> to return to form.\n        </BODY>\n    </HTML>'''\n\n    def set_cpp_cookies(self):\n        \"\"\"\n        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中\n        :return:\n        \"\"\"\n        for eachCookie in self.cookies:\n            print('Set-Cookie: CPP%s=%s; path=/' % (\n                eachCookie, quote(self.cookies[eachCookie])))\n\n    def doResult(self):\n        \"\"\"\n        生成结果页面\n        :return:\n        \"\"\"\n        MAXBYTES = 4096\n        langlist = ''.join('<LI>%s<BR>' % eachLang for eachLang in self.langs)\n        filedata = self.fp.read(MAXBYTES)\n        if len(filedata) == MAXBYTES and f.read():\n            filedata = '%s%s' % (filedata, '...<B><I>(file truncated due to size)</I></B>')\n        self.fp.close()\n\n        if filedata == '':\n            filedata = '<B><I>(file not give or upload error)</I></B>'\n        filename = self.fn\n\n        if not ('user' in self.cookies and self.cookies['user']):\n            cookstatus = '<I>(cookie has not been set yet)</I>'\n            usercook = ''\n        else:\n            usercook = cookstatus = self.cookies['user']\n\n        self.cookies['info'] = ':'.join((self.who, ','.join(self.langs), filename))\n        self.set_cpp_cookies()\n\n        print('%s%s' % (\n            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))\n\n    def go(self):\n        self.cookies = {}\n        self.error = ''\n        form = FieldStorage()\n        if not list(form.keys()):\n            self.show_form()\n            return\n\n        if 'person' in form:\n            print(form.keys())\n            self.who = form['person'].value.strip().title()\n            if self.who == '':\n                self.error = 'Your name is required.(blank)'\n        else:\n            self.error = 'Your name is required.(missing)'\n\n        self.cookies['user'] = unquote(form['cookie'].value.strip())\n                                                      if 'cookie' in form else ''\n\n        if 'lang' in form:\n            lang_data = form['lang']\n            if isinstance(lang_data, list):\n                self.langs = [eachLang.value for eachLang in lang_data]\n            else:\n                self.langs = [lang_data.value]\n        else:\n            self.error = 'At least one language required'\n\n        if 'upfile' in form:\n            upfile = form['upfile']\n            self.fn = upfile.filename or ''\n            if upfile.file:\n                self.fp = upfile.file\n            else:\n                self.fp = StringIO('(no data)')\n        else:\n            self.fp = StringIO('(no file)')\n            self.fn = ''\n\n        if not self.error:\n            self.doResult()\n        else:\n            self.show_error()\n\nif __name__ == '__main__':\n    page = AdvCGI()\n    page.go()\n\n```\n* 启动程序\n>将启动程序放在启动目录中，然后执行。\n\n```Python\n#!/usr/bin/python\n# -*- coding:UTF-8 -*-\n\nfrom http.server import CGIHTTPRequestHandler, test\n\nif __name__ == '__main__':\n    test(CGIHTTPRequestHandler)\n```\n[源代码](https://github.com/coldJune/Python/tree/master/web)\n## WSGI\n*WSGI*[^1] 是为了替代CGI而出现的。\n\n### 服务器集成和外部进程\n* 服务器集成\n服务器集成也叫 **服务器API**，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。\n服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。\n* 外部进程\n外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。\n因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。\n\n### WSGI简介\nWSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。\n根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。\n\n### WSGI服务器\n在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。\n\n[^1]:WSGI只是做一个简单的了解，可以结合框架一起看。\n","source":"_posts/CGI和WSGI.md","raw":"---\ntitle: CGI和WSGI\ndate: 2018-03-08 09:08:11\ncategories: Python\ncopyright: true\ntags:\n    - Web编程\n    - CGI\n    - WSGI\ndescription: 对Python Web编程的广泛概述，从Web浏览到创建用户反馈表单，从识别URL到生成动态Web页面。本文先介绍通用网关接口CGI然后是Web服务器网关接口WSGI。\n---\n## CGI\n这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用\n### CGI简介\n* **通用网关接口(Common Gateway Interface CGI)** 在Web服务器和应用之间充当了交互作用\n  1. Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序\n  2. Web服务器和客户端等待HTML页面\n  3. 应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户\n  4. 表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端\n 含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。*CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)*\n\n* CGI应用程序和和相关模块\n  1. CGI应用程序\n  CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 *请求(request)*。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。**用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间**。\n\n  2. cgi模块\n  cgi模块有一个主要类 *FieldStorage* 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。\n  这些值有三个对象：*FieldStorage* 对象；*MiniFieldStorage* 对象用在没有文件上传或mulitple-part格式数据的情况下，*MiniFieldStorage* 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。\n\n  3. cgitb模块\n  cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。\n\n### CGI应用程序\n>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们\n\n* CGI服务器\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom cgi import FieldStorage\nfrom os import environ\nfrom io import StringIO\nfrom urllib.parse import quote, unquote\n\n\nclass AdvCGI(object):\n    # 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量\n    header = 'Content-Type:text/html\\n\\n'\n    url = '/cgi-bin/advcgi.py'\n    # HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素\n    formhtml = '''\n        <HTML>\n            <HEAD>\n                <TITLE>Advanced CGI Demo</TITLE>\n            </HEAD>\n            <BODY>\n                <H2>Advanced CGI Demo</H2>\n                <FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'>\n                    <H3>My Cookie Setting</H3>\n                    <LI>\n                        <CODE><B>CPPuser = %s</B></CODE>\n                        <H3>Enter cookie value<BR>\n                            <INPUT NAME=cookie value='%s'/>(<I>optional</I>)\n                        </H3>\n                        <H3>Enter your name<BR>\n                            <INPUT NAME=person VALUE='%s'/>(<I>required</I>)\n                        </H3>\n                        <H3>What languages can you program in ?\n                        (<I>at least one required</I>)  \n                        </H3>\n                        %s\n                        <H3>Enter file to upload<SMALL>(max size 4k)</SMALL></H3>\n                        <INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45>\n                        <P><INPUT TYPE=submit />\n                    </LI>\n                </FORM>\n            </BODY>\n        </HTML>\n    '''\n    langset = ('Python', 'Java', 'C++', 'C', 'JavaScript')\n\n    langItem = '<INPUT TYPE=checkbox NAME=lang VALUE=\"%s\"%s> %s\\n'\n\n\n    def get_cpp_cookies(self):\n        \"\"\"\n        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器\n        :return:\n        \"\"\"\n        # 通过HTTP_COOKIE访问这些值\n        if 'HTTP_COOKIE' in environ:\n            cookies = [x.strip() for x in environ['HTTP_COOKIE'].split(';')]\n            for eachCookie in cookies:\n                # 寻找以CPP开头的字符串\n                # 只查找，名为“CPPuser”和“CPPinfo”的cookie值\n                if len(eachCookie) > 6 and eachCookie[:3] == 'CPP':\n                    # 去除索引8处的值进行计算，计算结果保存到Python对象中\n                    tag = eachCookie[3:7]\n                    try:\n                        # 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。\n                        self.cookies[tag] = eval(unquote(eachCookie[8:]))\n                    except (NameError, SyntaxError):\n                        self.cookies[tag] = unquote(eachCookie[8:])\n            # 如果这个cookie丢失，就给他指定一个空字符串\n            if 'info' not in self.cookies:\n                self.cookies['info'] = ''\n            if 'user' not in self.cookies:\n                self.cookies['user'] = ''\n        else:\n            self.cookies['info'] = self.cookies['user'] = ''\n\n        if self.cookies['info'] != '':\n            self.who, langstr, self.fn = self.cookies['info'].split(';')\n            self.langs = langstr.split(',')\n        else:\n            self.who = self.fn = ''\n            self.langs = ['Python']\n\n    def show_form(self):\n        \"\"\"\n        将表单显示给用户\n        :return:\n        \"\"\"\n        # 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式\n        self.get_cpp_cookies()\n\n        langstr = []\n        for eachLang in AdvCGI.langset:\n            langstr.append(AdvCGI.langItem % (\n                eachLang, ' CHECKED' if eachLang in self.langs else '', eachLang))\n\n        if not ('user' in self.cookies and self.cookies['user']):\n            cookstatus = '<I>(cookie has not been set yet)</I>'\n            usercook = ''\n        else:\n            usercook = cookstatus = self.cookies['user']\n\n        print('%s%s' % (AdvCGI.header, AdvCGI.formhtml % (\n            AdvCGI.url, cookstatus, usercook, self.who,\n            ''.join(langstr), self.fn)))\n\n    errhtml = '''\n            <HTML>\n                <HEAD>\n                    <TITLE>Advanced CGI Demo</TITLE>\n                </HEAD>\n                <BODY>\n                    <H3>ERROR</H3>\n                    <B>%s</B>\n                    <P>\n                    <FORM>\n                        <INPUT TYPE= button VALUE=Back ONCLICK=\"window.history.back()\"></INPUT>\n                    </FORM>\n                </BODY>\n            </HTML>\n    '''\n\n    def show_error(self):\n        \"\"\"\n        生成错误页面\n        :return:\n        \"\"\"\n        print('%s%s' % (AdvCGI.header, AdvCGI.errhtml % (self.error)))\n\n    reshtml = '''\n    <HTML>\n        <HEAD>\n            <TITLE>Advanced CGI Demo</TITLE>\n        </HEAD>\n        <BODY>\n            <H2>Your Uploaded Data</H2>\n            <H3>Your cookie value is: <B>%s</B></H3>\n            <H3>Your name is: <B>%s</B></H3>\n            <H3>You can program in the following languages:</H3>\n            <UL>%s</UL>\n            <H3>Your uploaded file...<BR>\n                Name: <I>%s</I><BR>\n                Contents:\n            </H3>\n            <PRE>%s</PRE>\n            Click <A HREF=\"%s\"><B>here</B></A> to return to form.\n        </BODY>\n    </HTML>'''\n\n    def set_cpp_cookies(self):\n        \"\"\"\n        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中\n        :return:\n        \"\"\"\n        for eachCookie in self.cookies:\n            print('Set-Cookie: CPP%s=%s; path=/' % (\n                eachCookie, quote(self.cookies[eachCookie])))\n\n    def doResult(self):\n        \"\"\"\n        生成结果页面\n        :return:\n        \"\"\"\n        MAXBYTES = 4096\n        langlist = ''.join('<LI>%s<BR>' % eachLang for eachLang in self.langs)\n        filedata = self.fp.read(MAXBYTES)\n        if len(filedata) == MAXBYTES and f.read():\n            filedata = '%s%s' % (filedata, '...<B><I>(file truncated due to size)</I></B>')\n        self.fp.close()\n\n        if filedata == '':\n            filedata = '<B><I>(file not give or upload error)</I></B>'\n        filename = self.fn\n\n        if not ('user' in self.cookies and self.cookies['user']):\n            cookstatus = '<I>(cookie has not been set yet)</I>'\n            usercook = ''\n        else:\n            usercook = cookstatus = self.cookies['user']\n\n        self.cookies['info'] = ':'.join((self.who, ','.join(self.langs), filename))\n        self.set_cpp_cookies()\n\n        print('%s%s' % (\n            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))\n\n    def go(self):\n        self.cookies = {}\n        self.error = ''\n        form = FieldStorage()\n        if not list(form.keys()):\n            self.show_form()\n            return\n\n        if 'person' in form:\n            print(form.keys())\n            self.who = form['person'].value.strip().title()\n            if self.who == '':\n                self.error = 'Your name is required.(blank)'\n        else:\n            self.error = 'Your name is required.(missing)'\n\n        self.cookies['user'] = unquote(form['cookie'].value.strip())\n                                                      if 'cookie' in form else ''\n\n        if 'lang' in form:\n            lang_data = form['lang']\n            if isinstance(lang_data, list):\n                self.langs = [eachLang.value for eachLang in lang_data]\n            else:\n                self.langs = [lang_data.value]\n        else:\n            self.error = 'At least one language required'\n\n        if 'upfile' in form:\n            upfile = form['upfile']\n            self.fn = upfile.filename or ''\n            if upfile.file:\n                self.fp = upfile.file\n            else:\n                self.fp = StringIO('(no data)')\n        else:\n            self.fp = StringIO('(no file)')\n            self.fn = ''\n\n        if not self.error:\n            self.doResult()\n        else:\n            self.show_error()\n\nif __name__ == '__main__':\n    page = AdvCGI()\n    page.go()\n\n```\n* 启动程序\n>将启动程序放在启动目录中，然后执行。\n\n```Python\n#!/usr/bin/python\n# -*- coding:UTF-8 -*-\n\nfrom http.server import CGIHTTPRequestHandler, test\n\nif __name__ == '__main__':\n    test(CGIHTTPRequestHandler)\n```\n[源代码](https://github.com/coldJune/Python/tree/master/web)\n## WSGI\n*WSGI*[^1] 是为了替代CGI而出现的。\n\n### 服务器集成和外部进程\n* 服务器集成\n服务器集成也叫 **服务器API**，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。\n服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。\n* 外部进程\n外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。\n因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。\n\n### WSGI简介\nWSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。\n根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。\n\n### WSGI服务器\n在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。\n\n[^1]:WSGI只是做一个简单的了解，可以结合框架一起看。\n","slug":"CGI和WSGI","published":1,"updated":"2018-03-09T01:50:14.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3b0000twn931fi1pxt","content":"<h2 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h2><p>这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用</p>\n<h3 id=\"CGI简介\"><a href=\"#CGI简介\" class=\"headerlink\" title=\"CGI简介\"></a>CGI简介</h3><ul>\n<li><p><strong>通用网关接口(Common Gateway Interface CGI)</strong> 在Web服务器和应用之间充当了交互作用</p>\n<ol>\n<li>Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序</li>\n<li>Web服务器和客户端等待HTML页面</li>\n<li>应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户</li>\n<li>表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端<br>含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。<em>CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)</em></li>\n</ol>\n</li>\n<li><p>CGI应用程序和和相关模块</p>\n<ol>\n<li><p>CGI应用程序<br>CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 <em>请求(request)</em>。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。<strong>用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间</strong>。</p>\n</li>\n<li><p>cgi模块<br>cgi模块有一个主要类 <em>FieldStorage</em> 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。<br>这些值有三个对象：<em>FieldStorage</em> 对象；<em>MiniFieldStorage</em> 对象用在没有文件上传或mulitple-part格式数据的情况下，<em>MiniFieldStorage</em> 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。</p>\n</li>\n<li><p>cgitb模块<br>cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"CGI应用程序\"><a href=\"#CGI应用程序\" class=\"headerlink\" title=\"CGI应用程序\"></a>CGI应用程序</h3><blockquote>\n<p>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们</p>\n</blockquote>\n<ul>\n<li>CGI服务器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> cgi <span class=\"keyword\">import</span> FieldStorage</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> environ</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> quote, unquote</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdvCGI</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量</span></span><br><span class=\"line\">    header = <span class=\"string\">'Content-Type:text/html\\n\\n'</span></span><br><span class=\"line\">    url = <span class=\"string\">'/cgi-bin/advcgi.py'</span></span><br><span class=\"line\">    <span class=\"comment\"># HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素</span></span><br><span class=\"line\">    formhtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;H2&gt;Advanced CGI Demo&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;H3&gt;My Cookie Setting&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;LI&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;CODE&gt;&lt;B&gt;CPPuser = %s&lt;/B&gt;&lt;/CODE&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter cookie value&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;INPUT NAME=cookie value='%s'/&gt;(&lt;I&gt;optional&lt;/I&gt;)</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter your name&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;INPUT NAME=person VALUE='%s'/&gt;(&lt;I&gt;required&lt;/I&gt;)</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;What languages can you program in ?</span></span><br><span class=\"line\"><span class=\"string\">                        (&lt;I&gt;at least one required&lt;/I&gt;)  </span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        %s</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter file to upload&lt;SMALL&gt;(max size 4k)&lt;/SMALL&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;P&gt;&lt;INPUT TYPE=submit /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/LI&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    langset = (<span class=\"string\">'Python'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'C++'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'JavaScript'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    langItem = <span class=\"string\">'&lt;INPUT TYPE=checkbox NAME=lang VALUE=\"%s\"%s&gt; %s\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpp_cookies</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过HTTP_COOKIE访问这些值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'HTTP_COOKIE'</span> <span class=\"keyword\">in</span> environ:</span><br><span class=\"line\">            cookies = [x.strip() <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> environ[<span class=\"string\">'HTTP_COOKIE'</span>].split(<span class=\"string\">';'</span>)]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> eachCookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\">                <span class=\"comment\"># 寻找以CPP开头的字符串</span></span><br><span class=\"line\">                <span class=\"comment\"># 只查找，名为“CPPuser”和“CPPinfo”的cookie值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> len(eachCookie) &gt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> eachCookie[:<span class=\"number\">3</span>] == <span class=\"string\">'CPP'</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 去除索引8处的值进行计算，计算结果保存到Python对象中</span></span><br><span class=\"line\">                    tag = eachCookie[<span class=\"number\">3</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        <span class=\"comment\"># 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。</span></span><br><span class=\"line\">                        self.cookies[tag] = eval(unquote(eachCookie[<span class=\"number\">8</span>:]))</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> (NameError, SyntaxError):</span><br><span class=\"line\">                        self.cookies[tag] = unquote(eachCookie[<span class=\"number\">8</span>:])</span><br><span class=\"line\">            <span class=\"comment\"># 如果这个cookie丢失，就给他指定一个空字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'info'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">                self.cookies[<span class=\"string\">'info'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'user'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">                self.cookies[<span class=\"string\">'user'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.cookies[<span class=\"string\">'info'</span>] = self.cookies[<span class=\"string\">'user'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cookies[<span class=\"string\">'info'</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">            self.who, langstr, self.fn = self.cookies[<span class=\"string\">'info'</span>].split(<span class=\"string\">';'</span>)</span><br><span class=\"line\">            self.langs = langstr.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.who = self.fn = <span class=\"string\">''</span></span><br><span class=\"line\">            self.langs = [<span class=\"string\">'Python'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_form</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        将表单显示给用户</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式</span></span><br><span class=\"line\">        self.get_cpp_cookies()</span><br><span class=\"line\"></span><br><span class=\"line\">        langstr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> AdvCGI.langset:</span><br><span class=\"line\">            langstr.append(AdvCGI.langItem % (</span><br><span class=\"line\">                eachLang, <span class=\"string\">' CHECKED'</span> <span class=\"keyword\">if</span> eachLang <span class=\"keyword\">in</span> self.langs <span class=\"keyword\">else</span> <span class=\"string\">''</span>, eachLang))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"string\">'user'</span> <span class=\"keyword\">in</span> self.cookies <span class=\"keyword\">and</span> self.cookies[<span class=\"string\">'user'</span>]):</span><br><span class=\"line\">            cookstatus = <span class=\"string\">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class=\"line\">            usercook = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            usercook = cookstatus = self.cookies[<span class=\"string\">'user'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (AdvCGI.header, AdvCGI.formhtml % (</span><br><span class=\"line\">            AdvCGI.url, cookstatus, usercook, self.who,</span><br><span class=\"line\">            <span class=\"string\">''</span>.join(langstr), self.fn)))</span><br><span class=\"line\"></span><br><span class=\"line\">    errhtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">            &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;B&gt;%s&lt;/B&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;INPUT TYPE= button VALUE=Back ONCLICK=\"window.history.back()\"&gt;&lt;/INPUT&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        生成错误页面</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (AdvCGI.header, AdvCGI.errhtml % (self.error)))</span><br><span class=\"line\"></span><br><span class=\"line\">    reshtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H2&gt;Your Uploaded Data&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your cookie value is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your name is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;You can program in the following languages:&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;UL&gt;%s&lt;/UL&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your uploaded file...&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                Name: &lt;I&gt;%s&lt;/I&gt;&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                Contents:</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;PRE&gt;%s&lt;/PRE&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Click &lt;A HREF=\"%s\"&gt;&lt;B&gt;here&lt;/B&gt;&lt;/A&gt; to return to form.</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/HTML&gt;'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_cpp_cookies</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> eachCookie <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">            print(<span class=\"string\">'Set-Cookie: CPP%s=%s; path=/'</span> % (</span><br><span class=\"line\">                eachCookie, quote(self.cookies[eachCookie])))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doResult</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        生成结果页面</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        MAXBYTES = <span class=\"number\">4096</span></span><br><span class=\"line\">        langlist = <span class=\"string\">''</span>.join(<span class=\"string\">'&lt;LI&gt;%s&lt;BR&gt;'</span> % eachLang <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> self.langs)</span><br><span class=\"line\">        filedata = self.fp.read(MAXBYTES)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(filedata) == MAXBYTES <span class=\"keyword\">and</span> f.read():</span><br><span class=\"line\">            filedata = <span class=\"string\">'%s%s'</span> % (filedata, <span class=\"string\">'...&lt;B&gt;&lt;I&gt;(file truncated due to size)&lt;/I&gt;&lt;/B&gt;'</span>)</span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> filedata == <span class=\"string\">''</span>:</span><br><span class=\"line\">            filedata = <span class=\"string\">'&lt;B&gt;&lt;I&gt;(file not give or upload error)&lt;/I&gt;&lt;/B&gt;'</span></span><br><span class=\"line\">        filename = self.fn</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"string\">'user'</span> <span class=\"keyword\">in</span> self.cookies <span class=\"keyword\">and</span> self.cookies[<span class=\"string\">'user'</span>]):</span><br><span class=\"line\">            cookstatus = <span class=\"string\">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class=\"line\">            usercook = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            usercook = cookstatus = self.cookies[<span class=\"string\">'user'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        self.cookies[<span class=\"string\">'info'</span>] = <span class=\"string\">':'</span>.join((self.who, <span class=\"string\">','</span>.join(self.langs), filename))</span><br><span class=\"line\">        self.set_cpp_cookies()</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (</span><br><span class=\"line\">            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">go</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.cookies = &#123;&#125;</span><br><span class=\"line\">        self.error = <span class=\"string\">''</span></span><br><span class=\"line\">        form = FieldStorage()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> list(form.keys()):</span><br><span class=\"line\">            self.show_form()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'person'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            print(form.keys())</span><br><span class=\"line\">            self.who = form[<span class=\"string\">'person'</span>].value.strip().title()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.who == <span class=\"string\">''</span>:</span><br><span class=\"line\">                self.error = <span class=\"string\">'Your name is required.(blank)'</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.error = <span class=\"string\">'Your name is required.(missing)'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.cookies[<span class=\"string\">'user'</span>] = unquote(form[<span class=\"string\">'cookie'</span>].value.strip())</span><br><span class=\"line\">                                                      <span class=\"keyword\">if</span> <span class=\"string\">'cookie'</span> <span class=\"keyword\">in</span> form <span class=\"keyword\">else</span> <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'lang'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            lang_data = form[<span class=\"string\">'lang'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(lang_data, list):</span><br><span class=\"line\">                self.langs = [eachLang.value <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> lang_data]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.langs = [lang_data.value]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.error = <span class=\"string\">'At least one language required'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'upfile'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            upfile = form[<span class=\"string\">'upfile'</span>]</span><br><span class=\"line\">            self.fn = upfile.filename <span class=\"keyword\">or</span> <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> upfile.file:</span><br><span class=\"line\">                self.fp = upfile.file</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.fp = StringIO(<span class=\"string\">'(no data)'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.fp = StringIO(<span class=\"string\">'(no file)'</span>)</span><br><span class=\"line\">            self.fn = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.error:</span><br><span class=\"line\">            self.doResult()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.show_error()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    page = AdvCGI()</span><br><span class=\"line\">    page.go()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动程序<blockquote>\n<p>将启动程序放在启动目录中，然后执行。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> http.server <span class=\"keyword\">import</span> CGIHTTPRequestHandler, test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test(CGIHTTPRequestHandler)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/web\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p><em>WSGI</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 是为了替代CGI而出现的。</p>\n<h3 id=\"服务器集成和外部进程\"><a href=\"#服务器集成和外部进程\" class=\"headerlink\" title=\"服务器集成和外部进程\"></a>服务器集成和外部进程</h3><ul>\n<li>服务器集成<br>服务器集成也叫 <strong>服务器API</strong>，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。<br>服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。</li>\n<li>外部进程<br>外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。<br>因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。</li>\n</ul>\n<h3 id=\"WSGI简介\"><a href=\"#WSGI简介\" class=\"headerlink\" title=\"WSGI简介\"></a>WSGI简介</h3><p>WSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。<br>根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。</p>\n<h3 id=\"WSGI服务器\"><a href=\"#WSGI服务器\" class=\"headerlink\" title=\"WSGI服务器\"></a>WSGI服务器</h3><p>在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">WSGI只是做一个简单的了解，可以结合框架一起看。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CGI\"><a href=\"#CGI\" class=\"headerlink\" title=\"CGI\"></a>CGI</h2><p>这里将会主要介绍CGI的含义、与Web服务器的工作方式，使用Python创建CGI应用</p>\n<h3 id=\"CGI简介\"><a href=\"#CGI简介\" class=\"headerlink\" title=\"CGI简介\"></a>CGI简介</h3><ul>\n<li><p><strong>通用网关接口(Common Gateway Interface CGI)</strong> 在Web服务器和应用之间充当了交互作用</p>\n<ol>\n<li>Web服务器从客户端接收到请求(GET或POST)，并调用相应的应用程序</li>\n<li>Web服务器和客户端等待HTML页面</li>\n<li>应用程序处理完成后将会生成动态的HTML页面返回服务器，服务器将这个结果返回给用户</li>\n<li>表单处理过程，服务器与外部应用程序交互，收到并生成的HTML页面通过CGI返回客户端<br>含有需要用户输入项(文本框、单选按钮等)、Submit按钮、图片的Web页面，都会涉及某种CGI活动。创建HTML的CGI应用程序通常是高级语言来实现的，可以接受、处理用户数据，向服务器端返回HTML页面。<em>CGI有明显的局限性，以及限制Web服务器同时处理客户端的数量。(CGI被抛弃的原因)</em></li>\n</ol>\n</li>\n<li><p>CGI应用程序和和相关模块</p>\n<ol>\n<li><p>CGI应用程序<br>CGI 应用程序和典型的应用程序主要区别在于输入、输出以及用户和程序的交互方面。当一个CGI脚本启动后，需要获得用户提供的表单数据，但这些数据必须从Web客户端才可以获得，这就是 <em>请求(request)</em>。与标准输出不同，这些输出将会发送回连接的Web客户端，而不是发送到屏幕、GUI窗口或者硬盘上。这些返回的数据必须是具有一系列有效头文件的HTML标签数据。<strong>用户和脚本之间没有任何交互，所有交互都发生在Web客户端(基于用户的行为)、Web服务器端和CGI应用程序间</strong>。</p>\n</li>\n<li><p>cgi模块<br>cgi模块有一个主要类 <em>FieldStorage</em> 完成了所有的工作。Python CGI脚本启动会实例化这个类，通过Web服务器从Web客户端读出相关的用户信息。在实例化完成后，其中会包含一个类似字典的对象，它具有一系列键值对。键就是通过表单传入的表单条目的名字，而值则包含响应的数据。<br>这些值有三个对象：<em>FieldStorage</em> 对象；<em>MiniFieldStorage</em> 对象用在没有文件上传或mulitple-part格式数据的情况下，<em>MiniFieldStorage</em> 实例只包含名称和数据的键值对；当表单中的某个字段有多个输入值时，还可以是这些对象的列表。</p>\n</li>\n<li><p>cgitb模块<br>cgitb模块用于在浏览器中看到Web应用程序的回溯信息，而不是“内部服务器错误”。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"CGI应用程序\"><a href=\"#CGI应用程序\" class=\"headerlink\" title=\"CGI应用程序\"></a>CGI应用程序</h3><blockquote>\n<p>再启动服务器的目录下创建一个cgi-bin目录，放入Python CGI脚本。将一些HTML文件放到启动服务器的目录中。确保启动服务器目录中有个cgi-bin目录，同时确保其中有相应的.py文件。否则服务器将会把Python文件作为静态文本返回而不是执行它们</p>\n</blockquote>\n<ul>\n<li>CGI服务器</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> cgi <span class=\"keyword\">import</span> FieldStorage</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> environ</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> quote, unquote</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdvCGI</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建header和url静态类变量，在显示不同页面的方法中会用到这些变量</span></span><br><span class=\"line\">    header = <span class=\"string\">'Content-Type:text/html\\n\\n'</span></span><br><span class=\"line\">    url = <span class=\"string\">'/cgi-bin/advcgi.py'</span></span><br><span class=\"line\">    <span class=\"comment\"># HTML静态文本表单，其中含有程序语言设置和每种语言的HTML元素</span></span><br><span class=\"line\">    formhtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;H2&gt;Advanced CGI Demo&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;FORM METHOD=post ACTION='%s' ENCTYPE='multipart/form-data'&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;H3&gt;My Cookie Setting&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;LI&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;CODE&gt;&lt;B&gt;CPPuser = %s&lt;/B&gt;&lt;/CODE&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter cookie value&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;INPUT NAME=cookie value='%s'/&gt;(&lt;I&gt;optional&lt;/I&gt;)</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter your name&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;INPUT NAME=person VALUE='%s'/&gt;(&lt;I&gt;required&lt;/I&gt;)</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;What languages can you program in ?</span></span><br><span class=\"line\"><span class=\"string\">                        (&lt;I&gt;at least one required&lt;/I&gt;)  </span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        %s</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;H3&gt;Enter file to upload&lt;SMALL&gt;(max size 4k)&lt;/SMALL&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;INPUT TYPE=file NAME=upfile VALUE='%s' SIZE=45&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;P&gt;&lt;INPUT TYPE=submit /&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/LI&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    langset = (<span class=\"string\">'Python'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'C++'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'JavaScript'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    langItem = <span class=\"string\">'&lt;INPUT TYPE=checkbox NAME=lang VALUE=\"%s\"%s&gt; %s\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cpp_cookies</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        当浏览器对应用进行连续调用时，将相同的cookie通过HTTP头发送回服务器</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过HTTP_COOKIE访问这些值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'HTTP_COOKIE'</span> <span class=\"keyword\">in</span> environ:</span><br><span class=\"line\">            cookies = [x.strip() <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> environ[<span class=\"string\">'HTTP_COOKIE'</span>].split(<span class=\"string\">';'</span>)]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> eachCookie <span class=\"keyword\">in</span> cookies:</span><br><span class=\"line\">                <span class=\"comment\"># 寻找以CPP开头的字符串</span></span><br><span class=\"line\">                <span class=\"comment\"># 只查找，名为“CPPuser”和“CPPinfo”的cookie值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> len(eachCookie) &gt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> eachCookie[:<span class=\"number\">3</span>] == <span class=\"string\">'CPP'</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 去除索引8处的值进行计算，计算结果保存到Python对象中</span></span><br><span class=\"line\">                    tag = eachCookie[<span class=\"number\">3</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        <span class=\"comment\"># 查看cookie负载，对于非法的Python对象，仅仅保存相应的字符串值。</span></span><br><span class=\"line\">                        self.cookies[tag] = eval(unquote(eachCookie[<span class=\"number\">8</span>:]))</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> (NameError, SyntaxError):</span><br><span class=\"line\">                        self.cookies[tag] = unquote(eachCookie[<span class=\"number\">8</span>:])</span><br><span class=\"line\">            <span class=\"comment\"># 如果这个cookie丢失，就给他指定一个空字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'info'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">                self.cookies[<span class=\"string\">'info'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'user'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">                self.cookies[<span class=\"string\">'user'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.cookies[<span class=\"string\">'info'</span>] = self.cookies[<span class=\"string\">'user'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cookies[<span class=\"string\">'info'</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">            self.who, langstr, self.fn = self.cookies[<span class=\"string\">'info'</span>].split(<span class=\"string\">';'</span>)</span><br><span class=\"line\">            self.langs = langstr.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.who = self.fn = <span class=\"string\">''</span></span><br><span class=\"line\">            self.langs = [<span class=\"string\">'Python'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_form</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        将表单显示给用户</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 从之前的请求中(如果有)获取cookie，并适当地调整表单的格式</span></span><br><span class=\"line\">        self.get_cpp_cookies()</span><br><span class=\"line\"></span><br><span class=\"line\">        langstr = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> AdvCGI.langset:</span><br><span class=\"line\">            langstr.append(AdvCGI.langItem % (</span><br><span class=\"line\">                eachLang, <span class=\"string\">' CHECKED'</span> <span class=\"keyword\">if</span> eachLang <span class=\"keyword\">in</span> self.langs <span class=\"keyword\">else</span> <span class=\"string\">''</span>, eachLang))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"string\">'user'</span> <span class=\"keyword\">in</span> self.cookies <span class=\"keyword\">and</span> self.cookies[<span class=\"string\">'user'</span>]):</span><br><span class=\"line\">            cookstatus = <span class=\"string\">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class=\"line\">            usercook = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            usercook = cookstatus = self.cookies[<span class=\"string\">'user'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (AdvCGI.header, AdvCGI.formhtml % (</span><br><span class=\"line\">            AdvCGI.url, cookstatus, usercook, self.who,</span><br><span class=\"line\">            <span class=\"string\">''</span>.join(langstr), self.fn)))</span><br><span class=\"line\"></span><br><span class=\"line\">    errhtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">            &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;B&gt;%s&lt;/B&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;INPUT TYPE= button VALUE=Back ONCLICK=\"window.history.back()\"&gt;&lt;/INPUT&gt;</span></span><br><span class=\"line\"><span class=\"string\">                    &lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        生成错误页面</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (AdvCGI.header, AdvCGI.errhtml % (self.error)))</span><br><span class=\"line\"></span><br><span class=\"line\">    reshtml = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    &lt;HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;TITLE&gt;Advanced CGI Demo&lt;/TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H2&gt;Your Uploaded Data&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your cookie value is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your name is: &lt;B&gt;%s&lt;/B&gt;&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;You can program in the following languages:&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;UL&gt;%s&lt;/UL&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;H3&gt;Your uploaded file...&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                Name: &lt;I&gt;%s&lt;/I&gt;&lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">                Contents:</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;PRE&gt;%s&lt;/PRE&gt;</span></span><br><span class=\"line\"><span class=\"string\">            Click &lt;A HREF=\"%s\"&gt;&lt;B&gt;here&lt;/B&gt;&lt;/A&gt; to return to form.</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/BODY&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/HTML&gt;'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_cpp_cookies</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        应用程序调用这个方法来发送cookie（从Web服务器）到浏览器，并存储在浏览器中</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> eachCookie <span class=\"keyword\">in</span> self.cookies:</span><br><span class=\"line\">            print(<span class=\"string\">'Set-Cookie: CPP%s=%s; path=/'</span> % (</span><br><span class=\"line\">                eachCookie, quote(self.cookies[eachCookie])))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doResult</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        生成结果页面</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        MAXBYTES = <span class=\"number\">4096</span></span><br><span class=\"line\">        langlist = <span class=\"string\">''</span>.join(<span class=\"string\">'&lt;LI&gt;%s&lt;BR&gt;'</span> % eachLang <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> self.langs)</span><br><span class=\"line\">        filedata = self.fp.read(MAXBYTES)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(filedata) == MAXBYTES <span class=\"keyword\">and</span> f.read():</span><br><span class=\"line\">            filedata = <span class=\"string\">'%s%s'</span> % (filedata, <span class=\"string\">'...&lt;B&gt;&lt;I&gt;(file truncated due to size)&lt;/I&gt;&lt;/B&gt;'</span>)</span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> filedata == <span class=\"string\">''</span>:</span><br><span class=\"line\">            filedata = <span class=\"string\">'&lt;B&gt;&lt;I&gt;(file not give or upload error)&lt;/I&gt;&lt;/B&gt;'</span></span><br><span class=\"line\">        filename = self.fn</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"string\">'user'</span> <span class=\"keyword\">in</span> self.cookies <span class=\"keyword\">and</span> self.cookies[<span class=\"string\">'user'</span>]):</span><br><span class=\"line\">            cookstatus = <span class=\"string\">'&lt;I&gt;(cookie has not been set yet)&lt;/I&gt;'</span></span><br><span class=\"line\">            usercook = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            usercook = cookstatus = self.cookies[<span class=\"string\">'user'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        self.cookies[<span class=\"string\">'info'</span>] = <span class=\"string\">':'</span>.join((self.who, <span class=\"string\">','</span>.join(self.langs), filename))</span><br><span class=\"line\">        self.set_cpp_cookies()</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">'%s%s'</span> % (</span><br><span class=\"line\">            AdvCGI.header, AdvCGI.reshtml % (cookstatus, self.who, langlist, filename, filedata, AdvCGI.url)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">go</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.cookies = &#123;&#125;</span><br><span class=\"line\">        self.error = <span class=\"string\">''</span></span><br><span class=\"line\">        form = FieldStorage()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> list(form.keys()):</span><br><span class=\"line\">            self.show_form()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'person'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            print(form.keys())</span><br><span class=\"line\">            self.who = form[<span class=\"string\">'person'</span>].value.strip().title()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.who == <span class=\"string\">''</span>:</span><br><span class=\"line\">                self.error = <span class=\"string\">'Your name is required.(blank)'</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.error = <span class=\"string\">'Your name is required.(missing)'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.cookies[<span class=\"string\">'user'</span>] = unquote(form[<span class=\"string\">'cookie'</span>].value.strip())</span><br><span class=\"line\">                                                      <span class=\"keyword\">if</span> <span class=\"string\">'cookie'</span> <span class=\"keyword\">in</span> form <span class=\"keyword\">else</span> <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'lang'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            lang_data = form[<span class=\"string\">'lang'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(lang_data, list):</span><br><span class=\"line\">                self.langs = [eachLang.value <span class=\"keyword\">for</span> eachLang <span class=\"keyword\">in</span> lang_data]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.langs = [lang_data.value]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.error = <span class=\"string\">'At least one language required'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'upfile'</span> <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">            upfile = form[<span class=\"string\">'upfile'</span>]</span><br><span class=\"line\">            self.fn = upfile.filename <span class=\"keyword\">or</span> <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> upfile.file:</span><br><span class=\"line\">                self.fp = upfile.file</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.fp = StringIO(<span class=\"string\">'(no data)'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.fp = StringIO(<span class=\"string\">'(no file)'</span>)</span><br><span class=\"line\">            self.fn = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.error:</span><br><span class=\"line\">            self.doResult()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.show_error()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    page = AdvCGI()</span><br><span class=\"line\">    page.go()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动程序<blockquote>\n<p>将启动程序放在启动目录中，然后执行。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> http.server <span class=\"keyword\">import</span> CGIHTTPRequestHandler, test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test(CGIHTTPRequestHandler)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/web\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p><em>WSGI</em><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 是为了替代CGI而出现的。</p>\n<h3 id=\"服务器集成和外部进程\"><a href=\"#服务器集成和外部进程\" class=\"headerlink\" title=\"服务器集成和外部进程\"></a>服务器集成和外部进程</h3><ul>\n<li>服务器集成<br>服务器集成也叫 <strong>服务器API</strong>，其针对CGI性能的解决方案是将网关集成进服务器，不是讲服务器切分成多个语言解释器来分别处理请求，而是生成函数调用，运行应用程序代码，在运行过程中进行响应。服务器根据对应的API通过一组预先创建的进程或线程处理工作。<br>服务器API的会使含有bug的代码影响服务器执行效率，不同语言的实现无法兼容，应用程序必须线程安全。</li>\n<li>外部进程<br>外部进程让CGI应用在服务器外部运行。当有请求进入时，服务器将这个请求传递到外部进程中。外部进程存在时间长，不是处理完单个请求后就终止，所以其扩展性比纯CGI好。<br>因为使用了不同的调用机制，所以造成开发者的负担，不仅要开发应用本省，还要决定于服务器的集成。</li>\n</ul>\n<h3 id=\"WSGI简介\"><a href=\"#WSGI简介\" class=\"headerlink\" title=\"WSGI简介\"></a>WSGI简介</h3><p>WSGI只是定义的一个接口，其目标是在Web服务器和Web框架层之间提供一个通用的API标准，减少之间的会操作性并形成统一的调用方式。<br>根据WSGI定义，其应用是可调用对象，其参数固定为：含有服务器环境变量的字典；可调用对象，该对象使用HTTP状态码和返回给客户端的HTTP头来初始化响应。</p>\n<h3 id=\"WSGI服务器\"><a href=\"#WSGI服务器\" class=\"headerlink\" title=\"WSGI服务器\"></a>WSGI服务器</h3><p>在服务器端，必须调用应用，传入环境变量和start_response()这个可调用对象，接着等待应用执行完毕。在执行完成后，必须获得返回的可迭代对象，将这些数据返回给客户端。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">WSGI只是做一个简单的了解，可以结合框架一起看。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"OFFICE转换工具","date":"2018-03-06T01:19:39.000Z","copyright":null,"description":null,"_content":"","source":"_posts/OFFICE转换工具.md","raw":"---\ntitle: OFFICE转换工具\ndate: 2018-03-06 09:19:39\ncategories:\ncopyright:\ntags:\ndescription:\n---\n","slug":"OFFICE转换工具","published":1,"updated":"2018-03-06T01:19:39.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3j0002twn9y0yifai7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"IPython入门","date":"2018-03-15T02:05:42.000Z","copyright":true,"description":"IPython有一个可以直接进行绘图的GUI控制台、一个基于Web的交互式笔记本，以及一个轻量级的快速并行计算引擎。","_content":"## IPython基础\n[IPython](https://ipython.org/)的环境需要自行安装。如果已经安装了Python，可以通过执行`pip install ipython`安装。然后只需要在命令行输入`ipython`就能启动：\n```\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n```\n可以在IPython中执行任何Python语句，和使用Python解释器一样：\n```\nIn [1]: import numpy as np\n\nIn [2]: from numpy.random import randn\n\nIn [3]: data = {i:randn() for i in range(10)}\n\nIn [4]: data\nOut[4]:\n{0: -0.24193324837938815,\n 1: 0.22563840475528563,\n 2: 0.14465306885873513,\n 3: 0.5076262433687561,\n 4: 0.9067731627966235,\n 5: 0.23827518072962814,\n 6: 0.3233586627456586,\n 7: 0.0327013232275763,\n 8: -0.357340429464286,\n 9: -1.4105691657079547}\n\nIn [5]:\n```\n许多Python对象都被格式化为可读性更好的形式\n\n### Tab键自动完成\n在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：\n```\nIn [5]: an_example1 = 15\n\nIn [6]: an_example2 = 20\n\nIn [7]: an<TAB>\n           an_example1               AnalogCommonProxyStub.dll\n           an_example2               and\n           any()\n```\n也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：\n```\nIn [7]: a = [1, 2, 3]\n\nIn [8]: a.<TAB>\n           append()  count()   insert()  reverse()\n           clear()   extend()  pop()     sort()\n           copy()    index()   remove()\n```\n应用在模块上:\n```\nIn [8]: import datetime\n\nIn [9]: datetime.\n                  date()        MAXYEAR       timedelta\n                  datetime      MINYEAR       timezone\n                  datetime_CAPI time()        tzinfo()\n```\nIPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。\nTab键还可以找出电脑文件系统中与之匹配的东西：\n```\nIn [6]: ca<TAB>\n           callable()\n           %%capture\n           catchLink/\n```\n其中 *catchLibk/* 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。\n\n### 内省\n在变量前面或者后面加上一个问号(**?**)就可以将有关该对象的一些通用信息显示:\n```\nIn [2]: b = []\n\nIn [3]: b?\nType:        list\nString form: []\nLength:      0\nDocstring:\nlist() -> new empty list\nlist(iterable) -> new list initialized from iterable's items\n```\n\n如果该对象是一个函数或实例方法，则其docstring也会被显示出来：\n```\nIn [4]: def add_number(a,b):\n   ...:     \"\"\"\n   ...:     Add two numbers together\n   ...:     Returns\n   ...:     -----------------------\n   ...:     the sum: type of arguments\n   ...:     \"\"\"\n   ...:     return a+b\n   ...:\n   ...:\n\nIn [5]: add_number?\nSignature: add_number(a, b)\nDocstring:\nAdd two numbers together\nReturns\n-----------------------\nthe sum: type of arguments\nFile:      d:\\python\\<ipython-input-4-7144b04645ed>\nType:      function\n\n\n```\n使用`??`还将显示源代码:\n```\nIn [6]: add_number??\nSignature: add_number(a, b)\nSource:\ndef add_number(a,b):\n    \"\"\"\n    Add two numbers together\n    Returns\n    -----------------------\n    the sum: type of arguments\n    \"\"\"\n    return a+b\nFile:      d:\\python\\<ipython-input-4-7144b04645ed>\nType:      function\n```\n`?`还可以搜索IPython的命名空间，一些字符再配以通配符(\\*)即可显示出所有与该通配符表达式相匹配的名称:\n```\nIn [7]: import numpy as np\n\nIn [8]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\nnp.pkgload\n```\n### %run命令\n在IPython会话环境中，所有文件都可以通过`%run`命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：\n```Python\n#!/usr/bin/python3\n# -*- coding:utf-8 -*-\n\n\ndef f(x, y, z):\n    return (x+y) /z\n\na = 1\nb = 2\nc = 3\nresult = f(a, b, c)\n\n```\n然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:\n```\nIn [9]: %run ipython_script_test.py\n\nIn [10]: result\nOut[10]: 1.0\n\nIn [11]: a\nOut[11]: 1\n\n```\n\n### 中断正在执行的代码\n任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。\n\n### 执行剪切板中的代码\n使用`%paste`和`%cpaste`两个魔术函数粘贴代码在shell中以整体执行：\n\n* %paste\n\n```\nIn [12]: %paste\ndef f(x, y, z):\n    return (x+y) /z\n\na = 1\nb = 2\nc = 3\nresult = f(a, b, c)\n## -- End pasted text --\n```\n* %cpaste\n\n相比于`%paste`，`%cpaste`多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：\n```\nIn [16]: %cpaste\nPasting code; enter '--' alone on the line to stop or use Ctrl-D.\n:def f(x, y, z):\n:    return (x+y) /z\n:\n:a = 1\n:b = 2\n:c = 3\n:result = f(a, b, c)\n:--\n```\n### 键盘快捷键\nIPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(**C指代Ctrl或control**)：\n\n|           命令            |                               说明                                |\n|:-------------------------:|:-----------------------------------------------------------------:|\n|        C-P或上箭头        |           后向搜索命令历史中以当前输入的文本开头的命令            |\n|        C-N或下箭头        |           前向搜索命令历史中以当前输入的文本开头的命令            |\n|            C-R            |                 按行读取的反向历史搜索(部分匹配)                  |\n| C-Shift-V/Command-Shift-V |                         从剪切板粘贴文本                          |\n|            C-C            |                      终止当前正在执行的代码                       |\n|            C-A            |                         将光标移动到行首                          |\n|            C-E            |                         将光标移动到行尾                          |\n|            C-K            |                    删除从光标开始至行尾的文本                     |\n|            C-U            | 清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本) |\n|            C-F            |                      将光标向前移动一个字符                       |\n|            C-b            |                      将光标向后移动一个字符                       |\n|            C-L            |                               清屏                                |\n\n### 异常和跟踪\n如果`%run`某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:\n```\nIn [17]: %run ipython_bug.py\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nD:\\Python\\ipython\\ipython_bug.py in <module>()\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nD:\\Python\\ipython\\ipython_bug.py in f(x, y, z)\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nZeroDivisionError: division by zero\n```\n\n### 魔术命令\nIPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 `%` 为前缀的命令。例如通过`%timeit`检测任何Python语句的执行时间:\n```\nIn [41]: a = np.random.randn(100,100)\n\nIn [42]: %timeit np.dot(a,a)\n237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n魔术命令可以看做运行于IPython系统中的命令行程序，使用`?`即可查看其选项:\n```\nIn [44]: %reset?\nDocstring:\nResets the namespace by removing all names defined by the user, if\ncalled without arguments, or by removing some types of objects, such\nas everything currently in IPython's In[] and Out[] containers (see\nthe parameters for details).\n\nParameters\n----------\n-f : force reset without asking for confirmation.\n\n-s : 'Soft' reset: Only clears your namespace, leaving history intact.\n    References to objects may be kept. By default (without this option),\n    we do a 'hard' reset, giving you a new session and removing all\n    references to objects from the current session.\n\nin : reset input history\n\nout : reset output history\n\ndhist : reset directory history\n\narray : reset only variables that are NumPy arrays\n\nSee Also\n--------\nreset_selective : invoked as ``%reset_selective``\n\nExamples\n--------\n::\n\n  In [6]: a = 1\n\n  In [7]: a\n  Out[7]: 1\n\n  In [8]: 'a' in _ip.user_ns\n  Out[8]: True\n```\n魔术命令可以不带百分号使用，只要没有定义与其同名的变量。\n\n* 常用的魔术命令\n\n|         命令         |                                   说明                                    |\n|:--------------------:|:-------------------------------------------------------------------------:|\n|      %quickref       |                           显示Python的快速参考                            |\n|        %magic        |                        显示所有魔术命令的详细文档                         |\n|        %debug        |                  从最新的异常跟踪的底部进入交互式调试器                   |\n|        %hist         |                       打印命令的输入(可选输出)历史                        |\n|         %pdb         |                        在异常发生后自动进入调试器                         |\n|        %paste        |                         执行剪切板中的Python代码                          |\n|       %cpaste        |             打开一个特殊提示符以便手工粘贴待执行的Python代码              |\n|        %reset        |                  删除interactive命名空间的全部变量/名称                   |\n|     %page OBJECT     |                         通过分页器打印输出OBJECT                          |\n|    %run script.py    |                     在IPython中执行一个Python脚本文件                     |\n|   %prun statement    |             通过cProfile执行statement，并打印分析器的输出结果             |\n|   %time statement    |                          报告statement的执行时间                          |\n|  %timeit statement   | 多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用 |\n| %who、%who_is、%whos |         显示interactive命名空间中定义的变量，信息级别/冗余度可变          |\n|    %xdel variable    |        删除variable，并参加过时清除其在IPython中的对象上的一切引用        |\n\n### matplotlib集成与pylab模式\n启动IPython时加上`--pylab`标记来集成matplotlib`ipython --pylab`。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过`%gui`对此进行手工设置。\n```\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nUsing matplotlib backend: TkAgg\n\nIn [1]:\n\n```\n\n## 使用命令历史\nIPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：\n\n1. 只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令\n2. 在会话间持久化命令历史\n3. 将输入/输出历史记录到日志文件\n\n### 搜索并重用命令历史\n如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。\n### 输入和输出变量\nIPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 `_`(一个下划线)和 `__`(两个下划线)变量中：\n```\nIn [6]: 1+1\nOut[6]: 2\n\nIn [7]: _\nOut[7]: 2\n\nIn [8]: _+1\nOut[8]: 3\n\nIn [9]: 3+1\nOut[9]: 4\n\nIn [10]: __\nOut[10]: 3\n```\n输入的文本保存在名为`_ix`的变量中，其中 **X** 是输入行的行号。每个输入变量都有一个对应的输出变量`_x`:\n```\nIn [11]: _i6\nOut[11]: '1+1'\n\nIn [12]: _6\nOut[12]: 2\n```\n由于输入变量是字符串，因此可以用Python的`exec()`方法重新执行:\n```\nIn [18]: exec(_i6)\n\nIn [19]: _\nOut[19]: '1+1'\n```\n有几个魔术命令可以用于控制输入和输出历史。`%hist`用于打印全部或部分输入历史，可以选择是否带行号。`%reset`用于清空interactive命名空间，并可选择是否清空输入和输出缓存。`%xdel`用于从IPython系统中移除特定对象的一切引用。\n### 记录输入和输出\nIPython能够记录整个控制台会话，包括输入和输出。执行`%logstart`即可开始记录日志：\n```\nIn [20]: %logstart\nActivating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n```\nIPython的日志功能可以在任何时刻开启。还有与`%logstart`配套的`%logoff`、`%logon`、`%logstate`和`%logstop`，可以参考其文档。\n### 与操作系统交互\n可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中\n\n* 跟系统相关的IPython魔术命令\n\n|         命令          |               说明               |\n|:---------------------:|:--------------------------------:|\n|         !cmd          |       在系统shell中执行cmd       |\n|   output=!cmd args    | 执行cmd，并将stout存放在output中 |\n| %alias alias_name cmd |     为系统shell命令定义别名      |\n|       %bookmark       |    使用IPython的目录书签系统     |\n|     %cd directory     |  将系统工作目录更改为directory   |\n|         %pwd          |      返回系统的当前工作目录      |\n|   %pushd directory    |  将当前目录入栈，并转向目标目录  |\n|         %popd         |    弹出栈顶目录，并转向该目录    |\n|         %dirs         |   返回一个含有当前目录栈的列表   |\n|        %dhist         |         打印目录访问历史         |\n|         %env          |    以dict形式返回系统环境变量    |\n\n#### shell命令和别名\n在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:\n```\nIn [23]: !python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n还可以将shell命令的控制台输出存放到变量中，只需将 `!` 开头的表达式赋值给变量:\n```\nIn [152]: ip_info = !ls\n\nIn [153]: ip_info\nOut[153]: ['experiment.py', 'ipython_bug.py', 'ipython_script_test.py']\n```\n\n## 软件开发工具\nIPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。\n### 交互式调试器\nIPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。`%debug`命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：\n```\nIn [45]: %run ipython_bug.py\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nD:\\Python\\ipython\\ipython_bug.py in <module>()\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nD:\\Python\\ipython\\ipython_bug.py in f(x, y, z)\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nZeroDivisionError: division by zero\n\nIn [46]: %debug\n> d:\\python\\ipython\\ipython_bug.py(2)f()\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n```\n在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入`u`(或up)和`d`(或down)即可在栈跟踪的各级别之间切换:\n```\nipdb> u\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nipdb> d\n> d:\\python\\ipython\\ipython_bug.py(2)f()\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n```\n执行`%pdp`命令可以让IPython在出现异常之后自动调用调试器。\n如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有`-d`选项的`%run`命令，这会在执行脚本文件中的代码之前打开调试器，然后输入`s`(或step)步进才能进入脚本:\n```\nIn [50]: %run -d ipython_bug.py\nBreakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to continue execution.\n> d:\\python\\ipython\\ipython_bug.py(1)<module>()\n1---> 1 def f(x, y, z):\n      2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(4)<module>()\n      2     return (x+y) /z\n      3\n----> 4 a = 1\n      5 b = 2\n      6 c = 0\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(5)<module>()\n      3\n      4 a = 1\n----> 5 b = 2\n      6 c = 0\n      7 result = f(a, b, c)\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(6)<module>()\n      3\n      4 a = 1\n      5 b = 2\n----> 6 c = 0\n      7 result = f(a, b, c)\n```\n通过`b num`在num行出设置断点，输入`c`(或continue)使脚本一直运行下去直到该断点时为止,然后输入`n`(或next)直到执行下一行(即step over):\n```\nIn [53]: %run -d ipython_bug.py\nBreakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to continue execution.\n> d:\\python\\ipython\\ipython_bug.py(1)<module>()\n1---> 1 def f(x, y, z):\n      2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nipdb> b 7\nBreakpoint 2 at d:\\python\\ipython\\ipython_bug.py:7\nipdb> c\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n\nipdb> n\nZeroDivisionError: division by zero\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n\nipdb> n\n--Return--\nNone\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n```\n* IPython调试器命令\n\n|           命令           |                     功能                     |\n|:------------------------:|:--------------------------------------------:|\n|          h(elp)          |                 显示命令列表                 |\n|       help command       |              显示command的文档               |\n|        c(ontinue)        |                恢复程序的执行                |\n|          q(uit)          |         退出调试器，不再执行任何代码         |\n|     b(readk) number      |      在当前文件的第number行设置一个断点      |\n| b path/to/file.py:number |      在指定文件的第number行设置一个断点      |\n|          s(tep)          |               单步进入函数调用               |\n|          n(ext)          |     执行当前行，并前进到当前级别的下一行     |\n|       u(p)/d(own)        |         在函数调用栈中向上或向下移动         |\n|          a(rgs)          |              显示当前函数的参数              |\n|     debug statement      |    在新的(递归)调试器中调用语句statement     |\n|    l(ist)  statement     |  显示当前行，以及当前栈级别的上下文参考代码  |\n|         w(here)          | 打印当前位置的完整栈跟踪(包括上下文参考代码) |\n\n### 测试代码的执行时间:%time和%timeit\n`%time`一次执行一条语句，然后报告总体执行时间\n```\nIn [56]: strings = ['foo','bar','abc','foobar','python','Guide Peple']*100000\n\nIn [57]: %time method1 = [x for x  in strings if x.startswith('foo')]\nWall time: 102 ms\n\nIn [58]: %time method2 = [x for x in strings if x[:3] == 'foo']\nWall time: 59.2 ms\n```\n\n`%timeit`对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间\n```\nIn [59]: %timeit method1 = [x for x  in strings if x.startswith('foo')]\n100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [60]: %timeit method2 = [x for x in strings if x[:3] == 'foo']\n57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n### 基本性能分析：%prun和%run -p\n代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。`%prun`分析的是Python语句而不是整个.py文件：\n```\nIn [141]: %cpaste\nPasting code; enter '--' alone on the line to stop or use Ctrl-D.\n:def run_experiment(niter=100):\n    k = 100\n    results = []\n    for _ in range(niter):\n        mat = np.random.randn(k, k)\n        max_eigenvalue = np.abs(eigvals(mat)).max()\n        results.append(max_eigenvalue)\n    return results:::::::\n:\n:--\n\nIn [142]: %prun -l 7 -s cumulative run_experiment()\n         3804 function calls in 0.901 seconds\n\n   Ordered by: cumulative time\n   List reduced from 31 to 7 due to restriction <7>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.901    0.901 {built-in method builtins.exec}\n        1    0.000    0.000    0.901    0.901 <string>:1(<module>)\n        1    0.002    0.002    0.901    0.901 <ipython-input-141-78ef833ef08b>:1(run_experiment)\n      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)\n      100    0.060    0.001    0.060    0.001 {method 'randn' of 'mtrand.RandomState' objects}\n      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)\n      300    0.008    0.000    0.008    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n\n```\n执行`%run -p -s cumulative experiment.py`也能达到以上的效果，无需退出IPython:\n```\nIn [75]: %run -p -l 7 -s cumulative experiment.py\nLargest one we saw:11.9165340849\n         3888 function calls (3887 primitive calls) in 0.467 seconds\n\n   Ordered by: cumulative time\n   List reduced from 77 to 7 due to restriction <7>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      2/1    0.000    0.000    0.467    0.467 {built-in method builtins.exec}\n        1    0.000    0.000    0.467    0.467 <string>:1(<module>)\n        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)\n        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)\n        1    0.000    0.000    0.467    0.467 experiment.py:1(<module>)\n        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)\n      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)\n```\n## ipython html notebook\n需要安装 *jupyter* 来使用该功能:\n```\npip3 install jupyter\n```\n这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：\n```\njupyter notebook\n```\n这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。\n","source":"_posts/IPython入门.md","raw":"---\ntitle: IPython入门\ndate: 2018-03-15 10:05:42\ncategories: true\ncopyright: true\ntags:\n    - IPython\n    - 数据分析\ndescription: IPython有一个可以直接进行绘图的GUI控制台、一个基于Web的交互式笔记本，以及一个轻量级的快速并行计算引擎。\n---\n## IPython基础\n[IPython](https://ipython.org/)的环境需要自行安装。如果已经安装了Python，可以通过执行`pip install ipython`安装。然后只需要在命令行输入`ipython`就能启动：\n```\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n```\n可以在IPython中执行任何Python语句，和使用Python解释器一样：\n```\nIn [1]: import numpy as np\n\nIn [2]: from numpy.random import randn\n\nIn [3]: data = {i:randn() for i in range(10)}\n\nIn [4]: data\nOut[4]:\n{0: -0.24193324837938815,\n 1: 0.22563840475528563,\n 2: 0.14465306885873513,\n 3: 0.5076262433687561,\n 4: 0.9067731627966235,\n 5: 0.23827518072962814,\n 6: 0.3233586627456586,\n 7: 0.0327013232275763,\n 8: -0.357340429464286,\n 9: -1.4105691657079547}\n\nIn [5]:\n```\n许多Python对象都被格式化为可读性更好的形式\n\n### Tab键自动完成\n在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：\n```\nIn [5]: an_example1 = 15\n\nIn [6]: an_example2 = 20\n\nIn [7]: an<TAB>\n           an_example1               AnalogCommonProxyStub.dll\n           an_example2               and\n           any()\n```\n也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：\n```\nIn [7]: a = [1, 2, 3]\n\nIn [8]: a.<TAB>\n           append()  count()   insert()  reverse()\n           clear()   extend()  pop()     sort()\n           copy()    index()   remove()\n```\n应用在模块上:\n```\nIn [8]: import datetime\n\nIn [9]: datetime.\n                  date()        MAXYEAR       timedelta\n                  datetime      MINYEAR       timezone\n                  datetime_CAPI time()        tzinfo()\n```\nIPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。\nTab键还可以找出电脑文件系统中与之匹配的东西：\n```\nIn [6]: ca<TAB>\n           callable()\n           %%capture\n           catchLink/\n```\n其中 *catchLibk/* 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。\n\n### 内省\n在变量前面或者后面加上一个问号(**?**)就可以将有关该对象的一些通用信息显示:\n```\nIn [2]: b = []\n\nIn [3]: b?\nType:        list\nString form: []\nLength:      0\nDocstring:\nlist() -> new empty list\nlist(iterable) -> new list initialized from iterable's items\n```\n\n如果该对象是一个函数或实例方法，则其docstring也会被显示出来：\n```\nIn [4]: def add_number(a,b):\n   ...:     \"\"\"\n   ...:     Add two numbers together\n   ...:     Returns\n   ...:     -----------------------\n   ...:     the sum: type of arguments\n   ...:     \"\"\"\n   ...:     return a+b\n   ...:\n   ...:\n\nIn [5]: add_number?\nSignature: add_number(a, b)\nDocstring:\nAdd two numbers together\nReturns\n-----------------------\nthe sum: type of arguments\nFile:      d:\\python\\<ipython-input-4-7144b04645ed>\nType:      function\n\n\n```\n使用`??`还将显示源代码:\n```\nIn [6]: add_number??\nSignature: add_number(a, b)\nSource:\ndef add_number(a,b):\n    \"\"\"\n    Add two numbers together\n    Returns\n    -----------------------\n    the sum: type of arguments\n    \"\"\"\n    return a+b\nFile:      d:\\python\\<ipython-input-4-7144b04645ed>\nType:      function\n```\n`?`还可以搜索IPython的命名空间，一些字符再配以通配符(\\*)即可显示出所有与该通配符表达式相匹配的名称:\n```\nIn [7]: import numpy as np\n\nIn [8]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\nnp.pkgload\n```\n### %run命令\n在IPython会话环境中，所有文件都可以通过`%run`命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：\n```Python\n#!/usr/bin/python3\n# -*- coding:utf-8 -*-\n\n\ndef f(x, y, z):\n    return (x+y) /z\n\na = 1\nb = 2\nc = 3\nresult = f(a, b, c)\n\n```\n然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:\n```\nIn [9]: %run ipython_script_test.py\n\nIn [10]: result\nOut[10]: 1.0\n\nIn [11]: a\nOut[11]: 1\n\n```\n\n### 中断正在执行的代码\n任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。\n\n### 执行剪切板中的代码\n使用`%paste`和`%cpaste`两个魔术函数粘贴代码在shell中以整体执行：\n\n* %paste\n\n```\nIn [12]: %paste\ndef f(x, y, z):\n    return (x+y) /z\n\na = 1\nb = 2\nc = 3\nresult = f(a, b, c)\n## -- End pasted text --\n```\n* %cpaste\n\n相比于`%paste`，`%cpaste`多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：\n```\nIn [16]: %cpaste\nPasting code; enter '--' alone on the line to stop or use Ctrl-D.\n:def f(x, y, z):\n:    return (x+y) /z\n:\n:a = 1\n:b = 2\n:c = 3\n:result = f(a, b, c)\n:--\n```\n### 键盘快捷键\nIPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(**C指代Ctrl或control**)：\n\n|           命令            |                               说明                                |\n|:-------------------------:|:-----------------------------------------------------------------:|\n|        C-P或上箭头        |           后向搜索命令历史中以当前输入的文本开头的命令            |\n|        C-N或下箭头        |           前向搜索命令历史中以当前输入的文本开头的命令            |\n|            C-R            |                 按行读取的反向历史搜索(部分匹配)                  |\n| C-Shift-V/Command-Shift-V |                         从剪切板粘贴文本                          |\n|            C-C            |                      终止当前正在执行的代码                       |\n|            C-A            |                         将光标移动到行首                          |\n|            C-E            |                         将光标移动到行尾                          |\n|            C-K            |                    删除从光标开始至行尾的文本                     |\n|            C-U            | 清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本) |\n|            C-F            |                      将光标向前移动一个字符                       |\n|            C-b            |                      将光标向后移动一个字符                       |\n|            C-L            |                               清屏                                |\n\n### 异常和跟踪\n如果`%run`某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:\n```\nIn [17]: %run ipython_bug.py\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nD:\\Python\\ipython\\ipython_bug.py in <module>()\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nD:\\Python\\ipython\\ipython_bug.py in f(x, y, z)\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nZeroDivisionError: division by zero\n```\n\n### 魔术命令\nIPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 `%` 为前缀的命令。例如通过`%timeit`检测任何Python语句的执行时间:\n```\nIn [41]: a = np.random.randn(100,100)\n\nIn [42]: %timeit np.dot(a,a)\n237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n魔术命令可以看做运行于IPython系统中的命令行程序，使用`?`即可查看其选项:\n```\nIn [44]: %reset?\nDocstring:\nResets the namespace by removing all names defined by the user, if\ncalled without arguments, or by removing some types of objects, such\nas everything currently in IPython's In[] and Out[] containers (see\nthe parameters for details).\n\nParameters\n----------\n-f : force reset without asking for confirmation.\n\n-s : 'Soft' reset: Only clears your namespace, leaving history intact.\n    References to objects may be kept. By default (without this option),\n    we do a 'hard' reset, giving you a new session and removing all\n    references to objects from the current session.\n\nin : reset input history\n\nout : reset output history\n\ndhist : reset directory history\n\narray : reset only variables that are NumPy arrays\n\nSee Also\n--------\nreset_selective : invoked as ``%reset_selective``\n\nExamples\n--------\n::\n\n  In [6]: a = 1\n\n  In [7]: a\n  Out[7]: 1\n\n  In [8]: 'a' in _ip.user_ns\n  Out[8]: True\n```\n魔术命令可以不带百分号使用，只要没有定义与其同名的变量。\n\n* 常用的魔术命令\n\n|         命令         |                                   说明                                    |\n|:--------------------:|:-------------------------------------------------------------------------:|\n|      %quickref       |                           显示Python的快速参考                            |\n|        %magic        |                        显示所有魔术命令的详细文档                         |\n|        %debug        |                  从最新的异常跟踪的底部进入交互式调试器                   |\n|        %hist         |                       打印命令的输入(可选输出)历史                        |\n|         %pdb         |                        在异常发生后自动进入调试器                         |\n|        %paste        |                         执行剪切板中的Python代码                          |\n|       %cpaste        |             打开一个特殊提示符以便手工粘贴待执行的Python代码              |\n|        %reset        |                  删除interactive命名空间的全部变量/名称                   |\n|     %page OBJECT     |                         通过分页器打印输出OBJECT                          |\n|    %run script.py    |                     在IPython中执行一个Python脚本文件                     |\n|   %prun statement    |             通过cProfile执行statement，并打印分析器的输出结果             |\n|   %time statement    |                          报告statement的执行时间                          |\n|  %timeit statement   | 多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用 |\n| %who、%who_is、%whos |         显示interactive命名空间中定义的变量，信息级别/冗余度可变          |\n|    %xdel variable    |        删除variable，并参加过时清除其在IPython中的对象上的一切引用        |\n\n### matplotlib集成与pylab模式\n启动IPython时加上`--pylab`标记来集成matplotlib`ipython --pylab`。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过`%gui`对此进行手工设置。\n```\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nUsing matplotlib backend: TkAgg\n\nIn [1]:\n\n```\n\n## 使用命令历史\nIPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：\n\n1. 只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令\n2. 在会话间持久化命令历史\n3. 将输入/输出历史记录到日志文件\n\n### 搜索并重用命令历史\n如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。\n### 输入和输出变量\nIPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 `_`(一个下划线)和 `__`(两个下划线)变量中：\n```\nIn [6]: 1+1\nOut[6]: 2\n\nIn [7]: _\nOut[7]: 2\n\nIn [8]: _+1\nOut[8]: 3\n\nIn [9]: 3+1\nOut[9]: 4\n\nIn [10]: __\nOut[10]: 3\n```\n输入的文本保存在名为`_ix`的变量中，其中 **X** 是输入行的行号。每个输入变量都有一个对应的输出变量`_x`:\n```\nIn [11]: _i6\nOut[11]: '1+1'\n\nIn [12]: _6\nOut[12]: 2\n```\n由于输入变量是字符串，因此可以用Python的`exec()`方法重新执行:\n```\nIn [18]: exec(_i6)\n\nIn [19]: _\nOut[19]: '1+1'\n```\n有几个魔术命令可以用于控制输入和输出历史。`%hist`用于打印全部或部分输入历史，可以选择是否带行号。`%reset`用于清空interactive命名空间，并可选择是否清空输入和输出缓存。`%xdel`用于从IPython系统中移除特定对象的一切引用。\n### 记录输入和输出\nIPython能够记录整个控制台会话，包括输入和输出。执行`%logstart`即可开始记录日志：\n```\nIn [20]: %logstart\nActivating auto-logging. Current session state plus future input saved.\nFilename       : ipython_log.py\nMode           : rotate\nOutput logging : False\nRaw input log  : False\nTimestamping   : False\nState          : active\n```\nIPython的日志功能可以在任何时刻开启。还有与`%logstart`配套的`%logoff`、`%logon`、`%logstate`和`%logstop`，可以参考其文档。\n### 与操作系统交互\n可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中\n\n* 跟系统相关的IPython魔术命令\n\n|         命令          |               说明               |\n|:---------------------:|:--------------------------------:|\n|         !cmd          |       在系统shell中执行cmd       |\n|   output=!cmd args    | 执行cmd，并将stout存放在output中 |\n| %alias alias_name cmd |     为系统shell命令定义别名      |\n|       %bookmark       |    使用IPython的目录书签系统     |\n|     %cd directory     |  将系统工作目录更改为directory   |\n|         %pwd          |      返回系统的当前工作目录      |\n|   %pushd directory    |  将当前目录入栈，并转向目标目录  |\n|         %popd         |    弹出栈顶目录，并转向该目录    |\n|         %dirs         |   返回一个含有当前目录栈的列表   |\n|        %dhist         |         打印目录访问历史         |\n|         %env          |    以dict形式返回系统环境变量    |\n\n#### shell命令和别名\n在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:\n```\nIn [23]: !python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n还可以将shell命令的控制台输出存放到变量中，只需将 `!` 开头的表达式赋值给变量:\n```\nIn [152]: ip_info = !ls\n\nIn [153]: ip_info\nOut[153]: ['experiment.py', 'ipython_bug.py', 'ipython_script_test.py']\n```\n\n## 软件开发工具\nIPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。\n### 交互式调试器\nIPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。`%debug`命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：\n```\nIn [45]: %run ipython_bug.py\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nD:\\Python\\ipython\\ipython_bug.py in <module>()\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nD:\\Python\\ipython\\ipython_bug.py in f(x, y, z)\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nZeroDivisionError: division by zero\n\nIn [46]: %debug\n> d:\\python\\ipython\\ipython_bug.py(2)f()\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n```\n在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入`u`(或up)和`d`(或down)即可在栈跟踪的各级别之间切换:\n```\nipdb> u\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n----> 7 result = f(a, b, c)\n\nipdb> d\n> d:\\python\\ipython\\ipython_bug.py(2)f()\n      1 def f(x, y, z):\n----> 2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n```\n执行`%pdp`命令可以让IPython在出现异常之后自动调用调试器。\n如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有`-d`选项的`%run`命令，这会在执行脚本文件中的代码之前打开调试器，然后输入`s`(或step)步进才能进入脚本:\n```\nIn [50]: %run -d ipython_bug.py\nBreakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to continue execution.\n> d:\\python\\ipython\\ipython_bug.py(1)<module>()\n1---> 1 def f(x, y, z):\n      2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(4)<module>()\n      2     return (x+y) /z\n      3\n----> 4 a = 1\n      5 b = 2\n      6 c = 0\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(5)<module>()\n      3\n      4 a = 1\n----> 5 b = 2\n      6 c = 0\n      7 result = f(a, b, c)\n\nipdb> s\n> d:\\python\\ipython\\ipython_bug.py(6)<module>()\n      3\n      4 a = 1\n      5 b = 2\n----> 6 c = 0\n      7 result = f(a, b, c)\n```\n通过`b num`在num行出设置断点，输入`c`(或continue)使脚本一直运行下去直到该断点时为止,然后输入`n`(或next)直到执行下一行(即step over):\n```\nIn [53]: %run -d ipython_bug.py\nBreakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to continue execution.\n> d:\\python\\ipython\\ipython_bug.py(1)<module>()\n1---> 1 def f(x, y, z):\n      2     return (x+y) /z\n      3\n      4 a = 1\n      5 b = 2\n\nipdb> b 7\nBreakpoint 2 at d:\\python\\ipython\\ipython_bug.py:7\nipdb> c\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n\nipdb> n\nZeroDivisionError: division by zero\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n\nipdb> n\n--Return--\nNone\n> d:\\python\\ipython\\ipython_bug.py(7)<module>()\n      3\n      4 a = 1\n      5 b = 2\n      6 c = 0\n2---> 7 result = f(a, b, c)\n```\n* IPython调试器命令\n\n|           命令           |                     功能                     |\n|:------------------------:|:--------------------------------------------:|\n|          h(elp)          |                 显示命令列表                 |\n|       help command       |              显示command的文档               |\n|        c(ontinue)        |                恢复程序的执行                |\n|          q(uit)          |         退出调试器，不再执行任何代码         |\n|     b(readk) number      |      在当前文件的第number行设置一个断点      |\n| b path/to/file.py:number |      在指定文件的第number行设置一个断点      |\n|          s(tep)          |               单步进入函数调用               |\n|          n(ext)          |     执行当前行，并前进到当前级别的下一行     |\n|       u(p)/d(own)        |         在函数调用栈中向上或向下移动         |\n|          a(rgs)          |              显示当前函数的参数              |\n|     debug statement      |    在新的(递归)调试器中调用语句statement     |\n|    l(ist)  statement     |  显示当前行，以及当前栈级别的上下文参考代码  |\n|         w(here)          | 打印当前位置的完整栈跟踪(包括上下文参考代码) |\n\n### 测试代码的执行时间:%time和%timeit\n`%time`一次执行一条语句，然后报告总体执行时间\n```\nIn [56]: strings = ['foo','bar','abc','foobar','python','Guide Peple']*100000\n\nIn [57]: %time method1 = [x for x  in strings if x.startswith('foo')]\nWall time: 102 ms\n\nIn [58]: %time method2 = [x for x in strings if x[:3] == 'foo']\nWall time: 59.2 ms\n```\n\n`%timeit`对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间\n```\nIn [59]: %timeit method1 = [x for x  in strings if x.startswith('foo')]\n100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [60]: %timeit method2 = [x for x in strings if x[:3] == 'foo']\n57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n### 基本性能分析：%prun和%run -p\n代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。`%prun`分析的是Python语句而不是整个.py文件：\n```\nIn [141]: %cpaste\nPasting code; enter '--' alone on the line to stop or use Ctrl-D.\n:def run_experiment(niter=100):\n    k = 100\n    results = []\n    for _ in range(niter):\n        mat = np.random.randn(k, k)\n        max_eigenvalue = np.abs(eigvals(mat)).max()\n        results.append(max_eigenvalue)\n    return results:::::::\n:\n:--\n\nIn [142]: %prun -l 7 -s cumulative run_experiment()\n         3804 function calls in 0.901 seconds\n\n   Ordered by: cumulative time\n   List reduced from 31 to 7 due to restriction <7>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.901    0.901 {built-in method builtins.exec}\n        1    0.000    0.000    0.901    0.901 <string>:1(<module>)\n        1    0.002    0.002    0.901    0.901 <ipython-input-141-78ef833ef08b>:1(run_experiment)\n      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)\n      100    0.060    0.001    0.060    0.001 {method 'randn' of 'mtrand.RandomState' objects}\n      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)\n      300    0.008    0.000    0.008    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n\n```\n执行`%run -p -s cumulative experiment.py`也能达到以上的效果，无需退出IPython:\n```\nIn [75]: %run -p -l 7 -s cumulative experiment.py\nLargest one we saw:11.9165340849\n         3888 function calls (3887 primitive calls) in 0.467 seconds\n\n   Ordered by: cumulative time\n   List reduced from 77 to 7 due to restriction <7>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      2/1    0.000    0.000    0.467    0.467 {built-in method builtins.exec}\n        1    0.000    0.000    0.467    0.467 <string>:1(<module>)\n        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)\n        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)\n        1    0.000    0.000    0.467    0.467 experiment.py:1(<module>)\n        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)\n      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)\n```\n## ipython html notebook\n需要安装 *jupyter* 来使用该功能:\n```\npip3 install jupyter\n```\n这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：\n```\njupyter notebook\n```\n这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。\n","slug":"IPython入门","published":1,"updated":"2018-03-16T00:36:45.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3z0006twn9e9su8cu5","content":"<h2 id=\"IPython基础\"><a href=\"#IPython基础\" class=\"headerlink\" title=\"IPython基础\"></a>IPython基础</h2><p><a href=\"https://ipython.org/\" target=\"_blank\" rel=\"noopener\">IPython</a>的环境需要自行安装。如果已经安装了Python，可以通过执行<code>pip install ipython</code>安装。然后只需要在命令行输入<code>ipython</code>就能启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<p>可以在IPython中执行任何Python语句，和使用Python解释器一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: from numpy.random import randn</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: data = &#123;i:randn() for i in range(10)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: data</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">&#123;0: -0.24193324837938815,</span><br><span class=\"line\"> 1: 0.22563840475528563,</span><br><span class=\"line\"> 2: 0.14465306885873513,</span><br><span class=\"line\"> 3: 0.5076262433687561,</span><br><span class=\"line\"> 4: 0.9067731627966235,</span><br><span class=\"line\"> 5: 0.23827518072962814,</span><br><span class=\"line\"> 6: 0.3233586627456586,</span><br><span class=\"line\"> 7: 0.0327013232275763,</span><br><span class=\"line\"> 8: -0.357340429464286,</span><br><span class=\"line\"> 9: -1.4105691657079547&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]:</span><br></pre></td></tr></table></figure></p>\n<p>许多Python对象都被格式化为可读性更好的形式</p>\n<h3 id=\"Tab键自动完成\"><a href=\"#Tab键自动完成\" class=\"headerlink\" title=\"Tab键自动完成\"></a>Tab键自动完成</h3><p>在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: an_example1 = 15</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: an_example2 = 20</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: an&lt;TAB&gt;</span><br><span class=\"line\">           an_example1               AnalogCommonProxyStub.dll</span><br><span class=\"line\">           an_example2               and</span><br><span class=\"line\">           any()</span><br></pre></td></tr></table></figure></p>\n<p>也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [7]: a = [1, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: a.&lt;TAB&gt;</span><br><span class=\"line\">           append()  count()   insert()  reverse()</span><br><span class=\"line\">           clear()   extend()  pop()     sort()</span><br><span class=\"line\">           copy()    index()   remove()</span><br></pre></td></tr></table></figure></p>\n<p>应用在模块上:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: datetime.</span><br><span class=\"line\">                  date()        MAXYEAR       timedelta</span><br><span class=\"line\">                  datetime      MINYEAR       timezone</span><br><span class=\"line\">                  datetime_CAPI time()        tzinfo()</span><br></pre></td></tr></table></figure></p>\n<p>IPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。<br>Tab键还可以找出电脑文件系统中与之匹配的东西：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: ca&lt;TAB&gt;</span><br><span class=\"line\">           callable()</span><br><span class=\"line\">           %%capture</span><br><span class=\"line\">           catchLink/</span><br></pre></td></tr></table></figure></p>\n<p>其中 <em>catchLibk/</em> 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>在变量前面或者后面加上一个问号(<strong>?</strong>)就可以将有关该对象的一些通用信息显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [2]: b = []</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: b?</span><br><span class=\"line\">Type:        list</span><br><span class=\"line\">String form: []</span><br><span class=\"line\">Length:      0</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">list() -&gt; new empty list</span><br><span class=\"line\">list(iterable) -&gt; new list initialized from iterable&apos;s items</span><br></pre></td></tr></table></figure></p>\n<p>如果该对象是一个函数或实例方法，则其docstring也会被显示出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: def add_number(a,b):</span><br><span class=\"line\">   ...:     &quot;&quot;&quot;</span><br><span class=\"line\">   ...:     Add two numbers together</span><br><span class=\"line\">   ...:     Returns</span><br><span class=\"line\">   ...:     -----------------------</span><br><span class=\"line\">   ...:     the sum: type of arguments</span><br><span class=\"line\">   ...:     &quot;&quot;&quot;</span><br><span class=\"line\">   ...:     return a+b</span><br><span class=\"line\">   ...:</span><br><span class=\"line\">   ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: add_number?</span><br><span class=\"line\">Signature: add_number(a, b)</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">Add two numbers together</span><br><span class=\"line\">Returns</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">the sum: type of arguments</span><br><span class=\"line\">File:      d:\\python\\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class=\"line\">Type:      function</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>??</code>还将显示源代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: add_number??</span><br><span class=\"line\">Signature: add_number(a, b)</span><br><span class=\"line\">Source:</span><br><span class=\"line\">def add_number(a,b):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Add two numbers together</span><br><span class=\"line\">    Returns</span><br><span class=\"line\">    -----------------------</span><br><span class=\"line\">    the sum: type of arguments</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    return a+b</span><br><span class=\"line\">File:      d:\\python\\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class=\"line\">Type:      function</span><br></pre></td></tr></table></figure></p>\n<p><code>?</code>还可以搜索IPython的命名空间，一些字符再配以通配符(*)即可显示出所有与该通配符表达式相匹配的名称:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [7]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: np.*load*?</span><br><span class=\"line\">np.__loader__</span><br><span class=\"line\">np.load</span><br><span class=\"line\">np.loads</span><br><span class=\"line\">np.loadtxt</span><br><span class=\"line\">np.pkgload</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"run命令\"><a href=\"#run命令\" class=\"headerlink\" title=\"%run命令\"></a>%run命令</h3><p>在IPython会话环境中，所有文件都可以通过<code>%run</code>命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x, y, z)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x+y) /z</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\">c = <span class=\"number\">3</span></span><br><span class=\"line\">result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<p>然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: %run ipython_script_test.py</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: result</span><br><span class=\"line\">Out[10]: 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: a</span><br><span class=\"line\">Out[11]: 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"中断正在执行的代码\"><a href=\"#中断正在执行的代码\" class=\"headerlink\" title=\"中断正在执行的代码\"></a>中断正在执行的代码</h3><p>任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。</p>\n<h3 id=\"执行剪切板中的代码\"><a href=\"#执行剪切板中的代码\" class=\"headerlink\" title=\"执行剪切板中的代码\"></a>执行剪切板中的代码</h3><p>使用<code>%paste</code>和<code>%cpaste</code>两个魔术函数粘贴代码在shell中以整体执行：</p>\n<ul>\n<li>%paste</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: %paste</span><br><span class=\"line\">def f(x, y, z):</span><br><span class=\"line\">    return (x+y) /z</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">c = 3</span><br><span class=\"line\">result = f(a, b, c)</span><br><span class=\"line\">## -- End pasted text --</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%cpaste</li>\n</ul>\n<p>相比于<code>%paste</code>，<code>%cpaste</code>多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [16]: %cpaste</span><br><span class=\"line\">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class=\"line\">:def f(x, y, z):</span><br><span class=\"line\">:    return (x+y) /z</span><br><span class=\"line\">:</span><br><span class=\"line\">:a = 1</span><br><span class=\"line\">:b = 2</span><br><span class=\"line\">:c = 3</span><br><span class=\"line\">:result = f(a, b, c)</span><br><span class=\"line\">:--</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"键盘快捷键\"><a href=\"#键盘快捷键\" class=\"headerlink\" title=\"键盘快捷键\"></a>键盘快捷键</h3><p>IPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(<strong>C指代Ctrl或control</strong>)：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-P或上箭头</td>\n<td style=\"text-align:center\">后向搜索命令历史中以当前输入的文本开头的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-N或下箭头</td>\n<td style=\"text-align:center\">前向搜索命令历史中以当前输入的文本开头的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-R</td>\n<td style=\"text-align:center\">按行读取的反向历史搜索(部分匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-Shift-V/Command-Shift-V</td>\n<td style=\"text-align:center\">从剪切板粘贴文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-C</td>\n<td style=\"text-align:center\">终止当前正在执行的代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-A</td>\n<td style=\"text-align:center\">将光标移动到行首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-E</td>\n<td style=\"text-align:center\">将光标移动到行尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-K</td>\n<td style=\"text-align:center\">删除从光标开始至行尾的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-U</td>\n<td style=\"text-align:center\">清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-F</td>\n<td style=\"text-align:center\">将光标向前移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-b</td>\n<td style=\"text-align:center\">将光标向后移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-L</td>\n<td style=\"text-align:center\">清屏</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"异常和跟踪\"><a href=\"#异常和跟踪\" class=\"headerlink\" title=\"异常和跟踪\"></a>异常和跟踪</h3><p>如果<code>%run</code>某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [17]: %run ipython_bug.py</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in &lt;module&gt;()</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in f(x, y, z)</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"魔术命令\"><a href=\"#魔术命令\" class=\"headerlink\" title=\"魔术命令\"></a>魔术命令</h3><p>IPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 <code>%</code> 为前缀的命令。例如通过<code>%timeit</code>检测任何Python语句的执行时间:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [41]: a = np.random.randn(100,100)</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: %timeit np.dot(a,a)</span><br><span class=\"line\">237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure></p>\n<p>魔术命令可以看做运行于IPython系统中的命令行程序，使用<code>?</code>即可查看其选项:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [44]: %reset?</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">Resets the namespace by removing all names defined by the user, if</span><br><span class=\"line\">called without arguments, or by removing some types of objects, such</span><br><span class=\"line\">as everything currently in IPython&apos;s In[] and Out[] containers (see</span><br><span class=\"line\">the parameters for details).</span><br><span class=\"line\"></span><br><span class=\"line\">Parameters</span><br><span class=\"line\">----------</span><br><span class=\"line\">-f : force reset without asking for confirmation.</span><br><span class=\"line\"></span><br><span class=\"line\">-s : &apos;Soft&apos; reset: Only clears your namespace, leaving history intact.</span><br><span class=\"line\">    References to objects may be kept. By default (without this option),</span><br><span class=\"line\">    we do a &apos;hard&apos; reset, giving you a new session and removing all</span><br><span class=\"line\">    references to objects from the current session.</span><br><span class=\"line\"></span><br><span class=\"line\">in : reset input history</span><br><span class=\"line\"></span><br><span class=\"line\">out : reset output history</span><br><span class=\"line\"></span><br><span class=\"line\">dhist : reset directory history</span><br><span class=\"line\"></span><br><span class=\"line\">array : reset only variables that are NumPy arrays</span><br><span class=\"line\"></span><br><span class=\"line\">See Also</span><br><span class=\"line\">--------</span><br><span class=\"line\">reset_selective : invoked as ``%reset_selective``</span><br><span class=\"line\"></span><br><span class=\"line\">Examples</span><br><span class=\"line\">--------</span><br><span class=\"line\">::</span><br><span class=\"line\"></span><br><span class=\"line\">  In [6]: a = 1</span><br><span class=\"line\"></span><br><span class=\"line\">  In [7]: a</span><br><span class=\"line\">  Out[7]: 1</span><br><span class=\"line\"></span><br><span class=\"line\">  In [8]: &apos;a&apos; in _ip.user_ns</span><br><span class=\"line\">  Out[8]: True</span><br></pre></td></tr></table></figure></p>\n<p>魔术命令可以不带百分号使用，只要没有定义与其同名的变量。</p>\n<ul>\n<li>常用的魔术命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%quickref</td>\n<td style=\"text-align:center\">显示Python的快速参考</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%magic</td>\n<td style=\"text-align:center\">显示所有魔术命令的详细文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%debug</td>\n<td style=\"text-align:center\">从最新的异常跟踪的底部进入交互式调试器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%hist</td>\n<td style=\"text-align:center\">打印命令的输入(可选输出)历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pdb</td>\n<td style=\"text-align:center\">在异常发生后自动进入调试器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%paste</td>\n<td style=\"text-align:center\">执行剪切板中的Python代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cpaste</td>\n<td style=\"text-align:center\">打开一个特殊提示符以便手工粘贴待执行的Python代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%reset</td>\n<td style=\"text-align:center\">删除interactive命名空间的全部变量/名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%page OBJECT</td>\n<td style=\"text-align:center\">通过分页器打印输出OBJECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%run script.py</td>\n<td style=\"text-align:center\">在IPython中执行一个Python脚本文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%prun statement</td>\n<td style=\"text-align:center\">通过cProfile执行statement，并打印分析器的输出结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%time statement</td>\n<td style=\"text-align:center\">报告statement的执行时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%timeit statement</td>\n<td style=\"text-align:center\">多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%who、%who_is、%whos</td>\n<td style=\"text-align:center\">显示interactive命名空间中定义的变量，信息级别/冗余度可变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%xdel variable</td>\n<td style=\"text-align:center\">删除variable，并参加过时清除其在IPython中的对象上的一切引用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"matplotlib集成与pylab模式\"><a href=\"#matplotlib集成与pylab模式\" class=\"headerlink\" title=\"matplotlib集成与pylab模式\"></a>matplotlib集成与pylab模式</h3><p>启动IPython时加上<code>--pylab</code>标记来集成matplotlib<code>ipython --pylab</code>。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过<code>%gui</code>对此进行手工设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\">Using matplotlib backend: TkAgg</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用命令历史\"><a href=\"#使用命令历史\" class=\"headerlink\" title=\"使用命令历史\"></a>使用命令历史</h2><p>IPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：</p>\n<ol>\n<li>只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令</li>\n<li>在会话间持久化命令历史</li>\n<li>将输入/输出历史记录到日志文件</li>\n</ol>\n<h3 id=\"搜索并重用命令历史\"><a href=\"#搜索并重用命令历史\" class=\"headerlink\" title=\"搜索并重用命令历史\"></a>搜索并重用命令历史</h3><p>如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。</p>\n<h3 id=\"输入和输出变量\"><a href=\"#输入和输出变量\" class=\"headerlink\" title=\"输入和输出变量\"></a>输入和输出变量</h3><p>IPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 <code>_</code>(一个下划线)和 <code>__</code>(两个下划线)变量中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: 1+1</span><br><span class=\"line\">Out[6]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: _</span><br><span class=\"line\">Out[7]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: _+1</span><br><span class=\"line\">Out[8]: 3</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: 3+1</span><br><span class=\"line\">Out[9]: 4</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: __</span><br><span class=\"line\">Out[10]: 3</span><br></pre></td></tr></table></figure></p>\n<p>输入的文本保存在名为<code>_ix</code>的变量中，其中 <strong>X</strong> 是输入行的行号。每个输入变量都有一个对应的输出变量<code>_x</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: _i6</span><br><span class=\"line\">Out[11]: &apos;1+1&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: _6</span><br><span class=\"line\">Out[12]: 2</span><br></pre></td></tr></table></figure></p>\n<p>由于输入变量是字符串，因此可以用Python的<code>exec()</code>方法重新执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: exec(_i6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: _</span><br><span class=\"line\">Out[19]: &apos;1+1&apos;</span><br></pre></td></tr></table></figure></p>\n<p>有几个魔术命令可以用于控制输入和输出历史。<code>%hist</code>用于打印全部或部分输入历史，可以选择是否带行号。<code>%reset</code>用于清空interactive命名空间，并可选择是否清空输入和输出缓存。<code>%xdel</code>用于从IPython系统中移除特定对象的一切引用。</p>\n<h3 id=\"记录输入和输出\"><a href=\"#记录输入和输出\" class=\"headerlink\" title=\"记录输入和输出\"></a>记录输入和输出</h3><p>IPython能够记录整个控制台会话，包括输入和输出。执行<code>%logstart</code>即可开始记录日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: %logstart</span><br><span class=\"line\">Activating auto-logging. Current session state plus future input saved.</span><br><span class=\"line\">Filename       : ipython_log.py</span><br><span class=\"line\">Mode           : rotate</span><br><span class=\"line\">Output logging : False</span><br><span class=\"line\">Raw input log  : False</span><br><span class=\"line\">Timestamping   : False</span><br><span class=\"line\">State          : active</span><br></pre></td></tr></table></figure></p>\n<p>IPython的日志功能可以在任何时刻开启。还有与<code>%logstart</code>配套的<code>%logoff</code>、<code>%logon</code>、<code>%logstate</code>和<code>%logstop</code>，可以参考其文档。</p>\n<h3 id=\"与操作系统交互\"><a href=\"#与操作系统交互\" class=\"headerlink\" title=\"与操作系统交互\"></a>与操作系统交互</h3><p>可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中</p>\n<ul>\n<li>跟系统相关的IPython魔术命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">!cmd</td>\n<td style=\"text-align:center\">在系统shell中执行cmd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">output=!cmd args</td>\n<td style=\"text-align:center\">执行cmd，并将stout存放在output中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%alias alias_name cmd</td>\n<td style=\"text-align:center\">为系统shell命令定义别名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%bookmark</td>\n<td style=\"text-align:center\">使用IPython的目录书签系统</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cd directory</td>\n<td style=\"text-align:center\">将系统工作目录更改为directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pwd</td>\n<td style=\"text-align:center\">返回系统的当前工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pushd directory</td>\n<td style=\"text-align:center\">将当前目录入栈，并转向目标目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%popd</td>\n<td style=\"text-align:center\">弹出栈顶目录，并转向该目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%dirs</td>\n<td style=\"text-align:center\">返回一个含有当前目录栈的列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%dhist</td>\n<td style=\"text-align:center\">打印目录访问历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%env</td>\n<td style=\"text-align:center\">以dict形式返回系统环境变量</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"shell命令和别名\"><a href=\"#shell命令和别名\" class=\"headerlink\" title=\"shell命令和别名\"></a>shell命令和别名</h4><p>在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: !python</span><br><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>还可以将shell命令的控制台输出存放到变量中，只需将 <code>!</code> 开头的表达式赋值给变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [152]: ip_info = !ls</span><br><span class=\"line\"></span><br><span class=\"line\">In [153]: ip_info</span><br><span class=\"line\">Out[153]: [&apos;experiment.py&apos;, &apos;ipython_bug.py&apos;, &apos;ipython_script_test.py&apos;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"软件开发工具\"><a href=\"#软件开发工具\" class=\"headerlink\" title=\"软件开发工具\"></a>软件开发工具</h2><p>IPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。</p>\n<h3 id=\"交互式调试器\"><a href=\"#交互式调试器\" class=\"headerlink\" title=\"交互式调试器\"></a>交互式调试器</h3><p>IPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。<code>%debug</code>命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [45]: %run ipython_bug.py</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in &lt;module&gt;()</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in f(x, y, z)</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: %debug</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(2)f()</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br></pre></td></tr></table></figure></p>\n<p>在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入<code>u</code>(或up)和<code>d</code>(或down)即可在栈跟踪的各级别之间切换:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipdb&gt; u</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; d</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(2)f()</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>%pdp</code>命令可以让IPython在出现异常之后自动调用调试器。<br>如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有<code>-d</code>选项的<code>%run</code>命令，这会在执行脚本文件中的代码之前打开调试器，然后输入<code>s</code>(或step)步进才能进入脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [50]: %run -d ipython_bug.py</span><br><span class=\"line\">Breakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1</span><br><span class=\"line\">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(1)&lt;module&gt;()</span><br><span class=\"line\">1---&gt; 1 def f(x, y, z):</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(4)&lt;module&gt;()</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">----&gt; 4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(5)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">----&gt; 5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">      7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(6)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">----&gt; 6 c = 0</span><br><span class=\"line\">      7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>b num</code>在num行出设置断点，输入<code>c</code>(或continue)使脚本一直运行下去直到该断点时为止,然后输入<code>n</code>(或next)直到执行下一行(即step over):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [53]: %run -d ipython_bug.py</span><br><span class=\"line\">Breakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1</span><br><span class=\"line\">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(1)&lt;module&gt;()</span><br><span class=\"line\">1---&gt; 1 def f(x, y, z):</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; b 7</span><br><span class=\"line\">Breakpoint 2 at d:\\python\\ipython\\ipython_bug.py:7</span><br><span class=\"line\">ipdb&gt; c</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; n</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; n</span><br><span class=\"line\">--Return--</span><br><span class=\"line\">None</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>IPython调试器命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">h(elp)</td>\n<td style=\"text-align:center\">显示命令列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">help command</td>\n<td style=\"text-align:center\">显示command的文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c(ontinue)</td>\n<td style=\"text-align:center\">恢复程序的执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q(uit)</td>\n<td style=\"text-align:center\">退出调试器，不再执行任何代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b(readk) number</td>\n<td style=\"text-align:center\">在当前文件的第number行设置一个断点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b path/to/file.py:number</td>\n<td style=\"text-align:center\">在指定文件的第number行设置一个断点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s(tep)</td>\n<td style=\"text-align:center\">单步进入函数调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n(ext)</td>\n<td style=\"text-align:center\">执行当前行，并前进到当前级别的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u(p)/d(own)</td>\n<td style=\"text-align:center\">在函数调用栈中向上或向下移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(rgs)</td>\n<td style=\"text-align:center\">显示当前函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">debug statement</td>\n<td style=\"text-align:center\">在新的(递归)调试器中调用语句statement</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l(ist)  statement</td>\n<td style=\"text-align:center\">显示当前行，以及当前栈级别的上下文参考代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w(here)</td>\n<td style=\"text-align:center\">打印当前位置的完整栈跟踪(包括上下文参考代码)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测试代码的执行时间-time和-timeit\"><a href=\"#测试代码的执行时间-time和-timeit\" class=\"headerlink\" title=\"测试代码的执行时间:%time和%timeit\"></a>测试代码的执行时间:%time和%timeit</h3><p><code>%time</code>一次执行一条语句，然后报告总体执行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [56]: strings = [&apos;foo&apos;,&apos;bar&apos;,&apos;abc&apos;,&apos;foobar&apos;,&apos;python&apos;,&apos;Guide Peple&apos;]*100000</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: %time method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class=\"line\">Wall time: 102 ms</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: %time method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class=\"line\">Wall time: 59.2 ms</span><br></pre></td></tr></table></figure></p>\n<p><code>%timeit</code>对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [59]: %timeit method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class=\"line\">100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: %timeit method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class=\"line\">57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本性能分析：-prun和-run-p\"><a href=\"#基本性能分析：-prun和-run-p\" class=\"headerlink\" title=\"基本性能分析：%prun和%run -p\"></a>基本性能分析：%prun和%run -p</h3><p>代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。<code>%prun</code>分析的是Python语句而不是整个.py文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [141]: %cpaste</span><br><span class=\"line\">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class=\"line\">:def run_experiment(niter=100):</span><br><span class=\"line\">    k = 100</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    for _ in range(niter):</span><br><span class=\"line\">        mat = np.random.randn(k, k)</span><br><span class=\"line\">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class=\"line\">        results.append(max_eigenvalue)</span><br><span class=\"line\">    return results:::::::</span><br><span class=\"line\">:</span><br><span class=\"line\">:--</span><br><span class=\"line\"></span><br><span class=\"line\">In [142]: %prun -l 7 -s cumulative run_experiment()</span><br><span class=\"line\">         3804 function calls in 0.901 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">   Ordered by: cumulative time</span><br><span class=\"line\">   List reduced from 31 to 7 due to restriction &lt;7&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class=\"line\">        1    0.000    0.000    0.901    0.901 &#123;built-in method builtins.exec&#125;</span><br><span class=\"line\">        1    0.000    0.000    0.901    0.901 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.002    0.002    0.901    0.901 &lt;ipython-input-141-78ef833ef08b&gt;:1(run_experiment)</span><br><span class=\"line\">      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)</span><br><span class=\"line\">      100    0.060    0.001    0.060    0.001 &#123;method &apos;randn&apos; of &apos;mtrand.RandomState&apos; objects&#125;</span><br><span class=\"line\">      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)</span><br><span class=\"line\">      300    0.008    0.000    0.008    0.000 &#123;method &apos;reduce&apos; of &apos;numpy.ufunc&apos; objects&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>%run -p -s cumulative experiment.py</code>也能达到以上的效果，无需退出IPython:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [75]: %run -p -l 7 -s cumulative experiment.py</span><br><span class=\"line\">Largest one we saw:11.9165340849</span><br><span class=\"line\">         3888 function calls (3887 primitive calls) in 0.467 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">   Ordered by: cumulative time</span><br><span class=\"line\">   List reduced from 77 to 7 due to restriction &lt;7&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class=\"line\">      2/1    0.000    0.000    0.467    0.467 &#123;built-in method builtins.exec&#125;</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 experiment.py:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)</span><br><span class=\"line\">      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ipython-html-notebook\"><a href=\"#ipython-html-notebook\" class=\"headerlink\" title=\"ipython html notebook\"></a>ipython html notebook</h2><p>需要安装 <em>jupyter</em> 来使用该功能:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install jupyter</span><br></pre></td></tr></table></figure></p>\n<p>这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook</span><br></pre></td></tr></table></figure></p>\n<p>这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IPython基础\"><a href=\"#IPython基础\" class=\"headerlink\" title=\"IPython基础\"></a>IPython基础</h2><p><a href=\"https://ipython.org/\" target=\"_blank\" rel=\"noopener\">IPython</a>的环境需要自行安装。如果已经安装了Python，可以通过执行<code>pip install ipython</code>安装。然后只需要在命令行输入<code>ipython</code>就能启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<p>可以在IPython中执行任何Python语句，和使用Python解释器一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: from numpy.random import randn</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: data = &#123;i:randn() for i in range(10)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: data</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">&#123;0: -0.24193324837938815,</span><br><span class=\"line\"> 1: 0.22563840475528563,</span><br><span class=\"line\"> 2: 0.14465306885873513,</span><br><span class=\"line\"> 3: 0.5076262433687561,</span><br><span class=\"line\"> 4: 0.9067731627966235,</span><br><span class=\"line\"> 5: 0.23827518072962814,</span><br><span class=\"line\"> 6: 0.3233586627456586,</span><br><span class=\"line\"> 7: 0.0327013232275763,</span><br><span class=\"line\"> 8: -0.357340429464286,</span><br><span class=\"line\"> 9: -1.4105691657079547&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]:</span><br></pre></td></tr></table></figure></p>\n<p>许多Python对象都被格式化为可读性更好的形式</p>\n<h3 id=\"Tab键自动完成\"><a href=\"#Tab键自动完成\" class=\"headerlink\" title=\"Tab键自动完成\"></a>Tab键自动完成</h3><p>在shell中输入表达式时，只要按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量(对象、函数等)就会被找出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: an_example1 = 15</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: an_example2 = 20</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: an&lt;TAB&gt;</span><br><span class=\"line\">           an_example1               AnalogCommonProxyStub.dll</span><br><span class=\"line\">           an_example2               and</span><br><span class=\"line\">           any()</span><br></pre></td></tr></table></figure></p>\n<p>也可以在任何对象后面输入一个句点以便自动完成方法和属性的输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [7]: a = [1, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: a.&lt;TAB&gt;</span><br><span class=\"line\">           append()  count()   insert()  reverse()</span><br><span class=\"line\">           clear()   extend()  pop()     sort()</span><br><span class=\"line\">           copy()    index()   remove()</span><br></pre></td></tr></table></figure></p>\n<p>应用在模块上:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: datetime.</span><br><span class=\"line\">                  date()        MAXYEAR       timedelta</span><br><span class=\"line\">                  datetime      MINYEAR       timezone</span><br><span class=\"line\">                  datetime_CAPI time()        tzinfo()</span><br></pre></td></tr></table></figure></p>\n<p>IPython默认会隐藏那些以下划线开头的方法和属性。如果需要应Tab键自动完成，可以先输入一个下划线。也可以直接修改IPython配置文件中的相关设置。<br>Tab键还可以找出电脑文件系统中与之匹配的东西：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: ca&lt;TAB&gt;</span><br><span class=\"line\">           callable()</span><br><span class=\"line\">           %%capture</span><br><span class=\"line\">           catchLink/</span><br></pre></td></tr></table></figure></p>\n<p>其中 <em>catchLibk/</em> 为当前目录下的一个子目录。在使用补全目录的时候需要使用正斜杠(/)，文件夹或文件名中间不能有空格。</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>在变量前面或者后面加上一个问号(<strong>?</strong>)就可以将有关该对象的一些通用信息显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [2]: b = []</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: b?</span><br><span class=\"line\">Type:        list</span><br><span class=\"line\">String form: []</span><br><span class=\"line\">Length:      0</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">list() -&gt; new empty list</span><br><span class=\"line\">list(iterable) -&gt; new list initialized from iterable&apos;s items</span><br></pre></td></tr></table></figure></p>\n<p>如果该对象是一个函数或实例方法，则其docstring也会被显示出来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: def add_number(a,b):</span><br><span class=\"line\">   ...:     &quot;&quot;&quot;</span><br><span class=\"line\">   ...:     Add two numbers together</span><br><span class=\"line\">   ...:     Returns</span><br><span class=\"line\">   ...:     -----------------------</span><br><span class=\"line\">   ...:     the sum: type of arguments</span><br><span class=\"line\">   ...:     &quot;&quot;&quot;</span><br><span class=\"line\">   ...:     return a+b</span><br><span class=\"line\">   ...:</span><br><span class=\"line\">   ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: add_number?</span><br><span class=\"line\">Signature: add_number(a, b)</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">Add two numbers together</span><br><span class=\"line\">Returns</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">the sum: type of arguments</span><br><span class=\"line\">File:      d:\\python\\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class=\"line\">Type:      function</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>??</code>还将显示源代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: add_number??</span><br><span class=\"line\">Signature: add_number(a, b)</span><br><span class=\"line\">Source:</span><br><span class=\"line\">def add_number(a,b):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Add two numbers together</span><br><span class=\"line\">    Returns</span><br><span class=\"line\">    -----------------------</span><br><span class=\"line\">    the sum: type of arguments</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    return a+b</span><br><span class=\"line\">File:      d:\\python\\&lt;ipython-input-4-7144b04645ed&gt;</span><br><span class=\"line\">Type:      function</span><br></pre></td></tr></table></figure></p>\n<p><code>?</code>还可以搜索IPython的命名空间，一些字符再配以通配符(*)即可显示出所有与该通配符表达式相匹配的名称:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [7]: import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: np.*load*?</span><br><span class=\"line\">np.__loader__</span><br><span class=\"line\">np.load</span><br><span class=\"line\">np.loads</span><br><span class=\"line\">np.loadtxt</span><br><span class=\"line\">np.pkgload</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"run命令\"><a href=\"#run命令\" class=\"headerlink\" title=\"%run命令\"></a>%run命令</h3><p>在IPython会话环境中，所有文件都可以通过<code>%run</code>命令当做Python程序来运行。现在在目录下有一个叫做ipython_script_test.py的脚本：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x, y, z)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x+y) /z</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\">c = <span class=\"number\">3</span></span><br><span class=\"line\">result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<p>然后运行，并且运行成功后该文件中所定义的全部变量(import、函数和全局变量)都可以在IPython shell中访问:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: %run ipython_script_test.py</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: result</span><br><span class=\"line\">Out[10]: 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: a</span><br><span class=\"line\">Out[11]: 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"中断正在执行的代码\"><a href=\"#中断正在执行的代码\" class=\"headerlink\" title=\"中断正在执行的代码\"></a>中断正在执行的代码</h3><p>任何代码在执行时只要按下“Ctrl-C/control-C”,就会引发一个KeyboardInterrupt，除非Python代码已经调用某个已编译的扩展模块需要等待Python解释器重新获取控制权外，绝大部分Python程序将立即停止执行。</p>\n<h3 id=\"执行剪切板中的代码\"><a href=\"#执行剪切板中的代码\" class=\"headerlink\" title=\"执行剪切板中的代码\"></a>执行剪切板中的代码</h3><p>使用<code>%paste</code>和<code>%cpaste</code>两个魔术函数粘贴代码在shell中以整体执行：</p>\n<ul>\n<li>%paste</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: %paste</span><br><span class=\"line\">def f(x, y, z):</span><br><span class=\"line\">    return (x+y) /z</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">c = 3</span><br><span class=\"line\">result = f(a, b, c)</span><br><span class=\"line\">## -- End pasted text --</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%cpaste</li>\n</ul>\n<p>相比于<code>%paste</code>，<code>%cpaste</code>多出了一个用于粘贴代码的特殊提示符,若果发现粘贴的代码有错，只需按下“Ctrl-C/control-C”即可终止%cpaste提示符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [16]: %cpaste</span><br><span class=\"line\">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class=\"line\">:def f(x, y, z):</span><br><span class=\"line\">:    return (x+y) /z</span><br><span class=\"line\">:</span><br><span class=\"line\">:a = 1</span><br><span class=\"line\">:b = 2</span><br><span class=\"line\">:c = 3</span><br><span class=\"line\">:result = f(a, b, c)</span><br><span class=\"line\">:--</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"键盘快捷键\"><a href=\"#键盘快捷键\" class=\"headerlink\" title=\"键盘快捷键\"></a>键盘快捷键</h3><p>IPython提供了许多用于提示符导航和查阅历史shell命令的键盘快捷键(<strong>C指代Ctrl或control</strong>)：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C-P或上箭头</td>\n<td style=\"text-align:center\">后向搜索命令历史中以当前输入的文本开头的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-N或下箭头</td>\n<td style=\"text-align:center\">前向搜索命令历史中以当前输入的文本开头的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-R</td>\n<td style=\"text-align:center\">按行读取的反向历史搜索(部分匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-Shift-V/Command-Shift-V</td>\n<td style=\"text-align:center\">从剪切板粘贴文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-C</td>\n<td style=\"text-align:center\">终止当前正在执行的代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-A</td>\n<td style=\"text-align:center\">将光标移动到行首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-E</td>\n<td style=\"text-align:center\">将光标移动到行尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-K</td>\n<td style=\"text-align:center\">删除从光标开始至行尾的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-U</td>\n<td style=\"text-align:center\">清楚当前行的所有文本(只是和C-K相反，即删除从光标开始至行首的文本)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-F</td>\n<td style=\"text-align:center\">将光标向前移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-b</td>\n<td style=\"text-align:center\">将光标向后移动一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C-L</td>\n<td style=\"text-align:center\">清屏</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"异常和跟踪\"><a href=\"#异常和跟踪\" class=\"headerlink\" title=\"异常和跟踪\"></a>异常和跟踪</h3><p>如果<code>%run</code>某段脚本或执行某条语句是发生异常，IPython会默认输出整个调用栈跟踪，其中还会附上调用栈各点附近的几行代码作为上下文参考:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [17]: %run ipython_bug.py</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in &lt;module&gt;()</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in f(x, y, z)</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"魔术命令\"><a href=\"#魔术命令\" class=\"headerlink\" title=\"魔术命令\"></a>魔术命令</h3><p>IPython有一些特殊命令，它们有的为常见任务提供便利，有的则使控制IPython系统的行为更轻松。魔术命令以百分号 <code>%</code> 为前缀的命令。例如通过<code>%timeit</code>检测任何Python语句的执行时间:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [41]: a = np.random.randn(100,100)</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: %timeit np.dot(a,a)</span><br><span class=\"line\">237 µs ± 40 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure></p>\n<p>魔术命令可以看做运行于IPython系统中的命令行程序，使用<code>?</code>即可查看其选项:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [44]: %reset?</span><br><span class=\"line\">Docstring:</span><br><span class=\"line\">Resets the namespace by removing all names defined by the user, if</span><br><span class=\"line\">called without arguments, or by removing some types of objects, such</span><br><span class=\"line\">as everything currently in IPython&apos;s In[] and Out[] containers (see</span><br><span class=\"line\">the parameters for details).</span><br><span class=\"line\"></span><br><span class=\"line\">Parameters</span><br><span class=\"line\">----------</span><br><span class=\"line\">-f : force reset without asking for confirmation.</span><br><span class=\"line\"></span><br><span class=\"line\">-s : &apos;Soft&apos; reset: Only clears your namespace, leaving history intact.</span><br><span class=\"line\">    References to objects may be kept. By default (without this option),</span><br><span class=\"line\">    we do a &apos;hard&apos; reset, giving you a new session and removing all</span><br><span class=\"line\">    references to objects from the current session.</span><br><span class=\"line\"></span><br><span class=\"line\">in : reset input history</span><br><span class=\"line\"></span><br><span class=\"line\">out : reset output history</span><br><span class=\"line\"></span><br><span class=\"line\">dhist : reset directory history</span><br><span class=\"line\"></span><br><span class=\"line\">array : reset only variables that are NumPy arrays</span><br><span class=\"line\"></span><br><span class=\"line\">See Also</span><br><span class=\"line\">--------</span><br><span class=\"line\">reset_selective : invoked as ``%reset_selective``</span><br><span class=\"line\"></span><br><span class=\"line\">Examples</span><br><span class=\"line\">--------</span><br><span class=\"line\">::</span><br><span class=\"line\"></span><br><span class=\"line\">  In [6]: a = 1</span><br><span class=\"line\"></span><br><span class=\"line\">  In [7]: a</span><br><span class=\"line\">  Out[7]: 1</span><br><span class=\"line\"></span><br><span class=\"line\">  In [8]: &apos;a&apos; in _ip.user_ns</span><br><span class=\"line\">  Out[8]: True</span><br></pre></td></tr></table></figure></p>\n<p>魔术命令可以不带百分号使用，只要没有定义与其同名的变量。</p>\n<ul>\n<li>常用的魔术命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%quickref</td>\n<td style=\"text-align:center\">显示Python的快速参考</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%magic</td>\n<td style=\"text-align:center\">显示所有魔术命令的详细文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%debug</td>\n<td style=\"text-align:center\">从最新的异常跟踪的底部进入交互式调试器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%hist</td>\n<td style=\"text-align:center\">打印命令的输入(可选输出)历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pdb</td>\n<td style=\"text-align:center\">在异常发生后自动进入调试器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%paste</td>\n<td style=\"text-align:center\">执行剪切板中的Python代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cpaste</td>\n<td style=\"text-align:center\">打开一个特殊提示符以便手工粘贴待执行的Python代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%reset</td>\n<td style=\"text-align:center\">删除interactive命名空间的全部变量/名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%page OBJECT</td>\n<td style=\"text-align:center\">通过分页器打印输出OBJECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%run script.py</td>\n<td style=\"text-align:center\">在IPython中执行一个Python脚本文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%prun statement</td>\n<td style=\"text-align:center\">通过cProfile执行statement，并打印分析器的输出结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%time statement</td>\n<td style=\"text-align:center\">报告statement的执行时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%timeit statement</td>\n<td style=\"text-align:center\">多次执行statement以计算系统平均执行时间。对那些执行时间非常小的代码很有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%who、%who_is、%whos</td>\n<td style=\"text-align:center\">显示interactive命名空间中定义的变量，信息级别/冗余度可变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%xdel variable</td>\n<td style=\"text-align:center\">删除variable，并参加过时清除其在IPython中的对象上的一切引用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"matplotlib集成与pylab模式\"><a href=\"#matplotlib集成与pylab模式\" class=\"headerlink\" title=\"matplotlib集成与pylab模式\"></a>matplotlib集成与pylab模式</h3><p>启动IPython时加上<code>--pylab</code>标记来集成matplotlib<code>ipython --pylab</code>。这样IPython会默认GUI后台集成，就可以创建matplotlib绘图了。并且NumPy和matplotlib的大部分功能会被引入到最顶层的interactive命名空间以产生一个交互式的计算环境。也可以通过<code>%gui</code>对此进行手工设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\">Using matplotlib backend: TkAgg</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用命令历史\"><a href=\"#使用命令历史\" class=\"headerlink\" title=\"使用命令历史\"></a>使用命令历史</h2><p>IPython维护着一个位于硬盘上的小型数据库，其中含有执行过的每条命令的文本：</p>\n<ol>\n<li>只需很少的按键次数即可搜索、自动完成并执行之前已经执行过的命令</li>\n<li>在会话间持久化命令历史</li>\n<li>将输入/输出历史记录到日志文件</li>\n</ol>\n<h3 id=\"搜索并重用命令历史\"><a href=\"#搜索并重用命令历史\" class=\"headerlink\" title=\"搜索并重用命令历史\"></a>搜索并重用命令历史</h3><p>如果需要输入之前执行过的相同的命令，只需要按照上面的快捷键表操作，就可以搜索出命令历史中第一个与输入的字符相匹配的命令。既可以后向搜索也可以前向搜索。</p>\n<h3 id=\"输入和输出变量\"><a href=\"#输入和输出变量\" class=\"headerlink\" title=\"输入和输出变量\"></a>输入和输出变量</h3><p>IPython会将输入(输入的文本)和输出(返回的对象)的引用保存在一些特殊变量中。最近的两个输出结果分别保存在 <code>_</code>(一个下划线)和 <code>__</code>(两个下划线)变量中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [6]: 1+1</span><br><span class=\"line\">Out[6]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: _</span><br><span class=\"line\">Out[7]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: _+1</span><br><span class=\"line\">Out[8]: 3</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: 3+1</span><br><span class=\"line\">Out[9]: 4</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: __</span><br><span class=\"line\">Out[10]: 3</span><br></pre></td></tr></table></figure></p>\n<p>输入的文本保存在名为<code>_ix</code>的变量中，其中 <strong>X</strong> 是输入行的行号。每个输入变量都有一个对应的输出变量<code>_x</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: _i6</span><br><span class=\"line\">Out[11]: &apos;1+1&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: _6</span><br><span class=\"line\">Out[12]: 2</span><br></pre></td></tr></table></figure></p>\n<p>由于输入变量是字符串，因此可以用Python的<code>exec()</code>方法重新执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: exec(_i6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: _</span><br><span class=\"line\">Out[19]: &apos;1+1&apos;</span><br></pre></td></tr></table></figure></p>\n<p>有几个魔术命令可以用于控制输入和输出历史。<code>%hist</code>用于打印全部或部分输入历史，可以选择是否带行号。<code>%reset</code>用于清空interactive命名空间，并可选择是否清空输入和输出缓存。<code>%xdel</code>用于从IPython系统中移除特定对象的一切引用。</p>\n<h3 id=\"记录输入和输出\"><a href=\"#记录输入和输出\" class=\"headerlink\" title=\"记录输入和输出\"></a>记录输入和输出</h3><p>IPython能够记录整个控制台会话，包括输入和输出。执行<code>%logstart</code>即可开始记录日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: %logstart</span><br><span class=\"line\">Activating auto-logging. Current session state plus future input saved.</span><br><span class=\"line\">Filename       : ipython_log.py</span><br><span class=\"line\">Mode           : rotate</span><br><span class=\"line\">Output logging : False</span><br><span class=\"line\">Raw input log  : False</span><br><span class=\"line\">Timestamping   : False</span><br><span class=\"line\">State          : active</span><br></pre></td></tr></table></figure></p>\n<p>IPython的日志功能可以在任何时刻开启。还有与<code>%logstart</code>配套的<code>%logoff</code>、<code>%logon</code>、<code>%logstate</code>和<code>%logstop</code>，可以参考其文档。</p>\n<h3 id=\"与操作系统交互\"><a href=\"#与操作系统交互\" class=\"headerlink\" title=\"与操作系统交互\"></a>与操作系统交互</h3><p>可以在IPython中实现标准的Windows或UNIX命令行活动，将命令的执行结果保存在Python对象中</p>\n<ul>\n<li>跟系统相关的IPython魔术命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">!cmd</td>\n<td style=\"text-align:center\">在系统shell中执行cmd</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">output=!cmd args</td>\n<td style=\"text-align:center\">执行cmd，并将stout存放在output中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%alias alias_name cmd</td>\n<td style=\"text-align:center\">为系统shell命令定义别名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%bookmark</td>\n<td style=\"text-align:center\">使用IPython的目录书签系统</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%cd directory</td>\n<td style=\"text-align:center\">将系统工作目录更改为directory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pwd</td>\n<td style=\"text-align:center\">返回系统的当前工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%pushd directory</td>\n<td style=\"text-align:center\">将当前目录入栈，并转向目标目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%popd</td>\n<td style=\"text-align:center\">弹出栈顶目录，并转向该目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%dirs</td>\n<td style=\"text-align:center\">返回一个含有当前目录栈的列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%dhist</td>\n<td style=\"text-align:center\">打印目录访问历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%env</td>\n<td style=\"text-align:center\">以dict形式返回系统环境变量</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"shell命令和别名\"><a href=\"#shell命令和别名\" class=\"headerlink\" title=\"shell命令和别名\"></a>shell命令和别名</h4><p>在IPython中，以感叹号(!)开头的命令行表示其后的所有内容需要在系统shell中执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: !python</span><br><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>还可以将shell命令的控制台输出存放到变量中，只需将 <code>!</code> 开头的表达式赋值给变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [152]: ip_info = !ls</span><br><span class=\"line\"></span><br><span class=\"line\">In [153]: ip_info</span><br><span class=\"line\">Out[153]: [&apos;experiment.py&apos;, &apos;ipython_bug.py&apos;, &apos;ipython_script_test.py&apos;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"软件开发工具\"><a href=\"#软件开发工具\" class=\"headerlink\" title=\"软件开发工具\"></a>软件开发工具</h2><p>IPython集成并加强了Python内置的pdb调试器，同时提供了一些简单易用的代码运行时间及性能分析工具。</p>\n<h3 id=\"交互式调试器\"><a href=\"#交互式调试器\" class=\"headerlink\" title=\"交互式调试器\"></a>交互式调试器</h3><p>IPython的调试器增强了pdb，如Tab键自动完成、语法高亮、为异常跟踪的每条信息添加上下文参考。<code>%debug</code>命令(在发生异常之后马上输入)将会调用那个“事后”调试器，并直接跳转到引发异常的那个栈帧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [45]: %run ipython_bug.py</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in &lt;module&gt;()</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\Python\\ipython\\ipython_bug.py in f(x, y, z)</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: %debug</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(2)f()</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br></pre></td></tr></table></figure></p>\n<p>在这个调试器中，可以执行任意Python代码并查看各个栈帧中的一切对象和数据。默认是从最低级开始(即错误发生的地方)。输入<code>u</code>(或up)和<code>d</code>(或down)即可在栈跟踪的各级别之间切换:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipdb&gt; u</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">----&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; d</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(2)f()</span><br><span class=\"line\">      1 def f(x, y, z):</span><br><span class=\"line\">----&gt; 2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>%pdp</code>命令可以让IPython在出现异常之后自动调用调试器。<br>如果需要设置断点或对函数/脚本进行单步调试以查看各条语句的执行情况时，可以使用带有<code>-d</code>选项的<code>%run</code>命令，这会在执行脚本文件中的代码之前打开调试器，然后输入<code>s</code>(或step)步进才能进入脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [50]: %run -d ipython_bug.py</span><br><span class=\"line\">Breakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1</span><br><span class=\"line\">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(1)&lt;module&gt;()</span><br><span class=\"line\">1---&gt; 1 def f(x, y, z):</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(4)&lt;module&gt;()</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">----&gt; 4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(5)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">----&gt; 5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">      7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; s</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(6)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">----&gt; 6 c = 0</span><br><span class=\"line\">      7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>b num</code>在num行出设置断点，输入<code>c</code>(或continue)使脚本一直运行下去直到该断点时为止,然后输入<code>n</code>(或next)直到执行下一行(即step over):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [53]: %run -d ipython_bug.py</span><br><span class=\"line\">Breakpoint 1 at d:\\python\\ipython\\ipython_bug.py:1</span><br><span class=\"line\">NOTE: Enter &apos;c&apos; at the ipdb&gt;  prompt to continue execution.</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(1)&lt;module&gt;()</span><br><span class=\"line\">1---&gt; 1 def f(x, y, z):</span><br><span class=\"line\">      2     return (x+y) /z</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; b 7</span><br><span class=\"line\">Breakpoint 2 at d:\\python\\ipython\\ipython_bug.py:7</span><br><span class=\"line\">ipdb&gt; c</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; n</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\">ipdb&gt; n</span><br><span class=\"line\">--Return--</span><br><span class=\"line\">None</span><br><span class=\"line\">&gt; d:\\python\\ipython\\ipython_bug.py(7)&lt;module&gt;()</span><br><span class=\"line\">      3</span><br><span class=\"line\">      4 a = 1</span><br><span class=\"line\">      5 b = 2</span><br><span class=\"line\">      6 c = 0</span><br><span class=\"line\">2---&gt; 7 result = f(a, b, c)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>IPython调试器命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">h(elp)</td>\n<td style=\"text-align:center\">显示命令列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">help command</td>\n<td style=\"text-align:center\">显示command的文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c(ontinue)</td>\n<td style=\"text-align:center\">恢复程序的执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q(uit)</td>\n<td style=\"text-align:center\">退出调试器，不再执行任何代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b(readk) number</td>\n<td style=\"text-align:center\">在当前文件的第number行设置一个断点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b path/to/file.py:number</td>\n<td style=\"text-align:center\">在指定文件的第number行设置一个断点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s(tep)</td>\n<td style=\"text-align:center\">单步进入函数调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n(ext)</td>\n<td style=\"text-align:center\">执行当前行，并前进到当前级别的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u(p)/d(own)</td>\n<td style=\"text-align:center\">在函数调用栈中向上或向下移动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a(rgs)</td>\n<td style=\"text-align:center\">显示当前函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">debug statement</td>\n<td style=\"text-align:center\">在新的(递归)调试器中调用语句statement</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l(ist)  statement</td>\n<td style=\"text-align:center\">显示当前行，以及当前栈级别的上下文参考代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w(here)</td>\n<td style=\"text-align:center\">打印当前位置的完整栈跟踪(包括上下文参考代码)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测试代码的执行时间-time和-timeit\"><a href=\"#测试代码的执行时间-time和-timeit\" class=\"headerlink\" title=\"测试代码的执行时间:%time和%timeit\"></a>测试代码的执行时间:%time和%timeit</h3><p><code>%time</code>一次执行一条语句，然后报告总体执行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [56]: strings = [&apos;foo&apos;,&apos;bar&apos;,&apos;abc&apos;,&apos;foobar&apos;,&apos;python&apos;,&apos;Guide Peple&apos;]*100000</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: %time method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class=\"line\">Wall time: 102 ms</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: %time method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class=\"line\">Wall time: 59.2 ms</span><br></pre></td></tr></table></figure></p>\n<p><code>%timeit</code>对于任意语句，它会自动多次执行以产生一个非常精确的平均执行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [59]: %timeit method1 = [x for x  in strings if x.startswith(&apos;foo&apos;)]</span><br><span class=\"line\">100 ms ± 5.73 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: %timeit method2 = [x for x in strings if x[:3] == &apos;foo&apos;]</span><br><span class=\"line\">57 ms ± 7.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本性能分析：-prun和-run-p\"><a href=\"#基本性能分析：-prun和-run-p\" class=\"headerlink\" title=\"基本性能分析：%prun和%run -p\"></a>基本性能分析：%prun和%run -p</h3><p>代码的性能分析跟代码执行时间密切相关，只不过它关注的事耗费时间的位置，主要的Python性能分析工具是cProfile模块。CProfile在执行一个程序或代码块时，会记录各函数所耗费的时间。CProfile一般在命令行上使用，它将执行整个程序然后输出各函数的执行时间。<code>%prun</code>分析的是Python语句而不是整个.py文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [141]: %cpaste</span><br><span class=\"line\">Pasting code; enter &apos;--&apos; alone on the line to stop or use Ctrl-D.</span><br><span class=\"line\">:def run_experiment(niter=100):</span><br><span class=\"line\">    k = 100</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    for _ in range(niter):</span><br><span class=\"line\">        mat = np.random.randn(k, k)</span><br><span class=\"line\">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class=\"line\">        results.append(max_eigenvalue)</span><br><span class=\"line\">    return results:::::::</span><br><span class=\"line\">:</span><br><span class=\"line\">:--</span><br><span class=\"line\"></span><br><span class=\"line\">In [142]: %prun -l 7 -s cumulative run_experiment()</span><br><span class=\"line\">         3804 function calls in 0.901 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">   Ordered by: cumulative time</span><br><span class=\"line\">   List reduced from 31 to 7 due to restriction &lt;7&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class=\"line\">        1    0.000    0.000    0.901    0.901 &#123;built-in method builtins.exec&#125;</span><br><span class=\"line\">        1    0.000    0.000    0.901    0.901 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.002    0.002    0.901    0.901 &lt;ipython-input-141-78ef833ef08b&gt;:1(run_experiment)</span><br><span class=\"line\">      100    0.814    0.008    0.838    0.008 linalg.py:834(eigvals)</span><br><span class=\"line\">      100    0.060    0.001    0.060    0.001 &#123;method &apos;randn&apos; of &apos;mtrand.RandomState&apos; objects&#125;</span><br><span class=\"line\">      100    0.012    0.000    0.018    0.000 linalg.py:213(_assertFinite)</span><br><span class=\"line\">      300    0.008    0.000    0.008    0.000 &#123;method &apos;reduce&apos; of &apos;numpy.ufunc&apos; objects&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>%run -p -s cumulative experiment.py</code>也能达到以上的效果，无需退出IPython:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [75]: %run -p -l 7 -s cumulative experiment.py</span><br><span class=\"line\">Largest one we saw:11.9165340849</span><br><span class=\"line\">         3888 function calls (3887 primitive calls) in 0.467 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">   Ordered by: cumulative time</span><br><span class=\"line\">   List reduced from 77 to 7 due to restriction &lt;7&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class=\"line\">      2/1    0.000    0.000    0.467    0.467 &#123;built-in method builtins.exec&#125;</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 &lt;string&gt;:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 interactiveshell.py:2445(safe_execfile)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 py3compat.py:182(execfile)</span><br><span class=\"line\">        1    0.000    0.000    0.467    0.467 experiment.py:1(&lt;module&gt;)</span><br><span class=\"line\">        1    0.001    0.001    0.466    0.466 experiment.py:5(run_experiment)</span><br><span class=\"line\">      100    0.431    0.004    0.436    0.004 linalg.py:819(eigvals)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ipython-html-notebook\"><a href=\"#ipython-html-notebook\" class=\"headerlink\" title=\"ipython html notebook\"></a>ipython html notebook</h2><p>需要安装 <em>jupyter</em> 来使用该功能:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install jupyter</span><br></pre></td></tr></table></figure></p>\n<p>这是一个基于Web的交互式计算文档格式。它有一种基于JSON的文档格式.upynb，可以轻松分享代码、输出结果以及图片等内容。执行如下命令启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook</span><br></pre></td></tr></table></figure></p>\n<p>这是运行于命令行上的轻量级服务器进程，Web浏览器会自动打开Notebook的仪表盘。</p>\n"},{"title":"Python多线程(一)","date":"2018-02-24T08:13:37.000Z","copyright":true,"description":null,"_content":"多线程编程对于以下编程任务是非常理想的：\n* 本质上是异步的\n* 需要多个并发活动\n* 每个活动的处理顺序可能是不确定的(随机、不可预测的)\n<!--Mare-->\n\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程\n* UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中\n* RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出\n* ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中\n\n## 线程和进程\n\n* 进程\n\n  > 计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。**进程** （有时称为 **重量级进程**）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 **派生**(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 *进程间通信(IPC)* 的方式共享信息\n\n* 线程\n\n  > **线程**（有时称为 **轻量级进程**）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 *让步(yielding)*。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。\n\n## 线程与Python\n\n### 全局解释锁\n\n  对Python虚拟机的访问是由**全局解释锁(GIL)** 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。\n  1. 设置GIL\n  2. 切换进一个线程去运行\n  3. 执行下面操作之一\n      a. 指定数量的字节码指令\n      b. 线程主动让出控制权(可以调用time.sleep(0)来完成)\n  4. 把线程设置回睡眠状态(切换出线程)\n  5. 解锁GIL\n  6. 重复上述步骤\n\n当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。\n\n### 退出线程\n\n  当一个线程完成函数的执行时，就会退出。还可以通过调用`thread.exit()`或者`sys.exit()`退出进程，或者抛出SystemExit异常，是线程退出。\n\n## \\_thread模块\n\n  [\\_thread模块](https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread)提供了派生线程、基本的同步数据结构(*锁对象(lock object)*,也叫 *原语锁*、*简单锁*、*互斥锁*、*互斥* 和 *二进制信号量*)\n\n* \\_thread模和锁对象\n\n|                    函数/方法                    |                             描述                             |\n|:-----------------------------------------------:|:------------------------------------------------------------:|\n|               \\_thread模块的函数                |                                                              |\n| start_new_thread(function, args, kwargs = None) | 派生一个新的线程，使用给定的args和可选的kwargs来执行function |\n|                 allocate_lock()                 |                      分配LockType锁对象                      |\n|                     exit()                      |                        给线程退出命令                        |\n|              LockType锁对象的方法               |                                                              |\n|              acquire(wait = None)               |                        尝试获取锁对象                        |\n|                    locked()                     |         如果获取了锁对象则返回True，否则，返回False          |\n|                    release()                    |                            释放锁                            |\n\n### 使用线程\n\n#### 一般方式\n\n- 程序\n\n    ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    import _thread\n    from time import ctime, sleep\n\n\n    def loop_0():\n        print('start loop_0 at:', ctime())\n        sleep(4)\n        print('loop_0 done at:', ctime())\n\n\n    def loop_1():\n        print('start loop_1 at:', ctime())\n        sleep(2)\n        print('loop_1 done at:', ctime())\n\n\n    def main():\n        print('starting at:', ctime())\n        # start_new_thread 方法即使要执行的\n        # 函数不需要参数，也需要传递一个空元组\n        _thread.start_new_thread(loop_0, ())\n        _thread.start_new_thread(loop_1, ())\n        # 阻止主线程的执行，保证其最后执行，\n        # 后续去掉这种方式，引入锁的方式\n        sleep(6)\n        print('all done at', ctime())\n\n\n    if __name__ == '__main__':\n        main()\n\n    ```\n- 执行结果\n\n    在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(*loop_0()* )的运行时间\n    ```\n    starting at: Mon Feb 26 08:52:10 2018\n    start loop_0 at: Mon Feb 26 08:52:10 2018\n    start loop_1 at: Mon Feb 26 08:52:10 2018\n    loop_1 done at: Mon Feb 26 08:52:12 2018\n    loop_0 done at: Mon Feb 26 08:52:14 2018\n    all done at Mon Feb 26 08:52:16 2018\n\n    ```\n\n#### 使用锁对象\n\n- 程序\n    ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    import _thread\n    from time import ctime, sleep\n\n    loops = [4, 2]\n\n\n    def loop(nloop, sec, lock):\n        # nloop: 第几个线程\n        # sec: 时间\n        # lock: 分配的锁\n        print('start loop', nloop, 'at:', ctime())\n        sleep(sec)\n        print('loop', nloop, 'done at:', ctime())\n        # 当时间到了的时候释放锁\n        lock.release()\n\n\n    def main():\n        print('starting at:', ctime())\n        locks = []\n        nloops = range(len(loops))\n\n        for i in nloops:\n            # 生成锁对象\n\n            # 通过allocate_lock()函数得到锁对象\n            # 通过acquire()取到每个锁\n            # 添加进locks列表\n            lock = _thread.allocate_lock()\n            lock.acquire()\n            locks.append(lock)\n\n        for i in nloops:\n            # 派生线程\n\n            # 传递循环号，时间、锁对象\n            _thread.start_new_thread(loop, (i, loops[i], locks[i]))\n\n        for i in nloops:\n            # 等待所有线程的锁都释放完了才执行主线程\n            while locks[i].locked():\n                pass\n\n        print('all DONE at:', ctime())\n\n    if __name__ == '__main__':\n        main()\n\n    ```\n- 执行结果\n\n    未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码\n\n    ```\n    starting at: Mon Feb 26 09:37:39 2018\n    start loop 1 at: Mon Feb 26 09:37:39 2018\n    start loop 0 at: Mon Feb 26 09:37:39 2018\n    loop 1 done at: Mon Feb 26 09:37:41 2018\n    loop 0 done at: Mon Feb 26 09:37:43 2018\n    all DONE at: Mon Feb 26 09:37:43 2018\n    ```\n\n## threading模块\n\n[threading模块](https://docs.python.org/3/library/threading.html?highlight=threading#module-threading)提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制\n\n* threading模块的对象\n\n|      对象      |                                         描述                                         |\n|:--------------:|:------------------------------------------------------------------------------------:|\n|     Thread     |                                表示一个执行线程的对象                                |\n|      Lock      |                          锁原语对象(和thread模块中的锁一样)                          |\n|     RLock      |             可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）             |\n|   Condition    |  条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值  |\n|     Event      | 条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活 |\n|   Semaphone    |          为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞          |\n| BoundSemaphone |                       与Semaphone相似，不过它不允许超过初始值                        |\n|     Timer      |                      与Thread相似，不过它要在运行前等待一段时间                      |\n|    Barrier     |                  创建一个“障碍”,必须达到指定数量的线程后才可以继续                   |\n\n### Thread类\n\n* Thread对象的属性和方法\n\n|                                              属性                                               |                                                                 描述                                                                 |\n|:-----------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------------:|\n|                                              name                                               |                                                                线程名                                                                |\n|                                              ident                                              |                                                             线程的标识符                                                             |\n|                                             daemon                                              |                                                 布尔标志，表示这个线程是否是守护线程                                                 |\n|                                         Thread对象方法                                          |                                                                                                                                      |\n| _init_(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None) | 实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志 |\n|                                             start()                                             |                                                            开始执行该线程                                                            |\n|                                              run()                                              |                                           定义线程功能的方法(通常在子类中被应用开发者重写)                                           |\n|                                       join(timeout=None)                                        |                                直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞                                 |\n\n使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：\n* 创建Thread的实例，传给它一个函数\n* 创建Thread的实例，传给它一个可调用的类实例\n* 派生Thread的子类，并创建子类的实例\n\n#### 创建Thread的实例，传给它一个函数\n`join()` 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。`join()`方法只有在需要等待线程完成的时候才是有用的。\n* 代码\n\n```Python\n#!/usr/bin/python\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\nloops = [4, 2]\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n    for i in nloops:\n        t = threading.Thread(target=loop, args=(i, loops[i]))\n        threads.append(t)\n\n    for i in nloops:\n        # 启动线程\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程结束\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 14:29:36 2018\nstart loop 0 at: Mon Feb 26 14:29:36 2018\nstart loop 1 at: Mon Feb 26 14:29:36 2018\nloop 1 done at: Mon Feb 26 14:29:38 2018\nloop 0 done at: Mon Feb 26 14:29:40 2018\nall DONE at: Mon Feb 26 14:29:40 2018\n```\n#### 创建Thread的实例，传给它一个可调用的类实例\n\n将传递进去一个可调用类(实例)而不仅仅是一个函数\n\n* 代码\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\nloops = [4, 2]\n\n\nclass ThreadFunc(object):\n    def __init__(self, func, args, name=''):\n        self.name = name\n        self.func = func\n        self.args = args\n\n    def __call__(self):\n        # Thread类的代码将调用ThreadFunc对象，此时会调用这个方法\n        # 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数\n        self.func(*self.args)\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop ', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n\n    for i in nloops:\n        # 创建所有线程\n        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))\n        threads.append(t)\n\n    for i in nloops:\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 14:47:28 2018\nstart loop 0 at: Mon Feb 26 14:47:28 2018\nstart loop 1 at: Mon Feb 26 14:47:28 2018\nloop  1 done at: Mon Feb 26 14:47:30 2018\nloop  0 done at: Mon Feb 26 14:47:32 2018\nall DONE at: Mon Feb 26 14:47:32 2018\n```\n#### 派生Thread的子类，并创建子类的实例(推荐)\n\n将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程\n\n* 代码\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\nloops = [4, 2]\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, func, args, name=''):\n        # 必须先调用基类的构造函数\n        threading.Thread.__init__(self)\n        self.name = name\n        self.func = func\n        self.args = args\n\n\n    def run(self):\n        # 必须重写run()方法\n        self.func(*self.args)\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop ', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n\n    for i in nloops:\n        # 创建所有线程\n        t = MyThread(loop, (i, loops[i]), loop.__name__)\n        threads.append(t)\n\n    for i in nloops:\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 15:08:33 2018\nstart loop 0 at: Mon Feb 26 15:08:33 2018\nstart loop 1 at: Mon Feb 26 15:08:33 2018\nloop  1 done at: Mon Feb 26 15:08:35 2018\nloop  0 done at: Mon Feb 26 15:08:37 2018\nall DONE at: Mon Feb 26 15:08:37 2018\n\n```\n\n## 单线程和多线程执行的对比\n\n先后使用单线程和多线程执行三个独立的递归函数，代码中加入`sleep()`是为了减慢执行速度，能够更好的看到效果。\n\n* myThread.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\n\nclass MyThread(threading.Thread):\n\n    def __init__(self, func, args, name=''):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.func = func\n        self.args = args\n\n    def get_result(self):\n        # 返回每一次的执行结果\n        return self.res\n\n    def run(self):\n        print('starting at:', ctime())\n        self.res = self.func(*self.args)\n        print('done at:', ctime())\n\n```\n\n* compare.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom myThread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    # 斐波拉契\n    sleep(0.005)\n    if x < 2:\n        return 1\n    return fib(x-2)+fib(x-1)\n\n\ndef fac(x):\n    # 阶乘\n    sleep(0.1)\n    if x < 2:\n        return 1\n    return x*fac(x-1)\n\n\ndef sum(x):\n    # 累加\n    sleep(0.1)\n    if x < 2:\n        return 1\n    return x + sum(x-1)\n\nfuncs = [fib, fac, sum]\nn = 12\n\n\ndef main():\n    nfuncs = range(len(funcs))\n    print('***SINGLE THREAD***')\n    for i in nfuncs:\n        # 单线程顺序执行\n        print('starting', funcs[i].__name__, 'at:', ctime())\n        print(funcs[i](n))\n        print(funcs[i].__name__, 'finished at:', ctime(), '\\n')\n\n    print('\\n ***MULTIPLE THREADS***')\n    threads = []\n    for i in nfuncs:\n        # 多线程执行\n        t = MyThread(funcs[i], (n,),funcs[i].__name__)\n        threads.append(t)\n\n    for i in nfuncs:\n        threads[i].start()\n\n    for i in nfuncs:\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print('all DONE')\n\nif __name__ == '__main__':\n    main()\n```\n\n* 结果\n\n```\n***SINGLE THREAD***\nstarting fib at: Mon Feb 26 15:36:22 2018\n233\nfib finished at: Mon Feb 26 15:36:24 2018\n\nstarting fac at: Mon Feb 26 15:36:24 2018\n479001600\nfac finished at: Mon Feb 26 15:36:25 2018\n\nstarting sum at: Mon Feb 26 15:36:25 2018\n78\nsum finished at: Mon Feb 26 15:36:26 2018\n\n\n ***MULTIPLE THREADS***\nstarting at: Mon Feb 26 15:36:26 2018\nstarting at: Mon Feb 26 15:36:26 2018\nstarting at: Mon Feb 26 15:36:26 2018\ndone at: Mon Feb 26 15:36:28 2018\ndone at: Mon Feb 26 15:36:28 2018\ndone at: Mon Feb 26 15:36:29 2018\n233\n479001600\n78\nall DONE\n```\n","source":"_posts/Python多线程-一.md","raw":"---\ntitle: Python多线程(一)\ndate: 2018-02-24 16:13:37\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 多线程\ndescription:\n---\n多线程编程对于以下编程任务是非常理想的：\n* 本质上是异步的\n* 需要多个并发活动\n* 每个活动的处理顺序可能是不确定的(随机、不可预测的)\n<!--Mare-->\n\n使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程\n* UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中\n* RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出\n* ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中\n\n## 线程和进程\n\n* 进程\n\n  > 计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。**进程** （有时称为 **重量级进程**）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 **派生**(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 *进程间通信(IPC)* 的方式共享信息\n\n* 线程\n\n  > **线程**（有时称为 **轻量级进程**）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 *让步(yielding)*。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。\n\n## 线程与Python\n\n### 全局解释锁\n\n  对Python虚拟机的访问是由**全局解释锁(GIL)** 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。\n  1. 设置GIL\n  2. 切换进一个线程去运行\n  3. 执行下面操作之一\n      a. 指定数量的字节码指令\n      b. 线程主动让出控制权(可以调用time.sleep(0)来完成)\n  4. 把线程设置回睡眠状态(切换出线程)\n  5. 解锁GIL\n  6. 重复上述步骤\n\n当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。\n\n### 退出线程\n\n  当一个线程完成函数的执行时，就会退出。还可以通过调用`thread.exit()`或者`sys.exit()`退出进程，或者抛出SystemExit异常，是线程退出。\n\n## \\_thread模块\n\n  [\\_thread模块](https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread)提供了派生线程、基本的同步数据结构(*锁对象(lock object)*,也叫 *原语锁*、*简单锁*、*互斥锁*、*互斥* 和 *二进制信号量*)\n\n* \\_thread模和锁对象\n\n|                    函数/方法                    |                             描述                             |\n|:-----------------------------------------------:|:------------------------------------------------------------:|\n|               \\_thread模块的函数                |                                                              |\n| start_new_thread(function, args, kwargs = None) | 派生一个新的线程，使用给定的args和可选的kwargs来执行function |\n|                 allocate_lock()                 |                      分配LockType锁对象                      |\n|                     exit()                      |                        给线程退出命令                        |\n|              LockType锁对象的方法               |                                                              |\n|              acquire(wait = None)               |                        尝试获取锁对象                        |\n|                    locked()                     |         如果获取了锁对象则返回True，否则，返回False          |\n|                    release()                    |                            释放锁                            |\n\n### 使用线程\n\n#### 一般方式\n\n- 程序\n\n    ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    import _thread\n    from time import ctime, sleep\n\n\n    def loop_0():\n        print('start loop_0 at:', ctime())\n        sleep(4)\n        print('loop_0 done at:', ctime())\n\n\n    def loop_1():\n        print('start loop_1 at:', ctime())\n        sleep(2)\n        print('loop_1 done at:', ctime())\n\n\n    def main():\n        print('starting at:', ctime())\n        # start_new_thread 方法即使要执行的\n        # 函数不需要参数，也需要传递一个空元组\n        _thread.start_new_thread(loop_0, ())\n        _thread.start_new_thread(loop_1, ())\n        # 阻止主线程的执行，保证其最后执行，\n        # 后续去掉这种方式，引入锁的方式\n        sleep(6)\n        print('all done at', ctime())\n\n\n    if __name__ == '__main__':\n        main()\n\n    ```\n- 执行结果\n\n    在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(*loop_0()* )的运行时间\n    ```\n    starting at: Mon Feb 26 08:52:10 2018\n    start loop_0 at: Mon Feb 26 08:52:10 2018\n    start loop_1 at: Mon Feb 26 08:52:10 2018\n    loop_1 done at: Mon Feb 26 08:52:12 2018\n    loop_0 done at: Mon Feb 26 08:52:14 2018\n    all done at Mon Feb 26 08:52:16 2018\n\n    ```\n\n#### 使用锁对象\n\n- 程序\n    ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    import _thread\n    from time import ctime, sleep\n\n    loops = [4, 2]\n\n\n    def loop(nloop, sec, lock):\n        # nloop: 第几个线程\n        # sec: 时间\n        # lock: 分配的锁\n        print('start loop', nloop, 'at:', ctime())\n        sleep(sec)\n        print('loop', nloop, 'done at:', ctime())\n        # 当时间到了的时候释放锁\n        lock.release()\n\n\n    def main():\n        print('starting at:', ctime())\n        locks = []\n        nloops = range(len(loops))\n\n        for i in nloops:\n            # 生成锁对象\n\n            # 通过allocate_lock()函数得到锁对象\n            # 通过acquire()取到每个锁\n            # 添加进locks列表\n            lock = _thread.allocate_lock()\n            lock.acquire()\n            locks.append(lock)\n\n        for i in nloops:\n            # 派生线程\n\n            # 传递循环号，时间、锁对象\n            _thread.start_new_thread(loop, (i, loops[i], locks[i]))\n\n        for i in nloops:\n            # 等待所有线程的锁都释放完了才执行主线程\n            while locks[i].locked():\n                pass\n\n        print('all DONE at:', ctime())\n\n    if __name__ == '__main__':\n        main()\n\n    ```\n- 执行结果\n\n    未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码\n\n    ```\n    starting at: Mon Feb 26 09:37:39 2018\n    start loop 1 at: Mon Feb 26 09:37:39 2018\n    start loop 0 at: Mon Feb 26 09:37:39 2018\n    loop 1 done at: Mon Feb 26 09:37:41 2018\n    loop 0 done at: Mon Feb 26 09:37:43 2018\n    all DONE at: Mon Feb 26 09:37:43 2018\n    ```\n\n## threading模块\n\n[threading模块](https://docs.python.org/3/library/threading.html?highlight=threading#module-threading)提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制\n\n* threading模块的对象\n\n|      对象      |                                         描述                                         |\n|:--------------:|:------------------------------------------------------------------------------------:|\n|     Thread     |                                表示一个执行线程的对象                                |\n|      Lock      |                          锁原语对象(和thread模块中的锁一样)                          |\n|     RLock      |             可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）             |\n|   Condition    |  条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值  |\n|     Event      | 条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活 |\n|   Semaphone    |          为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞          |\n| BoundSemaphone |                       与Semaphone相似，不过它不允许超过初始值                        |\n|     Timer      |                      与Thread相似，不过它要在运行前等待一段时间                      |\n|    Barrier     |                  创建一个“障碍”,必须达到指定数量的线程后才可以继续                   |\n\n### Thread类\n\n* Thread对象的属性和方法\n\n|                                              属性                                               |                                                                 描述                                                                 |\n|:-----------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------------:|\n|                                              name                                               |                                                                线程名                                                                |\n|                                              ident                                              |                                                             线程的标识符                                                             |\n|                                             daemon                                              |                                                 布尔标志，表示这个线程是否是守护线程                                                 |\n|                                         Thread对象方法                                          |                                                                                                                                      |\n| _init_(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None) | 实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志 |\n|                                             start()                                             |                                                            开始执行该线程                                                            |\n|                                              run()                                              |                                           定义线程功能的方法(通常在子类中被应用开发者重写)                                           |\n|                                       join(timeout=None)                                        |                                直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞                                 |\n\n使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：\n* 创建Thread的实例，传给它一个函数\n* 创建Thread的实例，传给它一个可调用的类实例\n* 派生Thread的子类，并创建子类的实例\n\n#### 创建Thread的实例，传给它一个函数\n`join()` 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。`join()`方法只有在需要等待线程完成的时候才是有用的。\n* 代码\n\n```Python\n#!/usr/bin/python\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\nloops = [4, 2]\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n    for i in nloops:\n        t = threading.Thread(target=loop, args=(i, loops[i]))\n        threads.append(t)\n\n    for i in nloops:\n        # 启动线程\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程结束\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 14:29:36 2018\nstart loop 0 at: Mon Feb 26 14:29:36 2018\nstart loop 1 at: Mon Feb 26 14:29:36 2018\nloop 1 done at: Mon Feb 26 14:29:38 2018\nloop 0 done at: Mon Feb 26 14:29:40 2018\nall DONE at: Mon Feb 26 14:29:40 2018\n```\n#### 创建Thread的实例，传给它一个可调用的类实例\n\n将传递进去一个可调用类(实例)而不仅仅是一个函数\n\n* 代码\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\nloops = [4, 2]\n\n\nclass ThreadFunc(object):\n    def __init__(self, func, args, name=''):\n        self.name = name\n        self.func = func\n        self.args = args\n\n    def __call__(self):\n        # Thread类的代码将调用ThreadFunc对象，此时会调用这个方法\n        # 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数\n        self.func(*self.args)\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop ', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n\n    for i in nloops:\n        # 创建所有线程\n        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))\n        threads.append(t)\n\n    for i in nloops:\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 14:47:28 2018\nstart loop 0 at: Mon Feb 26 14:47:28 2018\nstart loop 1 at: Mon Feb 26 14:47:28 2018\nloop  1 done at: Mon Feb 26 14:47:30 2018\nloop  0 done at: Mon Feb 26 14:47:32 2018\nall DONE at: Mon Feb 26 14:47:32 2018\n```\n#### 派生Thread的子类，并创建子类的实例(推荐)\n\n将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程\n\n* 代码\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\nloops = [4, 2]\n\n\nclass MyThread(threading.Thread):\n    def __init__(self, func, args, name=''):\n        # 必须先调用基类的构造函数\n        threading.Thread.__init__(self)\n        self.name = name\n        self.func = func\n        self.args = args\n\n\n    def run(self):\n        # 必须重写run()方法\n        self.func(*self.args)\n\n\ndef loop(nloop, sec):\n    print('start loop', nloop, 'at:', ctime())\n    sleep(sec)\n    print('loop ', nloop, 'done at:', ctime())\n\n\ndef main():\n    print('starting at:', ctime())\n    threads = []\n    nloops = range(len(loops))\n\n    for i in nloops:\n        # 创建所有线程\n        t = MyThread(loop, (i, loops[i]), loop.__name__)\n        threads.append(t)\n\n    for i in nloops:\n        threads[i].start()\n\n    for i in nloops:\n        # 等待所有线程\n        threads[i].join()\n\n    print('all DONE at:', ctime())\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 结果\n\n```\nstarting at: Mon Feb 26 15:08:33 2018\nstart loop 0 at: Mon Feb 26 15:08:33 2018\nstart loop 1 at: Mon Feb 26 15:08:33 2018\nloop  1 done at: Mon Feb 26 15:08:35 2018\nloop  0 done at: Mon Feb 26 15:08:37 2018\nall DONE at: Mon Feb 26 15:08:37 2018\n\n```\n\n## 单线程和多线程执行的对比\n\n先后使用单线程和多线程执行三个独立的递归函数，代码中加入`sleep()`是为了减慢执行速度，能够更好的看到效果。\n\n* myThread.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\nfrom time import ctime, sleep\n\n\nclass MyThread(threading.Thread):\n\n    def __init__(self, func, args, name=''):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.func = func\n        self.args = args\n\n    def get_result(self):\n        # 返回每一次的执行结果\n        return self.res\n\n    def run(self):\n        print('starting at:', ctime())\n        self.res = self.func(*self.args)\n        print('done at:', ctime())\n\n```\n\n* compare.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom myThread import MyThread\nfrom time import ctime, sleep\n\n\ndef fib(x):\n    # 斐波拉契\n    sleep(0.005)\n    if x < 2:\n        return 1\n    return fib(x-2)+fib(x-1)\n\n\ndef fac(x):\n    # 阶乘\n    sleep(0.1)\n    if x < 2:\n        return 1\n    return x*fac(x-1)\n\n\ndef sum(x):\n    # 累加\n    sleep(0.1)\n    if x < 2:\n        return 1\n    return x + sum(x-1)\n\nfuncs = [fib, fac, sum]\nn = 12\n\n\ndef main():\n    nfuncs = range(len(funcs))\n    print('***SINGLE THREAD***')\n    for i in nfuncs:\n        # 单线程顺序执行\n        print('starting', funcs[i].__name__, 'at:', ctime())\n        print(funcs[i](n))\n        print(funcs[i].__name__, 'finished at:', ctime(), '\\n')\n\n    print('\\n ***MULTIPLE THREADS***')\n    threads = []\n    for i in nfuncs:\n        # 多线程执行\n        t = MyThread(funcs[i], (n,),funcs[i].__name__)\n        threads.append(t)\n\n    for i in nfuncs:\n        threads[i].start()\n\n    for i in nfuncs:\n        threads[i].join()\n        print(threads[i].get_result())\n\n    print('all DONE')\n\nif __name__ == '__main__':\n    main()\n```\n\n* 结果\n\n```\n***SINGLE THREAD***\nstarting fib at: Mon Feb 26 15:36:22 2018\n233\nfib finished at: Mon Feb 26 15:36:24 2018\n\nstarting fac at: Mon Feb 26 15:36:24 2018\n479001600\nfac finished at: Mon Feb 26 15:36:25 2018\n\nstarting sum at: Mon Feb 26 15:36:25 2018\n78\nsum finished at: Mon Feb 26 15:36:26 2018\n\n\n ***MULTIPLE THREADS***\nstarting at: Mon Feb 26 15:36:26 2018\nstarting at: Mon Feb 26 15:36:26 2018\nstarting at: Mon Feb 26 15:36:26 2018\ndone at: Mon Feb 26 15:36:28 2018\ndone at: Mon Feb 26 15:36:28 2018\ndone at: Mon Feb 26 15:36:29 2018\n233\n479001600\n78\nall DONE\n```\n","slug":"Python多线程-一","published":1,"updated":"2018-02-27T00:30:27.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3z0007twn97qw9jgdd","content":"<p>多线程编程对于以下编程任务是非常理想的：</p>\n<ul>\n<li>本质上是异步的</li>\n<li>需要多个并发活动</li>\n<li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare-->\n</li>\n</ul>\n<p>使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</p>\n<ul>\n<li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li>\n<li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li>\n<li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li>\n</ul>\n<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><ul>\n<li><p>进程</p>\n<blockquote>\n<p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p>\n</blockquote>\n</li>\n<li><p>线程</p>\n<blockquote>\n<p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"线程与Python\"><a href=\"#线程与Python\" class=\"headerlink\" title=\"线程与Python\"></a>线程与Python</h2><h3 id=\"全局解释锁\"><a href=\"#全局解释锁\" class=\"headerlink\" title=\"全局解释锁\"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由<strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p>\n<ol>\n<li>设置GIL</li>\n<li>切换进一个线程去运行</li>\n<li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li>\n<li>把线程设置回睡眠状态(切换出线程)</li>\n<li>解锁GIL</li>\n<li>重复上述步骤</li>\n</ol>\n<p>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</p>\n<h3 id=\"退出线程\"><a href=\"#退出线程\" class=\"headerlink\" title=\"退出线程\"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p>\n<h2 id=\"thread模块\"><a href=\"#thread模块\" class=\"headerlink\" title=\"_thread模块\"></a>_thread模块</h2><p>  <a href=\"https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread\" target=\"_blank\" rel=\"noopener\">_thread模块</a>提供了派生线程、基本的同步数据结构(<em>锁对象(lock object)</em>,也叫 <em>原语锁</em>、<em>简单锁</em>、<em>互斥锁</em>、<em>互斥</em> 和 <em>二进制信号量</em>)</p>\n<ul>\n<li>_thread模和锁对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数/方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">_thread模块的函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start_new_thread(function, args, kwargs = None)</td>\n<td style=\"text-align:center\">派生一个新的线程，使用给定的args和可选的kwargs来执行function</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allocate_lock()</td>\n<td style=\"text-align:center\">分配LockType锁对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exit()</td>\n<td style=\"text-align:center\">给线程退出命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LockType锁对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">acquire(wait = None)</td>\n<td style=\"text-align:center\">尝试获取锁对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">locked()</td>\n<td style=\"text-align:center\">如果获取了锁对象则返回True，否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">release()</td>\n<td style=\"text-align:center\">释放锁</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用线程\"><a href=\"#使用线程\" class=\"headerlink\" title=\"使用线程\"></a>使用线程</h3><h4 id=\"一般方式\"><a href=\"#一般方式\" class=\"headerlink\" title=\"一般方式\"></a>一般方式</h4><ul>\n<li><p>程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_0</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop_0 at:'</span>, ctime())</span><br><span class=\"line\">    sleep(<span class=\"number\">4</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'loop_0 done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop_1 at:'</span>, ctime())</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'loop_1 done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    <span class=\"comment\"># start_new_thread 方法即使要执行的</span></span><br><span class=\"line\">    <span class=\"comment\"># 函数不需要参数，也需要传递一个空元组</span></span><br><span class=\"line\">    _thread.start_new_thread(loop_0, ())</span><br><span class=\"line\">    _thread.start_new_thread(loop_1, ())</span><br><span class=\"line\">    <span class=\"comment\"># 阻止主线程的执行，保证其最后执行，</span></span><br><span class=\"line\">    <span class=\"comment\"># 后续去掉这种方式，引入锁的方式</span></span><br><span class=\"line\">    sleep(<span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'all done at'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行结果</p>\n<p>  在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(<em>loop_0()</em> )的运行时间</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">start loop_0 at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">start loop_1 at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">loop_1 done at: Mon Feb 26 08:52:12 2018</span><br><span class=\"line\">loop_0 done at: Mon Feb 26 08:52:14 2018</span><br><span class=\"line\">all done at Mon Feb 26 08:52:16 2018</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用锁对象\"><a href=\"#使用锁对象\" class=\"headerlink\" title=\"使用锁对象\"></a>使用锁对象</h4><ul>\n<li><p>程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec, lock)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># nloop: 第几个线程</span></span><br><span class=\"line\">    <span class=\"comment\"># sec: 时间</span></span><br><span class=\"line\">    <span class=\"comment\"># lock: 分配的锁</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop'</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\">    <span class=\"comment\"># 当时间到了的时候释放锁</span></span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    locks = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 生成锁对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 通过allocate_lock()函数得到锁对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过acquire()取到每个锁</span></span><br><span class=\"line\">        <span class=\"comment\"># 添加进locks列表</span></span><br><span class=\"line\">        lock = _thread.allocate_lock()</span><br><span class=\"line\">        lock.acquire()</span><br><span class=\"line\">        locks.append(lock)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 派生线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 传递循环号，时间、锁对象</span></span><br><span class=\"line\">        _thread.start_new_thread(loop, (i, loops[i], locks[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程的锁都释放完了才执行主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> locks[i].locked():</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行结果</p>\n<p>  未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">loop 1 done at: Mon Feb 26 09:37:41 2018</span><br><span class=\"line\">loop 0 done at: Mon Feb 26 09:37:43 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 09:37:43 2018</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"threading模块\"><a href=\"#threading模块\" class=\"headerlink\" title=\"threading模块\"></a>threading模块</h2><p><a href=\"https://docs.python.org/3/library/threading.html?highlight=threading#module-threading\" target=\"_blank\" rel=\"noopener\">threading模块</a>提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制</p>\n<ul>\n<li>threading模块的对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Thread</td>\n<td style=\"text-align:center\">表示一个执行线程的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lock</td>\n<td style=\"text-align:center\">锁原语对象(和thread模块中的锁一样)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RLock</td>\n<td style=\"text-align:center\">可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Condition</td>\n<td style=\"text-align:center\">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Event</td>\n<td style=\"text-align:center\">条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Semaphone</td>\n<td style=\"text-align:center\">为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BoundSemaphone</td>\n<td style=\"text-align:center\">与Semaphone相似，不过它不允许超过初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Timer</td>\n<td style=\"text-align:center\">与Thread相似，不过它要在运行前等待一段时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Barrier</td>\n<td style=\"text-align:center\">创建一个“障碍”,必须达到指定数量的线程后才可以继续</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><ul>\n<li>Thread对象的属性和方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">线程名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ident</td>\n<td style=\"text-align:center\">线程的标识符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">daemon</td>\n<td style=\"text-align:center\">布尔标志，表示这个线程是否是守护线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Thread对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>init</em>(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None)</td>\n<td style=\"text-align:center\">实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start()</td>\n<td style=\"text-align:center\">开始执行该线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">run()</td>\n<td style=\"text-align:center\">定义线程功能的方法(通常在子类中被应用开发者重写)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">join(timeout=None)</td>\n<td style=\"text-align:center\">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td>\n</tr>\n</tbody>\n</table>\n<p>使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：</p>\n<ul>\n<li>创建Thread的实例，传给它一个函数</li>\n<li>创建Thread的实例，传给它一个可调用的类实例</li>\n<li>派生Thread的子类，并创建子类的实例</li>\n</ul>\n<h4 id=\"创建Thread的实例，传给它一个函数\"><a href=\"#创建Thread的实例，传给它一个函数\" class=\"headerlink\" title=\"创建Thread的实例，传给它一个函数\"></a>创建Thread的实例，传给它一个函数</h4><p><code>join()</code> 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。<code>join()</code>方法只有在需要等待线程完成的时候才是有用的。</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop'</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        t = threading.Thread(target=loop, args=(i, loops[i]))</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程结束</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">loop 1 done at: Mon Feb 26 14:29:38 2018</span><br><span class=\"line\">loop 0 done at: Mon Feb 26 14:29:40 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 14:29:40 2018</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Thread的实例，传给它一个可调用的类实例\"><a href=\"#创建Thread的实例，传给它一个可调用的类实例\" class=\"headerlink\" title=\"创建Thread的实例，传给它一个可调用的类实例\"></a>创建Thread的实例，传给它一个可调用的类实例</h4><p>将传递进去一个可调用类(实例)而不仅仅是一个函数</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadFunc</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Thread类的代码将调用ThreadFunc对象，此时会调用这个方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数</span></span><br><span class=\"line\">        self.func(*self.args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop '</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 创建所有线程</span></span><br><span class=\"line\">        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">loop  1 done at: Mon Feb 26 14:47:30 2018</span><br><span class=\"line\">loop  0 done at: Mon Feb 26 14:47:32 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 14:47:32 2018</span><br></pre></td></tr></table></figure>\n<h4 id=\"派生Thread的子类，并创建子类的实例-推荐\"><a href=\"#派生Thread的子类，并创建子类的实例-推荐\" class=\"headerlink\" title=\"派生Thread的子类，并创建子类的实例(推荐)\"></a>派生Thread的子类，并创建子类的实例(推荐)</h4><p>将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 必须先调用基类的构造函数</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 必须重写run()方法</span></span><br><span class=\"line\">        self.func(*self.args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop '</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 创建所有线程</span></span><br><span class=\"line\">        t = MyThread(loop, (i, loops[i]), loop.__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">loop  1 done at: Mon Feb 26 15:08:35 2018</span><br><span class=\"line\">loop  0 done at: Mon Feb 26 15:08:37 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 15:08:37 2018</span><br></pre></td></tr></table></figure>\n<h2 id=\"单线程和多线程执行的对比\"><a href=\"#单线程和多线程执行的对比\" class=\"headerlink\" title=\"单线程和多线程执行的对比\"></a>单线程和多线程执行的对比</h2><p>先后使用单线程和多线程执行三个独立的递归函数，代码中加入<code>sleep()</code>是为了减慢执行速度，能够更好的看到效果。</p>\n<ul>\n<li>myThread.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_result</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 返回每一次的执行结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">        self.res = self.func(*self.args)</span><br><span class=\"line\">        print(<span class=\"string\">'done at:'</span>, ctime())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>compare.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> myThread <span class=\"keyword\">import</span> MyThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 斐波拉契</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(x<span class=\"number\">-2</span>)+fib(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fac</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 阶乘</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*fac(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 累加</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + sum(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">funcs = [fib, fac, sum]</span><br><span class=\"line\">n = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    nfuncs = range(len(funcs))</span><br><span class=\"line\">    print(<span class=\"string\">'***SINGLE THREAD***'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        <span class=\"comment\"># 单线程顺序执行</span></span><br><span class=\"line\">        print(<span class=\"string\">'starting'</span>, funcs[i].__name__, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">        print(funcs[i](n))</span><br><span class=\"line\">        print(funcs[i].__name__, <span class=\"string\">'finished at:'</span>, ctime(), <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n ***MULTIPLE THREADS***'</span>)</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        <span class=\"comment\"># 多线程执行</span></span><br><span class=\"line\">        t = MyThread(funcs[i], (n,),funcs[i].__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\">        print(threads[i].get_result())</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***SINGLE THREAD***</span><br><span class=\"line\">starting fib at: Mon Feb 26 15:36:22 2018</span><br><span class=\"line\">233</span><br><span class=\"line\">fib finished at: Mon Feb 26 15:36:24 2018</span><br><span class=\"line\"></span><br><span class=\"line\">starting fac at: Mon Feb 26 15:36:24 2018</span><br><span class=\"line\">479001600</span><br><span class=\"line\">fac finished at: Mon Feb 26 15:36:25 2018</span><br><span class=\"line\"></span><br><span class=\"line\">starting sum at: Mon Feb 26 15:36:25 2018</span><br><span class=\"line\">78</span><br><span class=\"line\">sum finished at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> ***MULTIPLE THREADS***</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:28 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:28 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:29 2018</span><br><span class=\"line\">233</span><br><span class=\"line\">479001600</span><br><span class=\"line\">78</span><br><span class=\"line\">all DONE</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>多线程编程对于以下编程任务是非常理想的：</p>\n<ul>\n<li>本质上是异步的</li>\n<li>需要多个并发活动</li>\n<li>每个活动的处理顺序可能是不确定的(随机、不可预测的)<!--Mare-->\n</li>\n</ul>\n<p>使用多线程或者类似Queue的共享数据结构可以将一个串行程序规划成几个执行特定任务的线程</p>\n<ul>\n<li>UserRequestThread: 负责读取客户端输入。程序将创建多个线程，每个客户端一个，客户端的请求将会被放入队列中</li>\n<li>RequestProcessor: 该线程负责从队列中获取请求并进行处理，为第三个线程提供输出</li>\n<li>ReplyThread: 负责向用户输出，将结果传回给用户，或者把数据写到本地文件系统或者数据库中</li>\n</ul>\n<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><ul>\n<li><p>进程</p>\n<blockquote>\n<p>计算机程序是储存在磁盘上的可执行二进制(或其他类型)的文件。<strong>进程</strong> （有时称为 <strong>重量级进程</strong>）则是一个执行中的程序。每一个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上的所有进程的执行，并为它们合理地分配时间。进程可以通过 <strong>派生</strong>(fork或spawn)新的进程来执行任务,而进程之间的通信只能通过 <em>进程间通信(IPC)</em> 的方式共享信息</p>\n</blockquote>\n</li>\n<li><p>线程</p>\n<blockquote>\n<p><strong>线程</strong>（有时称为 <strong>轻量级进程</strong>）共享相同的上下文。相当于在主进程中并行运行的一些“迷你进程”。当其他线程运行是，它可以被抢占（中断）和临时挂起（睡眠），这种做法叫 <em>让步(yielding)</em>。早单核CPU系统中，线程的实际规划是：每个线程运行一小会儿，然后让步给其他线程（再次排队等待更多的CPU时间）。在整个进程的执行当中，每个线程执行它自己特定的任务，在必要时和其他线程进行结果通信。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"线程与Python\"><a href=\"#线程与Python\" class=\"headerlink\" title=\"线程与Python\"></a>线程与Python</h2><h3 id=\"全局解释锁\"><a href=\"#全局解释锁\" class=\"headerlink\" title=\"全局解释锁\"></a>全局解释锁</h3><p>  对Python虚拟机的访问是由<strong>全局解释锁(GIL)</strong> 控制的。这个锁用来保证同时只能有一个线程运行。在多线程环境中，Python虚拟机将按照下面的方式执行。</p>\n<ol>\n<li>设置GIL</li>\n<li>切换进一个线程去运行</li>\n<li>执行下面操作之一<br> a. 指定数量的字节码指令<br> b. 线程主动让出控制权(可以调用time.sleep(0)来完成)</li>\n<li>把线程设置回睡眠状态(切换出线程)</li>\n<li>解锁GIL</li>\n<li>重复上述步骤</li>\n</ol>\n<p>当调用外部代码(即，任意C/C++扩展的内置函数)时，GIL会保持锁定，直至函数执行结束。</p>\n<h3 id=\"退出线程\"><a href=\"#退出线程\" class=\"headerlink\" title=\"退出线程\"></a>退出线程</h3><p>  当一个线程完成函数的执行时，就会退出。还可以通过调用<code>thread.exit()</code>或者<code>sys.exit()</code>退出进程，或者抛出SystemExit异常，是线程退出。</p>\n<h2 id=\"thread模块\"><a href=\"#thread模块\" class=\"headerlink\" title=\"_thread模块\"></a>_thread模块</h2><p>  <a href=\"https://docs.python.org/3/library/_thread.html?highlight=_thread#module-_thread\" target=\"_blank\" rel=\"noopener\">_thread模块</a>提供了派生线程、基本的同步数据结构(<em>锁对象(lock object)</em>,也叫 <em>原语锁</em>、<em>简单锁</em>、<em>互斥锁</em>、<em>互斥</em> 和 <em>二进制信号量</em>)</p>\n<ul>\n<li>_thread模和锁对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数/方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">_thread模块的函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start_new_thread(function, args, kwargs = None)</td>\n<td style=\"text-align:center\">派生一个新的线程，使用给定的args和可选的kwargs来执行function</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allocate_lock()</td>\n<td style=\"text-align:center\">分配LockType锁对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exit()</td>\n<td style=\"text-align:center\">给线程退出命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LockType锁对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">acquire(wait = None)</td>\n<td style=\"text-align:center\">尝试获取锁对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">locked()</td>\n<td style=\"text-align:center\">如果获取了锁对象则返回True，否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">release()</td>\n<td style=\"text-align:center\">释放锁</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用线程\"><a href=\"#使用线程\" class=\"headerlink\" title=\"使用线程\"></a>使用线程</h3><h4 id=\"一般方式\"><a href=\"#一般方式\" class=\"headerlink\" title=\"一般方式\"></a>一般方式</h4><ul>\n<li><p>程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_0</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop_0 at:'</span>, ctime())</span><br><span class=\"line\">    sleep(<span class=\"number\">4</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'loop_0 done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop_1 at:'</span>, ctime())</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'loop_1 done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    <span class=\"comment\"># start_new_thread 方法即使要执行的</span></span><br><span class=\"line\">    <span class=\"comment\"># 函数不需要参数，也需要传递一个空元组</span></span><br><span class=\"line\">    _thread.start_new_thread(loop_0, ())</span><br><span class=\"line\">    _thread.start_new_thread(loop_1, ())</span><br><span class=\"line\">    <span class=\"comment\"># 阻止主线程的执行，保证其最后执行，</span></span><br><span class=\"line\">    <span class=\"comment\"># 后续去掉这种方式，引入锁的方式</span></span><br><span class=\"line\">    sleep(<span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'all done at'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行结果</p>\n<p>  在主线程中同时开启了两个线程，loop_1()由于只睡眠了2s，所以先执行完，其实执行完loo_0()，线程执行的总时间是最慢的那个线程(<em>loop_0()</em> )的运行时间</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">start loop_0 at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">start loop_1 at: Mon Feb 26 08:52:10 2018</span><br><span class=\"line\">loop_1 done at: Mon Feb 26 08:52:12 2018</span><br><span class=\"line\">loop_0 done at: Mon Feb 26 08:52:14 2018</span><br><span class=\"line\">all done at Mon Feb 26 08:52:16 2018</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用锁对象\"><a href=\"#使用锁对象\" class=\"headerlink\" title=\"使用锁对象\"></a>使用锁对象</h4><ul>\n<li><p>程序</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec, lock)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># nloop: 第几个线程</span></span><br><span class=\"line\">    <span class=\"comment\"># sec: 时间</span></span><br><span class=\"line\">    <span class=\"comment\"># lock: 分配的锁</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop'</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\">    <span class=\"comment\"># 当时间到了的时候释放锁</span></span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    locks = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 生成锁对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 通过allocate_lock()函数得到锁对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过acquire()取到每个锁</span></span><br><span class=\"line\">        <span class=\"comment\"># 添加进locks列表</span></span><br><span class=\"line\">        lock = _thread.allocate_lock()</span><br><span class=\"line\">        lock.acquire()</span><br><span class=\"line\">        locks.append(lock)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 派生线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 传递循环号，时间、锁对象</span></span><br><span class=\"line\">        _thread.start_new_thread(loop, (i, loops[i], locks[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程的锁都释放完了才执行主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> locks[i].locked():</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行结果</p>\n<p>  未再设置时间等待所有线程执行结束，而是在线程全部结束后马上运行主线程代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 09:37:39 2018</span><br><span class=\"line\">loop 1 done at: Mon Feb 26 09:37:41 2018</span><br><span class=\"line\">loop 0 done at: Mon Feb 26 09:37:43 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 09:37:43 2018</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"threading模块\"><a href=\"#threading模块\" class=\"headerlink\" title=\"threading模块\"></a>threading模块</h2><p><a href=\"https://docs.python.org/3/library/threading.html?highlight=threading#module-threading\" target=\"_blank\" rel=\"noopener\">threading模块</a>提供了更高级别、功能更全面的线程管理,还包括许多非常好用的同步机制</p>\n<ul>\n<li>threading模块的对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Thread</td>\n<td style=\"text-align:center\">表示一个执行线程的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lock</td>\n<td style=\"text-align:center\">锁原语对象(和thread模块中的锁一样)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RLock</td>\n<td style=\"text-align:center\">可重入锁对象，使单一线程可以（再次）获得已持有的锁（锁递归）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Condition</td>\n<td style=\"text-align:center\">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Event</td>\n<td style=\"text-align:center\">条件变量的通用版本，任何数量的线程等待某个事件的发生，在改事件发生后所有线程将被激活</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Semaphone</td>\n<td style=\"text-align:center\">为线程间共享的有限资源提供一个“计数器”，如果没有可用资源时会被阻塞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BoundSemaphone</td>\n<td style=\"text-align:center\">与Semaphone相似，不过它不允许超过初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Timer</td>\n<td style=\"text-align:center\">与Thread相似，不过它要在运行前等待一段时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Barrier</td>\n<td style=\"text-align:center\">创建一个“障碍”,必须达到指定数量的线程后才可以继续</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><ul>\n<li>Thread对象的属性和方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:center\">线程名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ident</td>\n<td style=\"text-align:center\">线程的标识符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">daemon</td>\n<td style=\"text-align:center\">布尔标志，表示这个线程是否是守护线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Thread对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>init</em>(group=None, target=None, name=None, args=(), kwargs={}, verbose=None, daemon=就返回None)</td>\n<td style=\"text-align:center\">实例化一个线程对象，需要一个可调用的target，以及参数args或kargs。还可以传递name或group参数。daemon的值将会设定thread.daemon属性/标志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start()</td>\n<td style=\"text-align:center\">开始执行该线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">run()</td>\n<td style=\"text-align:center\">定义线程功能的方法(通常在子类中被应用开发者重写)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">join(timeout=None)</td>\n<td style=\"text-align:center\">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td>\n</tr>\n</tbody>\n</table>\n<p>使用Thread类，可以有很多方法创建线程。其中比较相似的三种方法是：</p>\n<ul>\n<li>创建Thread的实例，传给它一个函数</li>\n<li>创建Thread的实例，传给它一个可调用的类实例</li>\n<li>派生Thread的子类，并创建子类的实例</li>\n</ul>\n<h4 id=\"创建Thread的实例，传给它一个函数\"><a href=\"#创建Thread的实例，传给它一个函数\" class=\"headerlink\" title=\"创建Thread的实例，传给它一个函数\"></a>创建Thread的实例，传给它一个函数</h4><p><code>join()</code> 方法可以让主线程等待所有线程执行完毕，或者在提供了超时时间的情况下达到超时时间。<code>join()</code>方法只有在需要等待线程完成的时候才是有用的。</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop'</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        t = threading.Thread(target=loop, args=(i, loops[i]))</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程结束</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 14:29:36 2018</span><br><span class=\"line\">loop 1 done at: Mon Feb 26 14:29:38 2018</span><br><span class=\"line\">loop 0 done at: Mon Feb 26 14:29:40 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 14:29:40 2018</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Thread的实例，传给它一个可调用的类实例\"><a href=\"#创建Thread的实例，传给它一个可调用的类实例\" class=\"headerlink\" title=\"创建Thread的实例，传给它一个可调用的类实例\"></a>创建Thread的实例，传给它一个可调用的类实例</h4><p>将传递进去一个可调用类(实例)而不仅仅是一个函数</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadFunc</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Thread类的代码将调用ThreadFunc对象，此时会调用这个方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为init方法已经设定相关值，所以不需要再将其传递给Thread()的构造函数</span></span><br><span class=\"line\">        self.func(*self.args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop '</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 创建所有线程</span></span><br><span class=\"line\">        t = threading.Thread(target=ThreadFunc(loop, (i, loops[i])))</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 14:47:28 2018</span><br><span class=\"line\">loop  1 done at: Mon Feb 26 14:47:30 2018</span><br><span class=\"line\">loop  0 done at: Mon Feb 26 14:47:32 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 14:47:32 2018</span><br></pre></td></tr></table></figure>\n<h4 id=\"派生Thread的子类，并创建子类的实例-推荐\"><a href=\"#派生Thread的子类，并创建子类的实例-推荐\" class=\"headerlink\" title=\"派生Thread的子类，并创建子类的实例(推荐)\"></a>派生Thread的子类，并创建子类的实例(推荐)</h4><p>将Thread子类化，而不是直接对其实例化。这将在定制线程对象的时候拥有更多的灵活性，也能简化线程创建的调用过程</p>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\">loops = [<span class=\"number\">4</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 必须先调用基类的构造函数</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 必须重写run()方法</span></span><br><span class=\"line\">        self.func(*self.args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(nloop, sec)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'start loop'</span>, nloop, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    print(<span class=\"string\">'loop '</span>, nloop, <span class=\"string\">'done at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    nloops = range(len(loops))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 创建所有线程</span></span><br><span class=\"line\">        t = MyThread(loop, (i, loops[i]), loop.__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nloops:</span><br><span class=\"line\">        <span class=\"comment\"># 等待所有线程</span></span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">start loop 0 at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">start loop 1 at: Mon Feb 26 15:08:33 2018</span><br><span class=\"line\">loop  1 done at: Mon Feb 26 15:08:35 2018</span><br><span class=\"line\">loop  0 done at: Mon Feb 26 15:08:37 2018</span><br><span class=\"line\">all DONE at: Mon Feb 26 15:08:37 2018</span><br></pre></td></tr></table></figure>\n<h2 id=\"单线程和多线程执行的对比\"><a href=\"#单线程和多线程执行的对比\" class=\"headerlink\" title=\"单线程和多线程执行的对比\"></a>单线程和多线程执行的对比</h2><p>先后使用单线程和多线程执行三个独立的递归函数，代码中加入<code>sleep()</code>是为了减慢执行速度，能够更好的看到效果。</p>\n<ul>\n<li>myThread.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args, name=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_result</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 返回每一次的执行结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">        self.res = self.func(*self.args)</span><br><span class=\"line\">        print(<span class=\"string\">'done at:'</span>, ctime())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>compare.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> myThread <span class=\"keyword\">import</span> MyThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime, sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 斐波拉契</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(x<span class=\"number\">-2</span>)+fib(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fac</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 阶乘</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*fac(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 累加</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + sum(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">funcs = [fib, fac, sum]</span><br><span class=\"line\">n = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    nfuncs = range(len(funcs))</span><br><span class=\"line\">    print(<span class=\"string\">'***SINGLE THREAD***'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        <span class=\"comment\"># 单线程顺序执行</span></span><br><span class=\"line\">        print(<span class=\"string\">'starting'</span>, funcs[i].__name__, <span class=\"string\">'at:'</span>, ctime())</span><br><span class=\"line\">        print(funcs[i](n))</span><br><span class=\"line\">        print(funcs[i].__name__, <span class=\"string\">'finished at:'</span>, ctime(), <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n ***MULTIPLE THREADS***'</span>)</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        <span class=\"comment\"># 多线程执行</span></span><br><span class=\"line\">        t = MyThread(funcs[i], (n,),funcs[i].__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\">        print(threads[i].get_result())</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***SINGLE THREAD***</span><br><span class=\"line\">starting fib at: Mon Feb 26 15:36:22 2018</span><br><span class=\"line\">233</span><br><span class=\"line\">fib finished at: Mon Feb 26 15:36:24 2018</span><br><span class=\"line\"></span><br><span class=\"line\">starting fac at: Mon Feb 26 15:36:24 2018</span><br><span class=\"line\">479001600</span><br><span class=\"line\">fac finished at: Mon Feb 26 15:36:25 2018</span><br><span class=\"line\"></span><br><span class=\"line\">starting sum at: Mon Feb 26 15:36:25 2018</span><br><span class=\"line\">78</span><br><span class=\"line\">sum finished at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> ***MULTIPLE THREADS***</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">starting at: Mon Feb 26 15:36:26 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:28 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:28 2018</span><br><span class=\"line\">done at: Mon Feb 26 15:36:29 2018</span><br><span class=\"line\">233</span><br><span class=\"line\">479001600</span><br><span class=\"line\">78</span><br><span class=\"line\">all DONE</span><br></pre></td></tr></table></figure>\n"},{"title":"Python Web客户端和服务器","date":"2018-03-06T01:20:10.000Z","copyright":true,"description":null,"_content":"\n## Python Web客户端工具\n浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。\n\n### 统一资源定位符\n>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。\n\nURL使用以下格式：\n`post_sch://net_loc/path;parans?query#frag`\n* Web地址的各个组件\n\n| URL组件  |                 描述                 |\n|:--------:|:------------------------------------:|\n| post_sch |          网络协议或下载方案          |\n| net_loc  |    服务器所在地(也许含有用户信息)    |\n|   path   | 使用斜杠(/)分割的文件或CGI应用的路径 |\n|  params  |               可选参数               |\n|  query   |     连接符(&)分割的一系列键值对      |\n|   frag   |        指定文档内特定锚的部分        |\n\nnet_loc可以拆分为多个组件，一些可选一些必备：\n`user:passwd@host:port`\n* 网络地址的各个组件\n\n|  组件  |                  描述                   |\n|:------:|:---------------------------------------:|\n|  user  |            用户名或登录(FTP)            |\n| passwd |              用户密码(FTP)              |\n|  host  | 运行Web服务器的计算机名称或地址(必需的) |\n|  port  |        端口号(如果不是默认的80)         |\n\nPython3 使用[urllib.parse](https://docs.python.org/3/library/urllib.parse.html)和[urllib.request](https://docs.python.org/3/library/urllib.request.html)两种不同的模块分别以不同的功能和兼容性来处理URL\n\n### urllib.parse模块\n* urllib.parse核心函数\n\n|                                         urllib.parse函数                                         |                                                       描述                                                       |\n|:------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------:|\n|                 urllib.parse.urlparse(urlstring, scheme='',allow_fragments=True)                 | 将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段 |\n|                                  urllib.parse.urlunparse(parts)                                  |                                         将URL数据的一个元组拼成URL字符串                                         |\n|                       urllib.parse.urljoin(base,url,allow_fragments=True)                        |                   将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段                    |\n|                  urllib.parse.quote(string,safe='/',encoding=None,errors=None)                   |                           对string在URL里无法使用的字符进行编码，safe中的字符无需编码                            |\n|                     urllib.parse.quote_plus(string,safe='',encoding,errors)                      |                           除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似                            |\n|                  urllib.parse.unquote(string,encoding='utf-8',errors='replace')                  |                                             将string编译过的字符解码                                             |\n|               urllib.parse.unquote_plus(string,encoding='utf-8',errors='replace')                |                                  除了将加好转换为空格，其他功能与unquote()相同                                   |\n| urllib.parse.urlencode(query,doseq=False,safe='',encoding=None,errors=None,quote_via=quote_plus) |               将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码               |\n\n下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法\n`from urllib.parse import *`\n\n* *urllib.parse.urlparse(urlstring, scheme='',allow_fragments=True)*\n```Python\nurlparse('http://coldjune.com/categories/')\n# 输出结果\nParseResult(scheme='http', netloc='coldjune.com', path='/categories/', params='', query='', fragment='')\n```\n\n* *urllib.parse.urlunparse(parts)*\n```Python\nurlunparse(('http', 'coldjune.com', '/categories/', '', '', ''))\n# 输出结果\n'http://coldjune.com/categories/'\n```\n* *urllib.parse.urljoin(base,url,allow_fragments=True)*\n```Python\n# 如果是绝对路径将整个替换除根域名以外的所有内容\nurljoin('http://coldjune.com/categories/1.html','/tags/2.html')\n# 输出结果\n'http://coldjune.com/tags/2.html'\n\n# 如果是相对路径将会将末端文件去掉与心得url连接\nurljoin('http://coldjune.com/categories/1.html','tags/2.html')\n# 输出结果\n'http://coldjune.com/categories/tags/2.html'\n``\n* *urllib.parse.quote(string,safe='/',encoding=None,errors=None)*\n> 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)\n\n  ```Python\n  quote('http://www.~coldjune.com/tag categoriese?name=coold&search=6')\n  # 输出结果\n  'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'\n  ```\n\n* *urllib.parse.unquote(string,encoding='utf-8',errors='replace')*\n```Python\nunquote('http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6')\n# 输出结果\n'http://www.~coldjune.com/tag categoriese?name=coold&search=6'\n```\n\n* *urllib.parse.quote_plus(string,safe='',encoding,errors)*\n```Python\nquote_plus('http://www.~coldjune.com/tag categoriese?name=coold&search=6')\n# 输出结果\n'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'\n```\n\n* *urllib.parse.unquote_plus(string,encoding='utf-8',errors='replace')*\n```Python\nunquote_plus('http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6')\n# 输出结果\n'http://www.~coldjune.com/tag categoriese?name=coold&search=6'\n```\n\n* *urllib.parse.urlencode(query,doseq=False,safe='',encoding=None,errors=None,quote_via=quote_plus)*\n```Python\nquery={'name':'coldjune','search':'6'}\nurlencode(query)\n# 输出结果\n'name=coldjune&search=6'\n```\n\n### urllib.request模块/包\n* urllib.request模块核心函数\n\n|                                            urllib.request函数                                             |                                                              描述                                                              |\n|:---------------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n| urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None) | 打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证 |\n|                  urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)                  | 将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息                                                                                                                               |\n\n1. *urllib.request.urlopen(url, data=None, [timeout,],*\n  *cafile=None, capath=None,cadefault=False,context=None)*\n>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入\"file\"方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用\"GET\"请求，向Web服务器发送的请求字符串应该是url的一部分；使用\"POST\"请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象\n\n* urlopen()文件类型对象的方法\n\n|      方法       |             描述              |\n|:---------------:|:-----------------------------:|\n| f.read([bytes]) |  从f中读出所有或bytes个字节   |\n|  f.readline()   |         从f中读取一行         |\n|  f.readlines()  | 从f中读取所有行，作为列表返回 |\n|    f.close()    |        关闭f的URL连接         |\n|   f.fileno()    |        返回f的文件句柄        |\n|    f.info()     |       获取f的MIME头文件       |\n|   f.geturl()    |        返回f的真正URL         |\n\n2. *urllib.request.urlretrieve(url,*\n  *filename=None,reporthook=None,data=None)*\n>urlretrieve（）用于下载完整的HTML\n\n如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。`urlretrieve()`返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。\n\n### HTTP验证示例\n> 需要先启动本地的tomcat并访问tomcat地址\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport urllib.request\nimport urllib.error\nimport urllib.parse\n\n# 初始化过程\n# 后续脚本使用的常量\nLOGIN = 'wesly'\nPASSWD = \"you'llNeverGuess\"\nURL = 'http://localhost:8080/docs/setup.html'\nREALM = 'Secure Archive'\n\n\ndef handler_version(url):\n    # 分配了一个基本处理程序类，添加了验证信息。\n    # 用该处理程序建立一个URL开启器\n    # 安装该开启器以便所有已打开的URL都能用到这些验证信息\n    hdlr = urllib.request.HTTPBasicAuthHandler()\n    hdlr.add_password(REALM,\n                      urllib.parse.urlparse(url)[1],\n                      LOGIN,\n                      PASSWD)\n    opener = urllib.request.build_opener(hdlr)\n    urllib.request.install_opener(opener=opener)\n    return url\n\n\ndef request_version(url):\n    # 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头\n    # 该请求用来替换其中的URL字符串\n    from base64 import encodebytes\n    req = urllib.request.Request(url)\n    b64str = encodebytes(bytes('%s %s' % (LOGIN, PASSWD), 'utf-8'))[:-1]\n    req.add_header(\"Authorization\", 'Basic %s' % b64str)\n    return req\n\n\nfor funcType in ('handler', 'request'):\n    # 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行\n    print('***Using %s:' % funcType.upper())\n    url = eval('%s_version' % funcType)(URL)\n    f = urllib.request.urlopen(url)\n    print(str(f.readline(), 'utf-8'))\n    f.close()\n```\n\n* 输出结果\n\n```\n***Using HANDLER:\n<!DOCTYPE html SYSTEM \"about:legacy-compat\">\n\n***Using REQUEST:\n<!DOCTYPE html SYSTEM \"about:legacy-compat\">\n```\n\n## Web客户端\n一个稍微复杂的Web客户端例子就是 *网络爬虫*。这些程序可以为了不同目的在因特网上探索和下载页面。\n> 通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档\nimport os\nimport sys\nimport urllib.request\nimport urllib.parse\nfrom bs4 import BeautifulSoup\n\n\nclass Retriever(object):\n    \"\"\"\n    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入\"to-do\"队列。\n    __slots__变量表示实例只能拥有self.url和self.file属性\n    \"\"\"\n    __slots__ = ('url', 'file')\n\n    def __init__(self, url):\n        \"\"\"\n        创建Retriever对象时调用，将get_file()返回的URL字符串和对\n        应的文件名作为实例属性存储起来\n        :param url: 需要抓取的连接\n        \"\"\"\n        self.url, self.file = self.get_file(url)\n\n    def get_file(self, url, default='index.html'):\n        \"\"\"\n         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件\n        :param url: 指定URL获取页面\n        :param default: 默认的文件名\n        :return: 返回url和对应的文件名\n        \"\"\"\n        # 将URL的http://前缀移除，丢掉任何为获取主机名\n        # 而附加的额外信息，如用户名、密码和端口号\n        parsed = urllib.parse.urlparse(url)\n        host = parsed.netloc.split('@')[-1].split(':')[0]\n        # 将字符进行解码，连接域名创建文件名\n        filepath = '%s%s' % (host, urllib.parse.unquote(parsed.path))\n        if not os.path.splitext(parsed.path)[1]:\n            # 如果URL没有文件扩展名后这将default文件加上\n            filepath = os.path.join(filepath, default)\n        # 获取文件路径\n        linkdir = os.path.dirname(filepath)\n        if not os.path.isdir(linkdir):\n            # 如果linkdir不是一个目录\n            if os.path.exists(linkdir):\n                # 如果linkdir存在则删除\n                os.unlink(linkdir)\n            # 创建同名目录\n            os.makedirs(linkdir)\n        return url, filepath\n\n    def download(self):\n        \"\"\"\n        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()\n        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串\n        :return: 文件名\n        \"\"\"\n        try:\n            retval = urllib.request.urlretrieve(self.url, filename=self.file)\n        except IOError as e:\n            retval = (('***ERROR: bad URL \"%s\": %s' % (self.url, e)),)\n        return retval\n\n    def parse_links(self):\n        \"\"\"\n        通过BeautifulSoup解析文件，查看文件包含的额外连接。\n        :return: 文件中包含连接的集合\n        \"\"\"\n        with open(self.file, 'r', encoding='utf-8') as f:\n            data = f.read()\n        soup = BeautifulSoup(data, 'html.parser')\n        parse_links = []\n        for x in soup.find_all('a'):\n            if 'href' in x.attrs:\n                parse_links.append(x['href'])\n        return parse_links\n\n\nclass Crawler(object):\n    \"\"\"\n    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例\n    \"\"\"\n    # 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1\n    count = 0\n\n    def __init__(self, url):\n        \"\"\"\n        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长\n        self.seen 是已下载连接的集合\n        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致\n        :param url: 抓取的url\n        \"\"\"\n        self.q = [url]\n        self.seen = set()\n        parsed = urllib.parse.urlparse(url)\n        host = parsed.netloc.split('@')[-1].split(':')[0]\n        self.dom = '.'.join(host.split('.')[-2:])\n\n    def get_page(self, url, media=False):\n        \"\"\"\n        用于下载页面并记录连接信息\n        :param url:\n        :param media:\n        :return:\n        \"\"\"\n        # 实例化Retriever类并传入需要抓取的连接\n        # 下在对应连接并取到文件名\n        r = Retriever(url)\n        fname = r.download()[0]\n        if fname[0] == '*':\n            print(fname, '....skipping parse')\n            return\n        Crawler.count += 1\n        print('\\n(', Crawler.count, ')')\n        print('URL:', url)\n        print('FILE:', fname)\n        self.seen.add(url)\n        # 跳过所有非Web页面\n        ftype = os.path.splitext(fname)[1]\n        if ftype not in ('.htm', '.html'):\n            return\n        for link in r.parse_links():\n            if link.startswith('mailto:'):\n                print('...discarded , mailto link')\n                continue\n\n            if not media:\n                ftype = os.path.splitext(link)[1]\n                if ftype in ('.mp3', '.mp4', '.m4av', '.wav'):\n                    print('... discarded, media file')\n                    continue\n\n            if not link.startswith('http://') and ':' not in link:\n                link = urllib.parse.quote(link, safe='#')\n                link = urllib.parse.urljoin(url, link)\n            print('*', link)\n            if link not in self.seen:\n                if self.dom not in link:\n                    print('... discarded, not in domain')\n                else:\n                    # 如果没有下载过并且是属于该网站就加入待下载列表\n                    if link not in self.q:\n                        self.q.append(link)\n                        print('...New, added to Q')\n                    else:\n                        print('...discarded, already in Q')\n            else:\n                print('...discarded, already processed')\n\n    def go(self, media=False):\n        \"\"\"\n        处理所有待下载连接\n        :param media:\n        :return:\n        \"\"\"\n        while self.q:\n            url = self.q.pop()\n            self.get_page(url, media)\n\n\ndef main():\n    if len(sys.argv) > 1:\n        url = sys.argv[1]\n    else:\n        try:\n            url = input('Enter starting URL:')\n        except (KeyboardInterrupt, EOFError):\n            url = ''\n    if not url:\n        return\n    if not url.startswith('http://') and not url.startswith('ftp://') and not url.startswith('https://'):\n        url = 'http://%s' % url\n\n    robot = Crawler(url)\n    robot.go()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 解析Web页面\n[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。\n\n### 可编程的Web浏览\n可以使用[MechanicalSoup](https://pypi.python.org/pypi/MechanicalSoup/)用来模拟浏览器。\n","source":"_posts/Python-Web客户端和服务器.md","raw":"---\ntitle: Python Web客户端和服务器\ndate: 2018-03-06 09:20:10\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - Web客户端和服务器\ndescription:\n---\n\n## Python Web客户端工具\n浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。\n\n### 统一资源定位符\n>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。\n\nURL使用以下格式：\n`post_sch://net_loc/path;parans?query#frag`\n* Web地址的各个组件\n\n| URL组件  |                 描述                 |\n|:--------:|:------------------------------------:|\n| post_sch |          网络协议或下载方案          |\n| net_loc  |    服务器所在地(也许含有用户信息)    |\n|   path   | 使用斜杠(/)分割的文件或CGI应用的路径 |\n|  params  |               可选参数               |\n|  query   |     连接符(&)分割的一系列键值对      |\n|   frag   |        指定文档内特定锚的部分        |\n\nnet_loc可以拆分为多个组件，一些可选一些必备：\n`user:passwd@host:port`\n* 网络地址的各个组件\n\n|  组件  |                  描述                   |\n|:------:|:---------------------------------------:|\n|  user  |            用户名或登录(FTP)            |\n| passwd |              用户密码(FTP)              |\n|  host  | 运行Web服务器的计算机名称或地址(必需的) |\n|  port  |        端口号(如果不是默认的80)         |\n\nPython3 使用[urllib.parse](https://docs.python.org/3/library/urllib.parse.html)和[urllib.request](https://docs.python.org/3/library/urllib.request.html)两种不同的模块分别以不同的功能和兼容性来处理URL\n\n### urllib.parse模块\n* urllib.parse核心函数\n\n|                                         urllib.parse函数                                         |                                                       描述                                                       |\n|:------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------:|\n|                 urllib.parse.urlparse(urlstring, scheme='',allow_fragments=True)                 | 将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段 |\n|                                  urllib.parse.urlunparse(parts)                                  |                                         将URL数据的一个元组拼成URL字符串                                         |\n|                       urllib.parse.urljoin(base,url,allow_fragments=True)                        |                   将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段                    |\n|                  urllib.parse.quote(string,safe='/',encoding=None,errors=None)                   |                           对string在URL里无法使用的字符进行编码，safe中的字符无需编码                            |\n|                     urllib.parse.quote_plus(string,safe='',encoding,errors)                      |                           除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似                            |\n|                  urllib.parse.unquote(string,encoding='utf-8',errors='replace')                  |                                             将string编译过的字符解码                                             |\n|               urllib.parse.unquote_plus(string,encoding='utf-8',errors='replace')                |                                  除了将加好转换为空格，其他功能与unquote()相同                                   |\n| urllib.parse.urlencode(query,doseq=False,safe='',encoding=None,errors=None,quote_via=quote_plus) |               将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码               |\n\n下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法\n`from urllib.parse import *`\n\n* *urllib.parse.urlparse(urlstring, scheme='',allow_fragments=True)*\n```Python\nurlparse('http://coldjune.com/categories/')\n# 输出结果\nParseResult(scheme='http', netloc='coldjune.com', path='/categories/', params='', query='', fragment='')\n```\n\n* *urllib.parse.urlunparse(parts)*\n```Python\nurlunparse(('http', 'coldjune.com', '/categories/', '', '', ''))\n# 输出结果\n'http://coldjune.com/categories/'\n```\n* *urllib.parse.urljoin(base,url,allow_fragments=True)*\n```Python\n# 如果是绝对路径将整个替换除根域名以外的所有内容\nurljoin('http://coldjune.com/categories/1.html','/tags/2.html')\n# 输出结果\n'http://coldjune.com/tags/2.html'\n\n# 如果是相对路径将会将末端文件去掉与心得url连接\nurljoin('http://coldjune.com/categories/1.html','tags/2.html')\n# 输出结果\n'http://coldjune.com/categories/tags/2.html'\n``\n* *urllib.parse.quote(string,safe='/',encoding=None,errors=None)*\n> 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)\n\n  ```Python\n  quote('http://www.~coldjune.com/tag categoriese?name=coold&search=6')\n  # 输出结果\n  'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'\n  ```\n\n* *urllib.parse.unquote(string,encoding='utf-8',errors='replace')*\n```Python\nunquote('http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6')\n# 输出结果\n'http://www.~coldjune.com/tag categoriese?name=coold&search=6'\n```\n\n* *urllib.parse.quote_plus(string,safe='',encoding,errors)*\n```Python\nquote_plus('http://www.~coldjune.com/tag categoriese?name=coold&search=6')\n# 输出结果\n'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'\n```\n\n* *urllib.parse.unquote_plus(string,encoding='utf-8',errors='replace')*\n```Python\nunquote_plus('http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6')\n# 输出结果\n'http://www.~coldjune.com/tag categoriese?name=coold&search=6'\n```\n\n* *urllib.parse.urlencode(query,doseq=False,safe='',encoding=None,errors=None,quote_via=quote_plus)*\n```Python\nquery={'name':'coldjune','search':'6'}\nurlencode(query)\n# 输出结果\n'name=coldjune&search=6'\n```\n\n### urllib.request模块/包\n* urllib.request模块核心函数\n\n|                                            urllib.request函数                                             |                                                              描述                                                              |\n|:---------------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n| urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None) | 打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证 |\n|                  urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)                  | 将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息                                                                                                                               |\n\n1. *urllib.request.urlopen(url, data=None, [timeout,],*\n  *cafile=None, capath=None,cadefault=False,context=None)*\n>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入\"file\"方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用\"GET\"请求，向Web服务器发送的请求字符串应该是url的一部分；使用\"POST\"请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象\n\n* urlopen()文件类型对象的方法\n\n|      方法       |             描述              |\n|:---------------:|:-----------------------------:|\n| f.read([bytes]) |  从f中读出所有或bytes个字节   |\n|  f.readline()   |         从f中读取一行         |\n|  f.readlines()  | 从f中读取所有行，作为列表返回 |\n|    f.close()    |        关闭f的URL连接         |\n|   f.fileno()    |        返回f的文件句柄        |\n|    f.info()     |       获取f的MIME头文件       |\n|   f.geturl()    |        返回f的真正URL         |\n\n2. *urllib.request.urlretrieve(url,*\n  *filename=None,reporthook=None,data=None)*\n>urlretrieve（）用于下载完整的HTML\n\n如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。`urlretrieve()`返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。\n\n### HTTP验证示例\n> 需要先启动本地的tomcat并访问tomcat地址\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport urllib.request\nimport urllib.error\nimport urllib.parse\n\n# 初始化过程\n# 后续脚本使用的常量\nLOGIN = 'wesly'\nPASSWD = \"you'llNeverGuess\"\nURL = 'http://localhost:8080/docs/setup.html'\nREALM = 'Secure Archive'\n\n\ndef handler_version(url):\n    # 分配了一个基本处理程序类，添加了验证信息。\n    # 用该处理程序建立一个URL开启器\n    # 安装该开启器以便所有已打开的URL都能用到这些验证信息\n    hdlr = urllib.request.HTTPBasicAuthHandler()\n    hdlr.add_password(REALM,\n                      urllib.parse.urlparse(url)[1],\n                      LOGIN,\n                      PASSWD)\n    opener = urllib.request.build_opener(hdlr)\n    urllib.request.install_opener(opener=opener)\n    return url\n\n\ndef request_version(url):\n    # 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头\n    # 该请求用来替换其中的URL字符串\n    from base64 import encodebytes\n    req = urllib.request.Request(url)\n    b64str = encodebytes(bytes('%s %s' % (LOGIN, PASSWD), 'utf-8'))[:-1]\n    req.add_header(\"Authorization\", 'Basic %s' % b64str)\n    return req\n\n\nfor funcType in ('handler', 'request'):\n    # 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行\n    print('***Using %s:' % funcType.upper())\n    url = eval('%s_version' % funcType)(URL)\n    f = urllib.request.urlopen(url)\n    print(str(f.readline(), 'utf-8'))\n    f.close()\n```\n\n* 输出结果\n\n```\n***Using HANDLER:\n<!DOCTYPE html SYSTEM \"about:legacy-compat\">\n\n***Using REQUEST:\n<!DOCTYPE html SYSTEM \"about:legacy-compat\">\n```\n\n## Web客户端\n一个稍微复杂的Web客户端例子就是 *网络爬虫*。这些程序可以为了不同目的在因特网上探索和下载页面。\n> 通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档\nimport os\nimport sys\nimport urllib.request\nimport urllib.parse\nfrom bs4 import BeautifulSoup\n\n\nclass Retriever(object):\n    \"\"\"\n    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入\"to-do\"队列。\n    __slots__变量表示实例只能拥有self.url和self.file属性\n    \"\"\"\n    __slots__ = ('url', 'file')\n\n    def __init__(self, url):\n        \"\"\"\n        创建Retriever对象时调用，将get_file()返回的URL字符串和对\n        应的文件名作为实例属性存储起来\n        :param url: 需要抓取的连接\n        \"\"\"\n        self.url, self.file = self.get_file(url)\n\n    def get_file(self, url, default='index.html'):\n        \"\"\"\n         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件\n        :param url: 指定URL获取页面\n        :param default: 默认的文件名\n        :return: 返回url和对应的文件名\n        \"\"\"\n        # 将URL的http://前缀移除，丢掉任何为获取主机名\n        # 而附加的额外信息，如用户名、密码和端口号\n        parsed = urllib.parse.urlparse(url)\n        host = parsed.netloc.split('@')[-1].split(':')[0]\n        # 将字符进行解码，连接域名创建文件名\n        filepath = '%s%s' % (host, urllib.parse.unquote(parsed.path))\n        if not os.path.splitext(parsed.path)[1]:\n            # 如果URL没有文件扩展名后这将default文件加上\n            filepath = os.path.join(filepath, default)\n        # 获取文件路径\n        linkdir = os.path.dirname(filepath)\n        if not os.path.isdir(linkdir):\n            # 如果linkdir不是一个目录\n            if os.path.exists(linkdir):\n                # 如果linkdir存在则删除\n                os.unlink(linkdir)\n            # 创建同名目录\n            os.makedirs(linkdir)\n        return url, filepath\n\n    def download(self):\n        \"\"\"\n        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()\n        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串\n        :return: 文件名\n        \"\"\"\n        try:\n            retval = urllib.request.urlretrieve(self.url, filename=self.file)\n        except IOError as e:\n            retval = (('***ERROR: bad URL \"%s\": %s' % (self.url, e)),)\n        return retval\n\n    def parse_links(self):\n        \"\"\"\n        通过BeautifulSoup解析文件，查看文件包含的额外连接。\n        :return: 文件中包含连接的集合\n        \"\"\"\n        with open(self.file, 'r', encoding='utf-8') as f:\n            data = f.read()\n        soup = BeautifulSoup(data, 'html.parser')\n        parse_links = []\n        for x in soup.find_all('a'):\n            if 'href' in x.attrs:\n                parse_links.append(x['href'])\n        return parse_links\n\n\nclass Crawler(object):\n    \"\"\"\n    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例\n    \"\"\"\n    # 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1\n    count = 0\n\n    def __init__(self, url):\n        \"\"\"\n        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长\n        self.seen 是已下载连接的集合\n        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致\n        :param url: 抓取的url\n        \"\"\"\n        self.q = [url]\n        self.seen = set()\n        parsed = urllib.parse.urlparse(url)\n        host = parsed.netloc.split('@')[-1].split(':')[0]\n        self.dom = '.'.join(host.split('.')[-2:])\n\n    def get_page(self, url, media=False):\n        \"\"\"\n        用于下载页面并记录连接信息\n        :param url:\n        :param media:\n        :return:\n        \"\"\"\n        # 实例化Retriever类并传入需要抓取的连接\n        # 下在对应连接并取到文件名\n        r = Retriever(url)\n        fname = r.download()[0]\n        if fname[0] == '*':\n            print(fname, '....skipping parse')\n            return\n        Crawler.count += 1\n        print('\\n(', Crawler.count, ')')\n        print('URL:', url)\n        print('FILE:', fname)\n        self.seen.add(url)\n        # 跳过所有非Web页面\n        ftype = os.path.splitext(fname)[1]\n        if ftype not in ('.htm', '.html'):\n            return\n        for link in r.parse_links():\n            if link.startswith('mailto:'):\n                print('...discarded , mailto link')\n                continue\n\n            if not media:\n                ftype = os.path.splitext(link)[1]\n                if ftype in ('.mp3', '.mp4', '.m4av', '.wav'):\n                    print('... discarded, media file')\n                    continue\n\n            if not link.startswith('http://') and ':' not in link:\n                link = urllib.parse.quote(link, safe='#')\n                link = urllib.parse.urljoin(url, link)\n            print('*', link)\n            if link not in self.seen:\n                if self.dom not in link:\n                    print('... discarded, not in domain')\n                else:\n                    # 如果没有下载过并且是属于该网站就加入待下载列表\n                    if link not in self.q:\n                        self.q.append(link)\n                        print('...New, added to Q')\n                    else:\n                        print('...discarded, already in Q')\n            else:\n                print('...discarded, already processed')\n\n    def go(self, media=False):\n        \"\"\"\n        处理所有待下载连接\n        :param media:\n        :return:\n        \"\"\"\n        while self.q:\n            url = self.q.pop()\n            self.get_page(url, media)\n\n\ndef main():\n    if len(sys.argv) > 1:\n        url = sys.argv[1]\n    else:\n        try:\n            url = input('Enter starting URL:')\n        except (KeyboardInterrupt, EOFError):\n            url = ''\n    if not url:\n        return\n    if not url.startswith('http://') and not url.startswith('ftp://') and not url.startswith('https://'):\n        url = 'http://%s' % url\n\n    robot = Crawler(url)\n    robot.go()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 解析Web页面\n[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。\n\n### 可编程的Web浏览\n可以使用[MechanicalSoup](https://pypi.python.org/pypi/MechanicalSoup/)用来模拟浏览器。\n","slug":"Python-Web客户端和服务器","published":1,"updated":"2018-03-07T07:29:41.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3z0008twn9g0a77uxk","content":"<h2 id=\"Python-Web客户端工具\"><a href=\"#Python-Web客户端工具\" class=\"headerlink\" title=\"Python Web客户端工具\"></a>Python Web客户端工具</h2><p>浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。</p>\n<h3 id=\"统一资源定位符\"><a href=\"#统一资源定位符\" class=\"headerlink\" title=\"统一资源定位符\"></a>统一资源定位符</h3><blockquote>\n<p>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。</p>\n</blockquote>\n<p>URL使用以下格式：<br><code>post_sch://net_loc/path;parans?query#frag</code></p>\n<ul>\n<li>Web地址的各个组件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">URL组件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">post_sch</td>\n<td style=\"text-align:center\">网络协议或下载方案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">net_loc</td>\n<td style=\"text-align:center\">服务器所在地(也许含有用户信息)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">path</td>\n<td style=\"text-align:center\">使用斜杠(/)分割的文件或CGI应用的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">params</td>\n<td style=\"text-align:center\">可选参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">query</td>\n<td style=\"text-align:center\">连接符(&amp;)分割的一系列键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">frag</td>\n<td style=\"text-align:center\">指定文档内特定锚的部分</td>\n</tr>\n</tbody>\n</table>\n<p>net_loc可以拆分为多个组件，一些可选一些必备：<br><code>user:passwd@host:port</code></p>\n<ul>\n<li>网络地址的各个组件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">组件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">user</td>\n<td style=\"text-align:center\">用户名或登录(FTP)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">passwd</td>\n<td style=\"text-align:center\">用户密码(FTP)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">host</td>\n<td style=\"text-align:center\">运行Web服务器的计算机名称或地址(必需的)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">port</td>\n<td style=\"text-align:center\">端口号(如果不是默认的80)</td>\n</tr>\n</tbody>\n</table>\n<p>Python3 使用<a href=\"https://docs.python.org/3/library/urllib.parse.html\" target=\"_blank\" rel=\"noopener\">urllib.parse</a>和<a href=\"https://docs.python.org/3/library/urllib.request.html\" target=\"_blank\" rel=\"noopener\">urllib.request</a>两种不同的模块分别以不同的功能和兼容性来处理URL</p>\n<h3 id=\"urllib-parse模块\"><a href=\"#urllib-parse模块\" class=\"headerlink\" title=\"urllib.parse模块\"></a>urllib.parse模块</h3><ul>\n<li>urllib.parse核心函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">urllib.parse函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</td>\n<td style=\"text-align:center\">将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlunparse(parts)</td>\n<td style=\"text-align:center\">将URL数据的一个元组拼成URL字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urljoin(base,url,allow_fragments=True)</td>\n<td style=\"text-align:center\">将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.quote(string,safe=’/‘,encoding=None,errors=None)</td>\n<td style=\"text-align:center\">对string在URL里无法使用的字符进行编码，safe中的字符无需编码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.quote_plus(string,safe=’’,encoding,errors)</td>\n<td style=\"text-align:center\">除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</td>\n<td style=\"text-align:center\">将string编译过的字符解码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</td>\n<td style=\"text-align:center\">除了将加好转换为空格，其他功能与unquote()相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</td>\n<td style=\"text-align:center\">将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码</td>\n</tr>\n</tbody>\n</table>\n<p>下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法<br><code>from urllib.parse import *</code></p>\n<ul>\n<li><p><em>urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlparse(<span class=\"string\">'http://coldjune.com/categories/'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">ParseResult(scheme=<span class=\"string\">'http'</span>, netloc=<span class=\"string\">'coldjune.com'</span>, path=<span class=\"string\">'/categories/'</span>, params=<span class=\"string\">''</span>, query=<span class=\"string\">''</span>, fragment=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urlunparse(parts)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlunparse((<span class=\"string\">'http'</span>, <span class=\"string\">'coldjune.com'</span>, <span class=\"string\">'/categories/'</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/categories/'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urljoin(base,url,allow_fragments=True)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果是绝对路径将整个替换除根域名以外的所有内容</span></span><br><span class=\"line\">urljoin(<span class=\"string\">'http://coldjune.com/categories/1.html'</span>,<span class=\"string\">'/tags/2.html'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/tags/2.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果是相对路径将会将末端文件去掉与心得url连接</span></span><br><span class=\"line\">urljoin(<span class=\"string\">'http://coldjune.com/categories/1.html'</span>,<span class=\"string\">'tags/2.html'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/categories/tags/2.html'</span></span><br><span class=\"line\">``</span><br><span class=\"line\">* *urllib.parse.quote(string,safe=<span class=\"string\">'/'</span>,encoding=<span class=\"keyword\">None</span>,errors=<span class=\"keyword\">None</span>)*</span><br><span class=\"line\">&gt; 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)</span><br><span class=\"line\"></span><br><span class=\"line\">  ```Python</span><br><span class=\"line\">  quote(<span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">  <span class=\"string\">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unquote(<span class=\"string\">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.quote_plus(string,safe=’’,encoding,errors)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quote_plus(<span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unquote_plus(<span class=\"string\">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'coldjune'</span>,<span class=\"string\">'search'</span>:<span class=\"string\">'6'</span>&#125;</span><br><span class=\"line\">urlencode(query)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'name=coldjune&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"urllib-request模块-包\"><a href=\"#urllib-request模块-包\" class=\"headerlink\" title=\"urllib.request模块/包\"></a>urllib.request模块/包</h3><ul>\n<li>urllib.request模块核心函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">urllib.request函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None)</td>\n<td style=\"text-align:center\">打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)</td>\n<td style=\"text-align:center\">将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><em>urllib.request.urlopen(url, data=None, [timeout,],</em><br><em>cafile=None, capath=None,cadefault=False,context=None)</em><blockquote>\n<p>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入”file”方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用”GET”请求，向Web服务器发送的请求字符串应该是url的一部分；使用”POST”请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>urlopen()文件类型对象的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">f.read([bytes])</td>\n<td style=\"text-align:center\">从f中读出所有或bytes个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.readline()</td>\n<td style=\"text-align:center\">从f中读取一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.readlines()</td>\n<td style=\"text-align:center\">从f中读取所有行，作为列表返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.close()</td>\n<td style=\"text-align:center\">关闭f的URL连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.fileno()</td>\n<td style=\"text-align:center\">返回f的文件句柄</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.info()</td>\n<td style=\"text-align:center\">获取f的MIME头文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.geturl()</td>\n<td style=\"text-align:center\">返回f的真正URL</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><em>urllib.request.urlretrieve(url,</em><br><em>filename=None,reporthook=None,data=None)</em><blockquote>\n<p>urlretrieve（）用于下载完整的HTML</p>\n</blockquote>\n</li>\n</ol>\n<p>如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。<code>urlretrieve()</code>返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。</p>\n<h3 id=\"HTTP验证示例\"><a href=\"#HTTP验证示例\" class=\"headerlink\" title=\"HTTP验证示例\"></a>HTTP验证示例</h3><blockquote>\n<p>需要先启动本地的tomcat并访问tomcat地址</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.error</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化过程</span></span><br><span class=\"line\"><span class=\"comment\"># 后续脚本使用的常量</span></span><br><span class=\"line\">LOGIN = <span class=\"string\">'wesly'</span></span><br><span class=\"line\">PASSWD = <span class=\"string\">\"you'llNeverGuess\"</span></span><br><span class=\"line\">URL = <span class=\"string\">'http://localhost:8080/docs/setup.html'</span></span><br><span class=\"line\">REALM = <span class=\"string\">'Secure Archive'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handler_version</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 分配了一个基本处理程序类，添加了验证信息。</span></span><br><span class=\"line\">    <span class=\"comment\"># 用该处理程序建立一个URL开启器</span></span><br><span class=\"line\">    <span class=\"comment\"># 安装该开启器以便所有已打开的URL都能用到这些验证信息</span></span><br><span class=\"line\">    hdlr = urllib.request.HTTPBasicAuthHandler()</span><br><span class=\"line\">    hdlr.add_password(REALM,</span><br><span class=\"line\">                      urllib.parse.urlparse(url)[<span class=\"number\">1</span>],</span><br><span class=\"line\">                      LOGIN,</span><br><span class=\"line\">                      PASSWD)</span><br><span class=\"line\">    opener = urllib.request.build_opener(hdlr)</span><br><span class=\"line\">    urllib.request.install_opener(opener=opener)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_version</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头</span></span><br><span class=\"line\">    <span class=\"comment\"># 该请求用来替换其中的URL字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> encodebytes</span><br><span class=\"line\">    req = urllib.request.Request(url)</span><br><span class=\"line\">    b64str = encodebytes(bytes(<span class=\"string\">'%s %s'</span> % (LOGIN, PASSWD), <span class=\"string\">'utf-8'</span>))[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">    req.add_header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">'Basic %s'</span> % b64str)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> req</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> funcType <span class=\"keyword\">in</span> (<span class=\"string\">'handler'</span>, <span class=\"string\">'request'</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Using %s:'</span> % funcType.upper())</span><br><span class=\"line\">    url = eval(<span class=\"string\">'%s_version'</span> % funcType)(URL)</span><br><span class=\"line\">    f = urllib.request.urlopen(url)</span><br><span class=\"line\">    print(str(f.readline(), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Using HANDLER:</span><br><span class=\"line\">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">***Using REQUEST:</span><br><span class=\"line\">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Web客户端\"><a href=\"#Web客户端\" class=\"headerlink\" title=\"Web客户端\"></a>Web客户端</h2><p>一个稍微复杂的Web客户端例子就是 <em>网络爬虫</em>。这些程序可以为了不同目的在因特网上探索和下载页面。</p>\n<blockquote>\n<p>通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Retriever</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入\"to-do\"队列。</span></span><br><span class=\"line\"><span class=\"string\">    __slots__变量表示实例只能拥有self.url和self.file属性</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'url'</span>, <span class=\"string\">'file'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        创建Retriever对象时调用，将get_file()返回的URL字符串和对</span></span><br><span class=\"line\"><span class=\"string\">        应的文件名作为实例属性存储起来</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 需要抓取的连接</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.url, self.file = self.get_file(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_file</span><span class=\"params\">(self, url, default=<span class=\"string\">'index.html'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 指定URL获取页面</span></span><br><span class=\"line\"><span class=\"string\">        :param default: 默认的文件名</span></span><br><span class=\"line\"><span class=\"string\">        :return: 返回url和对应的文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 将URL的http://前缀移除，丢掉任何为获取主机名</span></span><br><span class=\"line\">        <span class=\"comment\"># 而附加的额外信息，如用户名、密码和端口号</span></span><br><span class=\"line\">        parsed = urllib.parse.urlparse(url)</span><br><span class=\"line\">        host = parsed.netloc.split(<span class=\"string\">'@'</span>)[<span class=\"number\">-1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 将字符进行解码，连接域名创建文件名</span></span><br><span class=\"line\">        filepath = <span class=\"string\">'%s%s'</span> % (host, urllib.parse.unquote(parsed.path))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.splitext(parsed.path)[<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 如果URL没有文件扩展名后这将default文件加上</span></span><br><span class=\"line\">            filepath = os.path.join(filepath, default)</span><br><span class=\"line\">        <span class=\"comment\"># 获取文件路径</span></span><br><span class=\"line\">        linkdir = os.path.dirname(filepath)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(linkdir):</span><br><span class=\"line\">            <span class=\"comment\"># 如果linkdir不是一个目录</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> os.path.exists(linkdir):</span><br><span class=\"line\">                <span class=\"comment\"># 如果linkdir存在则删除</span></span><br><span class=\"line\">                os.unlink(linkdir)</span><br><span class=\"line\">            <span class=\"comment\"># 创建同名目录</span></span><br><span class=\"line\">            os.makedirs(linkdir)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url, filepath</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()</span></span><br><span class=\"line\"><span class=\"string\">        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串</span></span><br><span class=\"line\"><span class=\"string\">        :return: 文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            retval = urllib.request.urlretrieve(self.url, filename=self.file)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            retval = ((<span class=\"string\">'***ERROR: bad URL \"%s\": %s'</span> % (self.url, e)),)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retval</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_links</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        通过BeautifulSoup解析文件，查看文件包含的额外连接。</span></span><br><span class=\"line\"><span class=\"string\">        :return: 文件中包含连接的集合</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(self.file, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">        soup = BeautifulSoup(data, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">        parse_links = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">'a'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'href'</span> <span class=\"keyword\">in</span> x.attrs:</span><br><span class=\"line\">                parse_links.append(x[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parse_links</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Crawler</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长</span></span><br><span class=\"line\"><span class=\"string\">        self.seen 是已下载连接的集合</span></span><br><span class=\"line\"><span class=\"string\">        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 抓取的url</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.q = [url]</span><br><span class=\"line\">        self.seen = set()</span><br><span class=\"line\">        parsed = urllib.parse.urlparse(url)</span><br><span class=\"line\">        host = parsed.netloc.split(<span class=\"string\">'@'</span>)[<span class=\"number\">-1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.dom = <span class=\"string\">'.'</span>.join(host.split(<span class=\"string\">'.'</span>)[<span class=\"number\">-2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span><span class=\"params\">(self, url, media=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        用于下载页面并记录连接信息</span></span><br><span class=\"line\"><span class=\"string\">        :param url:</span></span><br><span class=\"line\"><span class=\"string\">        :param media:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 实例化Retriever类并传入需要抓取的连接</span></span><br><span class=\"line\">        <span class=\"comment\"># 下在对应连接并取到文件名</span></span><br><span class=\"line\">        r = Retriever(url)</span><br><span class=\"line\">        fname = r.download()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fname[<span class=\"number\">0</span>] == <span class=\"string\">'*'</span>:</span><br><span class=\"line\">            print(fname, <span class=\"string\">'....skipping parse'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        Crawler.count += <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n('</span>, Crawler.count, <span class=\"string\">')'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'URL:'</span>, url)</span><br><span class=\"line\">        print(<span class=\"string\">'FILE:'</span>, fname)</span><br><span class=\"line\">        self.seen.add(url)</span><br><span class=\"line\">        <span class=\"comment\"># 跳过所有非Web页面</span></span><br><span class=\"line\">        ftype = os.path.splitext(fname)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ftype <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">'.htm'</span>, <span class=\"string\">'.html'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> r.parse_links():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> link.startswith(<span class=\"string\">'mailto:'</span>):</span><br><span class=\"line\">                print(<span class=\"string\">'...discarded , mailto link'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> media:</span><br><span class=\"line\">                ftype = os.path.splitext(link)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ftype <span class=\"keyword\">in</span> (<span class=\"string\">'.mp3'</span>, <span class=\"string\">'.mp4'</span>, <span class=\"string\">'.m4av'</span>, <span class=\"string\">'.wav'</span>):</span><br><span class=\"line\">                    print(<span class=\"string\">'... discarded, media file'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> link.startswith(<span class=\"string\">'http://'</span>) <span class=\"keyword\">and</span> <span class=\"string\">':'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> link:</span><br><span class=\"line\">                link = urllib.parse.quote(link, safe=<span class=\"string\">'#'</span>)</span><br><span class=\"line\">                link = urllib.parse.urljoin(url, link)</span><br><span class=\"line\">            print(<span class=\"string\">'*'</span>, link)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> link <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.seen:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.dom <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> link:</span><br><span class=\"line\">                    print(<span class=\"string\">'... discarded, not in domain'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 如果没有下载过并且是属于该网站就加入待下载列表</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> link <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.q:</span><br><span class=\"line\">                        self.q.append(link)</span><br><span class=\"line\">                        print(<span class=\"string\">'...New, added to Q'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        print(<span class=\"string\">'...discarded, already in Q'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(<span class=\"string\">'...discarded, already processed'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">go</span><span class=\"params\">(self, media=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理所有待下载连接</span></span><br><span class=\"line\"><span class=\"string\">        :param media:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.q:</span><br><span class=\"line\">            url = self.q.pop()</span><br><span class=\"line\">            self.get_page(url, media)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        url = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            url = input(<span class=\"string\">'Enter starting URL:'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> (KeyboardInterrupt, EOFError):</span><br><span class=\"line\">            url = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> url:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'http://'</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'ftp://'</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'https://'</span>):</span><br><span class=\"line\">        url = <span class=\"string\">'http://%s'</span> % url</span><br><span class=\"line\"></span><br><span class=\"line\">    robot = Crawler(url)</span><br><span class=\"line\">    robot.go()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析Web页面\"><a href=\"#解析Web页面\" class=\"headerlink\" title=\"解析Web页面\"></a>解析Web页面</h3><p><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a>是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。</p>\n<h3 id=\"可编程的Web浏览\"><a href=\"#可编程的Web浏览\" class=\"headerlink\" title=\"可编程的Web浏览\"></a>可编程的Web浏览</h3><p>可以使用<a href=\"https://pypi.python.org/pypi/MechanicalSoup/\" target=\"_blank\" rel=\"noopener\">MechanicalSoup</a>用来模拟浏览器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-Web客户端工具\"><a href=\"#Python-Web客户端工具\" class=\"headerlink\" title=\"Python Web客户端工具\"></a>Python Web客户端工具</h2><p>浏览器只是Web客户端的一种。任何一个向Web服务器端发送请求来获取数据的应用程序都是“客户端”。使用urllib模块下载或者访问Web上信息的应用程序就是简单的Web客户端。</p>\n<h3 id=\"统一资源定位符\"><a href=\"#统一资源定位符\" class=\"headerlink\" title=\"统一资源定位符\"></a>统一资源定位符</h3><blockquote>\n<p>URL(统一资源定位符)适用于网页浏览的一个地址，这个地址用来在Web上定位一个文档，或者调用一个CGI程序来为客户端生成一个文档。URL是多种统一资源标识符(Uniform Resource Identifier, URI)的一部分。一个URL是一个简单的URI，它使用已有的协议或方案(http/ftp等)。非URL的URI有时称为统一资源名称(Uniform Resource Name, URN)，现在唯一使用的URI只有URL。</p>\n</blockquote>\n<p>URL使用以下格式：<br><code>post_sch://net_loc/path;parans?query#frag</code></p>\n<ul>\n<li>Web地址的各个组件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">URL组件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">post_sch</td>\n<td style=\"text-align:center\">网络协议或下载方案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">net_loc</td>\n<td style=\"text-align:center\">服务器所在地(也许含有用户信息)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">path</td>\n<td style=\"text-align:center\">使用斜杠(/)分割的文件或CGI应用的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">params</td>\n<td style=\"text-align:center\">可选参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">query</td>\n<td style=\"text-align:center\">连接符(&amp;)分割的一系列键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">frag</td>\n<td style=\"text-align:center\">指定文档内特定锚的部分</td>\n</tr>\n</tbody>\n</table>\n<p>net_loc可以拆分为多个组件，一些可选一些必备：<br><code>user:passwd@host:port</code></p>\n<ul>\n<li>网络地址的各个组件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">组件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">user</td>\n<td style=\"text-align:center\">用户名或登录(FTP)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">passwd</td>\n<td style=\"text-align:center\">用户密码(FTP)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">host</td>\n<td style=\"text-align:center\">运行Web服务器的计算机名称或地址(必需的)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">port</td>\n<td style=\"text-align:center\">端口号(如果不是默认的80)</td>\n</tr>\n</tbody>\n</table>\n<p>Python3 使用<a href=\"https://docs.python.org/3/library/urllib.parse.html\" target=\"_blank\" rel=\"noopener\">urllib.parse</a>和<a href=\"https://docs.python.org/3/library/urllib.request.html\" target=\"_blank\" rel=\"noopener\">urllib.request</a>两种不同的模块分别以不同的功能和兼容性来处理URL</p>\n<h3 id=\"urllib-parse模块\"><a href=\"#urllib-parse模块\" class=\"headerlink\" title=\"urllib.parse模块\"></a>urllib.parse模块</h3><ul>\n<li>urllib.parse核心函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">urllib.parse函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</td>\n<td style=\"text-align:center\">将urlstring解析成各个组件，如果在urlstring中没有给定协议或者方法，使用scheme；allow_fragments决定是否允许URL片段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlunparse(parts)</td>\n<td style=\"text-align:center\">将URL数据的一个元组拼成URL字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urljoin(base,url,allow_fragments=True)</td>\n<td style=\"text-align:center\">将URL的根域名和url拼合成一个完整的URL；allow_fragments的决定是否允许URL片段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.quote(string,safe=’/‘,encoding=None,errors=None)</td>\n<td style=\"text-align:center\">对string在URL里无法使用的字符进行编码，safe中的字符无需编码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.quote_plus(string,safe=’’,encoding,errors)</td>\n<td style=\"text-align:center\">除了将空格编译成加(+)号(而非20%)之外，其他功能与quote()相似</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</td>\n<td style=\"text-align:center\">将string编译过的字符解码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</td>\n<td style=\"text-align:center\">除了将加好转换为空格，其他功能与unquote()相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</td>\n<td style=\"text-align:center\">将query通过quote_plus()编译成有效的CGI查询自妇产，用quote_plus()对这个字符串进行编码</td>\n</tr>\n</tbody>\n</table>\n<p>下面将对每个方法进行演示,首先导入urllib.parse下面的所有方法<br><code>from urllib.parse import *</code></p>\n<ul>\n<li><p><em>urllib.parse.urlparse(urlstring, scheme=’’,allow_fragments=True)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlparse(<span class=\"string\">'http://coldjune.com/categories/'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">ParseResult(scheme=<span class=\"string\">'http'</span>, netloc=<span class=\"string\">'coldjune.com'</span>, path=<span class=\"string\">'/categories/'</span>, params=<span class=\"string\">''</span>, query=<span class=\"string\">''</span>, fragment=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urlunparse(parts)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlunparse((<span class=\"string\">'http'</span>, <span class=\"string\">'coldjune.com'</span>, <span class=\"string\">'/categories/'</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/categories/'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urljoin(base,url,allow_fragments=True)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果是绝对路径将整个替换除根域名以外的所有内容</span></span><br><span class=\"line\">urljoin(<span class=\"string\">'http://coldjune.com/categories/1.html'</span>,<span class=\"string\">'/tags/2.html'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/tags/2.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果是相对路径将会将末端文件去掉与心得url连接</span></span><br><span class=\"line\">urljoin(<span class=\"string\">'http://coldjune.com/categories/1.html'</span>,<span class=\"string\">'tags/2.html'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://coldjune.com/categories/tags/2.html'</span></span><br><span class=\"line\">``</span><br><span class=\"line\">* *urllib.parse.quote(string,safe=<span class=\"string\">'/'</span>,encoding=<span class=\"keyword\">None</span>,errors=<span class=\"keyword\">None</span>)*</span><br><span class=\"line\">&gt; 逗号、下划线、句号、斜线和字母数字这类符号不需要转换，其他均需转换。URL不能使用的字符前面会被加上百分号(%)同时转换为十六进制(%xx,xx表示这个字母的十六进制)</span><br><span class=\"line\"></span><br><span class=\"line\">  ```Python</span><br><span class=\"line\">  quote(<span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">  <span class=\"string\">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.unquote(string,encoding=’utf-8’,errors=’replace’)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unquote(<span class=\"string\">'http%3A//www.%7Ecoldjune.com/tag%20categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.quote_plus(string,safe=’’,encoding,errors)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quote_plus(<span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.unquote_plus(string,encoding=’utf-8’,errors=’replace’)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unquote_plus(<span class=\"string\">'http%3A%2F%2Fwww.%7Ecoldjune.com%2Ftag+categoriese%3Fname%3Dcoold%26search%3D6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'http://www.~coldjune.com/tag categoriese?name=coold&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>urllib.parse.urlencode(query,doseq=False,safe=’’,encoding=None,errors=None,quote_via=quote_plus)</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'coldjune'</span>,<span class=\"string\">'search'</span>:<span class=\"string\">'6'</span>&#125;</span><br><span class=\"line\">urlencode(query)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"string\">'name=coldjune&amp;search=6'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"urllib-request模块-包\"><a href=\"#urllib-request模块-包\" class=\"headerlink\" title=\"urllib.request模块/包\"></a>urllib.request模块/包</h3><ul>\n<li>urllib.request模块核心函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">urllib.request函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">urllib.request.urlopen(url, data=None, [timeout,]*,cafile=None, capath=None,cadefault=False,context=None)</td>\n<td style=\"text-align:center\">打开url(string或者Request对象)，data为发送给服务器的数据，timeout为超时属性， cafile,capath,cadefault为调用HTTPS请求时证书认证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urllib.request.urlretrieve(url,filename=None,reporthook=None,data=None)</td>\n<td style=\"text-align:center\">将url中的文件下载到filename或临时文件中(如果没有指定filename)；如果函数正在执行，reporthook将会获得下载的统计信息</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><em>urllib.request.urlopen(url, data=None, [timeout,],</em><br><em>cafile=None, capath=None,cadefault=False,context=None)</em><blockquote>\n<p>urlopen()打开url所指向的URL；如果没有给定协议或者下载方案，或者传入”file”方案，urlopen()会打开一个本地文件。对于所有的HTTP请求，使用”GET”请求，向Web服务器发送的请求字符串应该是url的一部分；使用”POST”请求，请求的字符串应该放到data变量中。连接成功后返回的是一个文件类型对象</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>urlopen()文件类型对象的方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">f.read([bytes])</td>\n<td style=\"text-align:center\">从f中读出所有或bytes个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.readline()</td>\n<td style=\"text-align:center\">从f中读取一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.readlines()</td>\n<td style=\"text-align:center\">从f中读取所有行，作为列表返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.close()</td>\n<td style=\"text-align:center\">关闭f的URL连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.fileno()</td>\n<td style=\"text-align:center\">返回f的文件句柄</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.info()</td>\n<td style=\"text-align:center\">获取f的MIME头文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f.geturl()</td>\n<td style=\"text-align:center\">返回f的真正URL</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><em>urllib.request.urlretrieve(url,</em><br><em>filename=None,reporthook=None,data=None)</em><blockquote>\n<p>urlretrieve（）用于下载完整的HTML</p>\n</blockquote>\n</li>\n</ol>\n<p>如果提供了reporthook函数，则在每块数据下载或传输完成后调用这个函数。调用使用目前读入的块数、块的字节数和文件的总字节数三个参数。<code>urlretrieve()</code>返回一个二元组(local_filename, headers)，local_filename是含有下载数据的本地文件名，headers是Web服务器响应后返回的一系列MIME文件头。</p>\n<h3 id=\"HTTP验证示例\"><a href=\"#HTTP验证示例\" class=\"headerlink\" title=\"HTTP验证示例\"></a>HTTP验证示例</h3><blockquote>\n<p>需要先启动本地的tomcat并访问tomcat地址</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.error</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化过程</span></span><br><span class=\"line\"><span class=\"comment\"># 后续脚本使用的常量</span></span><br><span class=\"line\">LOGIN = <span class=\"string\">'wesly'</span></span><br><span class=\"line\">PASSWD = <span class=\"string\">\"you'llNeverGuess\"</span></span><br><span class=\"line\">URL = <span class=\"string\">'http://localhost:8080/docs/setup.html'</span></span><br><span class=\"line\">REALM = <span class=\"string\">'Secure Archive'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handler_version</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 分配了一个基本处理程序类，添加了验证信息。</span></span><br><span class=\"line\">    <span class=\"comment\"># 用该处理程序建立一个URL开启器</span></span><br><span class=\"line\">    <span class=\"comment\"># 安装该开启器以便所有已打开的URL都能用到这些验证信息</span></span><br><span class=\"line\">    hdlr = urllib.request.HTTPBasicAuthHandler()</span><br><span class=\"line\">    hdlr.add_password(REALM,</span><br><span class=\"line\">                      urllib.parse.urlparse(url)[<span class=\"number\">1</span>],</span><br><span class=\"line\">                      LOGIN,</span><br><span class=\"line\">                      PASSWD)</span><br><span class=\"line\">    opener = urllib.request.build_opener(hdlr)</span><br><span class=\"line\">    urllib.request.install_opener(opener=opener)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_version</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个Request对象，在HTTP请求中添加了简单的base64编码的验证头</span></span><br><span class=\"line\">    <span class=\"comment\"># 该请求用来替换其中的URL字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> encodebytes</span><br><span class=\"line\">    req = urllib.request.Request(url)</span><br><span class=\"line\">    b64str = encodebytes(bytes(<span class=\"string\">'%s %s'</span> % (LOGIN, PASSWD), <span class=\"string\">'utf-8'</span>))[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">    req.add_header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">'Basic %s'</span> % b64str)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> req</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> funcType <span class=\"keyword\">in</span> (<span class=\"string\">'handler'</span>, <span class=\"string\">'request'</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 用两种技术分别打开给定的URL，并显示服务器返回的HTML页面的第一行</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Using %s:'</span> % funcType.upper())</span><br><span class=\"line\">    url = eval(<span class=\"string\">'%s_version'</span> % funcType)(URL)</span><br><span class=\"line\">    f = urllib.request.urlopen(url)</span><br><span class=\"line\">    print(str(f.readline(), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Using HANDLER:</span><br><span class=\"line\">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">***Using REQUEST:</span><br><span class=\"line\">&lt;!DOCTYPE html SYSTEM &quot;about:legacy-compat&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Web客户端\"><a href=\"#Web客户端\" class=\"headerlink\" title=\"Web客户端\"></a>Web客户端</h2><p>一个稍微复杂的Web客户端例子就是 <em>网络爬虫</em>。这些程序可以为了不同目的在因特网上探索和下载页面。</p>\n<blockquote>\n<p>通过起始地址(URL)，下载该页面和其他后续连接页面，但是仅限于那些与开始页面有相同域名的页面。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入相关的包，其中bs4中的BeautifulSoup负责解析html文档</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Retriever</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    从Web下载页面，解析每个文档中的连接并在必要的时候把它们加入\"to-do\"队列。</span></span><br><span class=\"line\"><span class=\"string\">    __slots__变量表示实例只能拥有self.url和self.file属性</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'url'</span>, <span class=\"string\">'file'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        创建Retriever对象时调用，将get_file()返回的URL字符串和对</span></span><br><span class=\"line\"><span class=\"string\">        应的文件名作为实例属性存储起来</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 需要抓取的连接</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.url, self.file = self.get_file(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_file</span><span class=\"params\">(self, url, default=<span class=\"string\">'index.html'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">         把指定的URL转换成本地存储的更加安全的文件，即从Web上下载这个文件</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 指定URL获取页面</span></span><br><span class=\"line\"><span class=\"string\">        :param default: 默认的文件名</span></span><br><span class=\"line\"><span class=\"string\">        :return: 返回url和对应的文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 将URL的http://前缀移除，丢掉任何为获取主机名</span></span><br><span class=\"line\">        <span class=\"comment\"># 而附加的额外信息，如用户名、密码和端口号</span></span><br><span class=\"line\">        parsed = urllib.parse.urlparse(url)</span><br><span class=\"line\">        host = parsed.netloc.split(<span class=\"string\">'@'</span>)[<span class=\"number\">-1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 将字符进行解码，连接域名创建文件名</span></span><br><span class=\"line\">        filepath = <span class=\"string\">'%s%s'</span> % (host, urllib.parse.unquote(parsed.path))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.splitext(parsed.path)[<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"comment\"># 如果URL没有文件扩展名后这将default文件加上</span></span><br><span class=\"line\">            filepath = os.path.join(filepath, default)</span><br><span class=\"line\">        <span class=\"comment\"># 获取文件路径</span></span><br><span class=\"line\">        linkdir = os.path.dirname(filepath)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(linkdir):</span><br><span class=\"line\">            <span class=\"comment\"># 如果linkdir不是一个目录</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> os.path.exists(linkdir):</span><br><span class=\"line\">                <span class=\"comment\"># 如果linkdir存在则删除</span></span><br><span class=\"line\">                os.unlink(linkdir)</span><br><span class=\"line\">            <span class=\"comment\"># 创建同名目录</span></span><br><span class=\"line\">            os.makedirs(linkdir)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url, filepath</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        通过给定的连接下载对应的页面，并将url作为参数调用urllib.urlretrieve()</span></span><br><span class=\"line\"><span class=\"string\">        将其另存为文件名。如果出错返回一个以'*'开头的错误提示串</span></span><br><span class=\"line\"><span class=\"string\">        :return: 文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            retval = urllib.request.urlretrieve(self.url, filename=self.file)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            retval = ((<span class=\"string\">'***ERROR: bad URL \"%s\": %s'</span> % (self.url, e)),)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retval</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_links</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        通过BeautifulSoup解析文件，查看文件包含的额外连接。</span></span><br><span class=\"line\"><span class=\"string\">        :return: 文件中包含连接的集合</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(self.file, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">        soup = BeautifulSoup(data, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">        parse_links = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">'a'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'href'</span> <span class=\"keyword\">in</span> x.attrs:</span><br><span class=\"line\">                parse_links.append(x[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parse_links</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Crawler</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    管理Web站点的完整抓取过程。添加线程则可以为每个待抓取的站点分别创建实例</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 用于保持追踪从因特网上下载下来的对象数目。没成功一个递增1</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        self.q 是待下载的连接队列，这个队列在页面处理完毕时缩短，每个页面中发现新的连接则增长</span></span><br><span class=\"line\"><span class=\"string\">        self.seen 是已下载连接的集合</span></span><br><span class=\"line\"><span class=\"string\">        self.dom 用于存储主链接的域名，并用这个值判定后续连接的域名与主域名是否一致</span></span><br><span class=\"line\"><span class=\"string\">        :param url: 抓取的url</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.q = [url]</span><br><span class=\"line\">        self.seen = set()</span><br><span class=\"line\">        parsed = urllib.parse.urlparse(url)</span><br><span class=\"line\">        host = parsed.netloc.split(<span class=\"string\">'@'</span>)[<span class=\"number\">-1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        self.dom = <span class=\"string\">'.'</span>.join(host.split(<span class=\"string\">'.'</span>)[<span class=\"number\">-2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span><span class=\"params\">(self, url, media=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        用于下载页面并记录连接信息</span></span><br><span class=\"line\"><span class=\"string\">        :param url:</span></span><br><span class=\"line\"><span class=\"string\">        :param media:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 实例化Retriever类并传入需要抓取的连接</span></span><br><span class=\"line\">        <span class=\"comment\"># 下在对应连接并取到文件名</span></span><br><span class=\"line\">        r = Retriever(url)</span><br><span class=\"line\">        fname = r.download()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fname[<span class=\"number\">0</span>] == <span class=\"string\">'*'</span>:</span><br><span class=\"line\">            print(fname, <span class=\"string\">'....skipping parse'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        Crawler.count += <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n('</span>, Crawler.count, <span class=\"string\">')'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'URL:'</span>, url)</span><br><span class=\"line\">        print(<span class=\"string\">'FILE:'</span>, fname)</span><br><span class=\"line\">        self.seen.add(url)</span><br><span class=\"line\">        <span class=\"comment\"># 跳过所有非Web页面</span></span><br><span class=\"line\">        ftype = os.path.splitext(fname)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ftype <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">'.htm'</span>, <span class=\"string\">'.html'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> r.parse_links():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> link.startswith(<span class=\"string\">'mailto:'</span>):</span><br><span class=\"line\">                print(<span class=\"string\">'...discarded , mailto link'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> media:</span><br><span class=\"line\">                ftype = os.path.splitext(link)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ftype <span class=\"keyword\">in</span> (<span class=\"string\">'.mp3'</span>, <span class=\"string\">'.mp4'</span>, <span class=\"string\">'.m4av'</span>, <span class=\"string\">'.wav'</span>):</span><br><span class=\"line\">                    print(<span class=\"string\">'... discarded, media file'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> link.startswith(<span class=\"string\">'http://'</span>) <span class=\"keyword\">and</span> <span class=\"string\">':'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> link:</span><br><span class=\"line\">                link = urllib.parse.quote(link, safe=<span class=\"string\">'#'</span>)</span><br><span class=\"line\">                link = urllib.parse.urljoin(url, link)</span><br><span class=\"line\">            print(<span class=\"string\">'*'</span>, link)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> link <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.seen:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.dom <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> link:</span><br><span class=\"line\">                    print(<span class=\"string\">'... discarded, not in domain'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 如果没有下载过并且是属于该网站就加入待下载列表</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> link <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.q:</span><br><span class=\"line\">                        self.q.append(link)</span><br><span class=\"line\">                        print(<span class=\"string\">'...New, added to Q'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        print(<span class=\"string\">'...discarded, already in Q'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(<span class=\"string\">'...discarded, already processed'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">go</span><span class=\"params\">(self, media=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理所有待下载连接</span></span><br><span class=\"line\"><span class=\"string\">        :param media:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.q:</span><br><span class=\"line\">            url = self.q.pop()</span><br><span class=\"line\">            self.get_page(url, media)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        url = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            url = input(<span class=\"string\">'Enter starting URL:'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> (KeyboardInterrupt, EOFError):</span><br><span class=\"line\">            url = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> url:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'http://'</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'ftp://'</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> url.startswith(<span class=\"string\">'https://'</span>):</span><br><span class=\"line\">        url = <span class=\"string\">'http://%s'</span> % url</span><br><span class=\"line\"></span><br><span class=\"line\">    robot = Crawler(url)</span><br><span class=\"line\">    robot.go()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析Web页面\"><a href=\"#解析Web页面\" class=\"headerlink\" title=\"解析Web页面\"></a>解析Web页面</h3><p><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a>是解析页面的常用库，这个库不是标准库，需要单独下载。其使用可以参照上例中的代码。</p>\n<h3 id=\"可编程的Web浏览\"><a href=\"#可编程的Web浏览\" class=\"headerlink\" title=\"可编程的Web浏览\"></a>可编程的Web浏览</h3><p>可以使用<a href=\"https://pypi.python.org/pypi/MechanicalSoup/\" target=\"_blank\" rel=\"noopener\">MechanicalSoup</a>用来模拟浏览器。</p>\n"},{"title":"Python多线程(二)","date":"2018-02-26T14:16:16.000Z","copyright":true,"description":null,"_content":"在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。\n<!--More-->\n## 多线程实践\nPython虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。\n下面的例子是通过多线程下载图书排名信息的调用\n\n```Python\n#!/usr/bin/python3\n# -*-  coding:UTF-8 -*-\n\nfrom atexit import register\nimport re\nimport threading\nimport time\nimport urllib.request\n\n# 匹配排名的正则表达式\n# 亚马逊的网站\nREGEX = re.compile(b'#([\\d,]+) in Books')\nAMZN = 'https://www.amazon.com/dp/'\n\n# ISBN编号和书名\nISBNs = {\n    '0132269937': 'Core Python Programming',\n    '0132356139': 'Python Web Development with Django',\n    '0137143419': 'Python Fundamentals'\n}\n\n# 请求头\n# 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '\n                  '(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'\n}\n\n\ndef get_ranking(isbn):\n    # 爬取网页,获取数据\n    # 使用str.format()格式化数据\n    url = '{0}{1}'.format(AMZN, isbn)\n    # 爬取网页并解析\n    req = urllib.request.Request(url, headers=headers)\n    page = urllib.request.urlopen(req)\n    data = page.read()\n    page.close()\n    return str(REGEX.findall(data)[0], 'utf-8')\n\n\ndef _show_ranking(isbn):\n    # 显示结果\n    print('- %r ranked %s' % (ISBNs[isbn], get_ranking(isbn)))\n\n\ndef _main():\n    print('At', time.ctime(), 'on Amazon...')\n    for isbn in ISBNs:\n        (threading.Thread(target=_show_ranking, args=(isbn,))).start()\n        #_show_ranking(isbn)\n\n\n@register\ndef _atexit():\n    # 注册一个退出函数，在脚本退出先请求调用这个函数\n    print('all DONE at:', time.ctime())\n\nif __name__ == '__main__':\n    _main()\n```\n\n* 输出结果\n\n```\nAt Tue Feb 27 10:40:51 2018 on Amazon...\n- 'Python Fundamentals' ranked 4,358,513\n- 'Python Web Development with Django' ranked 1,354,091\n- 'Core Python Programming' ranked 458,510\nall DONE at: Tue Feb 27 10:42:39 2018\n```\n### 锁示例\n锁有两种状态:**锁定** 和 **未锁定**。同时它也支持两个函数：**获得锁** 和 **释放锁**。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。\n\n* 锁和更多的随机性\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom __future__ import with_statement\nfrom atexit import  register\nfrom random import randrange\nfrom threading import Thread, Lock, current_thread\nfrom time import sleep, ctime\n\n\nclass CleanOutputSet(set):\n    # 集合的子类，将默认输出改变为将其所有元素\n    # 按照逗号分隔的字符串\n    def __str__(self):\n        return ', '.join(x for x in self)\n\n\n# 锁\n# 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒\nlock = Lock()\nloops = (randrange(2, 5) for x in range(randrange(3, 7)))\nremaining = CleanOutputSet()\n\n\ndef loop(sec):\n    # 获取当前执行的线程名，然后获取锁并保存线程名\n    myname = current_thread().name\n    lock.acquire()\n    remaining.add(myname)\n    print('[%s] Started %s' % (ctime(), myname))\n    # 释放锁并睡眠随机秒\n    lock.release()\n    sleep(sec)\n    # 重新获取锁，输出后再释放锁\n    lock.acquire()\n    remaining.remove(myname)\n    print('[%s] Completed %s (%d sec)' % (ctime(), myname, sec))\n    print('     (remaining: %s)' % (remaining or 'NONE'))\n    lock.release()\n\n\ndef loop_with(sec):\n    myname = current_thread().name\n    with lock:\n        remaining.add(myname)\n        print('[%s] Started %s' % (ctime(), myname))\n    sleep(sec)\n    with lock:\n        remaining.remove(myname)\n        print('[%s] Completed %s (%d sec)' % (ctime(), myname, sec))\n        print('     (remaining: %s)' % (remaining or 'NONE'))\n\n\ndef _main():\n    for pause in loops:\n        # Thread(target=loop, args=(pause,)).start()\n        Thread(target=loop_with, args=(pause,)).start()\n\n\n\n@register\ndef _atexit():\n    print('all DONE at:', ctime())\n\n\nif __name__ == '__main__':\n    _main()\n\n```\n\n* 输出结果\n\nloop方法\n```\n[Tue Feb 27 11:26:13 2018] Started Thread-1\n[Tue Feb 27 11:26:13 2018] Started Thread-2\n[Tue Feb 27 11:26:13 2018] Started Thread-3\n[Tue Feb 27 11:26:13 2018] Started Thread-4\n[Tue Feb 27 11:26:13 2018] Started Thread-5\n[Tue Feb 27 11:26:13 2018] Started Thread-6\n[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)\n     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)\n[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)\n     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)\n     (remaining: Thread-4, Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)\n     (remaining: Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)\n     (remaining: Thread-1)\n[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)\n     (remaining: NONE)\nall DONE at: Tue Feb 27 11:26:17 2018\n```\n\nloop_with方法\n```\n[Tue Feb 27 11:43:15 2018] Started Thread-1\n[Tue Feb 27 11:43:15 2018] Started Thread-2\n[Tue Feb 27 11:43:15 2018] Started Thread-3\n[Tue Feb 27 11:43:15 2018] Started Thread-4\n[Tue Feb 27 11:43:15 2018] Started Thread-5\n[Tue Feb 27 11:43:15 2018] Started Thread-6\n[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)\n     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)\n[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)\n     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)\n[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)\n     (remaining: Thread-1, Thread-4, Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)\n     (remaining: Thread-4, Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)\n     (remaining: Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)\n     (remaining: NONE)\nall DONE at: Tue Feb 27 11:43:18 2018\n```\n\n### 信号量示例\n对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。**信号量** 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为`P()`，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为`V()`。\n\n* 糖果机和信号量\n\n>  这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入相应的模块和信号量类\n# BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值\n# 它可以防范其中信号量释放次数多余获得次数的异常用例\nfrom atexit import register\nfrom random import randrange\nfrom threading import BoundedSemaphore, Lock, Thread\nfrom time import sleep, ctime\n\n# 全局变量\n# 锁\n# 库存商品最大值的常量\n# 糖果托盘\nlock = Lock()\nMAX = 5\ncandytray = BoundedSemaphore(MAX)\n\n\ndef refill():\n    # 当虚构的糖果机所有者向库存中添加糖果时执行\n    # 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告\n    lock.acquire()\n    print('Refilling candy...')\n    try:\n        candytray.release()\n    except ValueError:\n        print('full, skipping')\n    else:\n        print('OK')\n    lock.release()\n\n\ndef buy():\n    # 允许消费者获取一个单位的库存\n    lock.acquire()\n    print('Buying candy....')\n    # 检测是否所有资源都已经消费完了\n    # 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False\n    # 指明没有更多资源\n    if candytray.acquire(False):\n        print('OK')\n    else:\n        print('Empty, skipping')\n    lock.release()\n\n\ndef producer(loops):\n    for i in range(loops):\n        refill()\n        sleep(randrange(3))\n\n\ndef consumer(loops):\n    for i in range(loops):\n        buy()\n        sleep(randrange(3))\n\n\ndef _main():\n    print('starting at:', ctime())\n    nloops = randrange(2, 6)\n    print('THE CANDY MACHINE (full with %d bars)' % MAX)\n    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+2),)).start()\n    Thread(target=producer, args=(nloops,)).start()\n\n\n@register\ndef _atexit():\n    print('all DONE at:', ctime())\n\n\nif __name__ == '__main__':\n    _main()\n```\n\n* 输出结果\n\n```\nstarting at: Tue Feb 27 14:48:31 2018\nTHE CANDY MACHINE (full with 5 bars)\nBuying candy....\nOK\nRefilling candy...\nOK\nRefilling candy...\nfull, skipping\nBuying candy....\nOK\nRefilling candy...\nOK\nBuying candy....\nOK\nRefilling candy...\nOK\nRefilling candy...\nfull, skipping\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nEmpty, skipping\nall DONE at: Tue Feb 27 14:48:42 2018\n```\n\n## 生产者-消费者问题和queue模块\n生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。\n[queue模块](https://docs.python.org/3/library/queue.html)来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品\n\n### queue模块常用属性\n\n|               属性                |                                                                          描述                                                                           |\n|:---------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|         Queue(maxsize=0)          |                              创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                              |\n|       LifoQueue(maxsize=0)        |                              创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                              |\n|      PriorityQueue(maxsize)       |                               创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                               |\n|             queue异常             |                                                                                                                                                         |\n|               Empty               |                                                           当对空队列调用get*()方法时抛出异常                                                            |\n|               Full                |                                                         当对已满的队列调用put*()方法时抛出异常                                                          |\n|           queue对象方法           |                                                                                                                                                         |\n|              qsize()              |                                          返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)                                           |\n|              empty()              |                                                        如果队列为空，则返回True；否则，返回False                                                        |\n|              full()               |                                                        如果队列已满，则返回True；否则，返回False                                                        |\n| put(item,block=True,timeout=None) | 将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常 |\n|           put_nowait()            |                                                                  和put(item,False)相同                                                                  |\n|   get(block=True,timeout=None)    |                                          从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止                                           |\n|           get_nowait()            |                                                                    和get(False)相同                                                                     |\n|            task_done()            |                                             用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用                                              |\n|              join()               |                                            在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞                                            |\n\n### 生产者消费者问题\n\n使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 使用queue.Queue对象和之前的myThread.MyThread线程类\nfrom random import randint\nfrom time import sleep\nfrom queue import Queue\nfrom myThread import MyThread\n\n\ndef writeQ(queue):\n    # 将一个对象放入队列中\n    print('producing object for Q...')\n    queue.put('xxx', 1)\n    print('size now', queue.qsize())\n\n\ndef readQ(queue):\n    # 消费队列中的一个对象\n    val = queue.get(1)\n    print('consumed object from Q... size now', queue.qsize())\n\n\ndef writer(queue, loops):\n    # 作为单个线程运行\n    # 向队列中放入一个对象，等待片刻，然后重复上述步骤\n    # 直至达到脚本执行时随机生成的次数没值\n    for i in range(loops):\n        writeQ(queue)\n        # 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象\n        sleep(randint(1, 3))\n\n\ndef reader(queue, loops):\n    # 作为单个线程运行\n    # 消耗队列中一个对象，等待片刻，然后重复上述步骤\n    # 直至达到脚本执行时随机生成的次数没值\n    for i in range(loops):\n        readQ(queue)\n        sleep(randint(2, 5))\n\n# 设置派生和执行的线程总数\nfuncs = [writer, reader]\nnfuncs = range(len(funcs))\n\n\ndef main():\n    nloops = randint(2, 5)\n    q = Queue(32)\n    threads = []\n    for i in nfuncs:\n        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)\n        threads.append(t)\n\n    for i in nfuncs:\n        threads[i].start()\n\n    for i in nfuncs:\n        threads[i].join()\n\n    print('all DONE')\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 输出结果\n\n```\nstarting at: Tue Feb 27 15:17:16 2018\nproducing object for Q...\nsize now 1\nstarting at: Tue Feb 27 15:17:16 2018\nconsumed object from Q... size now 0\nproducing object for Q...\nsize now 1\nproducing object for Q...\nsize now 2\ndone at: Tue Feb 27 15:17:20 2018\nconsumed object from Q... size now 1\nconsumed object from Q... size now 0\ndone at: Tue Feb 27 15:17:26 2018\nall DONE\n```\n\n## 线程的替代方案\n[subprocess模块](https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess)\n[multiprocessing模块](https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing)\n[concurrent.futures模块](https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures)\n","source":"_posts/Python多线程-二.md","raw":"---\ntitle: Python多线程(二)\ndate: 2018-02-26 22:16:16\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 多线程\ndescription:\n---\n在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。\n<!--More-->\n## 多线程实践\nPython虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。\n下面的例子是通过多线程下载图书排名信息的调用\n\n```Python\n#!/usr/bin/python3\n# -*-  coding:UTF-8 -*-\n\nfrom atexit import register\nimport re\nimport threading\nimport time\nimport urllib.request\n\n# 匹配排名的正则表达式\n# 亚马逊的网站\nREGEX = re.compile(b'#([\\d,]+) in Books')\nAMZN = 'https://www.amazon.com/dp/'\n\n# ISBN编号和书名\nISBNs = {\n    '0132269937': 'Core Python Programming',\n    '0132356139': 'Python Web Development with Django',\n    '0137143419': 'Python Fundamentals'\n}\n\n# 请求头\n# 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '\n                  '(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'\n}\n\n\ndef get_ranking(isbn):\n    # 爬取网页,获取数据\n    # 使用str.format()格式化数据\n    url = '{0}{1}'.format(AMZN, isbn)\n    # 爬取网页并解析\n    req = urllib.request.Request(url, headers=headers)\n    page = urllib.request.urlopen(req)\n    data = page.read()\n    page.close()\n    return str(REGEX.findall(data)[0], 'utf-8')\n\n\ndef _show_ranking(isbn):\n    # 显示结果\n    print('- %r ranked %s' % (ISBNs[isbn], get_ranking(isbn)))\n\n\ndef _main():\n    print('At', time.ctime(), 'on Amazon...')\n    for isbn in ISBNs:\n        (threading.Thread(target=_show_ranking, args=(isbn,))).start()\n        #_show_ranking(isbn)\n\n\n@register\ndef _atexit():\n    # 注册一个退出函数，在脚本退出先请求调用这个函数\n    print('all DONE at:', time.ctime())\n\nif __name__ == '__main__':\n    _main()\n```\n\n* 输出结果\n\n```\nAt Tue Feb 27 10:40:51 2018 on Amazon...\n- 'Python Fundamentals' ranked 4,358,513\n- 'Python Web Development with Django' ranked 1,354,091\n- 'Core Python Programming' ranked 458,510\nall DONE at: Tue Feb 27 10:42:39 2018\n```\n### 锁示例\n锁有两种状态:**锁定** 和 **未锁定**。同时它也支持两个函数：**获得锁** 和 **释放锁**。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。\n\n* 锁和更多的随机性\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom __future__ import with_statement\nfrom atexit import  register\nfrom random import randrange\nfrom threading import Thread, Lock, current_thread\nfrom time import sleep, ctime\n\n\nclass CleanOutputSet(set):\n    # 集合的子类，将默认输出改变为将其所有元素\n    # 按照逗号分隔的字符串\n    def __str__(self):\n        return ', '.join(x for x in self)\n\n\n# 锁\n# 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒\nlock = Lock()\nloops = (randrange(2, 5) for x in range(randrange(3, 7)))\nremaining = CleanOutputSet()\n\n\ndef loop(sec):\n    # 获取当前执行的线程名，然后获取锁并保存线程名\n    myname = current_thread().name\n    lock.acquire()\n    remaining.add(myname)\n    print('[%s] Started %s' % (ctime(), myname))\n    # 释放锁并睡眠随机秒\n    lock.release()\n    sleep(sec)\n    # 重新获取锁，输出后再释放锁\n    lock.acquire()\n    remaining.remove(myname)\n    print('[%s] Completed %s (%d sec)' % (ctime(), myname, sec))\n    print('     (remaining: %s)' % (remaining or 'NONE'))\n    lock.release()\n\n\ndef loop_with(sec):\n    myname = current_thread().name\n    with lock:\n        remaining.add(myname)\n        print('[%s] Started %s' % (ctime(), myname))\n    sleep(sec)\n    with lock:\n        remaining.remove(myname)\n        print('[%s] Completed %s (%d sec)' % (ctime(), myname, sec))\n        print('     (remaining: %s)' % (remaining or 'NONE'))\n\n\ndef _main():\n    for pause in loops:\n        # Thread(target=loop, args=(pause,)).start()\n        Thread(target=loop_with, args=(pause,)).start()\n\n\n\n@register\ndef _atexit():\n    print('all DONE at:', ctime())\n\n\nif __name__ == '__main__':\n    _main()\n\n```\n\n* 输出结果\n\nloop方法\n```\n[Tue Feb 27 11:26:13 2018] Started Thread-1\n[Tue Feb 27 11:26:13 2018] Started Thread-2\n[Tue Feb 27 11:26:13 2018] Started Thread-3\n[Tue Feb 27 11:26:13 2018] Started Thread-4\n[Tue Feb 27 11:26:13 2018] Started Thread-5\n[Tue Feb 27 11:26:13 2018] Started Thread-6\n[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)\n     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)\n[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)\n     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)\n     (remaining: Thread-4, Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)\n     (remaining: Thread-1, Thread-5)\n[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)\n     (remaining: Thread-1)\n[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)\n     (remaining: NONE)\nall DONE at: Tue Feb 27 11:26:17 2018\n```\n\nloop_with方法\n```\n[Tue Feb 27 11:43:15 2018] Started Thread-1\n[Tue Feb 27 11:43:15 2018] Started Thread-2\n[Tue Feb 27 11:43:15 2018] Started Thread-3\n[Tue Feb 27 11:43:15 2018] Started Thread-4\n[Tue Feb 27 11:43:15 2018] Started Thread-5\n[Tue Feb 27 11:43:15 2018] Started Thread-6\n[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)\n     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)\n[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)\n     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)\n[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)\n     (remaining: Thread-1, Thread-4, Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)\n     (remaining: Thread-4, Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)\n     (remaining: Thread-2)\n[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)\n     (remaining: NONE)\nall DONE at: Tue Feb 27 11:43:18 2018\n```\n\n### 信号量示例\n对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。**信号量** 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为`P()`，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为`V()`。\n\n* 糖果机和信号量\n\n>  这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入相应的模块和信号量类\n# BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值\n# 它可以防范其中信号量释放次数多余获得次数的异常用例\nfrom atexit import register\nfrom random import randrange\nfrom threading import BoundedSemaphore, Lock, Thread\nfrom time import sleep, ctime\n\n# 全局变量\n# 锁\n# 库存商品最大值的常量\n# 糖果托盘\nlock = Lock()\nMAX = 5\ncandytray = BoundedSemaphore(MAX)\n\n\ndef refill():\n    # 当虚构的糖果机所有者向库存中添加糖果时执行\n    # 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告\n    lock.acquire()\n    print('Refilling candy...')\n    try:\n        candytray.release()\n    except ValueError:\n        print('full, skipping')\n    else:\n        print('OK')\n    lock.release()\n\n\ndef buy():\n    # 允许消费者获取一个单位的库存\n    lock.acquire()\n    print('Buying candy....')\n    # 检测是否所有资源都已经消费完了\n    # 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False\n    # 指明没有更多资源\n    if candytray.acquire(False):\n        print('OK')\n    else:\n        print('Empty, skipping')\n    lock.release()\n\n\ndef producer(loops):\n    for i in range(loops):\n        refill()\n        sleep(randrange(3))\n\n\ndef consumer(loops):\n    for i in range(loops):\n        buy()\n        sleep(randrange(3))\n\n\ndef _main():\n    print('starting at:', ctime())\n    nloops = randrange(2, 6)\n    print('THE CANDY MACHINE (full with %d bars)' % MAX)\n    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+2),)).start()\n    Thread(target=producer, args=(nloops,)).start()\n\n\n@register\ndef _atexit():\n    print('all DONE at:', ctime())\n\n\nif __name__ == '__main__':\n    _main()\n```\n\n* 输出结果\n\n```\nstarting at: Tue Feb 27 14:48:31 2018\nTHE CANDY MACHINE (full with 5 bars)\nBuying candy....\nOK\nRefilling candy...\nOK\nRefilling candy...\nfull, skipping\nBuying candy....\nOK\nRefilling candy...\nOK\nBuying candy....\nOK\nRefilling candy...\nOK\nRefilling candy...\nfull, skipping\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nOK\nBuying candy....\nEmpty, skipping\nall DONE at: Tue Feb 27 14:48:42 2018\n```\n\n## 生产者-消费者问题和queue模块\n生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。\n[queue模块](https://docs.python.org/3/library/queue.html)来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品\n\n### queue模块常用属性\n\n|               属性                |                                                                          描述                                                                           |\n|:---------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|         Queue(maxsize=0)          |                              创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                              |\n|       LifoQueue(maxsize=0)        |                              创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                              |\n|      PriorityQueue(maxsize)       |                               创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列                               |\n|             queue异常             |                                                                                                                                                         |\n|               Empty               |                                                           当对空队列调用get*()方法时抛出异常                                                            |\n|               Full                |                                                         当对已满的队列调用put*()方法时抛出异常                                                          |\n|           queue对象方法           |                                                                                                                                                         |\n|              qsize()              |                                          返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)                                           |\n|              empty()              |                                                        如果队列为空，则返回True；否则，返回False                                                        |\n|              full()               |                                                        如果队列已满，则返回True；否则，返回False                                                        |\n| put(item,block=True,timeout=None) | 将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常 |\n|           put_nowait()            |                                                                  和put(item,False)相同                                                                  |\n|   get(block=True,timeout=None)    |                                          从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止                                           |\n|           get_nowait()            |                                                                    和get(False)相同                                                                     |\n|            task_done()            |                                             用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用                                              |\n|              join()               |                                            在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞                                            |\n\n### 生产者消费者问题\n\n使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 使用queue.Queue对象和之前的myThread.MyThread线程类\nfrom random import randint\nfrom time import sleep\nfrom queue import Queue\nfrom myThread import MyThread\n\n\ndef writeQ(queue):\n    # 将一个对象放入队列中\n    print('producing object for Q...')\n    queue.put('xxx', 1)\n    print('size now', queue.qsize())\n\n\ndef readQ(queue):\n    # 消费队列中的一个对象\n    val = queue.get(1)\n    print('consumed object from Q... size now', queue.qsize())\n\n\ndef writer(queue, loops):\n    # 作为单个线程运行\n    # 向队列中放入一个对象，等待片刻，然后重复上述步骤\n    # 直至达到脚本执行时随机生成的次数没值\n    for i in range(loops):\n        writeQ(queue)\n        # 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象\n        sleep(randint(1, 3))\n\n\ndef reader(queue, loops):\n    # 作为单个线程运行\n    # 消耗队列中一个对象，等待片刻，然后重复上述步骤\n    # 直至达到脚本执行时随机生成的次数没值\n    for i in range(loops):\n        readQ(queue)\n        sleep(randint(2, 5))\n\n# 设置派生和执行的线程总数\nfuncs = [writer, reader]\nnfuncs = range(len(funcs))\n\n\ndef main():\n    nloops = randint(2, 5)\n    q = Queue(32)\n    threads = []\n    for i in nfuncs:\n        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)\n        threads.append(t)\n\n    for i in nfuncs:\n        threads[i].start()\n\n    for i in nfuncs:\n        threads[i].join()\n\n    print('all DONE')\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* 输出结果\n\n```\nstarting at: Tue Feb 27 15:17:16 2018\nproducing object for Q...\nsize now 1\nstarting at: Tue Feb 27 15:17:16 2018\nconsumed object from Q... size now 0\nproducing object for Q...\nsize now 1\nproducing object for Q...\nsize now 2\ndone at: Tue Feb 27 15:17:20 2018\nconsumed object from Q... size now 1\nconsumed object from Q... size now 0\ndone at: Tue Feb 27 15:17:26 2018\nall DONE\n```\n\n## 线程的替代方案\n[subprocess模块](https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess)\n[multiprocessing模块](https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing)\n[concurrent.futures模块](https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures)\n","slug":"Python多线程-二","published":1,"updated":"2018-02-28T01:41:46.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3z000btwn9havj1o7j","content":"<p>在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。<br><a id=\"more\"></a></p>\n<h2 id=\"多线程实践\"><a href=\"#多线程实践\" class=\"headerlink\" title=\"多线程实践\"></a>多线程实践</h2><p>Python虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。<br>下面的例子是通过多线程下载图书排名信息的调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*-  coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span> register</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配排名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 亚马逊的网站</span></span><br><span class=\"line\">REGEX = re.compile(<span class=\"string\">b'#([\\d,]+) in Books'</span>)</span><br><span class=\"line\">AMZN = <span class=\"string\">'https://www.amazon.com/dp/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ISBN编号和书名</span></span><br><span class=\"line\">ISBNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0132269937'</span>: <span class=\"string\">'Core Python Programming'</span>,</span><br><span class=\"line\">    <span class=\"string\">'0132356139'</span>: <span class=\"string\">'Python Web Development with Django'</span>,</span><br><span class=\"line\">    <span class=\"string\">'0137143419'</span>: <span class=\"string\">'Python Fundamentals'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求头</span></span><br><span class=\"line\"><span class=\"comment\"># 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class=\"line\">                  <span class=\"string\">'(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ranking</span><span class=\"params\">(isbn)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 爬取网页,获取数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用str.format()格式化数据</span></span><br><span class=\"line\">    url = <span class=\"string\">'&#123;0&#125;&#123;1&#125;'</span>.format(AMZN, isbn)</span><br><span class=\"line\">    <span class=\"comment\"># 爬取网页并解析</span></span><br><span class=\"line\">    req = urllib.request.Request(url, headers=headers)</span><br><span class=\"line\">    page = urllib.request.urlopen(req)</span><br><span class=\"line\">    data = page.read()</span><br><span class=\"line\">    page.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str(REGEX.findall(data)[<span class=\"number\">0</span>], <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_show_ranking</span><span class=\"params\">(isbn)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 显示结果</span></span><br><span class=\"line\">    print(<span class=\"string\">'- %r ranked %s'</span> % (ISBNs[isbn], get_ranking(isbn)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'At'</span>, time.ctime(), <span class=\"string\">'on Amazon...'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> isbn <span class=\"keyword\">in</span> ISBNs:</span><br><span class=\"line\">        (threading.Thread(target=_show_ranking, args=(isbn,))).start()</span><br><span class=\"line\">        <span class=\"comment\">#_show_ranking(isbn)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 注册一个退出函数，在脚本退出先请求调用这个函数</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, time.ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">At Tue Feb 27 10:40:51 2018 on Amazon...</span><br><span class=\"line\">- &apos;Python Fundamentals&apos; ranked 4,358,513</span><br><span class=\"line\">- &apos;Python Web Development with Django&apos; ranked 1,354,091</span><br><span class=\"line\">- &apos;Core Python Programming&apos; ranked 458,510</span><br><span class=\"line\">all DONE at: Tue Feb 27 10:42:39 2018</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁示例\"><a href=\"#锁示例\" class=\"headerlink\" title=\"锁示例\"></a>锁示例</h3><p>锁有两种状态:<strong>锁定</strong> 和 <strong>未锁定</strong>。同时它也支持两个函数：<strong>获得锁</strong> 和 <strong>释放锁</strong>。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。</p>\n<ul>\n<li>锁和更多的随机性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> with_statement</span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span>  register</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Lock, current_thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep, ctime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanOutputSet</span><span class=\"params\">(set)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 集合的子类，将默认输出改变为将其所有元素</span></span><br><span class=\"line\">    <span class=\"comment\"># 按照逗号分隔的字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">', '</span>.join(x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 锁</span></span><br><span class=\"line\"><span class=\"comment\"># 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\">loops = (randrange(<span class=\"number\">2</span>, <span class=\"number\">5</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(randrange(<span class=\"number\">3</span>, <span class=\"number\">7</span>)))</span><br><span class=\"line\">remaining = CleanOutputSet()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(sec)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前执行的线程名，然后获取锁并保存线程名</span></span><br><span class=\"line\">    myname = current_thread().name</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    remaining.add(myname)</span><br><span class=\"line\">    print(<span class=\"string\">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class=\"line\">    <span class=\"comment\"># 释放锁并睡眠随机秒</span></span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    <span class=\"comment\"># 重新获取锁，输出后再释放锁</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    remaining.remove(myname)</span><br><span class=\"line\">    print(<span class=\"string\">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class=\"line\">    print(<span class=\"string\">'     (remaining: %s)'</span> % (remaining <span class=\"keyword\">or</span> <span class=\"string\">'NONE'</span>))</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_with</span><span class=\"params\">(sec)</span>:</span></span><br><span class=\"line\">    myname = current_thread().name</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        remaining.add(myname)</span><br><span class=\"line\">        print(<span class=\"string\">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        remaining.remove(myname)</span><br><span class=\"line\">        print(<span class=\"string\">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class=\"line\">        print(<span class=\"string\">'     (remaining: %s)'</span> % (remaining <span class=\"keyword\">or</span> <span class=\"string\">'NONE'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pause <span class=\"keyword\">in</span> loops:</span><br><span class=\"line\">        <span class=\"comment\"># Thread(target=loop, args=(pause,)).start()</span></span><br><span class=\"line\">        Thread(target=loop_with, args=(pause,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<p>loop方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-1</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-2</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-3</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-4</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-5</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-6</span><br><span class=\"line\">[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)</span><br><span class=\"line\">[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-4, Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-1)</span><br><span class=\"line\">[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)</span><br><span class=\"line\">     (remaining: NONE)</span><br><span class=\"line\">all DONE at: Tue Feb 27 11:26:17 2018</span><br></pre></td></tr></table></figure></p>\n<p>loop_with方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-1</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-2</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-3</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-4</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-5</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-6</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)</span><br><span class=\"line\">     (remaining: NONE)</span><br><span class=\"line\">all DONE at: Tue Feb 27 11:43:18 2018</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"信号量示例\"><a href=\"#信号量示例\" class=\"headerlink\" title=\"信号量示例\"></a>信号量示例</h3><p>对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。<strong>信号量</strong> 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为<code>P()</code>，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为<code>V()</code>。</p>\n<ul>\n<li>糖果机和信号量</li>\n</ul>\n<blockquote>\n<p> 这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入相应的模块和信号量类</span></span><br><span class=\"line\"><span class=\"comment\"># BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值</span></span><br><span class=\"line\"><span class=\"comment\"># 它可以防范其中信号量释放次数多余获得次数的异常用例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span> register</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> BoundedSemaphore, Lock, Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep, ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 锁</span></span><br><span class=\"line\"><span class=\"comment\"># 库存商品最大值的常量</span></span><br><span class=\"line\"><span class=\"comment\"># 糖果托盘</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\">MAX = <span class=\"number\">5</span></span><br><span class=\"line\">candytray = BoundedSemaphore(MAX)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refill</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 当虚构的糖果机所有者向库存中添加糖果时执行</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    print(<span class=\"string\">'Refilling candy...'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        candytray.release()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        print(<span class=\"string\">'full, skipping'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'OK'</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许消费者获取一个单位的库存</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    print(<span class=\"string\">'Buying candy....'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 检测是否所有资源都已经消费完了</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False</span></span><br><span class=\"line\">    <span class=\"comment\"># 指明没有更多资源</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> candytray.acquire(<span class=\"keyword\">False</span>):</span><br><span class=\"line\">        print(<span class=\"string\">'OK'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Empty, skipping'</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer</span><span class=\"params\">(loops)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        refill()</span><br><span class=\"line\">        sleep(randrange(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">(loops)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        buy()</span><br><span class=\"line\">        sleep(randrange(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    nloops = randrange(<span class=\"number\">2</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'THE CANDY MACHINE (full with %d bars)'</span> % MAX)</span><br><span class=\"line\">    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+<span class=\"number\">2</span>),)).start()</span><br><span class=\"line\">    Thread(target=producer, args=(nloops,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Tue Feb 27 14:48:31 2018</span><br><span class=\"line\">THE CANDY MACHINE (full with 5 bars)</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">full, skipping</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">full, skipping</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">Empty, skipping</span><br><span class=\"line\">all DONE at: Tue Feb 27 14:48:42 2018</span><br></pre></td></tr></table></figure>\n<h2 id=\"生产者-消费者问题和queue模块\"><a href=\"#生产者-消费者问题和queue模块\" class=\"headerlink\" title=\"生产者-消费者问题和queue模块\"></a>生产者-消费者问题和queue模块</h2><p>生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。<br><a href=\"https://docs.python.org/3/library/queue.html\" target=\"_blank\" rel=\"noopener\">queue模块</a>来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品</p>\n<h3 id=\"queue模块常用属性\"><a href=\"#queue模块常用属性\" class=\"headerlink\" title=\"queue模块常用属性\"></a>queue模块常用属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Queue(maxsize=0)</td>\n<td style=\"text-align:center\">创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LifoQueue(maxsize=0)</td>\n<td style=\"text-align:center\">创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PriorityQueue(maxsize)</td>\n<td style=\"text-align:center\">创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Empty</td>\n<td style=\"text-align:center\">当对空队列调用get*()方法时抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Full</td>\n<td style=\"text-align:center\">当对已满的队列调用put*()方法时抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qsize()</td>\n<td style=\"text-align:center\">返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">如果队列为空，则返回True；否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">full()</td>\n<td style=\"text-align:center\">如果队列已满，则返回True；否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">put(item,block=True,timeout=None)</td>\n<td style=\"text-align:center\">将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">put_nowait()</td>\n<td style=\"text-align:center\">和put(item,False)相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(block=True,timeout=None)</td>\n<td style=\"text-align:center\">从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_nowait()</td>\n<td style=\"text-align:center\">和get(False)相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">task_done()</td>\n<td style=\"text-align:center\">用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">join()</td>\n<td style=\"text-align:center\">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"生产者消费者问题\"><a href=\"#生产者消费者问题\" class=\"headerlink\" title=\"生产者消费者问题\"></a>生产者消费者问题</h3><p>使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用queue.Queue对象和之前的myThread.MyThread线程类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> myThread <span class=\"keyword\">import</span> MyThread</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeQ</span><span class=\"params\">(queue)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 将一个对象放入队列中</span></span><br><span class=\"line\">    print(<span class=\"string\">'producing object for Q...'</span>)</span><br><span class=\"line\">    queue.put(<span class=\"string\">'xxx'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'size now'</span>, queue.qsize())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readQ</span><span class=\"params\">(queue)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 消费队列中的一个对象</span></span><br><span class=\"line\">    val = queue.get(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'consumed object from Q... size now'</span>, queue.qsize())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writer</span><span class=\"params\">(queue, loops)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 作为单个线程运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 向队列中放入一个对象，等待片刻，然后重复上述步骤</span></span><br><span class=\"line\">    <span class=\"comment\"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        writeQ(queue)</span><br><span class=\"line\">        <span class=\"comment\"># 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象</span></span><br><span class=\"line\">        sleep(randint(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reader</span><span class=\"params\">(queue, loops)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 作为单个线程运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 消耗队列中一个对象，等待片刻，然后重复上述步骤</span></span><br><span class=\"line\">    <span class=\"comment\"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        readQ(queue)</span><br><span class=\"line\">        sleep(randint(<span class=\"number\">2</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置派生和执行的线程总数</span></span><br><span class=\"line\">funcs = [writer, reader]</span><br><span class=\"line\">nfuncs = range(len(funcs))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    nloops = randint(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    q = Queue(<span class=\"number\">32</span>)</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Tue Feb 27 15:17:16 2018</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 1</span><br><span class=\"line\">starting at: Tue Feb 27 15:17:16 2018</span><br><span class=\"line\">consumed object from Q... size now 0</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 1</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 2</span><br><span class=\"line\">done at: Tue Feb 27 15:17:20 2018</span><br><span class=\"line\">consumed object from Q... size now 1</span><br><span class=\"line\">consumed object from Q... size now 0</span><br><span class=\"line\">done at: Tue Feb 27 15:17:26 2018</span><br><span class=\"line\">all DONE</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程的替代方案\"><a href=\"#线程的替代方案\" class=\"headerlink\" title=\"线程的替代方案\"></a>线程的替代方案</h2><p><a href=\"https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess\" target=\"_blank\" rel=\"noopener\">subprocess模块</a><br><a href=\"https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing\" target=\"_blank\" rel=\"noopener\">multiprocessing模块</a><br><a href=\"https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures\" target=\"_blank\" rel=\"noopener\">concurrent.futures模块</a></p>\n","site":{"data":{}},"excerpt":"<p>在上篇主要对线程的概念做了一个简要的介绍，同时介绍了_thread模块和threading模块的使用方法，通过几个简短的程序实现了线程的调用。这篇将会记录一些多线程简单的应用以及相关生产者和消费者的问题。<br>","more":"</p>\n<h2 id=\"多线程实践\"><a href=\"#多线程实践\" class=\"headerlink\" title=\"多线程实践\"></a>多线程实践</h2><p>Python虚拟机是单线程（GIL）的原因，只有线程在执行I/O密集型的应用时才会更好地发挥Python的并发性。<br>下面的例子是通过多线程下载图书排名信息的调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*-  coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span> register</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配排名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"># 亚马逊的网站</span></span><br><span class=\"line\">REGEX = re.compile(<span class=\"string\">b'#([\\d,]+) in Books'</span>)</span><br><span class=\"line\">AMZN = <span class=\"string\">'https://www.amazon.com/dp/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ISBN编号和书名</span></span><br><span class=\"line\">ISBNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0132269937'</span>: <span class=\"string\">'Core Python Programming'</span>,</span><br><span class=\"line\">    <span class=\"string\">'0132356139'</span>: <span class=\"string\">'Python Web Development with Django'</span>,</span><br><span class=\"line\">    <span class=\"string\">'0137143419'</span>: <span class=\"string\">'Python Fundamentals'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求头</span></span><br><span class=\"line\"><span class=\"comment\"># 因为亚马逊会检测爬虫,所以需要加上请求头伪装成浏览器访问</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class=\"line\">                  <span class=\"string\">'(KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ranking</span><span class=\"params\">(isbn)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 爬取网页,获取数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用str.format()格式化数据</span></span><br><span class=\"line\">    url = <span class=\"string\">'&#123;0&#125;&#123;1&#125;'</span>.format(AMZN, isbn)</span><br><span class=\"line\">    <span class=\"comment\"># 爬取网页并解析</span></span><br><span class=\"line\">    req = urllib.request.Request(url, headers=headers)</span><br><span class=\"line\">    page = urllib.request.urlopen(req)</span><br><span class=\"line\">    data = page.read()</span><br><span class=\"line\">    page.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str(REGEX.findall(data)[<span class=\"number\">0</span>], <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_show_ranking</span><span class=\"params\">(isbn)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 显示结果</span></span><br><span class=\"line\">    print(<span class=\"string\">'- %r ranked %s'</span> % (ISBNs[isbn], get_ranking(isbn)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'At'</span>, time.ctime(), <span class=\"string\">'on Amazon...'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> isbn <span class=\"keyword\">in</span> ISBNs:</span><br><span class=\"line\">        (threading.Thread(target=_show_ranking, args=(isbn,))).start()</span><br><span class=\"line\">        <span class=\"comment\">#_show_ranking(isbn)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 注册一个退出函数，在脚本退出先请求调用这个函数</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, time.ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">At Tue Feb 27 10:40:51 2018 on Amazon...</span><br><span class=\"line\">- &apos;Python Fundamentals&apos; ranked 4,358,513</span><br><span class=\"line\">- &apos;Python Web Development with Django&apos; ranked 1,354,091</span><br><span class=\"line\">- &apos;Core Python Programming&apos; ranked 458,510</span><br><span class=\"line\">all DONE at: Tue Feb 27 10:42:39 2018</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁示例\"><a href=\"#锁示例\" class=\"headerlink\" title=\"锁示例\"></a>锁示例</h3><p>锁有两种状态:<strong>锁定</strong> 和 <strong>未锁定</strong>。同时它也支持两个函数：<strong>获得锁</strong> 和 <strong>释放锁</strong>。当多线程争夺锁时，允许第一个获得锁的线程进入临界区，并执行。之后到达的线程被阻塞，直到第一个线程执行结束，退出临界区，并释放锁。其他等待的线程随机获得锁并进入临界区。</p>\n<ul>\n<li>锁和更多的随机性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> with_statement</span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span>  register</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Lock, current_thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep, ctime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleanOutputSet</span><span class=\"params\">(set)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 集合的子类，将默认输出改变为将其所有元素</span></span><br><span class=\"line\">    <span class=\"comment\"># 按照逗号分隔的字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">', '</span>.join(x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 锁</span></span><br><span class=\"line\"><span class=\"comment\"># 随机数量的线程(3~6)，每个线程暂停或睡眠2~4秒</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\">loops = (randrange(<span class=\"number\">2</span>, <span class=\"number\">5</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(randrange(<span class=\"number\">3</span>, <span class=\"number\">7</span>)))</span><br><span class=\"line\">remaining = CleanOutputSet()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">(sec)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前执行的线程名，然后获取锁并保存线程名</span></span><br><span class=\"line\">    myname = current_thread().name</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    remaining.add(myname)</span><br><span class=\"line\">    print(<span class=\"string\">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class=\"line\">    <span class=\"comment\"># 释放锁并睡眠随机秒</span></span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    <span class=\"comment\"># 重新获取锁，输出后再释放锁</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    remaining.remove(myname)</span><br><span class=\"line\">    print(<span class=\"string\">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class=\"line\">    print(<span class=\"string\">'     (remaining: %s)'</span> % (remaining <span class=\"keyword\">or</span> <span class=\"string\">'NONE'</span>))</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop_with</span><span class=\"params\">(sec)</span>:</span></span><br><span class=\"line\">    myname = current_thread().name</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        remaining.add(myname)</span><br><span class=\"line\">        print(<span class=\"string\">'[%s] Started %s'</span> % (ctime(), myname))</span><br><span class=\"line\">    sleep(sec)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">        remaining.remove(myname)</span><br><span class=\"line\">        print(<span class=\"string\">'[%s] Completed %s (%d sec)'</span> % (ctime(), myname, sec))</span><br><span class=\"line\">        print(<span class=\"string\">'     (remaining: %s)'</span> % (remaining <span class=\"keyword\">or</span> <span class=\"string\">'NONE'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pause <span class=\"keyword\">in</span> loops:</span><br><span class=\"line\">        <span class=\"comment\"># Thread(target=loop, args=(pause,)).start()</span></span><br><span class=\"line\">        Thread(target=loop_with, args=(pause,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<p>loop方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-1</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-2</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-3</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-4</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-5</span><br><span class=\"line\">[Tue Feb 27 11:26:13 2018] Started Thread-6</span><br><span class=\"line\">[Tue Feb 27 11:26:15 2018] Completed Thread-2 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5, Thread-6)</span><br><span class=\"line\">[Tue Feb 27 11:26:15 2018] Completed Thread-6 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-3, Thread-4, Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-3 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-4, Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-4 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5)</span><br><span class=\"line\">[Tue Feb 27 11:26:16 2018] Completed Thread-5 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-1)</span><br><span class=\"line\">[Tue Feb 27 11:26:17 2018] Completed Thread-1 (4 sec)</span><br><span class=\"line\">     (remaining: NONE)</span><br><span class=\"line\">all DONE at: Tue Feb 27 11:26:17 2018</span><br></pre></td></tr></table></figure></p>\n<p>loop_with方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-1</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-2</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-3</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-4</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-5</span><br><span class=\"line\">[Tue Feb 27 11:43:15 2018] Started Thread-6</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-3 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5, Thread-4, Thread-6, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-6 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-5, Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:17 2018] Completed Thread-5 (2 sec)</span><br><span class=\"line\">     (remaining: Thread-1, Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-1 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-4, Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-4 (3 sec)</span><br><span class=\"line\">     (remaining: Thread-2)</span><br><span class=\"line\">[Tue Feb 27 11:43:18 2018] Completed Thread-2 (3 sec)</span><br><span class=\"line\">     (remaining: NONE)</span><br><span class=\"line\">all DONE at: Tue Feb 27 11:43:18 2018</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"信号量示例\"><a href=\"#信号量示例\" class=\"headerlink\" title=\"信号量示例\"></a>信号量示例</h3><p>对于拥有有限资源的应用来说，可以使用信号量的方式来代替锁。<strong>信号量</strong> 是一个计数器，当资源消耗时递减，当资源释放时递增。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。消耗资源使计数器递减的操作成为<code>P()</code>，当一个线程对一个资源完成操作时，该资源返回资源池的操作称为<code>V()</code>。</p>\n<ul>\n<li>糖果机和信号量</li>\n</ul>\n<blockquote>\n<p> 这个特制的机器只有5个可用的槽来保持库存。如果所有槽都满了，糖果不能再加入这个机器中；如果每个槽都空了，想要购买的消费者无法买到糖果。使用信号量来跟踪这些有限的资源</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入相应的模块和信号量类</span></span><br><span class=\"line\"><span class=\"comment\"># BoundedSemaphore的额外功能是这个计数器的值永远不会超过它的初始值</span></span><br><span class=\"line\"><span class=\"comment\"># 它可以防范其中信号量释放次数多余获得次数的异常用例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> atexit <span class=\"keyword\">import</span> register</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> BoundedSemaphore, Lock, Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep, ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 锁</span></span><br><span class=\"line\"><span class=\"comment\"># 库存商品最大值的常量</span></span><br><span class=\"line\"><span class=\"comment\"># 糖果托盘</span></span><br><span class=\"line\">lock = Lock()</span><br><span class=\"line\">MAX = <span class=\"number\">5</span></span><br><span class=\"line\">candytray = BoundedSemaphore(MAX)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refill</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 当虚构的糖果机所有者向库存中添加糖果时执行</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码会输出用户的行动，并在某人添加的糖果超过最大库存是给予警告</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    print(<span class=\"string\">'Refilling candy...'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        candytray.release()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        print(<span class=\"string\">'full, skipping'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'OK'</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许消费者获取一个单位的库存</span></span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    print(<span class=\"string\">'Buying candy....'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 检测是否所有资源都已经消费完了</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过传入非阻塞的标志False，让调用不再阻塞，而在应当阻塞的时候返回一个False</span></span><br><span class=\"line\">    <span class=\"comment\"># 指明没有更多资源</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> candytray.acquire(<span class=\"keyword\">False</span>):</span><br><span class=\"line\">        print(<span class=\"string\">'OK'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Empty, skipping'</span>)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer</span><span class=\"params\">(loops)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        refill()</span><br><span class=\"line\">        sleep(randrange(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">(loops)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        buy()</span><br><span class=\"line\">        sleep(randrange(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'starting at:'</span>, ctime())</span><br><span class=\"line\">    nloops = randrange(<span class=\"number\">2</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'THE CANDY MACHINE (full with %d bars)'</span> % MAX)</span><br><span class=\"line\">    Thread(target=consumer, args=(randrange(nloops, nloops+MAX+<span class=\"number\">2</span>),)).start()</span><br><span class=\"line\">    Thread(target=producer, args=(nloops,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_atexit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE at:'</span>, ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    _main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Tue Feb 27 14:48:31 2018</span><br><span class=\"line\">THE CANDY MACHINE (full with 5 bars)</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">full, skipping</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">OK</span><br><span class=\"line\">Refilling candy...</span><br><span class=\"line\">full, skipping</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">OK</span><br><span class=\"line\">Buying candy....</span><br><span class=\"line\">Empty, skipping</span><br><span class=\"line\">all DONE at: Tue Feb 27 14:48:42 2018</span><br></pre></td></tr></table></figure>\n<h2 id=\"生产者-消费者问题和queue模块\"><a href=\"#生产者-消费者问题和queue模块\" class=\"headerlink\" title=\"生产者-消费者问题和queue模块\"></a>生产者-消费者问题和queue模块</h2><p>生产商品的时间是不确定的，消费生产者生产的商品的时间也是不确定的。在这个场景下将其放在类似队列的数据结构中。<br><a href=\"https://docs.python.org/3/library/queue.html\" target=\"_blank\" rel=\"noopener\">queue模块</a>来提供线程间通信的机制，从而让线程之间可以互相分享数据。具体而言就是创建一个队列，让生产者在其中放入新的商品，而消费者消费这些商品</p>\n<h3 id=\"queue模块常用属性\"><a href=\"#queue模块常用属性\" class=\"headerlink\" title=\"queue模块常用属性\"></a>queue模块常用属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Queue(maxsize=0)</td>\n<td style=\"text-align:center\">创建一个先入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LifoQueue(maxsize=0)</td>\n<td style=\"text-align:center\">创建一个后入先出队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PriorityQueue(maxsize)</td>\n<td style=\"text-align:center\">创建一个优先级队列。如果给定最大值，则在队列没有空间时阻塞，否则(没有指定最大值),为无限队列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Empty</td>\n<td style=\"text-align:center\">当对空队列调用get*()方法时抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Full</td>\n<td style=\"text-align:center\">当对已满的队列调用put*()方法时抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">queue对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qsize()</td>\n<td style=\"text-align:center\">返回队列大小(由于返回时队列大小可能被其他线程修改，所以改值为近似值)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty()</td>\n<td style=\"text-align:center\">如果队列为空，则返回True；否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">full()</td>\n<td style=\"text-align:center\">如果队列已满，则返回True；否则，返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">put(item,block=True,timeout=None)</td>\n<td style=\"text-align:center\">将item放入队列。如果block为True(默认)且timeout为None，则在有可用空间之前阻塞；如果timeout为正值，则最多阻塞timeout秒；如果block为False，则抛出Empty异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">put_nowait()</td>\n<td style=\"text-align:center\">和put(item,False)相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(block=True,timeout=None)</td>\n<td style=\"text-align:center\">从队列中取得元素，如果给定了block(非0)，则一直阻塞到有可用的元素为止</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get_nowait()</td>\n<td style=\"text-align:center\">和get(False)相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">task_done()</td>\n<td style=\"text-align:center\">用于标识队列中的某个元素已执行完成，该方法会被下面的join()使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">join()</td>\n<td style=\"text-align:center\">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"生产者消费者问题\"><a href=\"#生产者消费者问题\" class=\"headerlink\" title=\"生产者消费者问题\"></a>生产者消费者问题</h3><p>使用了Queue对象，以及随机生产(消费)的商品的数量。生产者和消费者独立且并发地执行线程</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用queue.Queue对象和之前的myThread.MyThread线程类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> myThread <span class=\"keyword\">import</span> MyThread</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeQ</span><span class=\"params\">(queue)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 将一个对象放入队列中</span></span><br><span class=\"line\">    print(<span class=\"string\">'producing object for Q...'</span>)</span><br><span class=\"line\">    queue.put(<span class=\"string\">'xxx'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'size now'</span>, queue.qsize())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readQ</span><span class=\"params\">(queue)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 消费队列中的一个对象</span></span><br><span class=\"line\">    val = queue.get(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'consumed object from Q... size now'</span>, queue.qsize())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writer</span><span class=\"params\">(queue, loops)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 作为单个线程运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 向队列中放入一个对象，等待片刻，然后重复上述步骤</span></span><br><span class=\"line\">    <span class=\"comment\"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        writeQ(queue)</span><br><span class=\"line\">        <span class=\"comment\"># 睡眠的随机秒数比reader短是为了阻碍reader从空队列中获取对象</span></span><br><span class=\"line\">        sleep(randint(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reader</span><span class=\"params\">(queue, loops)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 作为单个线程运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 消耗队列中一个对象，等待片刻，然后重复上述步骤</span></span><br><span class=\"line\">    <span class=\"comment\"># 直至达到脚本执行时随机生成的次数没值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):</span><br><span class=\"line\">        readQ(queue)</span><br><span class=\"line\">        sleep(randint(<span class=\"number\">2</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置派生和执行的线程总数</span></span><br><span class=\"line\">funcs = [writer, reader]</span><br><span class=\"line\">nfuncs = range(len(funcs))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    nloops = randint(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    q = Queue(<span class=\"number\">32</span>)</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        t = MyThread(funcs[i], (q, nloops), funcs[i].__name__)</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nfuncs:</span><br><span class=\"line\">        threads[i].join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'all DONE'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starting at: Tue Feb 27 15:17:16 2018</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 1</span><br><span class=\"line\">starting at: Tue Feb 27 15:17:16 2018</span><br><span class=\"line\">consumed object from Q... size now 0</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 1</span><br><span class=\"line\">producing object for Q...</span><br><span class=\"line\">size now 2</span><br><span class=\"line\">done at: Tue Feb 27 15:17:20 2018</span><br><span class=\"line\">consumed object from Q... size now 1</span><br><span class=\"line\">consumed object from Q... size now 0</span><br><span class=\"line\">done at: Tue Feb 27 15:17:26 2018</span><br><span class=\"line\">all DONE</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程的替代方案\"><a href=\"#线程的替代方案\" class=\"headerlink\" title=\"线程的替代方案\"></a>线程的替代方案</h2><p><a href=\"https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess\" target=\"_blank\" rel=\"noopener\">subprocess模块</a><br><a href=\"https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing\" target=\"_blank\" rel=\"noopener\">multiprocessing模块</a><br><a href=\"https://docs.python.org/3/library/concurrent.futures.html?highlight=concurrent%20futures#module-concurrent.futures\" target=\"_blank\" rel=\"noopener\">concurrent.futures模块</a></p>"},{"title":"Python数据库编程(一)","date":"2018-02-28T01:47:18.000Z","copyright":true,"description":null,"_content":"Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过**适配器**的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。\n<!--More-->\n\n## Python的DB-API\n\n> DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问\n\n### 模块属性\n\n#### DB-API模块属性\n\n|     属性     |            描述            |\n|:------------:|:--------------------------:|\n|   apilevel   | 需要适配器兼容的DB-API版本 |\n| threadsafety |    本模块的线程安全级别    |\n|  paramstyle  |  本模块的SQL语句参数风格   |\n|  connect()   |       Connect()函数        |\n| (多种异常)             |                            |\n\n#### 数据属性\n\n* apilevel\n> 该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0\n\n* threadsafety\n> 0: 不支持线程安全。线程间不能共享模块\n  1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接\n  2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标\n  3: 完整的线程安全支持：线程间可以共享模块、连接和游标\n\n**如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的**\n\n#### 参数风格\n\n* paramstyle\n\n| 参数风格 |            描述            |        示例         |\n|:--------:|:--------------------------:|:-------------------:|\n| numeric  |        数值位置风格        |    WHERE name=:1    |\n|  named   |          命名风格          |  WHERE name=:name   |\n| pyformat | Python字典printf()格式转换 | WHERE name=%(name)s |\n|  qmark   |          问号风格          |    WHERE name=?     |\n|  format  |  ANSIC的printf()格式转换   |    WHERE name=%s    |\n\n#### 函数属性\n> connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象\n\nconnect()函数使用例子：\n`connect(dsn='myhost:MYDB', user='root', password='root')`\n\n* connect()函数属性\n\n|   参数   |   描述   |\n|:--------:|:--------:|\n|   user   |  用户名  |\n| password |    面    |\n|   host   |  主机名  |\n| database | 数据库名 |\n|   dsn    | 数据源名         |\n\n使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。\n\n#### 异常\n\n|       异常        |             描述             |\n|:-----------------:|:----------------------------:|\n|      Warning      |         警告异常基类         |\n|       Error       |         错误异常基类         |\n|  InterfaceError   |   数据库接口(非数据库)错误   |\n|   DatabaseError   |          数据库错误          |\n|     DataError     |      处理数据时出现错误      |\n|  OperationError   | 数据库操作执行期间出现的错误 |\n|  IntegrityError   |     数据库关系完整性错误     |\n|   InternalError   |        数据库内部错误        |\n| ProgrammingError  |       SQL命令执行失败        |\n| NotSupportedError |       出现不支持的操作       |\n\n### Connection对象\n> 只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应\n\n#### Connection对象方法\n\n|               方法名                |                     描述                     |\n|:-----------------------------------:|:--------------------------------------------:|\n|               close()               |                关闭数据库连接                |\n|              commit()               |                 提交当前事务                 |\n|             rollback()              |                 取消当前事务                 |\n|              cursor()               | 使用该连接创建(并返回)一个游标或类游标的对象 |\n| errorhandler(cxn,cur,errcls,errval) |         作为给定连接的游标的处理程序         |\n\n* 当使用`close()`时，这个连接将不能再使用，否则会进入到异常处理中\n* 如果数据库不支持事务处理或启用了自动提交功能，`commit()`方法都无法使用\n* `rollback()`只能在支持事务处理的数据库中使用。发生异常时，`rollback()`会将数据库的状态恢复到事务处理开始时。\n* 如果RDBMS(关系数据库管理系统)不支持游标，`cursor()`会返回一个尽可能模仿真实游标的对象\n\n#### Cursor对象\n> 游标可以让用户提交数据库命令，并获得查询的结果行。\n\n|              对象属性              |                                                            描述                                                            |\n|:----------------------------------:|:--------------------------------------------------------------------------------------------------------------------------:|\n|             arraysize              |                                     使用fetchmany()方法时，一次取出的结果行数，默认为1                                     |\n|             connection             |                                                   创建此游标的连接(可选)                                                   |\n|            description             | 返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的 |\n|             lastrowid              |                                     上次修改行的行ID(可选，如果不支持行ID，则返回None)                                     |\n|              rowcount              |                                             上次execute*()方法处理或影响的行数                                             |\n|       callproc(func[,args])        |                                                        调用存储过程                                                        |\n|              close()               |                                                          关闭游标                                                          |\n|         execute(op[,args])         |                                                    执行数据库查询或命令                                                    |\n|        executemany(op,args)        |                           类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令                           |\n|             fetchone()             |                                                    获取查询结果的下一行                                                    |\n| fetchmany([size=cursor,arraysize]) |                                                  获取查询结果的下面size行                                                  |\n|             fetchall()             |                                                 获取查询结果的所有(剩余)行                                                 |\n|             __iter__()             |                                           为游标创建迭代器对象(可选，参考nexi())                                           |\n|              messages              |                                     游标执行后从数据库中获得的消息列表(元组集合，可选)                                     |\n|               next()               |                           被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考__iter__())                            |\n|             nextset()              |                                               移动到下一个结果集合(如果支持)                                               |\n|             rownumber              |                                     当前结果集中游标的索引(以行为单位，从0开始，可选)                                      |\n|        setinputsizes(sizes)        |                                      设置允许的最大输入大小(必须有，但是实现是可选的)                                      |\n|     setoutputsize(size[,col])      |                                   设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)                                   |\n**游标对象最重要的属性是execute*()和fetch*()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标**\n\n#### 类型对象和构造函数\n> 创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象\n\n|            类型对象            |                                 描述                                  |\n|:------------------------------:|:---------------------------------------------------------------------:|\n|         Date(yr,mo,dy)         |                              日期值对象                               |\n|        Time(hr,min,sec)        |                              时间值对象                               |\n| Timestamp(yr,mo,dy,hr,min,sec) |                             时间戳值对象                              |\n|      DateFromTicks(ticks)      |  日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数  |\n|      TimeFromTicks(ticks)      |  时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数  |\n|   TimestampFromTicks(ticks)    | 时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数 |\n|         Binary(string)         |                       对应二进制(长)字符串对象                        |\n|             STRING             |                  表示基于字符串列的对象，比如VARCHAR                  |\n|             BINARY             |                 表示(长)二进制列的对象，比如RAW、BLOB                 |\n|             NUMBER             |                           表示数值列的对象                            |\n|            DATETIME            |                         表示日期/时间列的对象                         |\n|             ROWID              |                          表示“行ID”列的对象                           |\n**SQL的NULL值对应于Python的NULL对象None**\n\n#### 数据库适配器示例应用\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入必需的模块\nimport os\nfrom random import randrange as rand\n\n# 创建了全局变量\n# 用于显示列的大小，以及支持的数据库种类\nCOLSIZ = 10\nFIELDS = ('login', 'userid', 'projid')\nRDBMSs = {\n    's': 'sqlite',\n    'm': 'mysql',\n}\nDBNAME = 'test'\nDBUSER = 'root'\n# 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块\nDB_EXC = None\nNAMELEN = 16\n\n# 格式化字符串以显示标题\n# 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式\n# 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)\ntformat = lambda s: str(s).title().ljust(COLSIZ)\ncformat = lambda s: s.upper().ljust(COLSIZ)\n\n\ndef setup():\n    return RDBMSs[input('''\n        Choose a database system:\n        (M)ySQL\n        (S)QLite\n        Enter choice:\n    ''').strip().lower()[0]]\n\n\ndef connect(db):\n    # 数据库一致性访问的核心\n    # 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块\n    # 就返回None，表示无法支持数据库系统\n    global DB_EXC\n    dbDir = '%s_%s' % (db, DBNAME)\n\n    if db == 'sqlite':\n        try:\n            # 尝试加载sqlite3模块\n            import sqlite3\n        except ImportError:\n            return None\n        DB_EXC = sqlite3\n        # 当对SQLite调用connect()时，会使用已存在的目录\n        # 如果没有，则创建一个新目录\n        if not os.path.isdir(dbDir):\n            os.mkdir(dbDir)\n        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))\n    elif db == 'mysql':\n        try:\n            # 由于MySQLdb不支持python3.6，所以导入pymysql\n            import pymysql\n            import pymysql.err as DB_EXC\n            try:\n                cxn = pymysql.connect(host=\"localhost\",\n                                      user=\"root\",\n                                      password=\"root\",\n                                      port=3306,\n                                      db=DBNAME)\n            except DB_EXC.InternalError:\n                try:\n                    cxn = pymysql.connect(host=\"localhost\",\n                                          user=\"root\",\n                                          password=\"root\",\n                                          port=3306)\n                    cxn.query('CREATE DATABASE %s' % DBNAME)\n                    cxn.commit()\n                    cxn.close()\n                    cxn = pymysql.connect(host=\"localhost\",\n                                          user=\"root\",\n                                          password=\"root\",\n                                          port=3306,\n                                          db=DBNAME)\n                except DB_EXC.InternalError:\n                    return None\n        except ImportError:\n            return None\n    else:\n        return None\n    return cxn\n\n\ndef create(cur):\n    # 创建一个新表users\n    try:\n        cur.execute('''\n            CREATE  TABLE  users(\n                login VARCHAR(%d),\n                userid INTEGER,\n                projid INTEGER\n            )\n        ''' % NAMELEN)\n    except DB_EXC.InternalError as e:\n        # 如果发生错误，几乎总是这个表已经存在了\n        # 删除该表，重新创建\n        drop(cur)\n        create(cur)\n\n# 删除数据库表的函数\ndrop = lambda cur: cur.execute('DROP TABLE users')\n\n# 由用户名和用户ID组成的常量\nNAMES = (\n    ('bob', 1234), ('angela', 4567), ('dave', 4523)\n)\n\n\ndef randName():\n    # 生成器\n    pick = set(NAMES)\n    while pick:\n        yield pick.pop()\n\n\ndef insert(cur, db):\n    # 插入函数\n    # SQLite风格是qmark参数风格，而MySQL使用的是format参数风格\n    # 对于每个用户名-用户ID对，都会被分配到一个项目卒中。\n    # 项目ID从四个不同的组中随机选出的\n    if db == 'sqlite':\n        cur.executemany(\"INSERT INTO users VALUES(?,?,?)\",\n                        [(who, uid, rand(1, 5)) for who, uid in randName()])\n    elif db == 'mysql':\n        cur.executemany(\"INSERT INTO users VALUES(%s, %s, %s)\",\n                        [(who, uid, rand(1, 5)) for who, uid in randName()])\n\n# 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1\ngetRC = lambda cur: cur.rowcount if hasattr(cur, 'rowcount') else -1\n\n\n# update()和delete()函数会随机选择项目组中的成员\n# 更新操作会将其从当前组移动到另一个随机选择的组中\n# 删除操作会将该组的成员全部删除\ndef update(cur):\n    fr = rand(1, 5)\n    to = rand(1, 5)\n    cur.execute('UPDATE users SET projid=%d WHERE projid=%d' % (to, fr))\n    return fr, to, getRC(cur)\n\n\ndef delete(cur):\n    rm = rand(1, 5)\n    cur.execute('DELETE FROM users WHERE projid=%d' % rm)\n    return rm, getRC(cur)\n\n\ndef dbDump(cur):\n    # 来去所有行，将其按照打印格式进行格式化，然后显示\n    cur.execute('SELECT * FROM users')\n    # 格式化标题\n    print('%s' % ''.join(map(cformat, FIELDS)))\n    for data in cur.fetchall():\n        # 将数据(login,userid,projid)通过map()传递给tformat()，\n        # 是数据转化为字符串，将其格式化为标题风格\n        # 字符串按照COLSIZ的列宽度进行左对齐\n        print(''.join(map(tformat, data)))\n\n\ndef main():\n    # 主函数\n    db = setup()\n    print('*** Connect to %r database' % db)\n    cxn = connect(db)\n    if not cxn:\n        print('ERROR: %r not supported or unreadable, exit' % db)\n        return\n    cur = cxn.cursor()\n    print('***Creating users table')\n    create(cur=cur)\n\n    print('***Inserting names into table')\n    insert(cur, db)\n    dbDump(cur)\n\n    print('\\n***Randomly moving folks')\n    fr, to, num = update(cur)\n    print('(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    dbDump(cur)\n\n    print('***Randomly choosing group')\n    rm, num = delete(cur)\n    print('\\t(group #%d; %d users removed)' % (rm, num))\n    dbDump(cur)\n\n    print('\\n***Droping users table')\n    drop(cur)\n    print('\\n*** Close cxns')\n    cur.close()\n    cxn.commit()\n    cxn.close()\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* MySQL数据库访问结果\n\n```\nChoose a database system:\n        (M)ySQL\n        (S)QLite\nEnter choice:\nM\n*** Connect to 'mysql' database\n***Creating users table\n***Inserting names into table\nLOGIN     USERID    PROJID    \nDave      4523      2         \nBob       1234      3         \nAngela    4567      3         \n\n***Randomly moving folks\n(2 users moved) from (3) to (1)\nLOGIN     USERID    PROJID    \nDave      4523      2         \nBob       1234      1         \nAngela    4567      1         \n***Randomly choosing group\n\t(group #1; 2 users removed)\nLOGIN     USERID    PROJID    \nDave      4523      2         \n\n***Droping users table\n\n*** Close cxns\n```\n\n* SQLite数据库访问结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nS\n*** Connect to 'sqlite' database\n***Creating users table\n***Inserting names into table\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \nAngela    4567      3         \n\n***Randomly moving folks\n(1 users moved) from (1) to (1)\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \nAngela    4567      3         \n***Randomly choosing group\n(group #3; 1 users removed)\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \n\n***Droping users table\n\n*** Close cxns\n```\n","source":"_posts/Python数据库编程-一.md","raw":"---\ntitle: Python数据库编程(一)\ndate: 2018-02-28 09:47:18\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 数据库编程\ndescription:\n---\nPython和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过**适配器**的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。\n<!--More-->\n\n## Python的DB-API\n\n> DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问\n\n### 模块属性\n\n#### DB-API模块属性\n\n|     属性     |            描述            |\n|:------------:|:--------------------------:|\n|   apilevel   | 需要适配器兼容的DB-API版本 |\n| threadsafety |    本模块的线程安全级别    |\n|  paramstyle  |  本模块的SQL语句参数风格   |\n|  connect()   |       Connect()函数        |\n| (多种异常)             |                            |\n\n#### 数据属性\n\n* apilevel\n> 该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0\n\n* threadsafety\n> 0: 不支持线程安全。线程间不能共享模块\n  1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接\n  2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标\n  3: 完整的线程安全支持：线程间可以共享模块、连接和游标\n\n**如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的**\n\n#### 参数风格\n\n* paramstyle\n\n| 参数风格 |            描述            |        示例         |\n|:--------:|:--------------------------:|:-------------------:|\n| numeric  |        数值位置风格        |    WHERE name=:1    |\n|  named   |          命名风格          |  WHERE name=:name   |\n| pyformat | Python字典printf()格式转换 | WHERE name=%(name)s |\n|  qmark   |          问号风格          |    WHERE name=?     |\n|  format  |  ANSIC的printf()格式转换   |    WHERE name=%s    |\n\n#### 函数属性\n> connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象\n\nconnect()函数使用例子：\n`connect(dsn='myhost:MYDB', user='root', password='root')`\n\n* connect()函数属性\n\n|   参数   |   描述   |\n|:--------:|:--------:|\n|   user   |  用户名  |\n| password |    面    |\n|   host   |  主机名  |\n| database | 数据库名 |\n|   dsn    | 数据源名         |\n\n使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。\n\n#### 异常\n\n|       异常        |             描述             |\n|:-----------------:|:----------------------------:|\n|      Warning      |         警告异常基类         |\n|       Error       |         错误异常基类         |\n|  InterfaceError   |   数据库接口(非数据库)错误   |\n|   DatabaseError   |          数据库错误          |\n|     DataError     |      处理数据时出现错误      |\n|  OperationError   | 数据库操作执行期间出现的错误 |\n|  IntegrityError   |     数据库关系完整性错误     |\n|   InternalError   |        数据库内部错误        |\n| ProgrammingError  |       SQL命令执行失败        |\n| NotSupportedError |       出现不支持的操作       |\n\n### Connection对象\n> 只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应\n\n#### Connection对象方法\n\n|               方法名                |                     描述                     |\n|:-----------------------------------:|:--------------------------------------------:|\n|               close()               |                关闭数据库连接                |\n|              commit()               |                 提交当前事务                 |\n|             rollback()              |                 取消当前事务                 |\n|              cursor()               | 使用该连接创建(并返回)一个游标或类游标的对象 |\n| errorhandler(cxn,cur,errcls,errval) |         作为给定连接的游标的处理程序         |\n\n* 当使用`close()`时，这个连接将不能再使用，否则会进入到异常处理中\n* 如果数据库不支持事务处理或启用了自动提交功能，`commit()`方法都无法使用\n* `rollback()`只能在支持事务处理的数据库中使用。发生异常时，`rollback()`会将数据库的状态恢复到事务处理开始时。\n* 如果RDBMS(关系数据库管理系统)不支持游标，`cursor()`会返回一个尽可能模仿真实游标的对象\n\n#### Cursor对象\n> 游标可以让用户提交数据库命令，并获得查询的结果行。\n\n|              对象属性              |                                                            描述                                                            |\n|:----------------------------------:|:--------------------------------------------------------------------------------------------------------------------------:|\n|             arraysize              |                                     使用fetchmany()方法时，一次取出的结果行数，默认为1                                     |\n|             connection             |                                                   创建此游标的连接(可选)                                                   |\n|            description             | 返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的 |\n|             lastrowid              |                                     上次修改行的行ID(可选，如果不支持行ID，则返回None)                                     |\n|              rowcount              |                                             上次execute*()方法处理或影响的行数                                             |\n|       callproc(func[,args])        |                                                        调用存储过程                                                        |\n|              close()               |                                                          关闭游标                                                          |\n|         execute(op[,args])         |                                                    执行数据库查询或命令                                                    |\n|        executemany(op,args)        |                           类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令                           |\n|             fetchone()             |                                                    获取查询结果的下一行                                                    |\n| fetchmany([size=cursor,arraysize]) |                                                  获取查询结果的下面size行                                                  |\n|             fetchall()             |                                                 获取查询结果的所有(剩余)行                                                 |\n|             __iter__()             |                                           为游标创建迭代器对象(可选，参考nexi())                                           |\n|              messages              |                                     游标执行后从数据库中获得的消息列表(元组集合，可选)                                     |\n|               next()               |                           被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考__iter__())                            |\n|             nextset()              |                                               移动到下一个结果集合(如果支持)                                               |\n|             rownumber              |                                     当前结果集中游标的索引(以行为单位，从0开始，可选)                                      |\n|        setinputsizes(sizes)        |                                      设置允许的最大输入大小(必须有，但是实现是可选的)                                      |\n|     setoutputsize(size[,col])      |                                   设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)                                   |\n**游标对象最重要的属性是execute*()和fetch*()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标**\n\n#### 类型对象和构造函数\n> 创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象\n\n|            类型对象            |                                 描述                                  |\n|:------------------------------:|:---------------------------------------------------------------------:|\n|         Date(yr,mo,dy)         |                              日期值对象                               |\n|        Time(hr,min,sec)        |                              时间值对象                               |\n| Timestamp(yr,mo,dy,hr,min,sec) |                             时间戳值对象                              |\n|      DateFromTicks(ticks)      |  日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数  |\n|      TimeFromTicks(ticks)      |  时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数  |\n|   TimestampFromTicks(ticks)    | 时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数 |\n|         Binary(string)         |                       对应二进制(长)字符串对象                        |\n|             STRING             |                  表示基于字符串列的对象，比如VARCHAR                  |\n|             BINARY             |                 表示(长)二进制列的对象，比如RAW、BLOB                 |\n|             NUMBER             |                           表示数值列的对象                            |\n|            DATETIME            |                         表示日期/时间列的对象                         |\n|             ROWID              |                          表示“行ID”列的对象                           |\n**SQL的NULL值对应于Python的NULL对象None**\n\n#### 数据库适配器示例应用\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 导入必需的模块\nimport os\nfrom random import randrange as rand\n\n# 创建了全局变量\n# 用于显示列的大小，以及支持的数据库种类\nCOLSIZ = 10\nFIELDS = ('login', 'userid', 'projid')\nRDBMSs = {\n    's': 'sqlite',\n    'm': 'mysql',\n}\nDBNAME = 'test'\nDBUSER = 'root'\n# 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块\nDB_EXC = None\nNAMELEN = 16\n\n# 格式化字符串以显示标题\n# 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式\n# 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)\ntformat = lambda s: str(s).title().ljust(COLSIZ)\ncformat = lambda s: s.upper().ljust(COLSIZ)\n\n\ndef setup():\n    return RDBMSs[input('''\n        Choose a database system:\n        (M)ySQL\n        (S)QLite\n        Enter choice:\n    ''').strip().lower()[0]]\n\n\ndef connect(db):\n    # 数据库一致性访问的核心\n    # 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块\n    # 就返回None，表示无法支持数据库系统\n    global DB_EXC\n    dbDir = '%s_%s' % (db, DBNAME)\n\n    if db == 'sqlite':\n        try:\n            # 尝试加载sqlite3模块\n            import sqlite3\n        except ImportError:\n            return None\n        DB_EXC = sqlite3\n        # 当对SQLite调用connect()时，会使用已存在的目录\n        # 如果没有，则创建一个新目录\n        if not os.path.isdir(dbDir):\n            os.mkdir(dbDir)\n        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))\n    elif db == 'mysql':\n        try:\n            # 由于MySQLdb不支持python3.6，所以导入pymysql\n            import pymysql\n            import pymysql.err as DB_EXC\n            try:\n                cxn = pymysql.connect(host=\"localhost\",\n                                      user=\"root\",\n                                      password=\"root\",\n                                      port=3306,\n                                      db=DBNAME)\n            except DB_EXC.InternalError:\n                try:\n                    cxn = pymysql.connect(host=\"localhost\",\n                                          user=\"root\",\n                                          password=\"root\",\n                                          port=3306)\n                    cxn.query('CREATE DATABASE %s' % DBNAME)\n                    cxn.commit()\n                    cxn.close()\n                    cxn = pymysql.connect(host=\"localhost\",\n                                          user=\"root\",\n                                          password=\"root\",\n                                          port=3306,\n                                          db=DBNAME)\n                except DB_EXC.InternalError:\n                    return None\n        except ImportError:\n            return None\n    else:\n        return None\n    return cxn\n\n\ndef create(cur):\n    # 创建一个新表users\n    try:\n        cur.execute('''\n            CREATE  TABLE  users(\n                login VARCHAR(%d),\n                userid INTEGER,\n                projid INTEGER\n            )\n        ''' % NAMELEN)\n    except DB_EXC.InternalError as e:\n        # 如果发生错误，几乎总是这个表已经存在了\n        # 删除该表，重新创建\n        drop(cur)\n        create(cur)\n\n# 删除数据库表的函数\ndrop = lambda cur: cur.execute('DROP TABLE users')\n\n# 由用户名和用户ID组成的常量\nNAMES = (\n    ('bob', 1234), ('angela', 4567), ('dave', 4523)\n)\n\n\ndef randName():\n    # 生成器\n    pick = set(NAMES)\n    while pick:\n        yield pick.pop()\n\n\ndef insert(cur, db):\n    # 插入函数\n    # SQLite风格是qmark参数风格，而MySQL使用的是format参数风格\n    # 对于每个用户名-用户ID对，都会被分配到一个项目卒中。\n    # 项目ID从四个不同的组中随机选出的\n    if db == 'sqlite':\n        cur.executemany(\"INSERT INTO users VALUES(?,?,?)\",\n                        [(who, uid, rand(1, 5)) for who, uid in randName()])\n    elif db == 'mysql':\n        cur.executemany(\"INSERT INTO users VALUES(%s, %s, %s)\",\n                        [(who, uid, rand(1, 5)) for who, uid in randName()])\n\n# 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1\ngetRC = lambda cur: cur.rowcount if hasattr(cur, 'rowcount') else -1\n\n\n# update()和delete()函数会随机选择项目组中的成员\n# 更新操作会将其从当前组移动到另一个随机选择的组中\n# 删除操作会将该组的成员全部删除\ndef update(cur):\n    fr = rand(1, 5)\n    to = rand(1, 5)\n    cur.execute('UPDATE users SET projid=%d WHERE projid=%d' % (to, fr))\n    return fr, to, getRC(cur)\n\n\ndef delete(cur):\n    rm = rand(1, 5)\n    cur.execute('DELETE FROM users WHERE projid=%d' % rm)\n    return rm, getRC(cur)\n\n\ndef dbDump(cur):\n    # 来去所有行，将其按照打印格式进行格式化，然后显示\n    cur.execute('SELECT * FROM users')\n    # 格式化标题\n    print('%s' % ''.join(map(cformat, FIELDS)))\n    for data in cur.fetchall():\n        # 将数据(login,userid,projid)通过map()传递给tformat()，\n        # 是数据转化为字符串，将其格式化为标题风格\n        # 字符串按照COLSIZ的列宽度进行左对齐\n        print(''.join(map(tformat, data)))\n\n\ndef main():\n    # 主函数\n    db = setup()\n    print('*** Connect to %r database' % db)\n    cxn = connect(db)\n    if not cxn:\n        print('ERROR: %r not supported or unreadable, exit' % db)\n        return\n    cur = cxn.cursor()\n    print('***Creating users table')\n    create(cur=cur)\n\n    print('***Inserting names into table')\n    insert(cur, db)\n    dbDump(cur)\n\n    print('\\n***Randomly moving folks')\n    fr, to, num = update(cur)\n    print('(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    dbDump(cur)\n\n    print('***Randomly choosing group')\n    rm, num = delete(cur)\n    print('\\t(group #%d; %d users removed)' % (rm, num))\n    dbDump(cur)\n\n    print('\\n***Droping users table')\n    drop(cur)\n    print('\\n*** Close cxns')\n    cur.close()\n    cxn.commit()\n    cxn.close()\n\nif __name__ == '__main__':\n    main()\n\n```\n\n* MySQL数据库访问结果\n\n```\nChoose a database system:\n        (M)ySQL\n        (S)QLite\nEnter choice:\nM\n*** Connect to 'mysql' database\n***Creating users table\n***Inserting names into table\nLOGIN     USERID    PROJID    \nDave      4523      2         \nBob       1234      3         \nAngela    4567      3         \n\n***Randomly moving folks\n(2 users moved) from (3) to (1)\nLOGIN     USERID    PROJID    \nDave      4523      2         \nBob       1234      1         \nAngela    4567      1         \n***Randomly choosing group\n\t(group #1; 2 users removed)\nLOGIN     USERID    PROJID    \nDave      4523      2         \n\n***Droping users table\n\n*** Close cxns\n```\n\n* SQLite数据库访问结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nS\n*** Connect to 'sqlite' database\n***Creating users table\n***Inserting names into table\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \nAngela    4567      3         \n\n***Randomly moving folks\n(1 users moved) from (1) to (1)\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \nAngela    4567      3         \n***Randomly choosing group\n(group #3; 1 users removed)\nLOGIN     USERID    PROJID    \nDave      4523      1         \nBob       1234      2         \n\n***Droping users table\n\n*** Close cxns\n```\n","slug":"Python数据库编程-一","published":1,"updated":"2018-02-28T09:17:40.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw3z000ctwn9564bqjx7","content":"<p>Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过<strong>适配器</strong>的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。<br><a id=\"more\"></a></p>\n<h2 id=\"Python的DB-API\"><a href=\"#Python的DB-API\" class=\"headerlink\" title=\"Python的DB-API\"></a>Python的DB-API</h2><blockquote>\n<p>DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问</p>\n</blockquote>\n<h3 id=\"模块属性\"><a href=\"#模块属性\" class=\"headerlink\" title=\"模块属性\"></a>模块属性</h3><h4 id=\"DB-API模块属性\"><a href=\"#DB-API模块属性\" class=\"headerlink\" title=\"DB-API模块属性\"></a>DB-API模块属性</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">apilevel</td>\n<td style=\"text-align:center\">需要适配器兼容的DB-API版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">threadsafety</td>\n<td style=\"text-align:center\">本模块的线程安全级别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">paramstyle</td>\n<td style=\"text-align:center\">本模块的SQL语句参数风格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">connect()</td>\n<td style=\"text-align:center\">Connect()函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(多种异常)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h4><ul>\n<li><p>apilevel</p>\n<blockquote>\n<p>该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0</p>\n</blockquote>\n</li>\n<li><p>threadsafety</p>\n<blockquote>\n<p>0: 不支持线程安全。线程间不能共享模块<br>1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接<br>2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标<br>3: 完整的线程安全支持：线程间可以共享模块、连接和游标</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的</strong></p>\n<h4 id=\"参数风格\"><a href=\"#参数风格\" class=\"headerlink\" title=\"参数风格\"></a>参数风格</h4><ul>\n<li>paramstyle</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数风格</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">numeric</td>\n<td style=\"text-align:center\">数值位置风格</td>\n<td style=\"text-align:center\">WHERE name=:1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">named</td>\n<td style=\"text-align:center\">命名风格</td>\n<td style=\"text-align:center\">WHERE name=:name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pyformat</td>\n<td style=\"text-align:center\">Python字典printf()格式转换</td>\n<td style=\"text-align:center\">WHERE name=%(name)s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qmark</td>\n<td style=\"text-align:center\">问号风格</td>\n<td style=\"text-align:center\">WHERE name=?</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">format</td>\n<td style=\"text-align:center\">ANSIC的printf()格式转换</td>\n<td style=\"text-align:center\">WHERE name=%s</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"函数属性\"><a href=\"#函数属性\" class=\"headerlink\" title=\"函数属性\"></a>函数属性</h4><blockquote>\n<p>connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象</p>\n</blockquote>\n<p>connect()函数使用例子：<br><code>connect(dsn=&#39;myhost:MYDB&#39;, user=&#39;root&#39;, password=&#39;root&#39;)</code></p>\n<ul>\n<li>connect()函数属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">user</td>\n<td style=\"text-align:center\">用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">password</td>\n<td style=\"text-align:center\">面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">host</td>\n<td style=\"text-align:center\">主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">数据库名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dsn</td>\n<td style=\"text-align:center\">数据源名</td>\n</tr>\n</tbody>\n</table>\n<p>使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。</p>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">异常</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Warning</td>\n<td style=\"text-align:center\">警告异常基类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Error</td>\n<td style=\"text-align:center\">错误异常基类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">InterfaceError</td>\n<td style=\"text-align:center\">数据库接口(非数据库)错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DatabaseError</td>\n<td style=\"text-align:center\">数据库错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DataError</td>\n<td style=\"text-align:center\">处理数据时出现错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OperationError</td>\n<td style=\"text-align:center\">数据库操作执行期间出现的错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IntegrityError</td>\n<td style=\"text-align:center\">数据库关系完整性错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">InternalError</td>\n<td style=\"text-align:center\">数据库内部错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ProgrammingError</td>\n<td style=\"text-align:center\">SQL命令执行失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NotSupportedError</td>\n<td style=\"text-align:center\">出现不支持的操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Connection对象\"><a href=\"#Connection对象\" class=\"headerlink\" title=\"Connection对象\"></a>Connection对象</h3><blockquote>\n<p>只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应</p>\n</blockquote>\n<h4 id=\"Connection对象方法\"><a href=\"#Connection对象方法\" class=\"headerlink\" title=\"Connection对象方法\"></a>Connection对象方法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭数据库连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commit()</td>\n<td style=\"text-align:center\">提交当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rollback()</td>\n<td style=\"text-align:center\">取消当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cursor()</td>\n<td style=\"text-align:center\">使用该连接创建(并返回)一个游标或类游标的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errorhandler(cxn,cur,errcls,errval)</td>\n<td style=\"text-align:center\">作为给定连接的游标的处理程序</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当使用<code>close()</code>时，这个连接将不能再使用，否则会进入到异常处理中</li>\n<li>如果数据库不支持事务处理或启用了自动提交功能，<code>commit()</code>方法都无法使用</li>\n<li><code>rollback()</code>只能在支持事务处理的数据库中使用。发生异常时，<code>rollback()</code>会将数据库的状态恢复到事务处理开始时。</li>\n<li>如果RDBMS(关系数据库管理系统)不支持游标，<code>cursor()</code>会返回一个尽可能模仿真实游标的对象</li>\n</ul>\n<h4 id=\"Cursor对象\"><a href=\"#Cursor对象\" class=\"headerlink\" title=\"Cursor对象\"></a>Cursor对象</h4><blockquote>\n<p>游标可以让用户提交数据库命令，并获得查询的结果行。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">arraysize</td>\n<td style=\"text-align:center\">使用fetchmany()方法时，一次取出的结果行数，默认为1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">connection</td>\n<td style=\"text-align:center\">创建此游标的连接(可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">description</td>\n<td style=\"text-align:center\">返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastrowid</td>\n<td style=\"text-align:center\">上次修改行的行ID(可选，如果不支持行ID，则返回None)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rowcount</td>\n<td style=\"text-align:center\">上次execute*()方法处理或影响的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callproc(func[,args])</td>\n<td style=\"text-align:center\">调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭游标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">execute(op[,args])</td>\n<td style=\"text-align:center\">执行数据库查询或命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">executemany(op,args)</td>\n<td style=\"text-align:center\">类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchone()</td>\n<td style=\"text-align:center\">获取查询结果的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchmany([size=cursor,arraysize])</td>\n<td style=\"text-align:center\">获取查询结果的下面size行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchall()</td>\n<td style=\"text-align:center\">获取查询结果的所有(剩余)行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>iter</strong>()</td>\n<td style=\"text-align:center\">为游标创建迭代器对象(可选，参考nexi())</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">messages</td>\n<td style=\"text-align:center\">游标执行后从数据库中获得的消息列表(元组集合，可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">next()</td>\n<td style=\"text-align:center\">被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考<strong>iter</strong>())</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nextset()</td>\n<td style=\"text-align:center\">移动到下一个结果集合(如果支持)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rownumber</td>\n<td style=\"text-align:center\">当前结果集中游标的索引(以行为单位，从0开始，可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setinputsizes(sizes)</td>\n<td style=\"text-align:center\">设置允许的最大输入大小(必须有，但是实现是可选的)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setoutputsize(size[,col])</td>\n<td style=\"text-align:center\">设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>游标对象最重要的属性是execute<em>()和fetch</em>()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标</strong></p>\n<h4 id=\"类型对象和构造函数\"><a href=\"#类型对象和构造函数\" class=\"headerlink\" title=\"类型对象和构造函数\"></a>类型对象和构造函数</h4><blockquote>\n<p>创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Date(yr,mo,dy)</td>\n<td style=\"text-align:center\">日期值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Time(hr,min,sec)</td>\n<td style=\"text-align:center\">时间值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Timestamp(yr,mo,dy,hr,min,sec)</td>\n<td style=\"text-align:center\">时间戳值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DateFromTicks(ticks)</td>\n<td style=\"text-align:center\">日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TimeFromTicks(ticks)</td>\n<td style=\"text-align:center\">时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TimestampFromTicks(ticks)</td>\n<td style=\"text-align:center\">时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Binary(string)</td>\n<td style=\"text-align:center\">对应二进制(长)字符串对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STRING</td>\n<td style=\"text-align:center\">表示基于字符串列的对象，比如VARCHAR</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BINARY</td>\n<td style=\"text-align:center\">表示(长)二进制列的对象，比如RAW、BLOB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NUMBER</td>\n<td style=\"text-align:center\">表示数值列的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATETIME</td>\n<td style=\"text-align:center\">表示日期/时间列的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ROWID</td>\n<td style=\"text-align:center\">表示“行ID”列的对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>SQL的NULL值对应于Python的NULL对象None</strong></p>\n<h4 id=\"数据库适配器示例应用\"><a href=\"#数据库适配器示例应用\" class=\"headerlink\" title=\"数据库适配器示例应用\"></a>数据库适配器示例应用</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入必需的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建了全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 用于显示列的大小，以及支持的数据库种类</span></span><br><span class=\"line\">COLSIZ = <span class=\"number\">10</span></span><br><span class=\"line\">FIELDS = (<span class=\"string\">'login'</span>, <span class=\"string\">'userid'</span>, <span class=\"string\">'projid'</span>)</span><br><span class=\"line\">RDBMSs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'s'</span>: <span class=\"string\">'sqlite'</span>,</span><br><span class=\"line\">    <span class=\"string\">'m'</span>: <span class=\"string\">'mysql'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DBNAME = <span class=\"string\">'test'</span></span><br><span class=\"line\">DBUSER = <span class=\"string\">'root'</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块</span></span><br><span class=\"line\">DB_EXC = <span class=\"keyword\">None</span></span><br><span class=\"line\">NAMELEN = <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化字符串以显示标题</span></span><br><span class=\"line\"><span class=\"comment\"># 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式</span></span><br><span class=\"line\"><span class=\"comment\"># 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)</span></span><br><span class=\"line\">tformat = <span class=\"keyword\">lambda</span> s: str(s).title().ljust(COLSIZ)</span><br><span class=\"line\">cformat = <span class=\"keyword\">lambda</span> s: s.upper().ljust(COLSIZ)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RDBMSs[input(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        Choose a database system:</span></span><br><span class=\"line\"><span class=\"string\">        (M)ySQL</span></span><br><span class=\"line\"><span class=\"string\">        (S)QLite</span></span><br><span class=\"line\"><span class=\"string\">        Enter choice:</span></span><br><span class=\"line\"><span class=\"string\">    '''</span>).strip().lower()[<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(db)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据库一致性访问的核心</span></span><br><span class=\"line\">    <span class=\"comment\"># 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块</span></span><br><span class=\"line\">    <span class=\"comment\"># 就返回None，表示无法支持数据库系统</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> DB_EXC</span><br><span class=\"line\">    dbDir = <span class=\"string\">'%s_%s'</span> % (db, DBNAME)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> db == <span class=\"string\">'sqlite'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 尝试加载sqlite3模块</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        DB_EXC = sqlite3</span><br><span class=\"line\">        <span class=\"comment\"># 当对SQLite调用connect()时，会使用已存在的目录</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有，则创建一个新目录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dbDir):</span><br><span class=\"line\">            os.mkdir(dbDir)</span><br><span class=\"line\">        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> db == <span class=\"string\">'mysql'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 由于MySQLdb不支持python3.6，所以导入pymysql</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">            <span class=\"keyword\">import</span> pymysql.err <span class=\"keyword\">as</span> DB_EXC</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                      user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                      password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                      port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                                      db=DBNAME)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> DB_EXC.InternalError:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                          user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          port=<span class=\"number\">3306</span>)</span><br><span class=\"line\">                    cxn.query(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class=\"line\">                    cxn.commit()</span><br><span class=\"line\">                    cxn.close()</span><br><span class=\"line\">                    cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                          user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                                          db=DBNAME)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> DB_EXC.InternalError:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cxn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个新表users</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        cur.execute(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">            CREATE  TABLE  users(</span></span><br><span class=\"line\"><span class=\"string\">                login VARCHAR(%d),</span></span><br><span class=\"line\"><span class=\"string\">                userid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">                projid INTEGER</span></span><br><span class=\"line\"><span class=\"string\">            )</span></span><br><span class=\"line\"><span class=\"string\">        '''</span> % NAMELEN)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> DB_EXC.InternalError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"comment\"># 如果发生错误，几乎总是这个表已经存在了</span></span><br><span class=\"line\">        <span class=\"comment\"># 删除该表，重新创建</span></span><br><span class=\"line\">        drop(cur)</span><br><span class=\"line\">        create(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除数据库表的函数</span></span><br><span class=\"line\">drop = <span class=\"keyword\">lambda</span> cur: cur.execute(<span class=\"string\">'DROP TABLE users'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由用户名和用户ID组成的常量</span></span><br><span class=\"line\">NAMES = (</span><br><span class=\"line\">    (<span class=\"string\">'bob'</span>, <span class=\"number\">1234</span>), (<span class=\"string\">'angela'</span>, <span class=\"number\">4567</span>), (<span class=\"string\">'dave'</span>, <span class=\"number\">4523</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randName</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成器</span></span><br><span class=\"line\">    pick = set(NAMES)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> pick:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> pick.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(cur, db)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 插入函数</span></span><br><span class=\"line\">    <span class=\"comment\"># SQLite风格是qmark参数风格，而MySQL使用的是format参数风格</span></span><br><span class=\"line\">    <span class=\"comment\"># 对于每个用户名-用户ID对，都会被分配到一个项目卒中。</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目ID从四个不同的组中随机选出的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> db == <span class=\"string\">'sqlite'</span>:</span><br><span class=\"line\">        cur.executemany(<span class=\"string\">\"INSERT INTO users VALUES(?,?,?)\"</span>,</span><br><span class=\"line\">                        [(who, uid, rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> db == <span class=\"string\">'mysql'</span>:</span><br><span class=\"line\">        cur.executemany(<span class=\"string\">\"INSERT INTO users VALUES(%s, %s, %s)\"</span>,</span><br><span class=\"line\">                        [(who, uid, rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1</span></span><br><span class=\"line\">getRC = <span class=\"keyword\">lambda</span> cur: cur.rowcount <span class=\"keyword\">if</span> hasattr(cur, <span class=\"string\">'rowcount'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update()和delete()函数会随机选择项目组中的成员</span></span><br><span class=\"line\"><span class=\"comment\"># 更新操作会将其从当前组移动到另一个随机选择的组中</span></span><br><span class=\"line\"><span class=\"comment\"># 删除操作会将该组的成员全部删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    cur.execute(<span class=\"string\">'UPDATE users SET projid=%d WHERE projid=%d'</span> % (to, fr))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fr, to, getRC(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    cur.execute(<span class=\"string\">'DELETE FROM users WHERE projid=%d'</span> % rm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rm, getRC(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 来去所有行，将其按照打印格式进行格式化，然后显示</span></span><br><span class=\"line\">    cur.execute(<span class=\"string\">'SELECT * FROM users'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 格式化标题</span></span><br><span class=\"line\">    print(<span class=\"string\">'%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> cur.fetchall():</span><br><span class=\"line\">        <span class=\"comment\"># 将数据(login,userid,projid)通过map()传递给tformat()，</span></span><br><span class=\"line\">        <span class=\"comment\"># 是数据转化为字符串，将其格式化为标题风格</span></span><br><span class=\"line\">        <span class=\"comment\"># 字符串按照COLSIZ的列宽度进行左对齐</span></span><br><span class=\"line\">        print(<span class=\"string\">''</span>.join(map(tformat, data)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 主函数</span></span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    print(<span class=\"string\">'*** Connect to %r database'</span> % db)</span><br><span class=\"line\">    cxn = connect(db)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cxn:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported or unreadable, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    cur = cxn.cursor()</span><br><span class=\"line\">    print(<span class=\"string\">'***Creating users table'</span>)</span><br><span class=\"line\">    create(cur=cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'***Inserting names into table'</span>)</span><br><span class=\"line\">    insert(cur, db)</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Randomly moving folks'</span>)</span><br><span class=\"line\">    fr, to, num = update(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'***Randomly choosing group'</span>)</span><br><span class=\"line\">    rm, num = delete(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Droping users table'</span>)</span><br><span class=\"line\">    drop(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Close cxns'</span>)</span><br><span class=\"line\">    cur.close()</span><br><span class=\"line\">    cxn.commit()</span><br><span class=\"line\">    cxn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MySQL数据库访问结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">        (M)ySQL</span><br><span class=\"line\">        (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\">*** Connect to &apos;mysql&apos; database</span><br><span class=\"line\">***Creating users table</span><br><span class=\"line\">***Inserting names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\">Bob       1234      3         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly moving folks</span><br><span class=\"line\">(2 users moved) from (3) to (1)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\">Bob       1234      1         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\">***Randomly choosing group</span><br><span class=\"line\">\t(group #1; 2 users removed)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Droping users table</span><br><span class=\"line\"></span><br><span class=\"line\">*** Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite数据库访问结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\">*** Connect to &apos;sqlite&apos; database</span><br><span class=\"line\">***Creating users table</span><br><span class=\"line\">***Inserting names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly moving folks</span><br><span class=\"line\">(1 users moved) from (1) to (1)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\">***Randomly choosing group</span><br><span class=\"line\">(group #3; 1 users removed)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Droping users table</span><br><span class=\"line\"></span><br><span class=\"line\">*** Close cxns</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Python和大多数语言一样，访问数据库包括直接通过数据库接口访问和使用ORM访问两种方式。其中ORM访问的方式不需要显式地给出SQL命令。在Python中数据库是通过<strong>适配器</strong>的方式进行访问的。适配器是一个Python模块，使用它可以与关系型数据库的客户端库接口相连。<br>","more":"</p>\n<h2 id=\"Python的DB-API\"><a href=\"#Python的DB-API\" class=\"headerlink\" title=\"Python的DB-API\"></a>Python的DB-API</h2><blockquote>\n<p>DB-API是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问</p>\n</blockquote>\n<h3 id=\"模块属性\"><a href=\"#模块属性\" class=\"headerlink\" title=\"模块属性\"></a>模块属性</h3><h4 id=\"DB-API模块属性\"><a href=\"#DB-API模块属性\" class=\"headerlink\" title=\"DB-API模块属性\"></a>DB-API模块属性</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">apilevel</td>\n<td style=\"text-align:center\">需要适配器兼容的DB-API版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">threadsafety</td>\n<td style=\"text-align:center\">本模块的线程安全级别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">paramstyle</td>\n<td style=\"text-align:center\">本模块的SQL语句参数风格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">connect()</td>\n<td style=\"text-align:center\">Connect()函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(多种异常)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h4><ul>\n<li><p>apilevel</p>\n<blockquote>\n<p>该字符串指明了模块需要兼容的DB-API最高版本，默认值为1.0</p>\n</blockquote>\n</li>\n<li><p>threadsafety</p>\n<blockquote>\n<p>0: 不支持线程安全。线程间不能共享模块<br>1: 最小化线程安全支持：线程间可以共享模块，但是不能共享连接<br>2: 适度的线程安全支持：线程间可以共享模块和连接，但是不能共享游标<br>3: 完整的线程安全支持：线程间可以共享模块、连接和游标</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>如果有资源需要共享，那么就需要诸如自旋锁、信号量等同步原语达到原子锁定的目的</strong></p>\n<h4 id=\"参数风格\"><a href=\"#参数风格\" class=\"headerlink\" title=\"参数风格\"></a>参数风格</h4><ul>\n<li>paramstyle</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数风格</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">numeric</td>\n<td style=\"text-align:center\">数值位置风格</td>\n<td style=\"text-align:center\">WHERE name=:1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">named</td>\n<td style=\"text-align:center\">命名风格</td>\n<td style=\"text-align:center\">WHERE name=:name</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pyformat</td>\n<td style=\"text-align:center\">Python字典printf()格式转换</td>\n<td style=\"text-align:center\">WHERE name=%(name)s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qmark</td>\n<td style=\"text-align:center\">问号风格</td>\n<td style=\"text-align:center\">WHERE name=?</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">format</td>\n<td style=\"text-align:center\">ANSIC的printf()格式转换</td>\n<td style=\"text-align:center\">WHERE name=%s</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"函数属性\"><a href=\"#函数属性\" class=\"headerlink\" title=\"函数属性\"></a>函数属性</h4><blockquote>\n<p>connect()函数通过Connection对象访问数据库。兼容模块必须实现connect()函数。该函数创建并放回一个Connection对象</p>\n</blockquote>\n<p>connect()函数使用例子：<br><code>connect(dsn=&#39;myhost:MYDB&#39;, user=&#39;root&#39;, password=&#39;root&#39;)</code></p>\n<ul>\n<li>connect()函数属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">user</td>\n<td style=\"text-align:center\">用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">password</td>\n<td style=\"text-align:center\">面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">host</td>\n<td style=\"text-align:center\">主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">数据库名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dsn</td>\n<td style=\"text-align:center\">数据源名</td>\n</tr>\n</tbody>\n</table>\n<p>使用ODBC或JDBC的API需要使用DSN；直接使用数据库，更倾向于使用独立的登录参数。</p>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">异常</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Warning</td>\n<td style=\"text-align:center\">警告异常基类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Error</td>\n<td style=\"text-align:center\">错误异常基类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">InterfaceError</td>\n<td style=\"text-align:center\">数据库接口(非数据库)错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DatabaseError</td>\n<td style=\"text-align:center\">数据库错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DataError</td>\n<td style=\"text-align:center\">处理数据时出现错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OperationError</td>\n<td style=\"text-align:center\">数据库操作执行期间出现的错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IntegrityError</td>\n<td style=\"text-align:center\">数据库关系完整性错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">InternalError</td>\n<td style=\"text-align:center\">数据库内部错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ProgrammingError</td>\n<td style=\"text-align:center\">SQL命令执行失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NotSupportedError</td>\n<td style=\"text-align:center\">出现不支持的操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Connection对象\"><a href=\"#Connection对象\" class=\"headerlink\" title=\"Connection对象\"></a>Connection对象</h3><blockquote>\n<p>只有通过数据连接才能把命令传递到服务器，并得到返回的结果。当一个连接(或一个连接池)建立后，可以创建一个游标，向数据库发送请求，然后从数据库接收回应</p>\n</blockquote>\n<h4 id=\"Connection对象方法\"><a href=\"#Connection对象方法\" class=\"headerlink\" title=\"Connection对象方法\"></a>Connection对象方法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭数据库连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commit()</td>\n<td style=\"text-align:center\">提交当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rollback()</td>\n<td style=\"text-align:center\">取消当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cursor()</td>\n<td style=\"text-align:center\">使用该连接创建(并返回)一个游标或类游标的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">errorhandler(cxn,cur,errcls,errval)</td>\n<td style=\"text-align:center\">作为给定连接的游标的处理程序</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>当使用<code>close()</code>时，这个连接将不能再使用，否则会进入到异常处理中</li>\n<li>如果数据库不支持事务处理或启用了自动提交功能，<code>commit()</code>方法都无法使用</li>\n<li><code>rollback()</code>只能在支持事务处理的数据库中使用。发生异常时，<code>rollback()</code>会将数据库的状态恢复到事务处理开始时。</li>\n<li>如果RDBMS(关系数据库管理系统)不支持游标，<code>cursor()</code>会返回一个尽可能模仿真实游标的对象</li>\n</ul>\n<h4 id=\"Cursor对象\"><a href=\"#Cursor对象\" class=\"headerlink\" title=\"Cursor对象\"></a>Cursor对象</h4><blockquote>\n<p>游标可以让用户提交数据库命令，并获得查询的结果行。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">arraysize</td>\n<td style=\"text-align:center\">使用fetchmany()方法时，一次取出的结果行数，默认为1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">connection</td>\n<td style=\"text-align:center\">创建此游标的连接(可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">description</td>\n<td style=\"text-align:center\">返回游标活动状态(7项元组):(name,type_code,display_size,internal_size,precision,scale,null-ok)，只有name和type_code是必需的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastrowid</td>\n<td style=\"text-align:center\">上次修改行的行ID(可选，如果不支持行ID，则返回None)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rowcount</td>\n<td style=\"text-align:center\">上次execute*()方法处理或影响的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callproc(func[,args])</td>\n<td style=\"text-align:center\">调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭游标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">execute(op[,args])</td>\n<td style=\"text-align:center\">执行数据库查询或命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">executemany(op,args)</td>\n<td style=\"text-align:center\">类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchone()</td>\n<td style=\"text-align:center\">获取查询结果的下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchmany([size=cursor,arraysize])</td>\n<td style=\"text-align:center\">获取查询结果的下面size行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fetchall()</td>\n<td style=\"text-align:center\">获取查询结果的所有(剩余)行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>iter</strong>()</td>\n<td style=\"text-align:center\">为游标创建迭代器对象(可选，参考nexi())</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">messages</td>\n<td style=\"text-align:center\">游标执行后从数据库中获得的消息列表(元组集合，可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">next()</td>\n<td style=\"text-align:center\">被迭代器用于获取查询结果的下一行(可选，类似fetchone(),参考<strong>iter</strong>())</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nextset()</td>\n<td style=\"text-align:center\">移动到下一个结果集合(如果支持)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rownumber</td>\n<td style=\"text-align:center\">当前结果集中游标的索引(以行为单位，从0开始，可选)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setinputsizes(sizes)</td>\n<td style=\"text-align:center\">设置允许的最大输入大小(必须有，但是实现是可选的)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setoutputsize(size[,col])</td>\n<td style=\"text-align:center\">设置大列获取的最大缓冲区大小(必须有，但是实现是可选的)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>游标对象最重要的属性是execute<em>()和fetch</em>()方法，所有针对数据库的服务请求都通过它们执行。当不需要是关闭游标</strong></p>\n<h4 id=\"类型对象和构造函数\"><a href=\"#类型对象和构造函数\" class=\"headerlink\" title=\"类型对象和构造函数\"></a>类型对象和构造函数</h4><blockquote>\n<p>创建构造函数，从而构建可以简单地转换成适当数据库对象的特殊对象</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型对象</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Date(yr,mo,dy)</td>\n<td style=\"text-align:center\">日期值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Time(hr,min,sec)</td>\n<td style=\"text-align:center\">时间值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Timestamp(yr,mo,dy,hr,min,sec)</td>\n<td style=\"text-align:center\">时间戳值对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DateFromTicks(ticks)</td>\n<td style=\"text-align:center\">日期对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TimeFromTicks(ticks)</td>\n<td style=\"text-align:center\">时间对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TimestampFromTicks(ticks)</td>\n<td style=\"text-align:center\">时间戳对象，给出从新纪元时间（1970 年1 月1 日00:00:00 UTC）以来的秒数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Binary(string)</td>\n<td style=\"text-align:center\">对应二进制(长)字符串对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STRING</td>\n<td style=\"text-align:center\">表示基于字符串列的对象，比如VARCHAR</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BINARY</td>\n<td style=\"text-align:center\">表示(长)二进制列的对象，比如RAW、BLOB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NUMBER</td>\n<td style=\"text-align:center\">表示数值列的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATETIME</td>\n<td style=\"text-align:center\">表示日期/时间列的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ROWID</td>\n<td style=\"text-align:center\">表示“行ID”列的对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>SQL的NULL值对应于Python的NULL对象None</strong></p>\n<h4 id=\"数据库适配器示例应用\"><a href=\"#数据库适配器示例应用\" class=\"headerlink\" title=\"数据库适配器示例应用\"></a>数据库适配器示例应用</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入必需的模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建了全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 用于显示列的大小，以及支持的数据库种类</span></span><br><span class=\"line\">COLSIZ = <span class=\"number\">10</span></span><br><span class=\"line\">FIELDS = (<span class=\"string\">'login'</span>, <span class=\"string\">'userid'</span>, <span class=\"string\">'projid'</span>)</span><br><span class=\"line\">RDBMSs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'s'</span>: <span class=\"string\">'sqlite'</span>,</span><br><span class=\"line\">    <span class=\"string\">'m'</span>: <span class=\"string\">'mysql'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DBNAME = <span class=\"string\">'test'</span></span><br><span class=\"line\">DBUSER = <span class=\"string\">'root'</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库异常变量，根据用户选择运行的数据库系统的不同来制定数据库异常模块</span></span><br><span class=\"line\">DB_EXC = <span class=\"keyword\">None</span></span><br><span class=\"line\">NAMELEN = <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化字符串以显示标题</span></span><br><span class=\"line\"><span class=\"comment\"># 全大写格式化函数，接收每个列名并使用str.upper()方法把它转换为头部的全大写形式</span></span><br><span class=\"line\"><span class=\"comment\"># 两个函数都将其输出左对齐，并限制为10个字符的宽度ljust(COLSIZ)</span></span><br><span class=\"line\">tformat = <span class=\"keyword\">lambda</span> s: str(s).title().ljust(COLSIZ)</span><br><span class=\"line\">cformat = <span class=\"keyword\">lambda</span> s: s.upper().ljust(COLSIZ)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RDBMSs[input(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        Choose a database system:</span></span><br><span class=\"line\"><span class=\"string\">        (M)ySQL</span></span><br><span class=\"line\"><span class=\"string\">        (S)QLite</span></span><br><span class=\"line\"><span class=\"string\">        Enter choice:</span></span><br><span class=\"line\"><span class=\"string\">    '''</span>).strip().lower()[<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(db)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据库一致性访问的核心</span></span><br><span class=\"line\">    <span class=\"comment\"># 在每部分的开始出尝试加载对应的数据库模块，如果没有找到合适的模块</span></span><br><span class=\"line\">    <span class=\"comment\"># 就返回None，表示无法支持数据库系统</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> DB_EXC</span><br><span class=\"line\">    dbDir = <span class=\"string\">'%s_%s'</span> % (db, DBNAME)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> db == <span class=\"string\">'sqlite'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 尝试加载sqlite3模块</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        DB_EXC = sqlite3</span><br><span class=\"line\">        <span class=\"comment\"># 当对SQLite调用connect()时，会使用已存在的目录</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果没有，则创建一个新目录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dbDir):</span><br><span class=\"line\">            os.mkdir(dbDir)</span><br><span class=\"line\">        cxn = sqlite3.connect(os.path.join(dbDir, DBNAME))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> db == <span class=\"string\">'mysql'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 由于MySQLdb不支持python3.6，所以导入pymysql</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">            <span class=\"keyword\">import</span> pymysql.err <span class=\"keyword\">as</span> DB_EXC</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                      user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                      password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                      port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                                      db=DBNAME)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> DB_EXC.InternalError:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                          user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          port=<span class=\"number\">3306</span>)</span><br><span class=\"line\">                    cxn.query(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class=\"line\">                    cxn.commit()</span><br><span class=\"line\">                    cxn.close()</span><br><span class=\"line\">                    cxn = pymysql.connect(host=<span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">                                          user=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          password=<span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">                                          port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                                          db=DBNAME)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> DB_EXC.InternalError:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cxn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个新表users</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        cur.execute(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">            CREATE  TABLE  users(</span></span><br><span class=\"line\"><span class=\"string\">                login VARCHAR(%d),</span></span><br><span class=\"line\"><span class=\"string\">                userid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">                projid INTEGER</span></span><br><span class=\"line\"><span class=\"string\">            )</span></span><br><span class=\"line\"><span class=\"string\">        '''</span> % NAMELEN)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> DB_EXC.InternalError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"comment\"># 如果发生错误，几乎总是这个表已经存在了</span></span><br><span class=\"line\">        <span class=\"comment\"># 删除该表，重新创建</span></span><br><span class=\"line\">        drop(cur)</span><br><span class=\"line\">        create(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除数据库表的函数</span></span><br><span class=\"line\">drop = <span class=\"keyword\">lambda</span> cur: cur.execute(<span class=\"string\">'DROP TABLE users'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由用户名和用户ID组成的常量</span></span><br><span class=\"line\">NAMES = (</span><br><span class=\"line\">    (<span class=\"string\">'bob'</span>, <span class=\"number\">1234</span>), (<span class=\"string\">'angela'</span>, <span class=\"number\">4567</span>), (<span class=\"string\">'dave'</span>, <span class=\"number\">4523</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randName</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成器</span></span><br><span class=\"line\">    pick = set(NAMES)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> pick:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> pick.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(cur, db)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 插入函数</span></span><br><span class=\"line\">    <span class=\"comment\"># SQLite风格是qmark参数风格，而MySQL使用的是format参数风格</span></span><br><span class=\"line\">    <span class=\"comment\"># 对于每个用户名-用户ID对，都会被分配到一个项目卒中。</span></span><br><span class=\"line\">    <span class=\"comment\"># 项目ID从四个不同的组中随机选出的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> db == <span class=\"string\">'sqlite'</span>:</span><br><span class=\"line\">        cur.executemany(<span class=\"string\">\"INSERT INTO users VALUES(?,?,?)\"</span>,</span><br><span class=\"line\">                        [(who, uid, rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> db == <span class=\"string\">'mysql'</span>:</span><br><span class=\"line\">        cur.executemany(<span class=\"string\">\"INSERT INTO users VALUES(%s, %s, %s)\"</span>,</span><br><span class=\"line\">                        [(who, uid, rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)) <span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回最后一次操作后影响的行数，如果游标对象不支持该属性，则返回-1</span></span><br><span class=\"line\">getRC = <span class=\"keyword\">lambda</span> cur: cur.rowcount <span class=\"keyword\">if</span> hasattr(cur, <span class=\"string\">'rowcount'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># update()和delete()函数会随机选择项目组中的成员</span></span><br><span class=\"line\"><span class=\"comment\"># 更新操作会将其从当前组移动到另一个随机选择的组中</span></span><br><span class=\"line\"><span class=\"comment\"># 删除操作会将该组的成员全部删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    cur.execute(<span class=\"string\">'UPDATE users SET projid=%d WHERE projid=%d'</span> % (to, fr))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fr, to, getRC(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    cur.execute(<span class=\"string\">'DELETE FROM users WHERE projid=%d'</span> % rm)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rm, getRC(cur)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(cur)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 来去所有行，将其按照打印格式进行格式化，然后显示</span></span><br><span class=\"line\">    cur.execute(<span class=\"string\">'SELECT * FROM users'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 格式化标题</span></span><br><span class=\"line\">    print(<span class=\"string\">'%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> cur.fetchall():</span><br><span class=\"line\">        <span class=\"comment\"># 将数据(login,userid,projid)通过map()传递给tformat()，</span></span><br><span class=\"line\">        <span class=\"comment\"># 是数据转化为字符串，将其格式化为标题风格</span></span><br><span class=\"line\">        <span class=\"comment\"># 字符串按照COLSIZ的列宽度进行左对齐</span></span><br><span class=\"line\">        print(<span class=\"string\">''</span>.join(map(tformat, data)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 主函数</span></span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    print(<span class=\"string\">'*** Connect to %r database'</span> % db)</span><br><span class=\"line\">    cxn = connect(db)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cxn:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported or unreadable, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    cur = cxn.cursor()</span><br><span class=\"line\">    print(<span class=\"string\">'***Creating users table'</span>)</span><br><span class=\"line\">    create(cur=cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'***Inserting names into table'</span>)</span><br><span class=\"line\">    insert(cur, db)</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Randomly moving folks'</span>)</span><br><span class=\"line\">    fr, to, num = update(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'***Randomly choosing group'</span>)</span><br><span class=\"line\">    rm, num = delete(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    dbDump(cur)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Droping users table'</span>)</span><br><span class=\"line\">    drop(cur)</span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Close cxns'</span>)</span><br><span class=\"line\">    cur.close()</span><br><span class=\"line\">    cxn.commit()</span><br><span class=\"line\">    cxn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MySQL数据库访问结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">        (M)ySQL</span><br><span class=\"line\">        (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\">*** Connect to &apos;mysql&apos; database</span><br><span class=\"line\">***Creating users table</span><br><span class=\"line\">***Inserting names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\">Bob       1234      3         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly moving folks</span><br><span class=\"line\">(2 users moved) from (3) to (1)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\">Bob       1234      1         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\">***Randomly choosing group</span><br><span class=\"line\">\t(group #1; 2 users removed)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Droping users table</span><br><span class=\"line\"></span><br><span class=\"line\">*** Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite数据库访问结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\">*** Connect to &apos;sqlite&apos; database</span><br><span class=\"line\">***Creating users table</span><br><span class=\"line\">***Inserting names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly moving folks</span><br><span class=\"line\">(1 users moved) from (1) to (1)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\">***Randomly choosing group</span><br><span class=\"line\">(group #3; 1 users removed)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Droping users table</span><br><span class=\"line\"></span><br><span class=\"line\">*** Close cxns</span><br></pre></td></tr></table></figure>"},{"title":"Python文本处理","date":"2018-03-13T06:48:15.000Z","copyright":true,"description":"无论什么类型的应用，都需要处理成可读的数据，而数据一般是文本。Python标准库有3个文本处理模块和包，它们分别可以处理csv、json、xml","_content":"## 逗号分割值(CSV)\n### CSV简介\n**逗号分割值(Comma-Spearated Value, CSV)** 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用`str.splt(',')`来解析，因为会处理单个字段中含有逗号的情形。\n```Python\n#!/usr/bin/python3\n# -*- coding:utf-8 -*-\nimport csv\n#  创建需要导入的数据源\nDATA = (\n    (1, 'Web Clients and Servers', 'base64,urllib'),\n    (2, 'Web program：CGI & WSGI', 'cgi, time, wsgiref'),\n    (3, 'Web Services', 'urllib,twython')\n)\n\nprint('*** WRITTING CSV DATA')\n# 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空\nwith open('bookdata.csv', 'w', encoding='utf-8', newline='') as w:\n    # csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象\n    # 可以用来在打开的文件中逐行写入逗号分隔的数据。\n    writer = csv.writer(w)\n    for record in DATA:\n        writer.writerow(record)\n\n\n# writer对象提供一个writerow()方法\n\nprint('****REVIEW OF SAVED DATA')\nwith open('bookdata.csv', 'r', encoding='utf-8') as r:\n    # csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行\n    # csv.reader()使用一个已打开文件的句柄，返回一个reader对象\n    # 当逐行迭代数据时，CSV数据会自动解析并返回给用户\n    reader = csv.reader(r)\n    for chap, title, modpkgs in reader:\n        print('Chapter %s: %r (featureing %s)' % (chap, title, modpkgs))\n```\n\n* 输出结果\n\n```\n*** WRITTING CSV DATA\n****REVIEW OF SAVED DATA\nChapter 1: 'Web Clients and Servers' (featureing base64,urllib)\nChapter 2: 'Web program：CGI & WSGI' (featureing cgi, time, wsgiref)\nChapter 3: 'Web Services' (featureing urllib,twython)\n```\ncsv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。\n\n## JSON\nJSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。\n* JSON和Python类型之间的区别\n\n|     JSON     |  Python3   |\n|:------------:|:----------:|\n|    object    |    dict    |\n|    array     | list tuple |\n|    string    |    str     |\n| number(int)  |    int     |\n| number(real) |   float    |\n|     true     |    True    |\n|    false     |   False    |\n|     null     |    None    |\n\njson提供了`dump()`/`load()`和`dumps()`/`loads()`。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 返回一个表示Python对象的字符串\n# 用来美观地输出Python对象\nfrom json import dumps\nfrom pprint import pprint\n\n\n# Python字典，使用字典是因为其可以构建具有结构化层次的属性。\n# 在等价的JSON表示方法中，会移除所有额外的逗号\nBooks = {\n    '0000001': {\n        'title': 'Core',\n        'edition': 2,\n        'year': 2007,\n    },\n    '0000002': {\n        'title': 'Python Programming',\n        'edition': 3,\n        'authors': ['Jack', 'Bob', 'Jerry'],\n        'year': 2009,\n    },\n    '0000003': {\n        'title': 'Programming',\n        'year': 2009,\n    }\n}\n\n# 显示转储的Python字典\nprint('***RAW DICT***')\nprint(Books)\n\n# 使用更美观的方法输出\nprint('***PRETTY_PRINTED DICT***')\npprint(Books)\n\n# 使用json.dumps()内置的美观的输出方式，传递缩进级别\nprint('***PRETTY_PRINTED JSON***')\nprint(dumps(Books, indent=4))\n```\n* 输出结果\n\n```\n***RAW DICT***\n{'0000001': {'title': 'Core', 'edition': 2, 'year': 2007}, '0000002': {'title': 'Python Programming', 'edition': 3, 'authors': ['Jack', 'Bob', 'Jerry'], 'year': 2009}, '0000003': {'title': 'Programming', 'year': 2009}}\n***PRETTY_PRINTED DICT***\n{'0000001': {'edition': 2, 'title': 'Core', 'year': 2007},\n '0000002': {'authors': ['Jack', 'Bob', 'Jerry'],\n             'edition': 3,\n             'title': 'Python Programming',\n             'year': 2009},\n '0000003': {'title': 'Programming', 'year': 2009}}\n***PRETTY_PRINTED JSON***\n{\n    \"0000001\": {\n        \"title\": \"Core\",\n        \"edition\": 2,\n        \"year\": 2007\n    },\n    \"0000002\": {\n        \"title\": \"Python Programming\",\n        \"edition\": 3,\n        \"authors\": [\n            \"Jack\",\n            \"Bob\",\n            \"Jerry\"\n        ],\n        \"year\": 2009\n    },\n    \"0000003\": {\n        \"title\": \"Programming\",\n        \"year\": 2009\n    }\n}\n```\n\n## XML\nXML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。\n* 将字典转化为XML\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n#\nfrom xml.etree.ElementTree import Element, SubElement, tostring\nfrom xml.dom.minidom import parseString\n\n\n# Python字典，使用字典是因为其可以构建具有结构化层次的属性。\n# 在等价的JSON表示方法中，会移除所有额外的逗号\nBooks = {\n    '0000001': {\n        'title': 'Core',\n        'edition': 2,\n        'year': 2007,\n    },\n    '0000002': {\n        'title': 'Python Programming',\n        'edition': 3,\n        'authors': 'Jack:Bob:Jerry',\n        'year': 2009,\n    },\n    '0000003': {\n        'title': 'Programming',\n        'year': 2009,\n    }\n}\n\n# 创建顶层对象\n# 将所有其他内容添加到该节点下\nbooks = Element('books')\nfor isbn, info in Books.items():\n    # 对于每一本书添加一个book子节点\n    # 如果原字典没有提供作者和版本，则使用提供的默认值。\n    book = SubElement(books, 'book')\n    info.setdefault('authors', 'Bob')\n    info.setdefault('edition', 1)\n    for key, val in info.items():\n        # 遍历所有键值对，将这些内容作为其他子节点添加到每个book中\n        SubElement(book, key).text = ', '.join(str(val).split(':'))\n\nxml = tostring(books)\nprint('*** RAW XML***')\nprint(xml)\n\nprint('***PRETTY-PRINTED XML***')\ndom = parseString(xml)\nprint(dom.toprettyxml('     '))\n\nprint('***FLAT STRUCTURE***')\nfor elmt in books.iter():\n    print(elmt.tag, '-', elmt.text)\n\nprint('\\n***TITLE ONLY***')\nfor book in books.findall('.//title'):\n    print(book.text)\n\n```\n* 输出结果\n```\n*** RAW XML***\nb'<books><book><title>Core</title><edition>2</edition><year>2007</year><authors>Bob</authors></book><book><title>Python Programming</title><edition>3</edition><authors>Jack, Bob, Jerry</authors><year>2009</year></book><book><title>Programming</title><year>2009</year><authors>Bob</authors><edition>1</edition></book></books>'\n***PRETTY-PRINTED XML***\n<?xml version=\"1.0\" ?>\n<books>\n     <book>\n          <title>Core</title>\n          <edition>2</edition>\n          <year>2007</year>\n          <authors>Bob</authors>\n     </book>\n     <book>\n          <title>Python Programming</title>\n          <edition>3</edition>\n          <authors>Jack, Bob, Jerry</authors>\n          <year>2009</year>\n     </book>\n     <book>\n          <title>Programming</title>\n          <year>2009</year>\n          <authors>Bob</authors>\n          <edition>1</edition>\n     </book>\n</books>\n\n***FLAT STRUCTURE***\nbooks - None\nbook - None\ntitle - Core\nedition - 2\nyear - 2007\nauthors - Bob\nbook - None\ntitle - Python Programming\nedition - 3\nauthors - Jack, Bob, Jerry\nyear - 2009\nbook - None\ntitle - Programming\nyear - 2009\nauthors - Bob\nedition - 1\n\n***TITLE ONLY***\nCore\nPython Programming\nProgramming\n\n```\n","source":"_posts/Python文本处理.md","raw":"---\ntitle: Python文本处理\ndate: 2018-03-13 14:48:15\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 文本处理\ndescription: 无论什么类型的应用，都需要处理成可读的数据，而数据一般是文本。Python标准库有3个文本处理模块和包，它们分别可以处理csv、json、xml\n---\n## 逗号分割值(CSV)\n### CSV简介\n**逗号分割值(Comma-Spearated Value, CSV)** 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用`str.splt(',')`来解析，因为会处理单个字段中含有逗号的情形。\n```Python\n#!/usr/bin/python3\n# -*- coding:utf-8 -*-\nimport csv\n#  创建需要导入的数据源\nDATA = (\n    (1, 'Web Clients and Servers', 'base64,urllib'),\n    (2, 'Web program：CGI & WSGI', 'cgi, time, wsgiref'),\n    (3, 'Web Services', 'urllib,twython')\n)\n\nprint('*** WRITTING CSV DATA')\n# 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空\nwith open('bookdata.csv', 'w', encoding='utf-8', newline='') as w:\n    # csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象\n    # 可以用来在打开的文件中逐行写入逗号分隔的数据。\n    writer = csv.writer(w)\n    for record in DATA:\n        writer.writerow(record)\n\n\n# writer对象提供一个writerow()方法\n\nprint('****REVIEW OF SAVED DATA')\nwith open('bookdata.csv', 'r', encoding='utf-8') as r:\n    # csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行\n    # csv.reader()使用一个已打开文件的句柄，返回一个reader对象\n    # 当逐行迭代数据时，CSV数据会自动解析并返回给用户\n    reader = csv.reader(r)\n    for chap, title, modpkgs in reader:\n        print('Chapter %s: %r (featureing %s)' % (chap, title, modpkgs))\n```\n\n* 输出结果\n\n```\n*** WRITTING CSV DATA\n****REVIEW OF SAVED DATA\nChapter 1: 'Web Clients and Servers' (featureing base64,urllib)\nChapter 2: 'Web program：CGI & WSGI' (featureing cgi, time, wsgiref)\nChapter 3: 'Web Services' (featureing urllib,twython)\n```\ncsv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。\n\n## JSON\nJSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。\n* JSON和Python类型之间的区别\n\n|     JSON     |  Python3   |\n|:------------:|:----------:|\n|    object    |    dict    |\n|    array     | list tuple |\n|    string    |    str     |\n| number(int)  |    int     |\n| number(real) |   float    |\n|     true     |    True    |\n|    false     |   False    |\n|     null     |    None    |\n\njson提供了`dump()`/`load()`和`dumps()`/`loads()`。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 返回一个表示Python对象的字符串\n# 用来美观地输出Python对象\nfrom json import dumps\nfrom pprint import pprint\n\n\n# Python字典，使用字典是因为其可以构建具有结构化层次的属性。\n# 在等价的JSON表示方法中，会移除所有额外的逗号\nBooks = {\n    '0000001': {\n        'title': 'Core',\n        'edition': 2,\n        'year': 2007,\n    },\n    '0000002': {\n        'title': 'Python Programming',\n        'edition': 3,\n        'authors': ['Jack', 'Bob', 'Jerry'],\n        'year': 2009,\n    },\n    '0000003': {\n        'title': 'Programming',\n        'year': 2009,\n    }\n}\n\n# 显示转储的Python字典\nprint('***RAW DICT***')\nprint(Books)\n\n# 使用更美观的方法输出\nprint('***PRETTY_PRINTED DICT***')\npprint(Books)\n\n# 使用json.dumps()内置的美观的输出方式，传递缩进级别\nprint('***PRETTY_PRINTED JSON***')\nprint(dumps(Books, indent=4))\n```\n* 输出结果\n\n```\n***RAW DICT***\n{'0000001': {'title': 'Core', 'edition': 2, 'year': 2007}, '0000002': {'title': 'Python Programming', 'edition': 3, 'authors': ['Jack', 'Bob', 'Jerry'], 'year': 2009}, '0000003': {'title': 'Programming', 'year': 2009}}\n***PRETTY_PRINTED DICT***\n{'0000001': {'edition': 2, 'title': 'Core', 'year': 2007},\n '0000002': {'authors': ['Jack', 'Bob', 'Jerry'],\n             'edition': 3,\n             'title': 'Python Programming',\n             'year': 2009},\n '0000003': {'title': 'Programming', 'year': 2009}}\n***PRETTY_PRINTED JSON***\n{\n    \"0000001\": {\n        \"title\": \"Core\",\n        \"edition\": 2,\n        \"year\": 2007\n    },\n    \"0000002\": {\n        \"title\": \"Python Programming\",\n        \"edition\": 3,\n        \"authors\": [\n            \"Jack\",\n            \"Bob\",\n            \"Jerry\"\n        ],\n        \"year\": 2009\n    },\n    \"0000003\": {\n        \"title\": \"Programming\",\n        \"year\": 2009\n    }\n}\n```\n\n## XML\nXML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。\n* 将字典转化为XML\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n#\nfrom xml.etree.ElementTree import Element, SubElement, tostring\nfrom xml.dom.minidom import parseString\n\n\n# Python字典，使用字典是因为其可以构建具有结构化层次的属性。\n# 在等价的JSON表示方法中，会移除所有额外的逗号\nBooks = {\n    '0000001': {\n        'title': 'Core',\n        'edition': 2,\n        'year': 2007,\n    },\n    '0000002': {\n        'title': 'Python Programming',\n        'edition': 3,\n        'authors': 'Jack:Bob:Jerry',\n        'year': 2009,\n    },\n    '0000003': {\n        'title': 'Programming',\n        'year': 2009,\n    }\n}\n\n# 创建顶层对象\n# 将所有其他内容添加到该节点下\nbooks = Element('books')\nfor isbn, info in Books.items():\n    # 对于每一本书添加一个book子节点\n    # 如果原字典没有提供作者和版本，则使用提供的默认值。\n    book = SubElement(books, 'book')\n    info.setdefault('authors', 'Bob')\n    info.setdefault('edition', 1)\n    for key, val in info.items():\n        # 遍历所有键值对，将这些内容作为其他子节点添加到每个book中\n        SubElement(book, key).text = ', '.join(str(val).split(':'))\n\nxml = tostring(books)\nprint('*** RAW XML***')\nprint(xml)\n\nprint('***PRETTY-PRINTED XML***')\ndom = parseString(xml)\nprint(dom.toprettyxml('     '))\n\nprint('***FLAT STRUCTURE***')\nfor elmt in books.iter():\n    print(elmt.tag, '-', elmt.text)\n\nprint('\\n***TITLE ONLY***')\nfor book in books.findall('.//title'):\n    print(book.text)\n\n```\n* 输出结果\n```\n*** RAW XML***\nb'<books><book><title>Core</title><edition>2</edition><year>2007</year><authors>Bob</authors></book><book><title>Python Programming</title><edition>3</edition><authors>Jack, Bob, Jerry</authors><year>2009</year></book><book><title>Programming</title><year>2009</year><authors>Bob</authors><edition>1</edition></book></books>'\n***PRETTY-PRINTED XML***\n<?xml version=\"1.0\" ?>\n<books>\n     <book>\n          <title>Core</title>\n          <edition>2</edition>\n          <year>2007</year>\n          <authors>Bob</authors>\n     </book>\n     <book>\n          <title>Python Programming</title>\n          <edition>3</edition>\n          <authors>Jack, Bob, Jerry</authors>\n          <year>2009</year>\n     </book>\n     <book>\n          <title>Programming</title>\n          <year>2009</year>\n          <authors>Bob</authors>\n          <edition>1</edition>\n     </book>\n</books>\n\n***FLAT STRUCTURE***\nbooks - None\nbook - None\ntitle - Core\nedition - 2\nyear - 2007\nauthors - Bob\nbook - None\ntitle - Python Programming\nedition - 3\nauthors - Jack, Bob, Jerry\nyear - 2009\nbook - None\ntitle - Programming\nyear - 2009\nauthors - Bob\nedition - 1\n\n***TITLE ONLY***\nCore\nPython Programming\nProgramming\n\n```\n","slug":"Python文本处理","published":1,"updated":"2018-03-13T09:41:11.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4f000ftwn9aj850hnj","content":"<h2 id=\"逗号分割值-CSV\"><a href=\"#逗号分割值-CSV\" class=\"headerlink\" title=\"逗号分割值(CSV)\"></a>逗号分割值(CSV)</h2><h3 id=\"CSV简介\"><a href=\"#CSV简介\" class=\"headerlink\" title=\"CSV简介\"></a>CSV简介</h3><p><strong>逗号分割值(Comma-Spearated Value, CSV)</strong> 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用<code>str.splt(&#39;,&#39;)</code>来解析，因为会处理单个字段中含有逗号的情形。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"comment\">#  创建需要导入的数据源</span></span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"string\">'Web Clients and Servers'</span>, <span class=\"string\">'base64,urllib'</span>),</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"string\">'Web program：CGI &amp; WSGI'</span>, <span class=\"string\">'cgi, time, wsgiref'</span>),</span><br><span class=\"line\">    (<span class=\"number\">3</span>, <span class=\"string\">'Web Services'</span>, <span class=\"string\">'urllib,twython'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'*** WRITTING CSV DATA'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'bookdata.csv'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>, newline=<span class=\"string\">''</span>) <span class=\"keyword\">as</span> w:</span><br><span class=\"line\">    <span class=\"comment\"># csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 可以用来在打开的文件中逐行写入逗号分隔的数据。</span></span><br><span class=\"line\">    writer = csv.writer(w)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> record <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">        writer.writerow(record)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># writer对象提供一个writerow()方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'****REVIEW OF SAVED DATA'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'bookdata.csv'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> r:</span><br><span class=\"line\">    <span class=\"comment\"># csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行</span></span><br><span class=\"line\">    <span class=\"comment\"># csv.reader()使用一个已打开文件的句柄，返回一个reader对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 当逐行迭代数据时，CSV数据会自动解析并返回给用户</span></span><br><span class=\"line\">    reader = csv.reader(r)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> chap, title, modpkgs <span class=\"keyword\">in</span> reader:</span><br><span class=\"line\">        print(<span class=\"string\">'Chapter %s: %r (featureing %s)'</span> % (chap, title, modpkgs))</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** WRITTING CSV DATA</span><br><span class=\"line\">****REVIEW OF SAVED DATA</span><br><span class=\"line\">Chapter 1: &apos;Web Clients and Servers&apos; (featureing base64,urllib)</span><br><span class=\"line\">Chapter 2: &apos;Web program：CGI &amp; WSGI&apos; (featureing cgi, time, wsgiref)</span><br><span class=\"line\">Chapter 3: &apos;Web Services&apos; (featureing urllib,twython)</span><br></pre></td></tr></table></figure>\n<p>csv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。</p>\n<ul>\n<li>JSON和Python类型之间的区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JSON</th>\n<th style=\"text-align:center\">Python3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">object</td>\n<td style=\"text-align:center\">dict</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">array</td>\n<td style=\"text-align:center\">list tuple</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">str</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number(int)</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number(real)</td>\n<td style=\"text-align:center\">float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">None</td>\n</tr>\n</tbody>\n</table>\n<p>json提供了<code>dump()</code>/<code>load()</code>和<code>dumps()</code>/<code>loads()</code>。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回一个表示Python对象的字符串</span></span><br><span class=\"line\"><span class=\"comment\"># 用来美观地输出Python对象</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> dumps</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class=\"line\"><span class=\"comment\"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class=\"line\">Books = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0000001'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2007</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000002'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Python Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">'authors'</span>: [<span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Jerry'</span>],</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000003'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示转储的Python字典</span></span><br><span class=\"line\">print(<span class=\"string\">'***RAW DICT***'</span>)</span><br><span class=\"line\">print(Books)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用更美观的方法输出</span></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY_PRINTED DICT***'</span>)</span><br><span class=\"line\">pprint(Books)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用json.dumps()内置的美观的输出方式，传递缩进级别</span></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY_PRINTED JSON***'</span>)</span><br><span class=\"line\">print(dumps(Books, indent=<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***RAW DICT***</span><br><span class=\"line\">&#123;&apos;0000001&apos;: &#123;&apos;title&apos;: &apos;Core&apos;, &apos;edition&apos;: 2, &apos;year&apos;: 2007&#125;, &apos;0000002&apos;: &#123;&apos;title&apos;: &apos;Python Programming&apos;, &apos;edition&apos;: 3, &apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;], &apos;year&apos;: 2009&#125;, &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class=\"line\">***PRETTY_PRINTED DICT***</span><br><span class=\"line\">&#123;&apos;0000001&apos;: &#123;&apos;edition&apos;: 2, &apos;title&apos;: &apos;Core&apos;, &apos;year&apos;: 2007&#125;,</span><br><span class=\"line\"> &apos;0000002&apos;: &#123;&apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;],</span><br><span class=\"line\">             &apos;edition&apos;: 3,</span><br><span class=\"line\">             &apos;title&apos;: &apos;Python Programming&apos;,</span><br><span class=\"line\">             &apos;year&apos;: 2009&#125;,</span><br><span class=\"line\"> &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class=\"line\">***PRETTY_PRINTED JSON***</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;0000001&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Core&quot;,</span><br><span class=\"line\">        &quot;edition&quot;: 2,</span><br><span class=\"line\">        &quot;year&quot;: 2007</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;0000002&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Python Programming&quot;,</span><br><span class=\"line\">        &quot;edition&quot;: 3,</span><br><span class=\"line\">        &quot;authors&quot;: [</span><br><span class=\"line\">            &quot;Jack&quot;,</span><br><span class=\"line\">            &quot;Bob&quot;,</span><br><span class=\"line\">            &quot;Jerry&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;year&quot;: 2009</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;0000003&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Programming&quot;,</span><br><span class=\"line\">        &quot;year&quot;: 2009</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h2><p>XML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。</p>\n<ul>\n<li><p>将字典转化为XML</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.etree.ElementTree <span class=\"keyword\">import</span> Element, SubElement, tostring</span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.dom.minidom <span class=\"keyword\">import</span> parseString</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class=\"line\"><span class=\"comment\"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class=\"line\">Books = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0000001'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2007</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000002'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Python Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">'authors'</span>: <span class=\"string\">'Jack:Bob:Jerry'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000003'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建顶层对象</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有其他内容添加到该节点下</span></span><br><span class=\"line\">books = Element(<span class=\"string\">'books'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> isbn, info <span class=\"keyword\">in</span> Books.items():</span><br><span class=\"line\">    <span class=\"comment\"># 对于每一本书添加一个book子节点</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果原字典没有提供作者和版本，则使用提供的默认值。</span></span><br><span class=\"line\">    book = SubElement(books, <span class=\"string\">'book'</span>)</span><br><span class=\"line\">    info.setdefault(<span class=\"string\">'authors'</span>, <span class=\"string\">'Bob'</span>)</span><br><span class=\"line\">    info.setdefault(<span class=\"string\">'edition'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> info.items():</span><br><span class=\"line\">        <span class=\"comment\"># 遍历所有键值对，将这些内容作为其他子节点添加到每个book中</span></span><br><span class=\"line\">        SubElement(book, key).text = <span class=\"string\">', '</span>.join(str(val).split(<span class=\"string\">':'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">xml = tostring(books)</span><br><span class=\"line\">print(<span class=\"string\">'*** RAW XML***'</span>)</span><br><span class=\"line\">print(xml)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY-PRINTED XML***'</span>)</span><br><span class=\"line\">dom = parseString(xml)</span><br><span class=\"line\">print(dom.toprettyxml(<span class=\"string\">'     '</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'***FLAT STRUCTURE***'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> elmt <span class=\"keyword\">in</span> books.iter():</span><br><span class=\"line\">    print(elmt.tag, <span class=\"string\">'-'</span>, elmt.text)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'\\n***TITLE ONLY***'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> book <span class=\"keyword\">in</span> books.findall(<span class=\"string\">'.//title'</span>):</span><br><span class=\"line\">    print(book.text)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** RAW XML***</span><br><span class=\"line\">b&apos;&lt;books&gt;&lt;book&gt;&lt;title&gt;Core&lt;/title&gt;&lt;edition&gt;2&lt;/edition&gt;&lt;year&gt;2007&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;edition&gt;3&lt;/edition&gt;&lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;&lt;year&gt;2009&lt;/year&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Programming&lt;/title&gt;&lt;year&gt;2009&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;edition&gt;1&lt;/edition&gt;&lt;/book&gt;&lt;/books&gt;&apos;</span><br><span class=\"line\">***PRETTY-PRINTED XML***</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;books&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Core&lt;/title&gt;</span><br><span class=\"line\">          &lt;edition&gt;2&lt;/edition&gt;</span><br><span class=\"line\">          &lt;year&gt;2007&lt;/year&gt;</span><br><span class=\"line\">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Python Programming&lt;/title&gt;</span><br><span class=\"line\">          &lt;edition&gt;3&lt;/edition&gt;</span><br><span class=\"line\">          &lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;</span><br><span class=\"line\">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Programming&lt;/title&gt;</span><br><span class=\"line\">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class=\"line\">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class=\"line\">          &lt;edition&gt;1&lt;/edition&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">&lt;/books&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">***FLAT STRUCTURE***</span><br><span class=\"line\">books - None</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Core</span><br><span class=\"line\">edition - 2</span><br><span class=\"line\">year - 2007</span><br><span class=\"line\">authors - Bob</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Python Programming</span><br><span class=\"line\">edition - 3</span><br><span class=\"line\">authors - Jack, Bob, Jerry</span><br><span class=\"line\">year - 2009</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Programming</span><br><span class=\"line\">year - 2009</span><br><span class=\"line\">authors - Bob</span><br><span class=\"line\">edition - 1</span><br><span class=\"line\"></span><br><span class=\"line\">***TITLE ONLY***</span><br><span class=\"line\">Core</span><br><span class=\"line\">Python Programming</span><br><span class=\"line\">Programming</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"逗号分割值-CSV\"><a href=\"#逗号分割值-CSV\" class=\"headerlink\" title=\"逗号分割值(CSV)\"></a>逗号分割值(CSV)</h2><h3 id=\"CSV简介\"><a href=\"#CSV简介\" class=\"headerlink\" title=\"CSV简介\"></a>CSV简介</h3><p><strong>逗号分割值(Comma-Spearated Value, CSV)</strong> 通常用于在电子表格软件和纯文本之间交互数据。CSV文件内容仅仅是一些用逗号分隔的原始字符串值。CSV格式的文件需要专门用于解析和生成CSV的库，不能使用<code>str.splt(&#39;,&#39;)</code>来解析，因为会处理单个字段中含有逗号的情形。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"comment\">#  创建需要导入的数据源</span></span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"string\">'Web Clients and Servers'</span>, <span class=\"string\">'base64,urllib'</span>),</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"string\">'Web program：CGI &amp; WSGI'</span>, <span class=\"string\">'cgi, time, wsgiref'</span>),</span><br><span class=\"line\">    (<span class=\"number\">3</span>, <span class=\"string\">'Web Services'</span>, <span class=\"string\">'urllib,twython'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'*** WRITTING CSV DATA'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开一个csv文件，使用utf-8编码，同时为了防止写入时附加多的空白行设置newline为空</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'bookdata.csv'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>, newline=<span class=\"string\">''</span>) <span class=\"keyword\">as</span> w:</span><br><span class=\"line\">    <span class=\"comment\"># csv.writer笑一个打开的文件(或类文件)对象，返回一个writer对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 可以用来在打开的文件中逐行写入逗号分隔的数据。</span></span><br><span class=\"line\">    writer = csv.writer(w)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> record <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">        writer.writerow(record)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># writer对象提供一个writerow()方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'****REVIEW OF SAVED DATA'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'bookdata.csv'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> r:</span><br><span class=\"line\">    <span class=\"comment\"># csv.reader()用于返回一个可迭代对象，可以读取该对象并解析为CSV数据的每一行</span></span><br><span class=\"line\">    <span class=\"comment\"># csv.reader()使用一个已打开文件的句柄，返回一个reader对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 当逐行迭代数据时，CSV数据会自动解析并返回给用户</span></span><br><span class=\"line\">    reader = csv.reader(r)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> chap, title, modpkgs <span class=\"keyword\">in</span> reader:</span><br><span class=\"line\">        print(<span class=\"string\">'Chapter %s: %r (featureing %s)'</span> % (chap, title, modpkgs))</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** WRITTING CSV DATA</span><br><span class=\"line\">****REVIEW OF SAVED DATA</span><br><span class=\"line\">Chapter 1: &apos;Web Clients and Servers&apos; (featureing base64,urllib)</span><br><span class=\"line\">Chapter 2: &apos;Web program：CGI &amp; WSGI&apos; (featureing cgi, time, wsgiref)</span><br><span class=\"line\">Chapter 3: &apos;Web Services&apos; (featureing urllib,twython)</span><br></pre></td></tr></table></figure>\n<p>csv模块还提供csv.DictReader类和csv.DictWriter类，用于将CSV数据读进字典中(首先查找是否使用给定字段名，如果没有，就是用第一行作为键)，接着将字典字段写入CSV文件中。</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON是JavaScript的子集，专门用于指定结构化的数据。JSON是以人类更易读的方式传输结构化数据。</p>\n<ul>\n<li>JSON和Python类型之间的区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JSON</th>\n<th style=\"text-align:center\">Python3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">object</td>\n<td style=\"text-align:center\">dict</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">array</td>\n<td style=\"text-align:center\">list tuple</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">str</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number(int)</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number(real)</td>\n<td style=\"text-align:center\">float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">None</td>\n</tr>\n</tbody>\n</table>\n<p>json提供了<code>dump()</code>/<code>load()</code>和<code>dumps()</code>/<code>loads()</code>。除了基本参数外，这些函数还包含许多仅用于JSON的选项。模块还包括encoder类和decoder类，用户既可以继承也可以直接使用。Python字典可以转化为JSON对象，Python列表和元组也可以转成对应的JSON数组。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回一个表示Python对象的字符串</span></span><br><span class=\"line\"><span class=\"comment\"># 用来美观地输出Python对象</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> json <span class=\"keyword\">import</span> dumps</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class=\"line\"><span class=\"comment\"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class=\"line\">Books = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0000001'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2007</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000002'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Python Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">'authors'</span>: [<span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Jerry'</span>],</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000003'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示转储的Python字典</span></span><br><span class=\"line\">print(<span class=\"string\">'***RAW DICT***'</span>)</span><br><span class=\"line\">print(Books)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用更美观的方法输出</span></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY_PRINTED DICT***'</span>)</span><br><span class=\"line\">pprint(Books)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用json.dumps()内置的美观的输出方式，传递缩进级别</span></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY_PRINTED JSON***'</span>)</span><br><span class=\"line\">print(dumps(Books, indent=<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***RAW DICT***</span><br><span class=\"line\">&#123;&apos;0000001&apos;: &#123;&apos;title&apos;: &apos;Core&apos;, &apos;edition&apos;: 2, &apos;year&apos;: 2007&#125;, &apos;0000002&apos;: &#123;&apos;title&apos;: &apos;Python Programming&apos;, &apos;edition&apos;: 3, &apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;], &apos;year&apos;: 2009&#125;, &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class=\"line\">***PRETTY_PRINTED DICT***</span><br><span class=\"line\">&#123;&apos;0000001&apos;: &#123;&apos;edition&apos;: 2, &apos;title&apos;: &apos;Core&apos;, &apos;year&apos;: 2007&#125;,</span><br><span class=\"line\"> &apos;0000002&apos;: &#123;&apos;authors&apos;: [&apos;Jack&apos;, &apos;Bob&apos;, &apos;Jerry&apos;],</span><br><span class=\"line\">             &apos;edition&apos;: 3,</span><br><span class=\"line\">             &apos;title&apos;: &apos;Python Programming&apos;,</span><br><span class=\"line\">             &apos;year&apos;: 2009&#125;,</span><br><span class=\"line\"> &apos;0000003&apos;: &#123;&apos;title&apos;: &apos;Programming&apos;, &apos;year&apos;: 2009&#125;&#125;</span><br><span class=\"line\">***PRETTY_PRINTED JSON***</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;0000001&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Core&quot;,</span><br><span class=\"line\">        &quot;edition&quot;: 2,</span><br><span class=\"line\">        &quot;year&quot;: 2007</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;0000002&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Python Programming&quot;,</span><br><span class=\"line\">        &quot;edition&quot;: 3,</span><br><span class=\"line\">        &quot;authors&quot;: [</span><br><span class=\"line\">            &quot;Jack&quot;,</span><br><span class=\"line\">            &quot;Bob&quot;,</span><br><span class=\"line\">            &quot;Jerry&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;year&quot;: 2009</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;0000003&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;Programming&quot;,</span><br><span class=\"line\">        &quot;year&quot;: 2009</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h2><p>XML数据是纯文本数据，但是其可读性不高，所以需要使用解析器进行解析。</p>\n<ul>\n<li><p>将字典转化为XML</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.etree.ElementTree <span class=\"keyword\">import</span> Element, SubElement, tostring</span><br><span class=\"line\"><span class=\"keyword\">from</span> xml.dom.minidom <span class=\"keyword\">import</span> parseString</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python字典，使用字典是因为其可以构建具有结构化层次的属性。</span></span><br><span class=\"line\"><span class=\"comment\"># 在等价的JSON表示方法中，会移除所有额外的逗号</span></span><br><span class=\"line\">Books = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0000001'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2007</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000002'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Python Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'edition'</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">'authors'</span>: <span class=\"string\">'Jack:Bob:Jerry'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'0000003'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: <span class=\"string\">'Programming'</span>,</span><br><span class=\"line\">        <span class=\"string\">'year'</span>: <span class=\"number\">2009</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建顶层对象</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有其他内容添加到该节点下</span></span><br><span class=\"line\">books = Element(<span class=\"string\">'books'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> isbn, info <span class=\"keyword\">in</span> Books.items():</span><br><span class=\"line\">    <span class=\"comment\"># 对于每一本书添加一个book子节点</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果原字典没有提供作者和版本，则使用提供的默认值。</span></span><br><span class=\"line\">    book = SubElement(books, <span class=\"string\">'book'</span>)</span><br><span class=\"line\">    info.setdefault(<span class=\"string\">'authors'</span>, <span class=\"string\">'Bob'</span>)</span><br><span class=\"line\">    info.setdefault(<span class=\"string\">'edition'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> info.items():</span><br><span class=\"line\">        <span class=\"comment\"># 遍历所有键值对，将这些内容作为其他子节点添加到每个book中</span></span><br><span class=\"line\">        SubElement(book, key).text = <span class=\"string\">', '</span>.join(str(val).split(<span class=\"string\">':'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">xml = tostring(books)</span><br><span class=\"line\">print(<span class=\"string\">'*** RAW XML***'</span>)</span><br><span class=\"line\">print(xml)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'***PRETTY-PRINTED XML***'</span>)</span><br><span class=\"line\">dom = parseString(xml)</span><br><span class=\"line\">print(dom.toprettyxml(<span class=\"string\">'     '</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'***FLAT STRUCTURE***'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> elmt <span class=\"keyword\">in</span> books.iter():</span><br><span class=\"line\">    print(elmt.tag, <span class=\"string\">'-'</span>, elmt.text)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'\\n***TITLE ONLY***'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> book <span class=\"keyword\">in</span> books.findall(<span class=\"string\">'.//title'</span>):</span><br><span class=\"line\">    print(book.text)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** RAW XML***</span><br><span class=\"line\">b&apos;&lt;books&gt;&lt;book&gt;&lt;title&gt;Core&lt;/title&gt;&lt;edition&gt;2&lt;/edition&gt;&lt;year&gt;2007&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;edition&gt;3&lt;/edition&gt;&lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;&lt;year&gt;2009&lt;/year&gt;&lt;/book&gt;&lt;book&gt;&lt;title&gt;Programming&lt;/title&gt;&lt;year&gt;2009&lt;/year&gt;&lt;authors&gt;Bob&lt;/authors&gt;&lt;edition&gt;1&lt;/edition&gt;&lt;/book&gt;&lt;/books&gt;&apos;</span><br><span class=\"line\">***PRETTY-PRINTED XML***</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;books&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Core&lt;/title&gt;</span><br><span class=\"line\">          &lt;edition&gt;2&lt;/edition&gt;</span><br><span class=\"line\">          &lt;year&gt;2007&lt;/year&gt;</span><br><span class=\"line\">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Python Programming&lt;/title&gt;</span><br><span class=\"line\">          &lt;edition&gt;3&lt;/edition&gt;</span><br><span class=\"line\">          &lt;authors&gt;Jack, Bob, Jerry&lt;/authors&gt;</span><br><span class=\"line\">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">     &lt;book&gt;</span><br><span class=\"line\">          &lt;title&gt;Programming&lt;/title&gt;</span><br><span class=\"line\">          &lt;year&gt;2009&lt;/year&gt;</span><br><span class=\"line\">          &lt;authors&gt;Bob&lt;/authors&gt;</span><br><span class=\"line\">          &lt;edition&gt;1&lt;/edition&gt;</span><br><span class=\"line\">     &lt;/book&gt;</span><br><span class=\"line\">&lt;/books&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">***FLAT STRUCTURE***</span><br><span class=\"line\">books - None</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Core</span><br><span class=\"line\">edition - 2</span><br><span class=\"line\">year - 2007</span><br><span class=\"line\">authors - Bob</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Python Programming</span><br><span class=\"line\">edition - 3</span><br><span class=\"line\">authors - Jack, Bob, Jerry</span><br><span class=\"line\">year - 2009</span><br><span class=\"line\">book - None</span><br><span class=\"line\">title - Programming</span><br><span class=\"line\">year - 2009</span><br><span class=\"line\">authors - Bob</span><br><span class=\"line\">edition - 1</span><br><span class=\"line\"></span><br><span class=\"line\">***TITLE ONLY***</span><br><span class=\"line\">Core</span><br><span class=\"line\">Python Programming</span><br><span class=\"line\">Programming</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Python正则表达式(一)","date":"2018-02-09T07:08:05.000Z","copyright":true,"_content":"在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。\n<!--More-->\n\n## 特殊符号和字符\n\n| 表示法                     | 描述                                                                                           | 正则表达式示例           | 备注                                                                                     |\n| :--------------:           | :----------------------------------------------------------------------------:                 | :----------------------: | :----------------------------------------------------:                                   |\n| 符号                       |                                                                                                |                          |                                                                                          |\n| literal                    | 匹配文本字符串的字面值literal                                                                  | foo                      | 只是匹配foo，相当于取等                                                                  |\n| re1&#124; re2              | 匹配正则表达式re1或re2                                                                         | foo&#124; bar            | 匹配foo或者bar，二选一                                                                   |\n| .                          | 匹配任何字符(除了\\n之外)                                                                       | a.a                      | 匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符                                     |\n| ^                          | 匹配字符串起始部分                                                                             | ^Foo                     | 匹配Foo，不匹配aFoo                                                                      |\n| $                          | 匹配字符串终止部分                                                                             | Bar$                     | 只匹配Bar,不匹配aBar等                                                                   |\n| *                          | 匹配0次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]*             | 匹配任意多个字母或数字                                                                   |\n| +                          | 匹配1次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]+             | 匹配一到多个个字母或数字                                                                 |\n| ?                          | 匹配0次或者1次前面出现的正则表达式                                                             | [A-Za-z0-9]              | 要么有一个字母或数字要么没有                                                             |\n| {N}                        | 匹配N次前面出现的正则表达式                                                                    | [0-9]{3}                 | 匹配三个数字                                                                             |\n| {M,N}                      | 匹配M~N次前面出现的正则表达式                                                                  | [0-9]{5,9}               | 匹配5到9个数字(包括5个和9个)                                                             |\n| [...]                      | 匹配来自字符集的任意单一字符                                                                   | [aeiou]                  | 匹配一个元音字母                                                                         |\n| [..x~y..]                  | 匹配x~y范围内的任意单一字符                                                                    | [A-Za-z]                 | 匹配任意一个英文字母                                                                     |\n| [^...]                     | 不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)                   | [\\^aeiou][\\^A-Za-z0-9]   | 匹配一个非元音字母和一个非字母数字字符                                                   |\n| (*&#124;+&#124;?&#124;{})? | 用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})                                     | .*?[a-z]                 | (非贪婪是指尽可能少的匹配)                                                               |\n| (...)                      | 匹配封闭的正则表达式,然后另存为子组                                                            | f(oo&#124; u)bar         | 匹配foobar,fubar                                                                         |\n| 特殊字符                   |                                                                                                |                          |                                                                                          |\n| \\d                         | 匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)                          | data\\d+.txt              | 匹配data1.txt、data12.txt                                                                |\n| \\w                         | 匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)                                            | [A-Za-z_]\\w+             | 匹配任意字母或_加一个或多个字母数字字符(asda,_asda)                                      |\n| \\s                         | 匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)                                               | of\\sthe                  | 匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符) |\n| \\b                         | 匹配任何单词边界(\\B与之相反)                                                                   | \\bThe\\b                  | 匹配of The a，不匹配ofThe a                                                              |\n| \\N                         | 匹配已保存的子组N(与上面(...)配合使用)                                                         | price:\\16                | 匹配price:和前面第16个子组的值                                                           |\n| \\c                         | 逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)              | \\*                       | 匹配*                                                                                    |\n| \\A(\\Z)                     | 匹配字符串的起始(结束)(另见上面的^和$)                                                         | \\ADear                   | 匹配以Dear开头的                                                                         |\n| 扩展表示法                 |                                                                                                |                          |                                                                                          |\n| （?iLmsux）                | 在正则表达式中嵌入一个或多个特殊\"标记\"参数(或者通过函数/方法)                                  | （?x）,(?im)             |                                                                                          |\n| (?:...)                    | 表示一个匹配不用保存的分组                                                                     | (?:\\w+\\.)*             | 匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组                                |\n| (?P<name>...)              | 像一个仅由name标识而不是数字ID标识的正则分组匹配                                               | (?P<data>)               | 给匹配的分组命名为data                                                                   |\n| (?P=name)                  | 在同一个字符串中匹配由(?P<name>)分组之前的文本                                                 | (?P=data)                | 匹配名字为data的串                                                                       |\n| (?#...)                    | 表示注释，所有内容都被忽略                                                                     | (?#comment)              |                                                                                          |\n| (?=...)                    | 匹配条件是如果...出现在之后的位置，而不使用输入字符串；称作正向前视断言                        | (?=.com)                 | 如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串                         |\n| (?!...)                    | 匹配条件是如果...不出现在之后的位置，而不使用输入字符串；称作负向前视断言                      | (?!.net)                 | 如果一个字符串后面不是跟着“.net”，才做匹配操作                                           |\n| (?<=...)                   | 匹配条件是如果...出现在之前的位置，而不使用输入字符串；称作正向后视断言                        | (?<=800-)                | 如果字符串之前为“800-”才做匹配，并不使用任何输入字符串                                   |\n| (?<\\!...)                  | 匹配条件是如果...不出现在之前的位置，而不使用输入字符串；称作负向后视断言                      | (?<\\!192\\\\.168\\\\.)         | 如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串                         |\n| (?(id/name)Y&#124;N        | 如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项 | (?(1)y&#124;x)           | 如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配                                                                                                                                                     |\n以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。\n","source":"_posts/Python正则表达式-一.md","raw":"---\ntitle: Python正则表达式(一)\ndate: 2018-02-09 15:08:05\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\n---\n在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。\n<!--More-->\n\n## 特殊符号和字符\n\n| 表示法                     | 描述                                                                                           | 正则表达式示例           | 备注                                                                                     |\n| :--------------:           | :----------------------------------------------------------------------------:                 | :----------------------: | :----------------------------------------------------:                                   |\n| 符号                       |                                                                                                |                          |                                                                                          |\n| literal                    | 匹配文本字符串的字面值literal                                                                  | foo                      | 只是匹配foo，相当于取等                                                                  |\n| re1&#124; re2              | 匹配正则表达式re1或re2                                                                         | foo&#124; bar            | 匹配foo或者bar，二选一                                                                   |\n| .                          | 匹配任何字符(除了\\n之外)                                                                       | a.a                      | 匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符                                     |\n| ^                          | 匹配字符串起始部分                                                                             | ^Foo                     | 匹配Foo，不匹配aFoo                                                                      |\n| $                          | 匹配字符串终止部分                                                                             | Bar$                     | 只匹配Bar,不匹配aBar等                                                                   |\n| *                          | 匹配0次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]*             | 匹配任意多个字母或数字                                                                   |\n| +                          | 匹配1次或者多次前面出现的正则表达式                                                            | [A-Za-z0-9]+             | 匹配一到多个个字母或数字                                                                 |\n| ?                          | 匹配0次或者1次前面出现的正则表达式                                                             | [A-Za-z0-9]              | 要么有一个字母或数字要么没有                                                             |\n| {N}                        | 匹配N次前面出现的正则表达式                                                                    | [0-9]{3}                 | 匹配三个数字                                                                             |\n| {M,N}                      | 匹配M~N次前面出现的正则表达式                                                                  | [0-9]{5,9}               | 匹配5到9个数字(包括5个和9个)                                                             |\n| [...]                      | 匹配来自字符集的任意单一字符                                                                   | [aeiou]                  | 匹配一个元音字母                                                                         |\n| [..x~y..]                  | 匹配x~y范围内的任意单一字符                                                                    | [A-Za-z]                 | 匹配任意一个英文字母                                                                     |\n| [^...]                     | 不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)                   | [\\^aeiou][\\^A-Za-z0-9]   | 匹配一个非元音字母和一个非字母数字字符                                                   |\n| (*&#124;+&#124;?&#124;{})? | 用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})                                     | .*?[a-z]                 | (非贪婪是指尽可能少的匹配)                                                               |\n| (...)                      | 匹配封闭的正则表达式,然后另存为子组                                                            | f(oo&#124; u)bar         | 匹配foobar,fubar                                                                         |\n| 特殊字符                   |                                                                                                |                          |                                                                                          |\n| \\d                         | 匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)                          | data\\d+.txt              | 匹配data1.txt、data12.txt                                                                |\n| \\w                         | 匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)                                            | [A-Za-z_]\\w+             | 匹配任意字母或_加一个或多个字母数字字符(asda,_asda)                                      |\n| \\s                         | 匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)                                               | of\\sthe                  | 匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符) |\n| \\b                         | 匹配任何单词边界(\\B与之相反)                                                                   | \\bThe\\b                  | 匹配of The a，不匹配ofThe a                                                              |\n| \\N                         | 匹配已保存的子组N(与上面(...)配合使用)                                                         | price:\\16                | 匹配price:和前面第16个子组的值                                                           |\n| \\c                         | 逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)              | \\*                       | 匹配*                                                                                    |\n| \\A(\\Z)                     | 匹配字符串的起始(结束)(另见上面的^和$)                                                         | \\ADear                   | 匹配以Dear开头的                                                                         |\n| 扩展表示法                 |                                                                                                |                          |                                                                                          |\n| （?iLmsux）                | 在正则表达式中嵌入一个或多个特殊\"标记\"参数(或者通过函数/方法)                                  | （?x）,(?im)             |                                                                                          |\n| (?:...)                    | 表示一个匹配不用保存的分组                                                                     | (?:\\w+\\.)*             | 匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组                                |\n| (?P<name>...)              | 像一个仅由name标识而不是数字ID标识的正则分组匹配                                               | (?P<data>)               | 给匹配的分组命名为data                                                                   |\n| (?P=name)                  | 在同一个字符串中匹配由(?P<name>)分组之前的文本                                                 | (?P=data)                | 匹配名字为data的串                                                                       |\n| (?#...)                    | 表示注释，所有内容都被忽略                                                                     | (?#comment)              |                                                                                          |\n| (?=...)                    | 匹配条件是如果...出现在之后的位置，而不使用输入字符串；称作正向前视断言                        | (?=.com)                 | 如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串                         |\n| (?!...)                    | 匹配条件是如果...不出现在之后的位置，而不使用输入字符串；称作负向前视断言                      | (?!.net)                 | 如果一个字符串后面不是跟着“.net”，才做匹配操作                                           |\n| (?<=...)                   | 匹配条件是如果...出现在之前的位置，而不使用输入字符串；称作正向后视断言                        | (?<=800-)                | 如果字符串之前为“800-”才做匹配，并不使用任何输入字符串                                   |\n| (?<\\!...)                  | 匹配条件是如果...不出现在之前的位置，而不使用输入字符串；称作负向后视断言                      | (?<\\!192\\\\.168\\\\.)         | 如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串                         |\n| (?(id/name)Y&#124;N        | 如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项 | (?(1)y&#124;x)           | 如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配                                                                                                                                                     |\n以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。\n","slug":"Python正则表达式-一","published":1,"updated":"2018-02-11T01:04:21.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4f000htwn9al0ws0d2","content":"<p>在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。<br><a id=\"more\"></a></p>\n<h2 id=\"特殊符号和字符\"><a href=\"#特殊符号和字符\" class=\"headerlink\" title=\"特殊符号和字符\"></a>特殊符号和字符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">正则表达式示例</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">literal</td>\n<td style=\"text-align:center\">匹配文本字符串的字面值literal</td>\n<td style=\"text-align:center\">foo</td>\n<td style=\"text-align:center\">只是匹配foo，相当于取等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re1&#124; re2</td>\n<td style=\"text-align:center\">匹配正则表达式re1或re2</td>\n<td style=\"text-align:center\">foo&#124; bar</td>\n<td style=\"text-align:center\">匹配foo或者bar，二选一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">匹配任何字符(除了\\n之外)</td>\n<td style=\"text-align:center\">a.a</td>\n<td style=\"text-align:center\">匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">匹配字符串起始部分</td>\n<td style=\"text-align:center\">^Foo</td>\n<td style=\"text-align:center\">匹配Foo，不匹配aFoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">匹配字符串终止部分</td>\n<td style=\"text-align:center\">Bar$</td>\n<td style=\"text-align:center\">只匹配Bar,不匹配aBar等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配0次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]*</td>\n<td style=\"text-align:center\">匹配任意多个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">匹配1次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]+</td>\n<td style=\"text-align:center\">匹配一到多个个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">匹配0次或者1次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]</td>\n<td style=\"text-align:center\">要么有一个字母或数字要么没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{N}</td>\n<td style=\"text-align:center\">匹配N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{3}</td>\n<td style=\"text-align:center\">匹配三个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{M,N}</td>\n<td style=\"text-align:center\">匹配M~N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{5,9}</td>\n<td style=\"text-align:center\">匹配5到9个数字(包括5个和9个)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[…]</td>\n<td style=\"text-align:center\">匹配来自字符集的任意单一字符</td>\n<td style=\"text-align:center\">[aeiou]</td>\n<td style=\"text-align:center\">匹配一个元音字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[..x~y..]</td>\n<td style=\"text-align:center\">匹配x~y范围内的任意单一字符</td>\n<td style=\"text-align:center\">[A-Za-z]</td>\n<td style=\"text-align:center\">匹配任意一个英文字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^…]</td>\n<td style=\"text-align:center\">不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)</td>\n<td style=\"text-align:center\">[\\^aeiou][\\^A-Za-z0-9]</td>\n<td style=\"text-align:center\">匹配一个非元音字母和一个非字母数字字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(*&#124;+&#124;?&#124;{})?</td>\n<td style=\"text-align:center\">用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})</td>\n<td style=\"text-align:center\">.*?[a-z]</td>\n<td style=\"text-align:center\">(非贪婪是指尽可能少的匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(…)</td>\n<td style=\"text-align:center\">匹配封闭的正则表达式,然后另存为子组</td>\n<td style=\"text-align:center\">f(oo&#124; u)bar</td>\n<td style=\"text-align:center\">匹配foobar,fubar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特殊字符</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)</td>\n<td style=\"text-align:center\">data\\d+.txt</td>\n<td style=\"text-align:center\">匹配data1.txt、data12.txt</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)</td>\n<td style=\"text-align:center\">[A-Za-z_]\\w+</td>\n<td style=\"text-align:center\">匹配任意字母或_加一个或多个字母数字字符(asda,_asda)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)</td>\n<td style=\"text-align:center\">of\\sthe</td>\n<td style=\"text-align:center\">匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">匹配任何单词边界(\\B与之相反)</td>\n<td style=\"text-align:center\">\\bThe\\b</td>\n<td style=\"text-align:center\">匹配of The a，不匹配ofThe a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\N</td>\n<td style=\"text-align:center\">匹配已保存的子组N(与上面(…)配合使用)</td>\n<td style=\"text-align:center\">price:\\16</td>\n<td style=\"text-align:center\">匹配price:和前面第16个子组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\c</td>\n<td style=\"text-align:center\">逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配*</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\A(\\Z)</td>\n<td style=\"text-align:center\">匹配字符串的起始(结束)(另见上面的^和$)</td>\n<td style=\"text-align:center\">\\ADear</td>\n<td style=\"text-align:center\">匹配以Dear开头的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展表示法</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">（?iLmsux）</td>\n<td style=\"text-align:center\">在正则表达式中嵌入一个或多个特殊”标记”参数(或者通过函数/方法)</td>\n<td style=\"text-align:center\">（?x）,(?im)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:…)</td>\n<td style=\"text-align:center\">表示一个匹配不用保存的分组</td>\n<td style=\"text-align:center\">(?:\\w+.)*</td>\n<td style=\"text-align:center\">匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</name></td>\n<td style=\"text-align:center\">像一个仅由name标识而不是数字ID标识的正则分组匹配</td>\n<td style=\"text-align:center\">(?P<data>)</data></td>\n<td style=\"text-align:center\">给匹配的分组命名为data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:center\">在同一个字符串中匹配由(?P<name>)分组之前的文本</name></td>\n<td style=\"text-align:center\">(?P=data)</td>\n<td style=\"text-align:center\">匹配名字为data的串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?#…)</td>\n<td style=\"text-align:center\">表示注释，所有内容都被忽略</td>\n<td style=\"text-align:center\">(?#comment)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td>\n<td style=\"text-align:center\">(?=.com)</td>\n<td style=\"text-align:center\">如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td>\n<td style=\"text-align:center\">(?!.net)</td>\n<td style=\"text-align:center\">如果一个字符串后面不是跟着“.net”，才做匹配操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td>\n<td style=\"text-align:center\">(?&lt;=800-)</td>\n<td style=\"text-align:center\">如果字符串之前为“800-”才做匹配，并不使用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td>\n<td style=\"text-align:center\">(?&lt;!192\\.168\\.)</td>\n<td style=\"text-align:center\">如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?(id/name)Y&#124;N</td>\n<td style=\"text-align:center\">如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项</td>\n<td style=\"text-align:center\">(?(1)y&#124;x)</td>\n<td style=\"text-align:center\">如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配</td>\n</tr>\n</tbody>\n</table>\n<p>以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。</p>\n","site":{"data":{}},"excerpt":"<p>在Python的学习过程中，正则表达式始终是一道绕不过去的坎.无论提取服务器日志文件还是爬取网页，正则表达式始终扮演着至关重要的角色。下面便对自己学习过程中的一些正则表达式基础做一个总结。<br>","more":"</p>\n<h2 id=\"特殊符号和字符\"><a href=\"#特殊符号和字符\" class=\"headerlink\" title=\"特殊符号和字符\"></a>特殊符号和字符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">正则表达式示例</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">literal</td>\n<td style=\"text-align:center\">匹配文本字符串的字面值literal</td>\n<td style=\"text-align:center\">foo</td>\n<td style=\"text-align:center\">只是匹配foo，相当于取等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re1&#124; re2</td>\n<td style=\"text-align:center\">匹配正则表达式re1或re2</td>\n<td style=\"text-align:center\">foo&#124; bar</td>\n<td style=\"text-align:center\">匹配foo或者bar，二选一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">匹配任何字符(除了\\n之外)</td>\n<td style=\"text-align:center\">a.a</td>\n<td style=\"text-align:center\">匹配axa、aaa、aca等，两个a中间可以是除了\\n的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">匹配字符串起始部分</td>\n<td style=\"text-align:center\">^Foo</td>\n<td style=\"text-align:center\">匹配Foo，不匹配aFoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:center\">匹配字符串终止部分</td>\n<td style=\"text-align:center\">Bar$</td>\n<td style=\"text-align:center\">只匹配Bar,不匹配aBar等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配0次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]*</td>\n<td style=\"text-align:center\">匹配任意多个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">匹配1次或者多次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]+</td>\n<td style=\"text-align:center\">匹配一到多个个字母或数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">匹配0次或者1次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[A-Za-z0-9]</td>\n<td style=\"text-align:center\">要么有一个字母或数字要么没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{N}</td>\n<td style=\"text-align:center\">匹配N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{3}</td>\n<td style=\"text-align:center\">匹配三个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{M,N}</td>\n<td style=\"text-align:center\">匹配M~N次前面出现的正则表达式</td>\n<td style=\"text-align:center\">[0-9]{5,9}</td>\n<td style=\"text-align:center\">匹配5到9个数字(包括5个和9个)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[…]</td>\n<td style=\"text-align:center\">匹配来自字符集的任意单一字符</td>\n<td style=\"text-align:center\">[aeiou]</td>\n<td style=\"text-align:center\">匹配一个元音字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[..x~y..]</td>\n<td style=\"text-align:center\">匹配x~y范围内的任意单一字符</td>\n<td style=\"text-align:center\">[A-Za-z]</td>\n<td style=\"text-align:center\">匹配任意一个英文字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^…]</td>\n<td style=\"text-align:center\">不匹配此字符集中出现的任何一个字符，包括某一范围的字符(如果在此字符集中出现)</td>\n<td style=\"text-align:center\">[\\^aeiou][\\^A-Za-z0-9]</td>\n<td style=\"text-align:center\">匹配一个非元音字母和一个非字母数字字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(*&#124;+&#124;?&#124;{})?</td>\n<td style=\"text-align:center\">用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、?、{})</td>\n<td style=\"text-align:center\">.*?[a-z]</td>\n<td style=\"text-align:center\">(非贪婪是指尽可能少的匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(…)</td>\n<td style=\"text-align:center\">匹配封闭的正则表达式,然后另存为子组</td>\n<td style=\"text-align:center\">f(oo&#124; u)bar</td>\n<td style=\"text-align:center\">匹配foobar,fubar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">特殊字符</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配任何十进制数字，与[0-9]一致(\\D和\\d相反，不匹配任何非数值型的数字)</td>\n<td style=\"text-align:center\">data\\d+.txt</td>\n<td style=\"text-align:center\">匹配data1.txt、data12.txt</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字母数字字符，与[A-Za-z0-9]相同(\\W与之相反)</td>\n<td style=\"text-align:center\">[A-Za-z_]\\w+</td>\n<td style=\"text-align:center\">匹配任意字母或_加一个或多个字母数字字符(asda,_asda)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同(\\S与之相反)</td>\n<td style=\"text-align:center\">of\\sthe</td>\n<td style=\"text-align:center\">匹配of the (\\n:换行符&#124;\\t:水平制表符&#124;\\r:回车&#124;\\v:垂直制表符&#124;\\f:换页符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">匹配任何单词边界(\\B与之相反)</td>\n<td style=\"text-align:center\">\\bThe\\b</td>\n<td style=\"text-align:center\">匹配of The a，不匹配ofThe a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\N</td>\n<td style=\"text-align:center\">匹配已保存的子组N(与上面(…)配合使用)</td>\n<td style=\"text-align:center\">price:\\16</td>\n<td style=\"text-align:center\">匹配price:和前面第16个子组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\c</td>\n<td style=\"text-align:center\">逐字匹配任何特殊字符(即仅按字面意义匹配，不包含特殊含义，\\为对特殊字符的转义表示)</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">匹配*</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\A(\\Z)</td>\n<td style=\"text-align:center\">匹配字符串的起始(结束)(另见上面的^和$)</td>\n<td style=\"text-align:center\">\\ADear</td>\n<td style=\"text-align:center\">匹配以Dear开头的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩展表示法</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">（?iLmsux）</td>\n<td style=\"text-align:center\">在正则表达式中嵌入一个或多个特殊”标记”参数(或者通过函数/方法)</td>\n<td style=\"text-align:center\">（?x）,(?im)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?:…)</td>\n<td style=\"text-align:center\">表示一个匹配不用保存的分组</td>\n<td style=\"text-align:center\">(?:\\w+.)*</td>\n<td style=\"text-align:center\">匹配任意多个一个或多个字母数字字符与.的组合但不保存改分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P<name>…)</name></td>\n<td style=\"text-align:center\">像一个仅由name标识而不是数字ID标识的正则分组匹配</td>\n<td style=\"text-align:center\">(?P<data>)</data></td>\n<td style=\"text-align:center\">给匹配的分组命名为data</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:center\">在同一个字符串中匹配由(?P<name>)分组之前的文本</name></td>\n<td style=\"text-align:center\">(?P=data)</td>\n<td style=\"text-align:center\">匹配名字为data的串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?#…)</td>\n<td style=\"text-align:center\">表示注释，所有内容都被忽略</td>\n<td style=\"text-align:center\">(?#comment)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td>\n<td style=\"text-align:center\">(?=.com)</td>\n<td style=\"text-align:center\">如果一个字符串后面跟着“.com”才做匹配操作，并不适用任何目标字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td>\n<td style=\"text-align:center\">(?!.net)</td>\n<td style=\"text-align:center\">如果一个字符串后面不是跟着“.net”，才做匹配操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;=…)</td>\n<td style=\"text-align:center\">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td>\n<td style=\"text-align:center\">(?&lt;=800-)</td>\n<td style=\"text-align:center\">如果字符串之前为“800-”才做匹配，并不使用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?&lt;!…)</td>\n<td style=\"text-align:center\">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td>\n<td style=\"text-align:center\">(?&lt;!192\\.168\\.)</td>\n<td style=\"text-align:center\">如果一个字符串之前不是“192.168.”才做匹配，并不适用任何输入字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?(id/name)Y&#124;N</td>\n<td style=\"text-align:center\">如果分组所提供的id或name(名称)存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N;N是可选项</td>\n<td style=\"text-align:center\">(?(1)y&#124;x)</td>\n<td style=\"text-align:center\">如果一个匹配组1(\\1)存在就y匹配；否则，就与x匹配</td>\n</tr>\n</tbody>\n</table>\n<p>以上为正则表达式的一些基本的符号定义与用法，熟练掌握这些符号是写出高效表达式的基础。</p>"},{"title":"Python正则表达式(三)","date":"2018-02-12T01:55:17.000Z","copyright":true,"_content":"在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。\n<!--More-->\n## 正则表达式\n1. > 识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。\n   ```Python\n   import re\n   mode = re.compile(r'bat|bit|but|hat|hit|hut')\n   #mode  = re.compile(r'[bh][iau]t')\n   strs = ['bat', 'bit', 'but', 'hat', 'hit', 'hut']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'bat'\n   'bit'\n   'but'\n   'hat'\n   'hit'\n   'hut'\n   ```\n\n2. > 匹配由单个空格分隔的任意单词对，也就是姓和名。\n   ```Python\n   import re\n   mode  = re.compile(r'^[A-Za-z]+ [A-Za-z]+$')\n   strs = ['david Bob', 'D.Jone Steven', 'Lucy D May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david Bob'\n   ```\n\n3. > 匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。\n   ```Python\n   import re\n   mode = re.compile(r'[A-Za-z]+,\\s[A-Za-z]+')\n   strs = ['david, Bob', 'D.Jone, Steven', 'Lucy, D, May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david, Bob'\n   'Lucy, D'\n   ```\n\n4. > 匹配所有有效Python 标识符[^1]的集合。\n   ```Python\n   import re\n   mode = re.compile(r'[^0-9][\\w_]+')#用in排除关键字\n   strs = ['1var', 'v_ar', '_var', 'var', 'var_9', 'var_']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'v_ar'\n   '_var'\n   'var'\n   'var_9'\n   'var_'\n   ```\n5. > 根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数\n量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux\nDrive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz\nBoulevard。\n    ```Python\n    import re\n    mode = re.compile(r'^\\d{4}( [A-Z][a-z]+)+$')\n    strs = ['1221 Bordeaux Drive', '54565 Bordeaux Drive', 'Bordeaux Drive', '1221 Bordeaux Drive Drive']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1221 Bordeaux Drive'\n    '1221 Bordeaux Drive Drive'\n    ```\n6. > 匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。\n选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，\nhttp://www.foothill.edu）。\n   ```Python\n   import re\n   mode = re.compile(r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$')\n   strs=['https://www.baidu.com', 'http://www.bilibili.com', 'www.baidu.com', 'baidu.com', 'www.cqupt.edu']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'https://www.baidu.com'\n   'http://www.bilibili.com'\n   'www.baidu.com'\n   'www.cqupt.edu'\n   ```\n7. > 匹配所有能够表示Python 整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]?$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123'\n   '123l'\n   '12312L'\n   ```\n8. > 匹配所有能够表示Python 长整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123l'\n   '12312L'\n   ```\n\n9. > 匹配所有能够表示Python 浮点数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'(0|[1-9]\\d*)(\\.\\d+)?$')\n   strs = ['00.10', '0.123', '12.23', '12', '12.36l']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()   \n\n   #输出结果\n   '0.123'\n   '12.23'\n   '12'\n   ```\n10. > 匹配所有能够表示Python 复数的字符串集。\n    ```Python\n    import re\n    mode = re.compile(r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$')\n    strs = ['12.3+1.2j', '1+2j', '4j']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12.3+1.2j'\n    '1+2j'\n    '4j'\n    ```\n11. > 匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然\n后尝试使它尽可能严谨，不过要保持正确的功能）。\n    ```Python\n    import re\n    mode = re.compile(r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$')\n    strs = ['12345@qq.com', 'sina@163.com', 'qq@sina.com.cn', 'net@21cn.com', 'new123@163.sina.com']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12345@qq.com'\n    'sina@163.com'\n    'qq@sina.com.cn'\n    'net@21cn.com'\n    'new123@163.sina.com'\n    ```\n12. > type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic\n类型的字符串。\n    ```Python\n    import re\n    mode = re.compile(r'<type \\'(.*)\\'>')\n    strs = ['<type \\'int\\'>', '<type \\'float\\'>', '<type \\'builtin_function_or_method\\'>']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group(1)\n\n    #输出结果\n    'int'\n    'float'\n    'builtin_function_or_method'\n    ```\n13. > 处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～\n9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。\n    ```Python\n    import re\n    mode = re.compile(r'1[0-2]')\n    strs = ['10', '11', '12']\n    for s in strs:\n         if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '10'\n    '11'\n    '12'\n    ```\n14. > 创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号\n码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。\n    ```Python\n    import re\n    mode = re.compile(r'\\d{4}-((\\d{6}-\\d{5})|(\\d{4}-\\d{4}-\\d{4}))')\n    strs = ['1234-567890-12345', '1234-5678-8012-3456']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1234-567890-12345'\n    '1234-5678-8012-3456'\n    ```\n[^1]:标识符有字母、数字、下划线组成，但不能由数字开头\n","source":"_posts/Python正则表达式-三.md","raw":"---\ntitle: Python正则表达式(三)\ndate: 2018-02-12 09:55:17\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\n---\n在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。\n<!--More-->\n## 正则表达式\n1. > 识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。\n   ```Python\n   import re\n   mode = re.compile(r'bat|bit|but|hat|hit|hut')\n   #mode  = re.compile(r'[bh][iau]t')\n   strs = ['bat', 'bit', 'but', 'hat', 'hit', 'hut']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'bat'\n   'bit'\n   'but'\n   'hat'\n   'hit'\n   'hut'\n   ```\n\n2. > 匹配由单个空格分隔的任意单词对，也就是姓和名。\n   ```Python\n   import re\n   mode  = re.compile(r'^[A-Za-z]+ [A-Za-z]+$')\n   strs = ['david Bob', 'D.Jone Steven', 'Lucy D May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david Bob'\n   ```\n\n3. > 匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。\n   ```Python\n   import re\n   mode = re.compile(r'[A-Za-z]+,\\s[A-Za-z]+')\n   strs = ['david, Bob', 'D.Jone, Steven', 'Lucy, D, May']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'david, Bob'\n   'Lucy, D'\n   ```\n\n4. > 匹配所有有效Python 标识符[^1]的集合。\n   ```Python\n   import re\n   mode = re.compile(r'[^0-9][\\w_]+')#用in排除关键字\n   strs = ['1var', 'v_ar', '_var', 'var', 'var_9', 'var_']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'v_ar'\n   '_var'\n   'var'\n   'var_9'\n   'var_'\n   ```\n5. > 根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数\n量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux\nDrive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz\nBoulevard。\n    ```Python\n    import re\n    mode = re.compile(r'^\\d{4}( [A-Z][a-z]+)+$')\n    strs = ['1221 Bordeaux Drive', '54565 Bordeaux Drive', 'Bordeaux Drive', '1221 Bordeaux Drive Drive']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1221 Bordeaux Drive'\n    '1221 Bordeaux Drive Drive'\n    ```\n6. > 匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。\n选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，\nhttp://www.foothill.edu）。\n   ```Python\n   import re\n   mode = re.compile(r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$')\n   strs=['https://www.baidu.com', 'http://www.bilibili.com', 'www.baidu.com', 'baidu.com', 'www.cqupt.edu']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   'https://www.baidu.com'\n   'http://www.bilibili.com'\n   'www.baidu.com'\n   'www.cqupt.edu'\n   ```\n7. > 匹配所有能够表示Python 整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]?$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123'\n   '123l'\n   '12312L'\n   ```\n8. > 匹配所有能够表示Python 长整数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'^\\d+[lL]$')\n   strs = ['123', '123l', '12312L']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()\n\n   #输出结果\n   '123l'\n   '12312L'\n   ```\n\n9. > 匹配所有能够表示Python 浮点数的字符串集。\n   ```Python\n   import re\n   mode = re.compile(r'(0|[1-9]\\d*)(\\.\\d+)?$')\n   strs = ['00.10', '0.123', '12.23', '12', '12.36l']\n   for s in strs:\n       if mode.match(s) is not None:mode.match(s).group()   \n\n   #输出结果\n   '0.123'\n   '12.23'\n   '12'\n   ```\n10. > 匹配所有能够表示Python 复数的字符串集。\n    ```Python\n    import re\n    mode = re.compile(r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$')\n    strs = ['12.3+1.2j', '1+2j', '4j']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12.3+1.2j'\n    '1+2j'\n    '4j'\n    ```\n11. > 匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然\n后尝试使它尽可能严谨，不过要保持正确的功能）。\n    ```Python\n    import re\n    mode = re.compile(r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$')\n    strs = ['12345@qq.com', 'sina@163.com', 'qq@sina.com.cn', 'net@21cn.com', 'new123@163.sina.com']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()   \n\n    #输出结果\n    '12345@qq.com'\n    'sina@163.com'\n    'qq@sina.com.cn'\n    'net@21cn.com'\n    'new123@163.sina.com'\n    ```\n12. > type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic\n类型的字符串。\n    ```Python\n    import re\n    mode = re.compile(r'<type \\'(.*)\\'>')\n    strs = ['<type \\'int\\'>', '<type \\'float\\'>', '<type \\'builtin_function_or_method\\'>']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group(1)\n\n    #输出结果\n    'int'\n    'float'\n    'builtin_function_or_method'\n    ```\n13. > 处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～\n9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。\n    ```Python\n    import re\n    mode = re.compile(r'1[0-2]')\n    strs = ['10', '11', '12']\n    for s in strs:\n         if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '10'\n    '11'\n    '12'\n    ```\n14. > 创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号\n码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。\n    ```Python\n    import re\n    mode = re.compile(r'\\d{4}-((\\d{6}-\\d{5})|(\\d{4}-\\d{4}-\\d{4}))')\n    strs = ['1234-567890-12345', '1234-5678-8012-3456']\n    for s in strs:\n        if mode.match(s) is not None:mode.match(s).group()\n\n    #输出结果\n    '1234-567890-12345'\n    '1234-5678-8012-3456'\n    ```\n[^1]:标识符有字母、数字、下划线组成，但不能由数字开头\n","slug":"Python正则表达式-三","published":1,"updated":"2018-02-22T07:38:59.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4f000ktwn9cu8gkity","content":"<p>在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。<br><a id=\"more\"></a></p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ol>\n<li><blockquote>\n<p>识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'bat|bit|but|hat|hit|hut'</span>)</span><br><span class=\"line\"><span class=\"comment\">#mode  = re.compile(r'[bh][iau]t')</span></span><br><span class=\"line\">strs = [<span class=\"string\">'bat'</span>, <span class=\"string\">'bit'</span>, <span class=\"string\">'but'</span>, <span class=\"string\">'hat'</span>, <span class=\"string\">'hit'</span>, <span class=\"string\">'hut'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'bat'</span></span><br><span class=\"line\"><span class=\"string\">'bit'</span></span><br><span class=\"line\"><span class=\"string\">'but'</span></span><br><span class=\"line\"><span class=\"string\">'hat'</span></span><br><span class=\"line\"><span class=\"string\">'hit'</span></span><br><span class=\"line\"><span class=\"string\">'hut'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个空格分隔的任意单词对，也就是姓和名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode  = re.compile(<span class=\"string\">r'^[A-Za-z]+ [A-Za-z]+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david Bob'</span>, <span class=\"string\">'D.Jone Steven'</span>, <span class=\"string\">'Lucy D May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david Bob'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[A-Za-z]+,\\s[A-Za-z]+'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david, Bob'</span>, <span class=\"string\">'D.Jone, Steven'</span>, <span class=\"string\">'Lucy, D, May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david, Bob'</span></span><br><span class=\"line\"><span class=\"string\">'Lucy, D'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有有效Python 标识符<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的集合。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[^0-9][\\w_]+'</span>)<span class=\"comment\">#用in排除关键字</span></span><br><span class=\"line\">strs = [<span class=\"string\">'1var'</span>, <span class=\"string\">'v_ar'</span>, <span class=\"string\">'_var'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'var_9'</span>, <span class=\"string\">'var_'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'v_ar'</span></span><br><span class=\"line\"><span class=\"string\">'_var'</span></span><br><span class=\"line\"><span class=\"string\">'var'</span></span><br><span class=\"line\"><span class=\"string\">'var_9'</span></span><br><span class=\"line\"><span class=\"string\">'var_'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数<br>量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux<br>Drive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz<br>Boulevard。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d&#123;4&#125;( [A-Z][a-z]+)+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1221 Bordeaux Drive'</span>, <span class=\"string\">'54565 Bordeaux Drive'</span>, <span class=\"string\">'Bordeaux Drive'</span>, <span class=\"string\">'1221 Bordeaux Drive Drive'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive'</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive Drive'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。<br>选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，<br><a href=\"http://www.foothill.edu）。\" target=\"_blank\" rel=\"noopener\">http://www.foothill.edu）。</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$'</span>)</span><br><span class=\"line\">strs=[<span class=\"string\">'https://www.baidu.com'</span>, <span class=\"string\">'http://www.bilibili.com'</span>, <span class=\"string\">'www.baidu.com'</span>, <span class=\"string\">'baidu.com'</span>, <span class=\"string\">'www.cqupt.edu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'https://www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'http://www.bilibili.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.cqupt.edu'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 长整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 浮点数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'(0|[1-9]\\d*)(\\.\\d+)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'00.10'</span>, <span class=\"string\">'0.123'</span>, <span class=\"string\">'12.23'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'12.36l'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'0.123'</span></span><br><span class=\"line\"><span class=\"string\">'12.23'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 复数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12.3+1.2j'</span>, <span class=\"string\">'1+2j'</span>, <span class=\"string\">'4j'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12.3+1.2j'</span></span><br><span class=\"line\"><span class=\"string\">'1+2j'</span></span><br><span class=\"line\"><span class=\"string\">'4j'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然<br>后尝试使它尽可能严谨，不过要保持正确的功能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12345@qq.com'</span>, <span class=\"string\">'sina@163.com'</span>, <span class=\"string\">'qq@sina.com.cn'</span>, <span class=\"string\">'net@21cn.com'</span>, <span class=\"string\">'new123@163.sina.com'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12345@qq.com'</span></span><br><span class=\"line\"><span class=\"string\">'sina@163.com'</span></span><br><span class=\"line\"><span class=\"string\">'qq@sina.com.cn'</span></span><br><span class=\"line\"><span class=\"string\">'net@21cn.com'</span></span><br><span class=\"line\"><span class=\"string\">'new123@163.sina.com'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic<br>类型的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'&lt;type \\'(.*)\\'&gt;'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'&lt;type \\'int\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'float\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'builtin_function_or_method\\'&gt;'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'int'</span></span><br><span class=\"line\"><span class=\"string\">'float'</span></span><br><span class=\"line\"><span class=\"string\">'builtin_function_or_method'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～<br>9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'1[0-2]'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'10'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'12'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">     <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'10'</span></span><br><span class=\"line\"><span class=\"string\">'11'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号<br>码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'\\d&#123;4&#125;-((\\d&#123;6&#125;-\\d&#123;5&#125;)|(\\d&#123;4&#125;-\\d&#123;4&#125;-\\d&#123;4&#125;))'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1234-567890-12345'</span>, <span class=\"string\">'1234-5678-8012-3456'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1234-567890-12345'</span></span><br><span class=\"line\"><span class=\"string\">'1234-5678-8012-3456'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">标识符有字母、数字、下划线组成，但不能由数字开头</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>在之前的两篇博文中，已经对正则表达式基本及核心的知识点进行了罗列和总结。而对于正则表达式的使用却缺乏实践。本文将基于《Python核心编程(第三版)》的练习题进行一些练习。<br>","more":"</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ol>\n<li><blockquote>\n<p>识别后续的字符串：“bat”、“bit”、“but”、“hat”、“hit”或者“hut”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'bat|bit|but|hat|hit|hut'</span>)</span><br><span class=\"line\"><span class=\"comment\">#mode  = re.compile(r'[bh][iau]t')</span></span><br><span class=\"line\">strs = [<span class=\"string\">'bat'</span>, <span class=\"string\">'bit'</span>, <span class=\"string\">'but'</span>, <span class=\"string\">'hat'</span>, <span class=\"string\">'hit'</span>, <span class=\"string\">'hut'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'bat'</span></span><br><span class=\"line\"><span class=\"string\">'bit'</span></span><br><span class=\"line\"><span class=\"string\">'but'</span></span><br><span class=\"line\"><span class=\"string\">'hat'</span></span><br><span class=\"line\"><span class=\"string\">'hit'</span></span><br><span class=\"line\"><span class=\"string\">'hut'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个空格分隔的任意单词对，也就是姓和名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode  = re.compile(<span class=\"string\">r'^[A-Za-z]+ [A-Za-z]+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david Bob'</span>, <span class=\"string\">'D.Jone Steven'</span>, <span class=\"string\">'Lucy D May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david Bob'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配由单个逗号和单个空白符分隔的任何单词和单个字母，如姓氏的首字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[A-Za-z]+,\\s[A-Za-z]+'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'david, Bob'</span>, <span class=\"string\">'D.Jone, Steven'</span>, <span class=\"string\">'Lucy, D, May'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'david, Bob'</span></span><br><span class=\"line\"><span class=\"string\">'Lucy, D'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有有效Python 标识符<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的集合。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'[^0-9][\\w_]+'</span>)<span class=\"comment\">#用in排除关键字</span></span><br><span class=\"line\">strs = [<span class=\"string\">'1var'</span>, <span class=\"string\">'v_ar'</span>, <span class=\"string\">'_var'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'var_9'</span>, <span class=\"string\">'var_'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'v_ar'</span></span><br><span class=\"line\"><span class=\"string\">'_var'</span></span><br><span class=\"line\"><span class=\"string\">'var'</span></span><br><span class=\"line\"><span class=\"string\">'var_9'</span></span><br><span class=\"line\"><span class=\"string\">'var_'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>根据读者当地的格式，匹配街道地址（使你的正则表达式足够通用，来匹配任意数<br>量的街道单词，包括类型名称）。例如，美国街道地址使用如下格式：1180 Bordeaux<br>Drive。使你的正则表达式足够灵活，以支持多单词的街道名称，如3120 De la Cruz<br>Boulevard。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d&#123;4&#125;( [A-Z][a-z]+)+$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1221 Bordeaux Drive'</span>, <span class=\"string\">'54565 Bordeaux Drive'</span>, <span class=\"string\">'Bordeaux Drive'</span>, <span class=\"string\">'1221 Bordeaux Drive Drive'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive'</span></span><br><span class=\"line\"><span class=\"string\">'1221 Bordeaux Drive Drive'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配以“www”起始且以“.com”结尾的简单Web 域名；例如，www://www. yahoo.com/。<br>选做题：你的正则表达式也可以支持其他高级域名，如.edu、.net 等（例如，<br><a href=\"http://www.foothill.edu）。\" target=\"_blank\" rel=\"noopener\">http://www.foothill.edu）。</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^(http[s]?://)?www\\.(\\w+\\.)+(com|net|edu)$'</span>)</span><br><span class=\"line\">strs=[<span class=\"string\">'https://www.baidu.com'</span>, <span class=\"string\">'http://www.bilibili.com'</span>, <span class=\"string\">'www.baidu.com'</span>, <span class=\"string\">'baidu.com'</span>, <span class=\"string\">'www.cqupt.edu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'https://www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'http://www.bilibili.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.baidu.com'</span></span><br><span class=\"line\"><span class=\"string\">'www.cqupt.edu'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 长整数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\d+[lL]$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'123'</span>, <span class=\"string\">'123l'</span>, <span class=\"string\">'12312L'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'123l'</span></span><br><span class=\"line\"><span class=\"string\">'12312L'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 浮点数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'(0|[1-9]\\d*)(\\.\\d+)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'00.10'</span>, <span class=\"string\">'0.123'</span>, <span class=\"string\">'12.23'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'12.36l'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'0.123'</span></span><br><span class=\"line\"><span class=\"string\">'12.23'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示Python 复数的字符串集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^((0|[1-9]\\d*)(\\.\\d+)?\\+)?((0|[1-9]\\d*)(\\.\\d+)?j)?$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12.3+1.2j'</span>, <span class=\"string\">'1+2j'</span>, <span class=\"string\">'4j'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12.3+1.2j'</span></span><br><span class=\"line\"><span class=\"string\">'1+2j'</span></span><br><span class=\"line\"><span class=\"string\">'4j'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>匹配所有能够表示有效电子邮件地址的集合（从一个宽松的正则表达式开始，然<br>后尝试使它尽可能严谨，不过要保持正确的功能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'^\\w+@(\\w+\\.)+(com|com\\.cn|net)$'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'12345@qq.com'</span>, <span class=\"string\">'sina@163.com'</span>, <span class=\"string\">'qq@sina.com.cn'</span>, <span class=\"string\">'net@21cn.com'</span>, <span class=\"string\">'new123@163.sina.com'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'12345@qq.com'</span></span><br><span class=\"line\"><span class=\"string\">'sina@163.com'</span></span><br><span class=\"line\"><span class=\"string\">'qq@sina.com.cn'</span></span><br><span class=\"line\"><span class=\"string\">'net@21cn.com'</span></span><br><span class=\"line\"><span class=\"string\">'new123@163.sina.com'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>type()。内置函数type()返回一个类型对象，如下所示，该对象将表示为一个Pythonic<br>类型的字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'&lt;type \\'(.*)\\'&gt;'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'&lt;type \\'int\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'float\\'&gt;'</span>, <span class=\"string\">'&lt;type \\'builtin_function_or_method\\'&gt;'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'int'</span></span><br><span class=\"line\"><span class=\"string\">'float'</span></span><br><span class=\"line\"><span class=\"string\">'builtin_function_or_method'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>处理日期。1.2 节提供了来匹配单个或者两个数字字符串的正则表达式模式，来表示1～<br>9 的月份(0?[1-9])。创建一个正则表达式来表示标准日历中剩余三个月的数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'1[0-2]'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'10'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'12'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">     <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'10'</span></span><br><span class=\"line\"><span class=\"string\">'11'</span></span><br><span class=\"line\"><span class=\"string\">'12'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><blockquote>\n<p>创建一个允许使用连字符的正则表达式，但是仅能用于正确的位置。例如，15 位的信用卡号<br>码使用4-6-5 的模式，表明4 个数字-连字符-6 个数字-连字符-5 个数字；16 位的信用卡号码使用4-4-4-4 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">mode = re.compile(<span class=\"string\">r'\\d&#123;4&#125;-((\\d&#123;6&#125;-\\d&#123;5&#125;)|(\\d&#123;4&#125;-\\d&#123;4&#125;-\\d&#123;4&#125;))'</span>)</span><br><span class=\"line\">strs = [<span class=\"string\">'1234-567890-12345'</span>, <span class=\"string\">'1234-5678-8012-3456'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mode.match(s) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:mode.match(s).group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\"><span class=\"string\">'1234-567890-12345'</span></span><br><span class=\"line\"><span class=\"string\">'1234-5678-8012-3456'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">标识符有字母、数字、下划线组成，但不能由数字开头</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python正则表达式(二)","date":"2018-02-10T13:28:04.000Z","copyright":true,"description":null,"_content":"正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。\n由于个人兴趣和想要专研的方向，在这里将会使用Python [^1] 语言进行描述。\n<!--More-->\n\n## 正则表达式和Python语言\n\n### re模块：核心函数和方法\n| 函数方法                                         | 描述                                                                                                                                        |\n| :-----:                                          | :----:                                                                                                                                      |\n| 仅仅是re函数模块                                 |                                                                                                                                             |\n| compile(pattern, flags=0)                        | 使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象                                                                        |\n| re模块函数和正则表达式对象的方法                 |                                                                                                                                             |\n| match(pattern, string, flags=0)                  | 尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None                                    |\n| search(pattern, string, flags=0)                 | 使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None                                  |\n| findall(pattern, string [,flags])                | 查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表                                                                            |\n| finditer(pattern, string[,flags])                | 与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象                                         |\n| split(pattern, string, max=0)                     | 根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)                  |\n| sub(pattern, repl, string, count=0)              | 使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目） |\n| purge()                                          | 清除隐式编译的正则表达式模式                                                                                                                |\n| 常见的匹配对象方法                               |                                                                                                                                             |\n| group(num=0)                                     | 返回整个匹配对象，或者编号为num的特定子组                                                                                                   |\n| groups(default=None)                             | 返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)                                                                          |\n| groupdict(default=None)                          | 返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)                                        |\n| 常用的模块属性（用于大多数正则表达式函数的标记） |                                                                                                                                             |\n| re.I,re.IGNORECASE                               | 不去分大小写的匹配                                                                                                                          |\n| re.L,re.LOCALE                                   | 根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配                                                                                  |\n| re.M,re.MULTILINE                                | ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾                                                            |\n| re.S,re.DOTALL                                   | \".\"(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示\".\"(点号)能匹配全部字符                                                        |\n| re.X,re.VERBOSE                                  | 通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性                                                                                                                                            |\n\n### 部分方法总结\n\n- *compile(pattern, flags=0)[^2]*\n  >使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以[查阅文档](https://docs.python.org/3/library/re.html?highlight=re#module-re)),标志位通过 （|）合并\n\n- *group(num=0)* 和 *groups(default=None)*\n  >匹配对象[^3]的两个主要方法。 *group()* 要么返回整个匹配对象，要么按要求返回特定子组。 *groups()* 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，*group()* 返回整个匹配，*groups()* 返回一个空元组。\n\n- *match(pattern, string, flags=0)*\n   > *match()* 方法试图从字符串的**起始部分**对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None\n   ``` python\n   #匹配成功\n   m = re.match('foo', 'foo') #模式匹配字符串\n   if m is not None:         #如果匹配成功，就输出匹配内容\n       m.group()\n\n  'foo'                       #输出结果\n\n  #匹配失败\n  m  = re.match('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:           #如果匹配成功，就输出匹配内容\n      m.group()\n\n                              #因为起始字符为'B',所以匹配不成功，无任何输出\n    ```\n\n- *search(pattern, string, flags=0)*\n  > *search()* 的工作方式和 *match()* 相同，不同之处在于 *search()* 会用它的字符串参数在**任意位置**对给定正则表达式模式搜索**第一次**出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。\n  ```python\n  #将上面使用match()方法匹配的串改用search()匹配\n  m = re.search('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:            #如果匹配成功，就输出匹配内容\n      m.group()\n\n  'foo'                        #可以看到就算起始位置未能匹配，也能匹配成功\n  ```\n\n- *findall(pattern, string[,flags])* 和 *finditer(pattern, string[,flags])*\n  > *findall()* 总是返回一个列表，如果没有找到匹配对象，返回一个空列表  \n    *finditer()* 是一个与 *findall()* 类似但更节省内存的变体，*finditer()* 在匹配对象中迭代[^4]\n  ```Python\n  #findall()匹配\n  re.findall('car', 'carry the barcardi to the car') #模式匹配字符串\n\n  ['car', 'car', 'car']                              #返回结果\n\n  #finditer()匹配\n  iter = re.finditer('car', 'carry the barcardi to the car') #模式匹配字符串\n  for i in iter:                                            #遍历迭代器\n      print(i.group())\n\n  #输出结果\n  car\n  car\n  car\n  ```\n\n- *sub(pattern, repl, string, count=0)* 和 *subn(pattern, repl, string, count=0)*\n  > *sub()* 和 *subn()* 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 *sub()* 不同的是，*subn()* 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回\n  ```Python\n  #sub()\n  re.sub('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n\n  'My cat is not only a cat.'                         #输出结果\n\n  #subn()\n  re.subn('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n  ('My cat is not only a cat.', 2)                   #输出结果\n  ```\n\n- *split(pattern, string, max=0)*\n  > 正则表达式对象的 *split()* 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。\n  ```Python\n  re.split(':', 'str1:str2:str3')               #模式匹配字符串\n\n  ['str1', 'str2', 'str3']                      #输出结果，与'str1:str2:str3'.split(':')相同\n\n  #split()复杂用法\n  #使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格\n  #使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串\n  import re\n  DATA = (\n    'Mountain View, CA 94040',\n    'Sunnyvale, CA',\n    'Los Altos, 94023',\n    'Cupertino 95014',\n    'Palo Alto CA',\n  )\n  for datum in DATA:\n      print(re.split(', |(?= (?:\\d{5}|[A-Z]{2})) ', datum))\n\n  #输出结果\n  ['Mountain View', 'CA', '94040']\n  ['Sunnyvale', 'CA']\n  ['Los Altos', '94023']\n  ['Cupertino', '95014']\n  ['Palo Alto', 'CA']\n  ```\n### 符号的使用\n#### `|` 与 `.` 和 `[]`\n  > 包括择一匹配符号`|`、点号`.`，点号不匹配非字符或换行付\\n（即空字符）\n    字符集`[]`中的字符只取其一\n\n#### 重复、特殊字符[^5]以及分组\n  > `?`操作符表示前面的模式出现零次或一次\n  > `+`操作符表示前面的模式出现至少一次\n  > `*`操作符表示前面的模式出现任意次(包括0次)\n  > 分组从左起第一个括号开始算第一个分组\n  ```Python\n  m  = re.match('(\\w(\\w\\w))-(\\d\\d\\d)','abc-123')\n  m.group()                           #完整匹配\n  'abc-123'                           #输出结果\n\n  m.group(1)                          #第一组\n  'abc'                               #输出结果    \n\n  m.group(2)                          #第二组\n  'bc'                                #输出结果\n\n  m.group(3)                          #第三组\n  '123'                               #输出结果\n\n  m.groups()                          #全部子组\n  ('abc', 'bc', '123')                #输出结果\n  ```\n\n[^1]:这里Python指代的是Python3.6.4\n\n[^2]:预编译可以提升执行效率，而 `re.compile()` 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 `match()` 和 `search()` 在执行时编译的正则表达式,还是使用 `compile()` 编译的表达式,在再次使用时都会查询缓存。但使用 `compile()` 同样可以节省查询缓存的时间\n\n[^3]:除了正则表达式对象之外，还有另外一个对象类型：**匹配对象**。这些是成功调用 `match()` 和 `search()` 返回的对象。\n\n[^4]:如果遇到无法调用 `next()`方法，可以使用 `\\_\\_next\\_\\_()`方法代替。\n\n[^5]:特殊字符的详情可以参考[上一篇博文](http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/)\n","source":"_posts/Python正则表达式-二.md","raw":"---\ntitle: Python正则表达式(二)\ndate: 2018-02-10 21:28:04\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 正则表达式\ndescription:\n---\n正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。\n由于个人兴趣和想要专研的方向，在这里将会使用Python [^1] 语言进行描述。\n<!--More-->\n\n## 正则表达式和Python语言\n\n### re模块：核心函数和方法\n| 函数方法                                         | 描述                                                                                                                                        |\n| :-----:                                          | :----:                                                                                                                                      |\n| 仅仅是re函数模块                                 |                                                                                                                                             |\n| compile(pattern, flags=0)                        | 使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象                                                                        |\n| re模块函数和正则表达式对象的方法                 |                                                                                                                                             |\n| match(pattern, string, flags=0)                  | 尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None                                    |\n| search(pattern, string, flags=0)                 | 使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None                                  |\n| findall(pattern, string [,flags])                | 查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表                                                                            |\n| finditer(pattern, string[,flags])                | 与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象                                         |\n| split(pattern, string, max=0)                     | 根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)                  |\n| sub(pattern, repl, string, count=0)              | 使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目） |\n| purge()                                          | 清除隐式编译的正则表达式模式                                                                                                                |\n| 常见的匹配对象方法                               |                                                                                                                                             |\n| group(num=0)                                     | 返回整个匹配对象，或者编号为num的特定子组                                                                                                   |\n| groups(default=None)                             | 返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)                                                                          |\n| groupdict(default=None)                          | 返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)                                        |\n| 常用的模块属性（用于大多数正则表达式函数的标记） |                                                                                                                                             |\n| re.I,re.IGNORECASE                               | 不去分大小写的匹配                                                                                                                          |\n| re.L,re.LOCALE                                   | 根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配                                                                                  |\n| re.M,re.MULTILINE                                | ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾                                                            |\n| re.S,re.DOTALL                                   | \".\"(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示\".\"(点号)能匹配全部字符                                                        |\n| re.X,re.VERBOSE                                  | 通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性                                                                                                                                            |\n\n### 部分方法总结\n\n- *compile(pattern, flags=0)[^2]*\n  >使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以[查阅文档](https://docs.python.org/3/library/re.html?highlight=re#module-re)),标志位通过 （|）合并\n\n- *group(num=0)* 和 *groups(default=None)*\n  >匹配对象[^3]的两个主要方法。 *group()* 要么返回整个匹配对象，要么按要求返回特定子组。 *groups()* 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，*group()* 返回整个匹配，*groups()* 返回一个空元组。\n\n- *match(pattern, string, flags=0)*\n   > *match()* 方法试图从字符串的**起始部分**对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None\n   ``` python\n   #匹配成功\n   m = re.match('foo', 'foo') #模式匹配字符串\n   if m is not None:         #如果匹配成功，就输出匹配内容\n       m.group()\n\n  'foo'                       #输出结果\n\n  #匹配失败\n  m  = re.match('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:           #如果匹配成功，就输出匹配内容\n      m.group()\n\n                              #因为起始字符为'B',所以匹配不成功，无任何输出\n    ```\n\n- *search(pattern, string, flags=0)*\n  > *search()* 的工作方式和 *match()* 相同，不同之处在于 *search()* 会用它的字符串参数在**任意位置**对给定正则表达式模式搜索**第一次**出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。\n  ```python\n  #将上面使用match()方法匹配的串改用search()匹配\n  m = re.search('foo', 'Bfoo') #模式匹配字符串\n  if m is not None:            #如果匹配成功，就输出匹配内容\n      m.group()\n\n  'foo'                        #可以看到就算起始位置未能匹配，也能匹配成功\n  ```\n\n- *findall(pattern, string[,flags])* 和 *finditer(pattern, string[,flags])*\n  > *findall()* 总是返回一个列表，如果没有找到匹配对象，返回一个空列表  \n    *finditer()* 是一个与 *findall()* 类似但更节省内存的变体，*finditer()* 在匹配对象中迭代[^4]\n  ```Python\n  #findall()匹配\n  re.findall('car', 'carry the barcardi to the car') #模式匹配字符串\n\n  ['car', 'car', 'car']                              #返回结果\n\n  #finditer()匹配\n  iter = re.finditer('car', 'carry the barcardi to the car') #模式匹配字符串\n  for i in iter:                                            #遍历迭代器\n      print(i.group())\n\n  #输出结果\n  car\n  car\n  car\n  ```\n\n- *sub(pattern, repl, string, count=0)* 和 *subn(pattern, repl, string, count=0)*\n  > *sub()* 和 *subn()* 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 *sub()* 不同的是，*subn()* 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回\n  ```Python\n  #sub()\n  re.sub('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n\n  'My cat is not only a cat.'                         #输出结果\n\n  #subn()\n  re.subn('car', 'cat', 'My car is not only a car.') #模式匹配字符串\n\n  ('My cat is not only a cat.', 2)                   #输出结果\n  ```\n\n- *split(pattern, string, max=0)*\n  > 正则表达式对象的 *split()* 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。\n  ```Python\n  re.split(':', 'str1:str2:str3')               #模式匹配字符串\n\n  ['str1', 'str2', 'str3']                      #输出结果，与'str1:str2:str3'.split(':')相同\n\n  #split()复杂用法\n  #使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格\n  #使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串\n  import re\n  DATA = (\n    'Mountain View, CA 94040',\n    'Sunnyvale, CA',\n    'Los Altos, 94023',\n    'Cupertino 95014',\n    'Palo Alto CA',\n  )\n  for datum in DATA:\n      print(re.split(', |(?= (?:\\d{5}|[A-Z]{2})) ', datum))\n\n  #输出结果\n  ['Mountain View', 'CA', '94040']\n  ['Sunnyvale', 'CA']\n  ['Los Altos', '94023']\n  ['Cupertino', '95014']\n  ['Palo Alto', 'CA']\n  ```\n### 符号的使用\n#### `|` 与 `.` 和 `[]`\n  > 包括择一匹配符号`|`、点号`.`，点号不匹配非字符或换行付\\n（即空字符）\n    字符集`[]`中的字符只取其一\n\n#### 重复、特殊字符[^5]以及分组\n  > `?`操作符表示前面的模式出现零次或一次\n  > `+`操作符表示前面的模式出现至少一次\n  > `*`操作符表示前面的模式出现任意次(包括0次)\n  > 分组从左起第一个括号开始算第一个分组\n  ```Python\n  m  = re.match('(\\w(\\w\\w))-(\\d\\d\\d)','abc-123')\n  m.group()                           #完整匹配\n  'abc-123'                           #输出结果\n\n  m.group(1)                          #第一组\n  'abc'                               #输出结果    \n\n  m.group(2)                          #第二组\n  'bc'                                #输出结果\n\n  m.group(3)                          #第三组\n  '123'                               #输出结果\n\n  m.groups()                          #全部子组\n  ('abc', 'bc', '123')                #输出结果\n  ```\n\n[^1]:这里Python指代的是Python3.6.4\n\n[^2]:预编译可以提升执行效率，而 `re.compile()` 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 `match()` 和 `search()` 在执行时编译的正则表达式,还是使用 `compile()` 编译的表达式,在再次使用时都会查询缓存。但使用 `compile()` 同样可以节省查询缓存的时间\n\n[^3]:除了正则表达式对象之外，还有另外一个对象类型：**匹配对象**。这些是成功调用 `match()` 和 `search()` 返回的对象。\n\n[^4]:如果遇到无法调用 `next()`方法，可以使用 `\\_\\_next\\_\\_()`方法代替。\n\n[^5]:特殊字符的详情可以参考[上一篇博文](http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/)\n","slug":"Python正则表达式-二","published":1,"updated":"2018-02-11T08:18:55.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4f000ntwn9a39s8p5f","content":"<p>正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。<br>由于个人兴趣和想要专研的方向，在这里将会使用Python <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 语言进行描述。<br><a id=\"more\"></a></p>\n<h2 id=\"正则表达式和Python语言\"><a href=\"#正则表达式和Python语言\" class=\"headerlink\" title=\"正则表达式和Python语言\"></a>正则表达式和Python语言</h2><h3 id=\"re模块：核心函数和方法\"><a href=\"#re模块：核心函数和方法\" class=\"headerlink\" title=\"re模块：核心函数和方法\"></a>re模块：核心函数和方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">仅仅是re函数模块</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compile(pattern, flags=0)</td>\n<td style=\"text-align:center\">使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re模块函数和正则表达式对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">match(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">search(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findall(pattern, string [,flags])</td>\n<td style=\"text-align:center\">查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">finditer(pattern, string[,flags])</td>\n<td style=\"text-align:center\">与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">split(pattern, string, max=0)</td>\n<td style=\"text-align:center\">根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub(pattern, repl, string, count=0)</td>\n<td style=\"text-align:center\">使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">purge()</td>\n<td style=\"text-align:center\">清除隐式编译的正则表达式模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见的匹配对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">group(num=0)</td>\n<td style=\"text-align:center\">返回整个匹配对象，或者编号为num的特定子组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groups(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groupdict(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常用的模块属性（用于大多数正则表达式函数的标记）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.I,re.IGNORECASE</td>\n<td style=\"text-align:center\">不去分大小写的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.L,re.LOCALE</td>\n<td style=\"text-align:center\">根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.M,re.MULTILINE</td>\n<td style=\"text-align:center\">^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.S,re.DOTALL</td>\n<td style=\"text-align:center\">“.”(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示”.”(点号)能匹配全部字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.X,re.VERBOSE</td>\n<td style=\"text-align:center\">通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分方法总结\"><a href=\"#部分方法总结\" class=\"headerlink\" title=\"部分方法总结\"></a>部分方法总结</h3><ul>\n<li><p><em>compile(pattern, flags=0)<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></em></p>\n<blockquote>\n<p>使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以<a href=\"https://docs.python.org/3/library/re.html?highlight=re#module-re\" target=\"_blank\" rel=\"noopener\">查阅文档</a>),标志位通过 （|）合并</p>\n</blockquote>\n</li>\n<li><p><em>group(num=0)</em> 和 <em>groups(default=None)</em></p>\n<blockquote>\n<p>匹配对象<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>的两个主要方法。 <em>group()</em> 要么返回整个匹配对象，要么按要求返回特定子组。 <em>groups()</em> 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，<em>group()</em> 返回整个匹配，<em>groups()</em> 返回一个空元组。</p>\n</blockquote>\n</li>\n<li><p><em>match(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>match()</em> 方法试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#匹配成功</span></span><br><span class=\"line\"> m = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'foo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:         <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">     m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                       <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配失败</span></span><br><span class=\"line\">m  = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:           <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">#因为起始字符为'B',所以匹配不成功，无任何输出</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>search(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>search()</em> 的工作方式和 <em>match()</em> 相同，不同之处在于 <em>search()</em> 会用它的字符串参数在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次</strong>出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将上面使用match()方法匹配的串改用search()匹配</span></span><br><span class=\"line\">m = re.search(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:            <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                        <span class=\"comment\">#可以看到就算起始位置未能匹配，也能匹配成功</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>findall(pattern, string[,flags])</em> 和 <em>finditer(pattern, string[,flags])</em></p>\n<blockquote>\n<p><em>findall()</em> 总是返回一个列表，如果没有找到匹配对象，返回一个空列表<br>  <em>finditer()</em> 是一个与 <em>findall()</em> 类似但更节省内存的变体，<em>finditer()</em> 在匹配对象中迭代<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#findall()匹配</span></span><br><span class=\"line\">re.findall(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>]                              <span class=\"comment\">#返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#finditer()匹配</span></span><br><span class=\"line\">iter = re.finditer(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iter:                                            <span class=\"comment\">#遍历迭代器</span></span><br><span class=\"line\">    print(i.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>sub(pattern, repl, string, count=0)</em> 和 <em>subn(pattern, repl, string, count=0)</em></p>\n<blockquote>\n<p><em>sub()</em> 和 <em>subn()</em> 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 <em>sub()</em> 不同的是，<em>subn()</em> 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sub()</span></span><br><span class=\"line\">re.sub(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'My cat is not only a cat.'</span>                         <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#subn()</span></span><br><span class=\"line\">re.subn(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'My cat is not only a cat.'</span>, <span class=\"number\">2</span>)                   <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>split(pattern, string, max=0)</em></p>\n<blockquote>\n<p>正则表达式对象的 <em>split()</em> 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.split(<span class=\"string\">':'</span>, <span class=\"string\">'str1:str2:str3'</span>)               <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'str1'</span>, <span class=\"string\">'str2'</span>, <span class=\"string\">'str3'</span>]                      <span class=\"comment\">#输出结果，与'str1:str2:str3'.split(':')相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#split()复杂用法</span></span><br><span class=\"line\"><span class=\"comment\">#使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格</span></span><br><span class=\"line\"><span class=\"comment\">#使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">  <span class=\"string\">'Mountain View, CA 94040'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Sunnyvale, CA'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Los Altos, 94023'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Cupertino 95014'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Palo Alto CA'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> datum <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">    print(re.split(<span class=\"string\">', |(?= (?:\\d&#123;5&#125;|[A-Z]&#123;2&#125;)) '</span>, datum))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">[<span class=\"string\">'Mountain View'</span>, <span class=\"string\">'CA'</span>, <span class=\"string\">'94040'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Sunnyvale'</span>, <span class=\"string\">'CA'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Los Altos'</span>, <span class=\"string\">'94023'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Cupertino'</span>, <span class=\"string\">'95014'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Palo Alto'</span>, <span class=\"string\">'CA'</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"符号的使用\"><a href=\"#符号的使用\" class=\"headerlink\" title=\"符号的使用\"></a>符号的使用</h3><h4 id=\"与-和\"><a href=\"#与-和\" class=\"headerlink\" title=\"| 与 . 和 []\"></a><code>|</code> 与 <code>.</code> 和 <code>[]</code></h4><blockquote>\n<p>包括择一匹配符号<code>|</code>、点号<code>.</code>，点号不匹配非字符或换行付\\n（即空字符）<br>    字符集<code>[]</code>中的字符只取其一</p>\n</blockquote>\n<h4 id=\"重复、特殊字符5以及分组\"><a href=\"#重复、特殊字符5以及分组\" class=\"headerlink\" title=\"重复、特殊字符5以及分组\"></a>重复、特殊字符<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>以及分组</h4><blockquote>\n<p><code>?</code>操作符表示前面的模式出现零次或一次<br><code>+</code>操作符表示前面的模式出现至少一次<br><code>*</code>操作符表示前面的模式出现任意次(包括0次)<br>分组从左起第一个括号开始算第一个分组<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m  = re.match(<span class=\"string\">'(\\w(\\w\\w))-(\\d\\d\\d)'</span>,<span class=\"string\">'abc-123'</span>)</span><br><span class=\"line\">m.group()                           <span class=\"comment\">#完整匹配</span></span><br><span class=\"line\"><span class=\"string\">'abc-123'</span>                           <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">1</span>)                          <span class=\"comment\">#第一组</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>                               <span class=\"comment\">#输出结果    </span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">2</span>)                          <span class=\"comment\">#第二组</span></span><br><span class=\"line\"><span class=\"string\">'bc'</span>                                <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">3</span>)                          <span class=\"comment\">#第三组</span></span><br><span class=\"line\"><span class=\"string\">'123'</span>                               <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.groups()                          <span class=\"comment\">#全部子组</span></span><br><span class=\"line\">(<span class=\"string\">'abc'</span>, <span class=\"string\">'bc'</span>, <span class=\"string\">'123'</span>)                <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">这里Python指代的是Python3.6.4</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">预编译可以提升执行效率，而 <code>re.compile()</code> 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 <code>match()</code> 和 <code>search()</code> 在执行时编译的正则表达式,还是使用 <code>compile()</code> 编译的表达式,在再次使用时都会查询缓存。但使用 <code>compile()</code> 同样可以节省查询缓存的时间</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">除了正则表达式对象之外，还有另外一个对象类型：<strong>匹配对象</strong>。这些是成功调用 <code>match()</code> 和 <code>search()</code> 返回的对象。</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li><li id=\"fn:4\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">4.</span><span style=\"display: inline-block; vertical-align: top;\">如果遇到无法调用 <code>next()</code>方法，可以使用 <code>__next__()</code>方法代替。</span><a href=\"#fnref:4\" rev=\"footnote\"> ↩</a></li><li id=\"fn:5\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">5.</span><span style=\"display: inline-block; vertical-align: top;\">特殊字符的详情可以参考<a href=\"http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/\">上一篇博文</a></span><a href=\"#fnref:5\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>正则表达式的匹配规则基本已经在上一篇博文中全部罗列出来了，下面便是结合到具体语言进行学习和练习了。<br>由于个人兴趣和想要专研的方向，在这里将会使用Python <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 语言进行描述。<br>","more":"</p>\n<h2 id=\"正则表达式和Python语言\"><a href=\"#正则表达式和Python语言\" class=\"headerlink\" title=\"正则表达式和Python语言\"></a>正则表达式和Python语言</h2><h3 id=\"re模块：核心函数和方法\"><a href=\"#re模块：核心函数和方法\" class=\"headerlink\" title=\"re模块：核心函数和方法\"></a>re模块：核心函数和方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">仅仅是re函数模块</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compile(pattern, flags=0)</td>\n<td style=\"text-align:center\">使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re模块函数和正则表达式对象的方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">match(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">尝试使用带有可选的标记的正则表达式的模式来匹配字符串，如果匹配成功，就返回匹配对象；如果失败，就返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">search(pattern, string, flags=0)</td>\n<td style=\"text-align:center\">使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象；如果匹配失败，怎返回None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findall(pattern, string [,flags])</td>\n<td style=\"text-align:center\">查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">finditer(pattern, string[,flags])</td>\n<td style=\"text-align:center\">与findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭代器都返回一个匹配对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">split(pattern, string, max=0)</td>\n<td style=\"text-align:center\">根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功的列表，分割最多操作max次(默认分割所有匹配成功的位置)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub(pattern, repl, string, count=0)</td>\n<td style=\"text-align:center\">使用repl替换所有正则表达式的模式在字符串中出现的位置，除非定义count，否则就讲替换所有出现的位置（另见subn()函数，该函数返回替换操作的数目）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">purge()</td>\n<td style=\"text-align:center\">清除隐式编译的正则表达式模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见的匹配对象方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">group(num=0)</td>\n<td style=\"text-align:center\">返回整个匹配对象，或者编号为num的特定子组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groups(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">groupdict(default=None)</td>\n<td style=\"text-align:center\">返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有成功匹配，则返回一个空字典)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常用的模块属性（用于大多数正则表达式函数的标记）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.I,re.IGNORECASE</td>\n<td style=\"text-align:center\">不去分大小写的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.L,re.LOCALE</td>\n<td style=\"text-align:center\">根据所使用的本地语言环境通过\\w、\\w、\\b、\\B、\\s、\\S实现匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.M,re.MULTILINE</td>\n<td style=\"text-align:center\">^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.S,re.DOTALL</td>\n<td style=\"text-align:center\">“.”(点号)通常匹配除了\\n(换行符)之外的所有单个字符：该标记表示”.”(点号)能匹配全部字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">re.X,re.VERBOSE</td>\n<td style=\"text-align:center\">通过反斜线转移，否则所有空格加上#(以及在该行中后续文字)都被忽略，除非在一个字符类中或者允许注释并且提高可读性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部分方法总结\"><a href=\"#部分方法总结\" class=\"headerlink\" title=\"部分方法总结\"></a>部分方法总结</h3><ul>\n<li><p><em>compile(pattern, flags=0)<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></em></p>\n<blockquote>\n<p>使用预编译使用推荐的方式，但不是必须的，可以通过设置标志位(上表已罗列出使用频繁的标记，详情可以<a href=\"https://docs.python.org/3/library/re.html?highlight=re#module-re\" target=\"_blank\" rel=\"noopener\">查阅文档</a>),标志位通过 （|）合并</p>\n</blockquote>\n</li>\n<li><p><em>group(num=0)</em> 和 <em>groups(default=None)</em></p>\n<blockquote>\n<p>匹配对象<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>的两个主要方法。 <em>group()</em> 要么返回整个匹配对象，要么按要求返回特定子组。 <em>groups()</em> 仅返回一个包含唯一或全部子组的元组。如果没有子组的要求，<em>group()</em> 返回整个匹配，<em>groups()</em> 返回一个空元组。</p>\n</blockquote>\n</li>\n<li><p><em>match(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>match()</em> 方法试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，返回一个匹配对象；如果失败就返回None</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#匹配成功</span></span><br><span class=\"line\"> m = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'foo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:         <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">     m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                       <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配失败</span></span><br><span class=\"line\">m  = re.match(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:           <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">#因为起始字符为'B',所以匹配不成功，无任何输出</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>search(pattern, string, flags=0)</em></p>\n<blockquote>\n<p><em>search()</em> 的工作方式和 <em>match()</em> 相同，不同之处在于 <em>search()</em> 会用它的字符串参数在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次</strong>出现的匹配情况。如果搜索到成功的匹配，就返回一个匹配对象；否则，就返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将上面使用match()方法匹配的串改用search()匹配</span></span><br><span class=\"line\">m = re.search(<span class=\"string\">'foo'</span>, <span class=\"string\">'Bfoo'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:            <span class=\"comment\">#如果匹配成功，就输出匹配内容</span></span><br><span class=\"line\">    m.group()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span>                        <span class=\"comment\">#可以看到就算起始位置未能匹配，也能匹配成功</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>findall(pattern, string[,flags])</em> 和 <em>finditer(pattern, string[,flags])</em></p>\n<blockquote>\n<p><em>findall()</em> 总是返回一个列表，如果没有找到匹配对象，返回一个空列表<br>  <em>finditer()</em> 是一个与 <em>findall()</em> 类似但更节省内存的变体，<em>finditer()</em> 在匹配对象中迭代<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#findall()匹配</span></span><br><span class=\"line\">re.findall(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>, <span class=\"string\">'car'</span>]                              <span class=\"comment\">#返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#finditer()匹配</span></span><br><span class=\"line\">iter = re.finditer(<span class=\"string\">'car'</span>, <span class=\"string\">'carry the barcardi to the car'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iter:                                            <span class=\"comment\">#遍历迭代器</span></span><br><span class=\"line\">    print(i.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br><span class=\"line\">car</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>sub(pattern, repl, string, count=0)</em> 和 <em>subn(pattern, repl, string, count=0)</em></p>\n<blockquote>\n<p><em>sub()</em> 和 <em>subn()</em> 用于实现搜索和替换功能。两者都是将某字符串中所有匹配正则表达式的部分进行某种形式的替换。和 <em>sub()</em> 不同的是，<em>subn()</em> 返回一个表示替换的总数，替换后的字符串和表示替换总数的数字一起作为一个拥有两个元素的元组返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sub()</span></span><br><span class=\"line\">re.sub(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'My cat is not only a cat.'</span>                         <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#subn()</span></span><br><span class=\"line\">re.subn(<span class=\"string\">'car'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'My car is not only a car.'</span>) <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'My cat is not only a cat.'</span>, <span class=\"number\">2</span>)                   <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><em>split(pattern, string, max=0)</em></p>\n<blockquote>\n<p>正则表达式对象的 <em>split()</em> 方法和字符串的工作方式类似，但它是基于正则表达式的模式分割字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.split(<span class=\"string\">':'</span>, <span class=\"string\">'str1:str2:str3'</span>)               <span class=\"comment\">#模式匹配字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'str1'</span>, <span class=\"string\">'str2'</span>, <span class=\"string\">'str3'</span>]                      <span class=\"comment\">#输出结果，与'str1:str2:str3'.split(':')相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#split()复杂用法</span></span><br><span class=\"line\"><span class=\"comment\">#使用split()基于逗号分割字符串，如果空格紧跟在5个数字或者两个大写字母之后，就用split()分割该空格</span></span><br><span class=\"line\"><span class=\"comment\">#使用(?=)正向前视断言，不适用输入字符串 而是使用后面的空格作为分割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">DATA = (</span><br><span class=\"line\">  <span class=\"string\">'Mountain View, CA 94040'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Sunnyvale, CA'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Los Altos, 94023'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Cupertino 95014'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Palo Alto CA'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> datum <span class=\"keyword\">in</span> DATA:</span><br><span class=\"line\">    print(re.split(<span class=\"string\">', |(?= (?:\\d&#123;5&#125;|[A-Z]&#123;2&#125;)) '</span>, datum))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">[<span class=\"string\">'Mountain View'</span>, <span class=\"string\">'CA'</span>, <span class=\"string\">'94040'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Sunnyvale'</span>, <span class=\"string\">'CA'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Los Altos'</span>, <span class=\"string\">'94023'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Cupertino'</span>, <span class=\"string\">'95014'</span>]</span><br><span class=\"line\">[<span class=\"string\">'Palo Alto'</span>, <span class=\"string\">'CA'</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"符号的使用\"><a href=\"#符号的使用\" class=\"headerlink\" title=\"符号的使用\"></a>符号的使用</h3><h4 id=\"与-和\"><a href=\"#与-和\" class=\"headerlink\" title=\"| 与 . 和 []\"></a><code>|</code> 与 <code>.</code> 和 <code>[]</code></h4><blockquote>\n<p>包括择一匹配符号<code>|</code>、点号<code>.</code>，点号不匹配非字符或换行付\\n（即空字符）<br>    字符集<code>[]</code>中的字符只取其一</p>\n</blockquote>\n<h4 id=\"重复、特殊字符5以及分组\"><a href=\"#重复、特殊字符5以及分组\" class=\"headerlink\" title=\"重复、特殊字符5以及分组\"></a>重复、特殊字符<sup id=\"fnref:5\"><a href=\"#fn:5\" rel=\"footnote\">5</a></sup>以及分组</h4><blockquote>\n<p><code>?</code>操作符表示前面的模式出现零次或一次<br><code>+</code>操作符表示前面的模式出现至少一次<br><code>*</code>操作符表示前面的模式出现任意次(包括0次)<br>分组从左起第一个括号开始算第一个分组<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m  = re.match(<span class=\"string\">'(\\w(\\w\\w))-(\\d\\d\\d)'</span>,<span class=\"string\">'abc-123'</span>)</span><br><span class=\"line\">m.group()                           <span class=\"comment\">#完整匹配</span></span><br><span class=\"line\"><span class=\"string\">'abc-123'</span>                           <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">1</span>)                          <span class=\"comment\">#第一组</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>                               <span class=\"comment\">#输出结果    </span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">2</span>)                          <span class=\"comment\">#第二组</span></span><br><span class=\"line\"><span class=\"string\">'bc'</span>                                <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.group(<span class=\"number\">3</span>)                          <span class=\"comment\">#第三组</span></span><br><span class=\"line\"><span class=\"string\">'123'</span>                               <span class=\"comment\">#输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.groups()                          <span class=\"comment\">#全部子组</span></span><br><span class=\"line\">(<span class=\"string\">'abc'</span>, <span class=\"string\">'bc'</span>, <span class=\"string\">'123'</span>)                <span class=\"comment\">#输出结果</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">这里Python指代的是Python3.6.4</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">预编译可以提升执行效率，而 <code>re.compile()</code> 方法提供了这个功能。模块函数会对已编译的对象进行缓存，所以无论使用 <code>match()</code> 和 <code>search()</code> 在执行时编译的正则表达式,还是使用 <code>compile()</code> 编译的表达式,在再次使用时都会查询缓存。但使用 <code>compile()</code> 同样可以节省查询缓存的时间</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">除了正则表达式对象之外，还有另外一个对象类型：<strong>匹配对象</strong>。这些是成功调用 <code>match()</code> 和 <code>search()</code> 返回的对象。</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li><li id=\"fn:4\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">4.</span><span style=\"display: inline-block; vertical-align: top;\">如果遇到无法调用 <code>next()</code>方法，可以使用 <code>__next__()</code>方法代替。</span><a href=\"#fnref:4\" rev=\"footnote\"> ↩</a></li><li id=\"fn:5\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">5.</span><span style=\"display: inline-block; vertical-align: top;\">特殊字符的详情可以参考<a href=\"http://coldjune.com/2018/02/09/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%80/\">上一篇博文</a></span><a href=\"#fnref:5\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python网络编程(一)","date":"2018-02-22T07:53:42.000Z","copyright":true,"description":null,"_content":"使用Python的一些模块来创建网络应用程序\n<!--More-->\n## socket()函数模块\n要创建套接字，必须使用`socket.socket()`函数`socket(socket_family, socket_type, protocol = 0)`,其中`socket_family`是 *AF_UNIX*或 *AF_INET*,`socket_type`是 *SOCK_STREAM* 或 *SOCK_DGRAM*。[^1]`protocol`通常省略，默认为0。\n\n* >创建TCP/IP套接字\n\n    ```Python\n    tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ```\n\n* >创建UDP/IP套接字\n\n    ```Python\n   udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    ```\n\n### 套接字对象内接方法\n|         名称         |                                 描述                                  |\n|:--------------------:|:---------------------------------------------------------------------:|\n|   服务器套接字方法   |                                                                       |\n|       s.bind()       |                将地址(主机名、端口号对)绑定到套接字上                 |\n|      s.listen()      |                          设置并启动TCP监听器                          |\n|      s.accept()      |           被动接受TCP客户端连接，一直等待知道连接到达(阻塞)           |\n|   客户端套接字方法   |                                                                       |\n|     s.connect()      |                         主动发起TCP服务器连接                         |\n|    s.connect_ex()    | connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常 |\n|   普通的套接字方法   |                                                                       |\n|       s.recv()       |                              接受TCP消息                              |\n|    s.recv_into()     |                       接受TCP消息到指定的缓冲区                       |\n|       s.send()       |                              发送TCP消息                              |\n|     s.sendall()      |                           完整地发送TCP消息                           |\n|     s.recvfrom()     |                              接受UDP消息                              |\n|  s.recvfrom_into()   |                       接受UDP消息到指定的缓冲区                       |\n|      s.sendto()      |                              发送UDP消息                              |\n|   s.getpeername()    |                      连接到套接字(TCP)的远程地址                      |\n|   s.getsockname()    |                           当前套接字的地址                            |\n|    s.getsockopt()    |                        返回给定套接字选项的值                         |\n|    s.setsockopt()    |                        设置给定套接字选项的值                         |\n|     s.shutdown()     |                               关闭连接                                |\n|      s.close()       |                              关闭套接字                               |\n|      s.detach()      |         在未关闭文件描述符的情况下关闭套接字，返回文件描述符          |\n|      s.ioctl()       |                    控制套接字的模式(仅支持Windows)                    |\n| 面向阻塞的套接字方法 |                                                                       |\n|   s.setblocking()    |                     设置套接字的阻塞或非阻塞模式                      |\n|    s.settimeout()    |                     设置阻塞套接字操作的超时时间                      |\n|    s.gettimeout()    |                     获取阻塞套接字操作的超时时间                      |\n| 面向文件的套接字方法 |                                                                       |\n|      s.fileno()      |                          套接字的文件描述符                           |\n|     s.makefile()     |                      创建与套接字关联的文件对象                       |\n|       数据属性       |                                                                       |\n|       s.family       |                              套接字家族                               |\n|        s.type        |                              套接字类型                               |\n|       s.proto        | 套接字协议                                                                      |\n\n### socket模块属性\n|                    属性名称                     |                                       描述                                       |\n|:-----------------------------------------------:|:--------------------------------------------------------------------------------:|\n|                    数据属性                     |                                                                                  |\n| AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC |                           Python中支持的套接字地址家族                           |\n|               SO_STREAM、SO_DGRAM               |                          套接字类型(TCP=流，UDP=数据报)                          |\n|                    has_ipv6                     |                            指示是否支持IPv6的布尔标记                            |\n|                      异常                       |                                                                                  |\n|                      error                      |                                  套接字相关错误                                  |\n|                     herror                      |                                主机和地址相关错误                                |\n|                    gaierror                     |                                   地址相关错误                                   |\n|                     timeout                     |                                     超时时间                                     |\n|                      函数                       |                                                                                  |\n|                    socket()                     |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|                  socketpair()                   |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|               create_connection()               |            常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象            |\n|                    fromfd()                     |                     以一个打开的文件描述符创建一个套接字对象                     |\n|                      ssl()                      |                通过套接字启动一个安全套接字层连接；不执行证书验证                |\n|                  getaddrinfo()                  |                         获取一个五元组序列形式的地址信息                         |\n|                  getnameinfo()                  |                  给定一个套接字地址，返回(主机名，端口号)二元组                  |\n|                    getfqdn()                    |                                  返回完整的域名                                  |\n|                  gethostname()                  |                                  返回当前主机名                                  |\n|                 gethostbyname()                 |                           将一个主机名映射到它的IP地址                           |\n|               gethostbyname_ex()                |        gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表         |\n|                 gethostbyaddr()                 |         讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组          |\n|                getprotobyname()                 |                       将一个协议名(如‘TCP’)映射到一个数字                        |\n|         getservbyname()/getservbyport()         | 将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的 |\n|                 ntohl()/ntohs()                 |                         将来自网络的整数装换为主机字节序                         |\n|                 htonl()/htons()                 |                         将来自主机的整数转换为网络字节序                         |\n|             inet_aton()/inet_ntoa()             |        将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)        |\n|             inet_pton()/inet_ntop()             |      将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)      |\n|     getdefaulttimeout()/setdefaulttimeout()     | 以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间                                                                                 |\n\n详情参阅[socket模块文档](https://docs.python.org/3/library/socket.html?highlight=socket#module-socket)\n## 创建TCP服务器/客户端\n\n### TCP服务器\n* 下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器\n\n  ```Python\n  ss = socket()                 #创建服务器套接字\n  ss.bind()                     #套接字与地址绑定\n  ss.listen()                   #监听连接\n  inf_loop:                     #服务器无线循环\n      cs = ss.accept()          #接受客户端连接\n      comm_loop:                #通信循环\n          cs.recv()/cs.send()   #对话(接收/发送)\n      cs.close()                #关闭客户端套接字\n  ss.close()                    #关闭服务器套接字\n  ```\n\n* TCP时间戳服务器\n\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的所有属性\n  from socket import *\n  from time import ctime\n\n  # HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址\n  # 选择一个随机的端口号\n  # 缓冲区大小为1KB\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP服务套接字\n  # 将套接字绑定到服务器地址\n  # 开启TCP的监听调用\n  # listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数\n  tcpSerSock = socket(AF_INET, SOCK_STREAM)\n  tcpSerSock.bind(ADDR)\n  tcpSerSock.listen(5)\n\n  while True:\n      # 服务器循环，等待客户端的连接的连接\n      print('waiting for connection...')\n      tcpCliSock, addr = tcpSerSock.accept()\n      print('...connected from:', addr)\n\n      while True:\n          # 当一个连接请求出现时，进入对话循环，接收消息\n          data = tcpCliSock.recv(BUFSIZE)\n          if not data:\n              # 当消息为空时，退出对话循环\n              # 关闭客户端连接，等待下一个连接请求\n              break\n          tcpCliSock.send(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n      tcpCliSock.close()\n\n  ```\n### TCP客户端\n\n* 下面是TCP客户端的通用伪码\n\n  ```Python\n  cs = socket()           #创建客户端套接字\n  cs.connect()            #尝试连接服务器\n  comm_loop:              #通信循环\n      cs.send()/cs.recv   #对话(发送/接收)\n  cs.close()              #关闭客户端套接字\n  ```\n\n* TCP时间戳客户端\n\n  ```Python\n  #!usr/bin/python3\n  # -*- coding: UTF-8 -*-\n\n  # 导入socket模块所有属性\n  from socket import *\n\n  # 服务器的主机名\n  # 服务器的端口号,应与服务器设置的完全相同\n  # 缓冲区大小为1KB\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP客户端套接字\n  # 主动调用并连接到服务器\n  tcpCliSock = socket(AF_INET, SOCK_STREAM)\n  tcpCliSock.connect(ADDR)\n\n  while True:\n      # 无限循环，输入消息\n      data = bytes(input('> '), 'utf-8')\n      if not data:\n          # 消息为空则退出循环\n          break\n      # 发送输入的信息\n      # 接收服务器返回的信息，最后打印\n      tcpCliSock.send(data)\n      data = tcpCliSock.recv(BUFSIZE)\n      if not data:\n          # 消息为空则退出循环\n          break\n      print(data.decode('utf-8'))\n  # 关闭客户端\n  tcpCliSock.close()\n  ```\n\n### TCP服务器和客户端运行结果\n  \n  在运行程序时，必须 **首先运行服务器** 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。\n  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求\n\n* 服务器运行结果\n \n  ```\n  waiting for connection...\n  ...connected from: ('127.0.0.1', 53220)\n  waiting for connection...\n  ```\n\n* 客户端运行结果\n \n  ```\n  > hello\n  [Fri Feb 23 14:22:58 2018] hello\n  > hi\n  [Fri Feb 23 14:23:02 2018] hi\n  > hello world\n  [Fri Feb 23 14:23:09 2018] hello world\n  >\n  Process finished with exit code 0\n  ```\n\n## 创建UDP服务器/客户端\n\n### UDP服务器\n\n* 下面是UDP服务器的伪码\n  \n  ```Python\n  ss = socket()                           #创建服务器套接字\n  ss.bind()                               #绑定服务器套接字\n  inf_loop:                               #服务器无线循环\n      cs = ss.recvfrom()/ss.sendto()      #关闭(接收/发送)\n  ss.close()                              #关闭服务器套接字\n  ```\n\n* UDP时间戳服务器\n  \n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的全部属性\n  from socket import *\n  from time import ctime\n\n  # 与TCP相同，由于是无连接，所以没有调用监听传入连接\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpSerSock = socket(AF_INET, SOCK_DGRAM)\n  udpSerSock.bind(ADDR)\n\n  while True:\n      # 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息\n      print('waiting for message...')\n      data, addr = udpSerSock.recvfrom(BUFSIZE)\n      udpSerSock.sendto(bytes('[%s] %s' % (\n          ctime(), data.decode('utf-8')), 'utf-8'), addr)\n      print('...received from and returned to:', addr)\n\n  ```\n\n### UDP客户端\n\n* 下面是客户端的伪码\n\n  ```Python\n  cs = socket()                         #创建客户端套接字\n  comm_loop:                            #通信循环\n      cs.sendto()/cs.recvfrom()         #对话(发送/接收)\n  cs.close()                            #关闭客户端套接字\n  ```\n\n* UDP时间戳客户端\n\n ```Python\n #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  from socket import *\n\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpClienSock = socket(AF_INET, SOCK_DGRAM)\n\n  while True:\n      data = bytes(input('>'), 'utf-8')\n      if not data:\n          break\n      udpClienSock.sendto(data, ADDR)\n      data, ADDR = udpClienSock.recvfrom(BUFSIZE)\n      if not data:\n          break\n      print(data.decode('utf-8'))\n  udpClienSock.close()\n\n ```\n\n### UDP服务器和客户端运行结果\n\n  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理\n\n* 服务器运行结果\n\n  ```\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ```\n\n* 客户端运行结果\n\n  ```\n  >hello\n  [Fri Feb 23 15:23:57 2018] hello\n  >hi\n  [Fri Feb 23 15:24:03 2018] hi\n  >\n\n  Process finished with exit code 0\n  ```\n\n[^1]: *AF_UNIX* 是基于文件的套接字，代表 *地址家族(address family):UNIX*，*AF_INET* 是基于网络的套接字，代表 *地址家族：因特网*， *AF_INET6* 用于底6版因特网协议(IPv6)寻址。 *SOCK_STREAM* 表示面向连接的TCP套接字， *SOCK_DGRAM* 代表无连接的UDP套接字。\n","source":"_posts/Python网络编程-一.md","raw":"---\ntitle: Python网络编程(一)\ndate: 2018-02-22 15:53:42\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 网络编程\ndescription:\n---\n使用Python的一些模块来创建网络应用程序\n<!--More-->\n## socket()函数模块\n要创建套接字，必须使用`socket.socket()`函数`socket(socket_family, socket_type, protocol = 0)`,其中`socket_family`是 *AF_UNIX*或 *AF_INET*,`socket_type`是 *SOCK_STREAM* 或 *SOCK_DGRAM*。[^1]`protocol`通常省略，默认为0。\n\n* >创建TCP/IP套接字\n\n    ```Python\n    tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ```\n\n* >创建UDP/IP套接字\n\n    ```Python\n   udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    ```\n\n### 套接字对象内接方法\n|         名称         |                                 描述                                  |\n|:--------------------:|:---------------------------------------------------------------------:|\n|   服务器套接字方法   |                                                                       |\n|       s.bind()       |                将地址(主机名、端口号对)绑定到套接字上                 |\n|      s.listen()      |                          设置并启动TCP监听器                          |\n|      s.accept()      |           被动接受TCP客户端连接，一直等待知道连接到达(阻塞)           |\n|   客户端套接字方法   |                                                                       |\n|     s.connect()      |                         主动发起TCP服务器连接                         |\n|    s.connect_ex()    | connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常 |\n|   普通的套接字方法   |                                                                       |\n|       s.recv()       |                              接受TCP消息                              |\n|    s.recv_into()     |                       接受TCP消息到指定的缓冲区                       |\n|       s.send()       |                              发送TCP消息                              |\n|     s.sendall()      |                           完整地发送TCP消息                           |\n|     s.recvfrom()     |                              接受UDP消息                              |\n|  s.recvfrom_into()   |                       接受UDP消息到指定的缓冲区                       |\n|      s.sendto()      |                              发送UDP消息                              |\n|   s.getpeername()    |                      连接到套接字(TCP)的远程地址                      |\n|   s.getsockname()    |                           当前套接字的地址                            |\n|    s.getsockopt()    |                        返回给定套接字选项的值                         |\n|    s.setsockopt()    |                        设置给定套接字选项的值                         |\n|     s.shutdown()     |                               关闭连接                                |\n|      s.close()       |                              关闭套接字                               |\n|      s.detach()      |         在未关闭文件描述符的情况下关闭套接字，返回文件描述符          |\n|      s.ioctl()       |                    控制套接字的模式(仅支持Windows)                    |\n| 面向阻塞的套接字方法 |                                                                       |\n|   s.setblocking()    |                     设置套接字的阻塞或非阻塞模式                      |\n|    s.settimeout()    |                     设置阻塞套接字操作的超时时间                      |\n|    s.gettimeout()    |                     获取阻塞套接字操作的超时时间                      |\n| 面向文件的套接字方法 |                                                                       |\n|      s.fileno()      |                          套接字的文件描述符                           |\n|     s.makefile()     |                      创建与套接字关联的文件对象                       |\n|       数据属性       |                                                                       |\n|       s.family       |                              套接字家族                               |\n|        s.type        |                              套接字类型                               |\n|       s.proto        | 套接字协议                                                                      |\n\n### socket模块属性\n|                    属性名称                     |                                       描述                                       |\n|:-----------------------------------------------:|:--------------------------------------------------------------------------------:|\n|                    数据属性                     |                                                                                  |\n| AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC |                           Python中支持的套接字地址家族                           |\n|               SO_STREAM、SO_DGRAM               |                          套接字类型(TCP=流，UDP=数据报)                          |\n|                    has_ipv6                     |                            指示是否支持IPv6的布尔标记                            |\n|                      异常                       |                                                                                  |\n|                      error                      |                                  套接字相关错误                                  |\n|                     herror                      |                                主机和地址相关错误                                |\n|                    gaierror                     |                                   地址相关错误                                   |\n|                     timeout                     |                                     超时时间                                     |\n|                      函数                       |                                                                                  |\n|                    socket()                     |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|                  socketpair()                   |         以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象          |\n|               create_connection()               |            常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象            |\n|                    fromfd()                     |                     以一个打开的文件描述符创建一个套接字对象                     |\n|                      ssl()                      |                通过套接字启动一个安全套接字层连接；不执行证书验证                |\n|                  getaddrinfo()                  |                         获取一个五元组序列形式的地址信息                         |\n|                  getnameinfo()                  |                  给定一个套接字地址，返回(主机名，端口号)二元组                  |\n|                    getfqdn()                    |                                  返回完整的域名                                  |\n|                  gethostname()                  |                                  返回当前主机名                                  |\n|                 gethostbyname()                 |                           将一个主机名映射到它的IP地址                           |\n|               gethostbyname_ex()                |        gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表         |\n|                 gethostbyaddr()                 |         讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组          |\n|                getprotobyname()                 |                       将一个协议名(如‘TCP’)映射到一个数字                        |\n|         getservbyname()/getservbyport()         | 将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的 |\n|                 ntohl()/ntohs()                 |                         将来自网络的整数装换为主机字节序                         |\n|                 htonl()/htons()                 |                         将来自主机的整数转换为网络字节序                         |\n|             inet_aton()/inet_ntoa()             |        将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)        |\n|             inet_pton()/inet_ntop()             |      将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)      |\n|     getdefaulttimeout()/setdefaulttimeout()     | 以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间                                                                                 |\n\n详情参阅[socket模块文档](https://docs.python.org/3/library/socket.html?highlight=socket#module-socket)\n## 创建TCP服务器/客户端\n\n### TCP服务器\n* 下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器\n\n  ```Python\n  ss = socket()                 #创建服务器套接字\n  ss.bind()                     #套接字与地址绑定\n  ss.listen()                   #监听连接\n  inf_loop:                     #服务器无线循环\n      cs = ss.accept()          #接受客户端连接\n      comm_loop:                #通信循环\n          cs.recv()/cs.send()   #对话(接收/发送)\n      cs.close()                #关闭客户端套接字\n  ss.close()                    #关闭服务器套接字\n  ```\n\n* TCP时间戳服务器\n\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的所有属性\n  from socket import *\n  from time import ctime\n\n  # HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址\n  # 选择一个随机的端口号\n  # 缓冲区大小为1KB\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP服务套接字\n  # 将套接字绑定到服务器地址\n  # 开启TCP的监听调用\n  # listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数\n  tcpSerSock = socket(AF_INET, SOCK_STREAM)\n  tcpSerSock.bind(ADDR)\n  tcpSerSock.listen(5)\n\n  while True:\n      # 服务器循环，等待客户端的连接的连接\n      print('waiting for connection...')\n      tcpCliSock, addr = tcpSerSock.accept()\n      print('...connected from:', addr)\n\n      while True:\n          # 当一个连接请求出现时，进入对话循环，接收消息\n          data = tcpCliSock.recv(BUFSIZE)\n          if not data:\n              # 当消息为空时，退出对话循环\n              # 关闭客户端连接，等待下一个连接请求\n              break\n          tcpCliSock.send(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n      tcpCliSock.close()\n\n  ```\n### TCP客户端\n\n* 下面是TCP客户端的通用伪码\n\n  ```Python\n  cs = socket()           #创建客户端套接字\n  cs.connect()            #尝试连接服务器\n  comm_loop:              #通信循环\n      cs.send()/cs.recv   #对话(发送/接收)\n  cs.close()              #关闭客户端套接字\n  ```\n\n* TCP时间戳客户端\n\n  ```Python\n  #!usr/bin/python3\n  # -*- coding: UTF-8 -*-\n\n  # 导入socket模块所有属性\n  from socket import *\n\n  # 服务器的主机名\n  # 服务器的端口号,应与服务器设置的完全相同\n  # 缓冲区大小为1KB\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  # 分配了TCP客户端套接字\n  # 主动调用并连接到服务器\n  tcpCliSock = socket(AF_INET, SOCK_STREAM)\n  tcpCliSock.connect(ADDR)\n\n  while True:\n      # 无限循环，输入消息\n      data = bytes(input('> '), 'utf-8')\n      if not data:\n          # 消息为空则退出循环\n          break\n      # 发送输入的信息\n      # 接收服务器返回的信息，最后打印\n      tcpCliSock.send(data)\n      data = tcpCliSock.recv(BUFSIZE)\n      if not data:\n          # 消息为空则退出循环\n          break\n      print(data.decode('utf-8'))\n  # 关闭客户端\n  tcpCliSock.close()\n  ```\n\n### TCP服务器和客户端运行结果\n  \n  在运行程序时，必须 **首先运行服务器** 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。\n  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求\n\n* 服务器运行结果\n \n  ```\n  waiting for connection...\n  ...connected from: ('127.0.0.1', 53220)\n  waiting for connection...\n  ```\n\n* 客户端运行结果\n \n  ```\n  > hello\n  [Fri Feb 23 14:22:58 2018] hello\n  > hi\n  [Fri Feb 23 14:23:02 2018] hi\n  > hello world\n  [Fri Feb 23 14:23:09 2018] hello world\n  >\n  Process finished with exit code 0\n  ```\n\n## 创建UDP服务器/客户端\n\n### UDP服务器\n\n* 下面是UDP服务器的伪码\n  \n  ```Python\n  ss = socket()                           #创建服务器套接字\n  ss.bind()                               #绑定服务器套接字\n  inf_loop:                               #服务器无线循环\n      cs = ss.recvfrom()/ss.sendto()      #关闭(接收/发送)\n  ss.close()                              #关闭服务器套接字\n  ```\n\n* UDP时间戳服务器\n  \n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 导入socket模块和time.ctime()的全部属性\n  from socket import *\n  from time import ctime\n\n  # 与TCP相同，由于是无连接，所以没有调用监听传入连接\n  HOST = ''\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpSerSock = socket(AF_INET, SOCK_DGRAM)\n  udpSerSock.bind(ADDR)\n\n  while True:\n      # 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息\n      print('waiting for message...')\n      data, addr = udpSerSock.recvfrom(BUFSIZE)\n      udpSerSock.sendto(bytes('[%s] %s' % (\n          ctime(), data.decode('utf-8')), 'utf-8'), addr)\n      print('...received from and returned to:', addr)\n\n  ```\n\n### UDP客户端\n\n* 下面是客户端的伪码\n\n  ```Python\n  cs = socket()                         #创建客户端套接字\n  comm_loop:                            #通信循环\n      cs.sendto()/cs.recvfrom()         #对话(发送/接收)\n  cs.close()                            #关闭客户端套接字\n  ```\n\n* UDP时间戳客户端\n\n ```Python\n #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  from socket import *\n\n  HOST = '127.0.0.1'\n  PORT = 12345\n  BUFSIZE = 1024\n  ADDR = (HOST, PORT)\n\n  udpClienSock = socket(AF_INET, SOCK_DGRAM)\n\n  while True:\n      data = bytes(input('>'), 'utf-8')\n      if not data:\n          break\n      udpClienSock.sendto(data, ADDR)\n      data, ADDR = udpClienSock.recvfrom(BUFSIZE)\n      if not data:\n          break\n      print(data.decode('utf-8'))\n  udpClienSock.close()\n\n ```\n\n### UDP服务器和客户端运行结果\n\n  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理\n\n* 服务器运行结果\n\n  ```\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ...received from and returned to: ('127.0.0.1', 51434)\n  waiting for message...\n  ```\n\n* 客户端运行结果\n\n  ```\n  >hello\n  [Fri Feb 23 15:23:57 2018] hello\n  >hi\n  [Fri Feb 23 15:24:03 2018] hi\n  >\n\n  Process finished with exit code 0\n  ```\n\n[^1]: *AF_UNIX* 是基于文件的套接字，代表 *地址家族(address family):UNIX*，*AF_INET* 是基于网络的套接字，代表 *地址家族：因特网*， *AF_INET6* 用于底6版因特网协议(IPv6)寻址。 *SOCK_STREAM* 表示面向连接的TCP套接字， *SOCK_DGRAM* 代表无连接的UDP套接字。\n","slug":"Python网络编程-一","published":1,"updated":"2018-02-26T00:30:48.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4f000rtwn90iaff7y5","content":"<p>使用Python的一些模块来创建网络应用程序<br><a id=\"more\"></a></p>\n<h2 id=\"socket-函数模块\"><a href=\"#socket-函数模块\" class=\"headerlink\" title=\"socket()函数模块\"></a>socket()函数模块</h2><p>要创建套接字，必须使用<code>socket.socket()</code>函数<code>socket(socket_family, socket_type, protocol = 0)</code>,其中<code>socket_family</code>是 <em>AF_UNIX</em>或 <em>AF_INET</em>,<code>socket_type</code>是 <em>SOCK_STREAM</em> 或 <em>SOCK_DGRAM</em>。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup><code>protocol</code>通常省略，默认为0。</p>\n<ul>\n<li><blockquote>\n<p>创建TCP/IP套接字</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n</li>\n<li><blockquote>\n<p>创建UDP/IP套接字</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"套接字对象内接方法\"><a href=\"#套接字对象内接方法\" class=\"headerlink\" title=\"套接字对象内接方法\"></a>套接字对象内接方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">服务器套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.bind()</td>\n<td style=\"text-align:center\">将地址(主机名、端口号对)绑定到套接字上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen()</td>\n<td style=\"text-align:center\">设置并启动TCP监听器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">被动接受TCP客户端连接，一直等待知道连接到达(阻塞)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">客户端套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect()</td>\n<td style=\"text-align:center\">主动发起TCP服务器连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex()</td>\n<td style=\"text-align:center\">connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv()</td>\n<td style=\"text-align:center\">接受TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv_into()</td>\n<td style=\"text-align:center\">接受TCP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send()</td>\n<td style=\"text-align:center\">发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall()</td>\n<td style=\"text-align:center\">完整地发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom()</td>\n<td style=\"text-align:center\">接受UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom_into()</td>\n<td style=\"text-align:center\">接受UDP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto()</td>\n<td style=\"text-align:center\">发送UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getpeername()</td>\n<td style=\"text-align:center\">连接到套接字(TCP)的远程地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockname()</td>\n<td style=\"text-align:center\">当前套接字的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockopt()</td>\n<td style=\"text-align:center\">返回给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setsockopt()</td>\n<td style=\"text-align:center\">设置给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.shutdown()</td>\n<td style=\"text-align:center\">关闭连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.detach()</td>\n<td style=\"text-align:center\">在未关闭文件描述符的情况下关闭套接字，返回文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.ioctl()</td>\n<td style=\"text-align:center\">控制套接字的模式(仅支持Windows)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向阻塞的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setblocking()</td>\n<td style=\"text-align:center\">设置套接字的阻塞或非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.settimeout()</td>\n<td style=\"text-align:center\">设置阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.gettimeout()</td>\n<td style=\"text-align:center\">获取阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向文件的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.fileno()</td>\n<td style=\"text-align:center\">套接字的文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.makefile()</td>\n<td style=\"text-align:center\">创建与套接字关联的文件对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.family</td>\n<td style=\"text-align:center\">套接字家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.type</td>\n<td style=\"text-align:center\">套接字类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.proto</td>\n<td style=\"text-align:center\">套接字协议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socket模块属性\"><a href=\"#socket模块属性\" class=\"headerlink\" title=\"socket模块属性\"></a>socket模块属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC</td>\n<td style=\"text-align:center\">Python中支持的套接字地址家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SO_STREAM、SO_DGRAM</td>\n<td style=\"text-align:center\">套接字类型(TCP=流，UDP=数据报)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has_ipv6</td>\n<td style=\"text-align:center\">指示是否支持IPv6的布尔标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">套接字相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">herror</td>\n<td style=\"text-align:center\">主机和地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gaierror</td>\n<td style=\"text-align:center\">地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socketpair()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">create_connection()</td>\n<td style=\"text-align:center\">常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fromfd()</td>\n<td style=\"text-align:center\">以一个打开的文件描述符创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ssl()</td>\n<td style=\"text-align:center\">通过套接字启动一个安全套接字层连接；不执行证书验证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getaddrinfo()</td>\n<td style=\"text-align:center\">获取一个五元组序列形式的地址信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getnameinfo()</td>\n<td style=\"text-align:center\">给定一个套接字地址，返回(主机名，端口号)二元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getfqdn()</td>\n<td style=\"text-align:center\">返回完整的域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostname()</td>\n<td style=\"text-align:center\">返回当前主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname()</td>\n<td style=\"text-align:center\">将一个主机名映射到它的IP地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname_ex()</td>\n<td style=\"text-align:center\">gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyaddr()</td>\n<td style=\"text-align:center\">讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getprotobyname()</td>\n<td style=\"text-align:center\">将一个协议名(如‘TCP’)映射到一个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getservbyname()/getservbyport()</td>\n<td style=\"text-align:center\">将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ntohl()/ntohs()</td>\n<td style=\"text-align:center\">将来自网络的整数装换为主机字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htonl()/htons()</td>\n<td style=\"text-align:center\">将来自主机的整数转换为网络字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_aton()/inet_ntoa()</td>\n<td style=\"text-align:center\">将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_pton()/inet_ntop()</td>\n<td style=\"text-align:center\">将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getdefaulttimeout()/setdefaulttimeout()</td>\n<td style=\"text-align:center\">以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间</td>\n</tr>\n</tbody>\n</table>\n<p>详情参阅<a href=\"https://docs.python.org/3/library/socket.html?highlight=socket#module-socket\" target=\"_blank\" rel=\"noopener\">socket模块文档</a></p>\n<h2 id=\"创建TCP服务器-客户端\"><a href=\"#创建TCP服务器-客户端\" class=\"headerlink\" title=\"创建TCP服务器/客户端\"></a>创建TCP服务器/客户端</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><ul>\n<li><p>下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                 <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                     <span class=\"comment\">#套接字与地址绑定</span></span><br><span class=\"line\">ss.listen()                   <span class=\"comment\">#监听连接</span></span><br><span class=\"line\">inf_loop:                     <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.accept()          <span class=\"comment\">#接受客户端连接</span></span><br><span class=\"line\">    comm_loop:                <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">        cs.recv()/cs.send()   <span class=\"comment\">#对话(接收/发送)</span></span><br><span class=\"line\">    cs.close()                <span class=\"comment\">#关闭客户端套接字</span></span><br><span class=\"line\">ss.close()                    <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 选择一个随机的端口号</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP服务套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 将套接字绑定到服务器地址</span></span><br><span class=\"line\"><span class=\"comment\"># 开启TCP的监听调用</span></span><br><span class=\"line\"><span class=\"comment\"># listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数</span></span><br><span class=\"line\">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpSerSock.bind(ADDR)</span><br><span class=\"line\">tcpSerSock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 服务器循环，等待客户端的连接的连接</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class=\"line\">    print(<span class=\"string\">'...connected from:'</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 当一个连接请求出现时，进入对话循环，接收消息</span></span><br><span class=\"line\">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># 当消息为空时，退出对话循环</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭客户端连接，等待下一个连接请求</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        tcpCliSock.send(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><ul>\n<li><p>下面是TCP客户端的通用伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()           <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">cs.connect()            <span class=\"comment\">#尝试连接服务器</span></span><br><span class=\"line\">comm_loop:              <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.send()/cs.recv   <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()              <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器的主机名</span></span><br><span class=\"line\"><span class=\"comment\"># 服务器的端口号,应与服务器设置的完全相同</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP客户端套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 主动调用并连接到服务器</span></span><br><span class=\"line\">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpCliSock.connect(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 无限循环，输入消息</span></span><br><span class=\"line\">    data = bytes(input(<span class=\"string\">'&gt; '</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送输入的信息</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收服务器返回的信息，最后打印</span></span><br><span class=\"line\">    tcpCliSock.send(data)</span><br><span class=\"line\">    data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 关闭客户端</span></span><br><span class=\"line\">tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h3><p>  在运行程序时，必须 <strong>首先运行服务器</strong> 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。<br>  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 53220)</span><br><span class=\"line\">waiting for connection...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Fri Feb 23 14:22:58 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Fri Feb 23 14:23:02 2018] hi</span><br><span class=\"line\">&gt; hello world</span><br><span class=\"line\">[Fri Feb 23 14:23:09 2018] hello world</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建UDP服务器-客户端\"><a href=\"#创建UDP服务器-客户端\" class=\"headerlink\" title=\"创建UDP服务器/客户端\"></a>创建UDP服务器/客户端</h2><h3 id=\"UDP服务器\"><a href=\"#UDP服务器\" class=\"headerlink\" title=\"UDP服务器\"></a>UDP服务器</h3><ul>\n<li><p>下面是UDP服务器的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                           <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                               <span class=\"comment\">#绑定服务器套接字</span></span><br><span class=\"line\">inf_loop:                               <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.recvfrom()/ss.sendto()      <span class=\"comment\">#关闭(接收/发送)</span></span><br><span class=\"line\">ss.close()                              <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与TCP相同，由于是无连接，所以没有调用监听传入连接</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">udpSerSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">udpSerSock.bind(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for message...'</span>)</span><br><span class=\"line\">    data, addr = udpSerSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">    udpSerSock.sendto(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">        ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>), addr)</span><br><span class=\"line\">    print(<span class=\"string\">'...received from and returned to:'</span>, addr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h3><ul>\n<li><p>下面是客户端的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()                         <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">comm_loop:                            <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.sendto()/cs.recvfrom()         <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()                            <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"> <span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"> HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\"> PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"> BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\"> ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"> udpClienSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">     data = bytes(input(<span class=\"string\">'&gt;'</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     udpClienSock.sendto(data, ADDR)</span><br><span class=\"line\">     data, ADDR = udpClienSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"> udpClienSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP服务器和客户端运行结果\"><a href=\"#UDP服务器和客户端运行结果\" class=\"headerlink\" title=\"UDP服务器和客户端运行结果\"></a>UDP服务器和客户端运行结果</h3><p>  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;hello</span><br><span class=\"line\">[Fri Feb 23 15:23:57 2018] hello</span><br><span class=\"line\">&gt;hi</span><br><span class=\"line\">[Fri Feb 23 15:24:03 2018] hi</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><em>AF_UNIX</em> 是基于文件的套接字，代表 <em>地址家族(address family):UNIX</em>，<em>AF_INET</em> 是基于网络的套接字，代表 <em>地址家族：因特网</em>， <em>AF_INET6</em> 用于底6版因特网协议(IPv6)寻址。 <em>SOCK_STREAM</em> 表示面向连接的TCP套接字， <em>SOCK_DGRAM</em> 代表无连接的UDP套接字。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>使用Python的一些模块来创建网络应用程序<br>","more":"</p>\n<h2 id=\"socket-函数模块\"><a href=\"#socket-函数模块\" class=\"headerlink\" title=\"socket()函数模块\"></a>socket()函数模块</h2><p>要创建套接字，必须使用<code>socket.socket()</code>函数<code>socket(socket_family, socket_type, protocol = 0)</code>,其中<code>socket_family</code>是 <em>AF_UNIX</em>或 <em>AF_INET</em>,<code>socket_type</code>是 <em>SOCK_STREAM</em> 或 <em>SOCK_DGRAM</em>。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup><code>protocol</code>通常省略，默认为0。</p>\n<ul>\n<li><blockquote>\n<p>创建TCP/IP套接字</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n</li>\n<li><blockquote>\n<p>创建UDP/IP套接字</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"套接字对象内接方法\"><a href=\"#套接字对象内接方法\" class=\"headerlink\" title=\"套接字对象内接方法\"></a>套接字对象内接方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">服务器套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.bind()</td>\n<td style=\"text-align:center\">将地址(主机名、端口号对)绑定到套接字上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen()</td>\n<td style=\"text-align:center\">设置并启动TCP监听器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">被动接受TCP客户端连接，一直等待知道连接到达(阻塞)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">客户端套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect()</td>\n<td style=\"text-align:center\">主动发起TCP服务器连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex()</td>\n<td style=\"text-align:center\">connect()的扩展版本，此时会以错误码的形式返回问题，而不是抛出一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv()</td>\n<td style=\"text-align:center\">接受TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recv_into()</td>\n<td style=\"text-align:center\">接受TCP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send()</td>\n<td style=\"text-align:center\">发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall()</td>\n<td style=\"text-align:center\">完整地发送TCP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom()</td>\n<td style=\"text-align:center\">接受UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom_into()</td>\n<td style=\"text-align:center\">接受UDP消息到指定的缓冲区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto()</td>\n<td style=\"text-align:center\">发送UDP消息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getpeername()</td>\n<td style=\"text-align:center\">连接到套接字(TCP)的远程地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockname()</td>\n<td style=\"text-align:center\">当前套接字的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.getsockopt()</td>\n<td style=\"text-align:center\">返回给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setsockopt()</td>\n<td style=\"text-align:center\">设置给定套接字选项的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.shutdown()</td>\n<td style=\"text-align:center\">关闭连接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.detach()</td>\n<td style=\"text-align:center\">在未关闭文件描述符的情况下关闭套接字，返回文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.ioctl()</td>\n<td style=\"text-align:center\">控制套接字的模式(仅支持Windows)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向阻塞的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.setblocking()</td>\n<td style=\"text-align:center\">设置套接字的阻塞或非阻塞模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.settimeout()</td>\n<td style=\"text-align:center\">设置阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.gettimeout()</td>\n<td style=\"text-align:center\">获取阻塞套接字操作的超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">面向文件的套接字方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.fileno()</td>\n<td style=\"text-align:center\">套接字的文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.makefile()</td>\n<td style=\"text-align:center\">创建与套接字关联的文件对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.family</td>\n<td style=\"text-align:center\">套接字家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.type</td>\n<td style=\"text-align:center\">套接字类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.proto</td>\n<td style=\"text-align:center\">套接字协议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socket模块属性\"><a href=\"#socket模块属性\" class=\"headerlink\" title=\"socket模块属性\"></a>socket模块属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据属性</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AF_UNIX、AF_INET、AF_INET6、AF_NETLINK、AF_TIPC</td>\n<td style=\"text-align:center\">Python中支持的套接字地址家族</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SO_STREAM、SO_DGRAM</td>\n<td style=\"text-align:center\">套接字类型(TCP=流，UDP=数据报)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has_ipv6</td>\n<td style=\"text-align:center\">指示是否支持IPv6的布尔标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异常</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">套接字相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">herror</td>\n<td style=\"text-align:center\">主机和地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gaierror</td>\n<td style=\"text-align:center\">地址相关错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeout</td>\n<td style=\"text-align:center\">超时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">函数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socketpair()</td>\n<td style=\"text-align:center\">以给定的地址家族、套接字类型和协议类型(可选) 创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">create_connection()</td>\n<td style=\"text-align:center\">常规函数，它接收一个地址(主机号，端口号)对，返回套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fromfd()</td>\n<td style=\"text-align:center\">以一个打开的文件描述符创建一个套接字对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ssl()</td>\n<td style=\"text-align:center\">通过套接字启动一个安全套接字层连接；不执行证书验证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getaddrinfo()</td>\n<td style=\"text-align:center\">获取一个五元组序列形式的地址信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getnameinfo()</td>\n<td style=\"text-align:center\">给定一个套接字地址，返回(主机名，端口号)二元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getfqdn()</td>\n<td style=\"text-align:center\">返回完整的域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostname()</td>\n<td style=\"text-align:center\">返回当前主机名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname()</td>\n<td style=\"text-align:center\">将一个主机名映射到它的IP地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyname_ex()</td>\n<td style=\"text-align:center\">gethostbyname()的扩展版本，它返回主机名、别名主机集合和IP地址列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gethostbyaddr()</td>\n<td style=\"text-align:center\">讲一个IP地址映射到DNS信息；返回与gethostbyname_ex()相同的三元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getprotobyname()</td>\n<td style=\"text-align:center\">将一个协议名(如‘TCP’)映射到一个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getservbyname()/getservbyport()</td>\n<td style=\"text-align:center\">将一个服务名映射到一个端口号，或者反过来；对于任何一个函数来说，协议名都是可选的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ntohl()/ntohs()</td>\n<td style=\"text-align:center\">将来自网络的整数装换为主机字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htonl()/htons()</td>\n<td style=\"text-align:center\">将来自主机的整数转换为网络字节序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_aton()/inet_ntoa()</td>\n<td style=\"text-align:center\">将IP地址八进制字符串转换成32位的包格式，或者反过来(仅用于IPv4地址)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inet_pton()/inet_ntop()</td>\n<td style=\"text-align:center\">将IP地址字符串转换成打包的二进制格式，或者反过来(同时适用于IPv4和IPv6)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getdefaulttimeout()/setdefaulttimeout()</td>\n<td style=\"text-align:center\">以秒(浮点数)为单位返回默认套接字超时时间；以秒(浮点数)为单位设置默认套接字超时时间</td>\n</tr>\n</tbody>\n</table>\n<p>详情参阅<a href=\"https://docs.python.org/3/library/socket.html?highlight=socket#module-socket\" target=\"_blank\" rel=\"noopener\">socket模块文档</a></p>\n<h2 id=\"创建TCP服务器-客户端\"><a href=\"#创建TCP服务器-客户端\" class=\"headerlink\" title=\"创建TCP服务器/客户端\"></a>创建TCP服务器/客户端</h2><h3 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h3><ul>\n<li><p>下面是TCP服务器端的通用伪码，这是设计服务器的一种方式，可根据需求修改来操作服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                 <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                     <span class=\"comment\">#套接字与地址绑定</span></span><br><span class=\"line\">ss.listen()                   <span class=\"comment\">#监听连接</span></span><br><span class=\"line\">inf_loop:                     <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.accept()          <span class=\"comment\">#接受客户端连接</span></span><br><span class=\"line\">    comm_loop:                <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">        cs.recv()/cs.send()   <span class=\"comment\">#对话(接收/发送)</span></span><br><span class=\"line\">    cs.close()                <span class=\"comment\">#关闭客户端套接字</span></span><br><span class=\"line\">ss.close()                    <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HOST变量是空白，这是对bind()方法的标识，标识它可以使用任何可用的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 选择一个随机的端口号</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP服务套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 将套接字绑定到服务器地址</span></span><br><span class=\"line\"><span class=\"comment\"># 开启TCP的监听调用</span></span><br><span class=\"line\"><span class=\"comment\"># listen()方法的参数是在连接被转接或拒绝之前，传入连接请求的最大数</span></span><br><span class=\"line\">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpSerSock.bind(ADDR)</span><br><span class=\"line\">tcpSerSock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 服务器循环，等待客户端的连接的连接</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class=\"line\">    print(<span class=\"string\">'...connected from:'</span>, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 当一个连接请求出现时，进入对话循环，接收消息</span></span><br><span class=\"line\">        data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># 当消息为空时，退出对话循环</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭客户端连接，等待下一个连接请求</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        tcpCliSock.send(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h3><ul>\n<li><p>下面是TCP客户端的通用伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()           <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">cs.connect()            <span class=\"comment\">#尝试连接服务器</span></span><br><span class=\"line\">comm_loop:              <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.send()/cs.recv   <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()              <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 服务器的主机名</span></span><br><span class=\"line\"><span class=\"comment\"># 服务器的端口号,应与服务器设置的完全相同</span></span><br><span class=\"line\"><span class=\"comment\"># 缓冲区大小为1KB</span></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分配了TCP客户端套接字</span></span><br><span class=\"line\"><span class=\"comment\"># 主动调用并连接到服务器</span></span><br><span class=\"line\">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">tcpCliSock.connect(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 无限循环，输入消息</span></span><br><span class=\"line\">    data = bytes(input(<span class=\"string\">'&gt; '</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送输入的信息</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收服务器返回的信息，最后打印</span></span><br><span class=\"line\">    tcpCliSock.send(data)</span><br><span class=\"line\">    data = tcpCliSock.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 消息为空则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 关闭客户端</span></span><br><span class=\"line\">tcpCliSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h3><p>  在运行程序时，必须 <strong>首先运行服务器</strong> 程序，然后再运行客户端程序。如果先运行客户端程序，将会报未连接到服务器的错误。<br>  按正确的顺序启动程序后，在客户端输入信息，将会接收到加上时间戳处理后的信息，如果直接输入回车，将会关闭客户端，而服务器将会等待下一个连接请求</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 53220)</span><br><span class=\"line\">waiting for connection...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Fri Feb 23 14:22:58 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Fri Feb 23 14:23:02 2018] hi</span><br><span class=\"line\">&gt; hello world</span><br><span class=\"line\">[Fri Feb 23 14:23:09 2018] hello world</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建UDP服务器-客户端\"><a href=\"#创建UDP服务器-客户端\" class=\"headerlink\" title=\"创建UDP服务器/客户端\"></a>创建UDP服务器/客户端</h2><h3 id=\"UDP服务器\"><a href=\"#UDP服务器\" class=\"headerlink\" title=\"UDP服务器\"></a>UDP服务器</h3><ul>\n<li><p>下面是UDP服务器的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = socket()                           <span class=\"comment\">#创建服务器套接字</span></span><br><span class=\"line\">ss.bind()                               <span class=\"comment\">#绑定服务器套接字</span></span><br><span class=\"line\">inf_loop:                               <span class=\"comment\">#服务器无线循环</span></span><br><span class=\"line\">    cs = ss.recvfrom()/ss.sendto()      <span class=\"comment\">#关闭(接收/发送)</span></span><br><span class=\"line\">ss.close()                              <span class=\"comment\">#关闭服务器套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socket模块和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与TCP相同，由于是无连接，所以没有调用监听传入连接</span></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">udpSerSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\">udpSerSock.bind(ADDR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 进入循环等待消息，一条消息到达时，处理并返回它，然后等待下一条消息</span></span><br><span class=\"line\">    print(<span class=\"string\">'waiting for message...'</span>)</span><br><span class=\"line\">    data, addr = udpSerSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">    udpSerSock.sendto(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">        ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>), addr)</span><br><span class=\"line\">    print(<span class=\"string\">'...received from and returned to:'</span>, addr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h3><ul>\n<li><p>下面是客户端的伪码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cs = socket()                         <span class=\"comment\">#创建客户端套接字</span></span><br><span class=\"line\">comm_loop:                            <span class=\"comment\">#通信循环</span></span><br><span class=\"line\">    cs.sendto()/cs.recvfrom()         <span class=\"comment\">#对话(发送/接收)</span></span><br><span class=\"line\">cs.close()                            <span class=\"comment\">#关闭客户端套接字</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UDP时间戳客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"> <span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"> HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\"> PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"> BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\"> ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"> udpClienSock = socket(AF_INET, SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">     data = bytes(input(<span class=\"string\">'&gt;'</span>), <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     udpClienSock.sendto(data, ADDR)</span><br><span class=\"line\">     data, ADDR = udpClienSock.recvfrom(BUFSIZE)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">     print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"> udpClienSock.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"UDP服务器和客户端运行结果\"><a href=\"#UDP服务器和客户端运行结果\" class=\"headerlink\" title=\"UDP服务器和客户端运行结果\"></a>UDP服务器和客户端运行结果</h3><p>  因为UDP面向无连接的服务，所以程序的启动顺序没有要求。当服务器处理完一个数据报之后在等待下一个继续处理</p>\n<ul>\n<li><p>服务器运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br><span class=\"line\">...received from and returned to: (&apos;127.0.0.1&apos;, 51434)</span><br><span class=\"line\">waiting for message...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;hello</span><br><span class=\"line\">[Fri Feb 23 15:23:57 2018] hello</span><br><span class=\"line\">&gt;hi</span><br><span class=\"line\">[Fri Feb 23 15:24:03 2018] hi</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><em>AF_UNIX</em> 是基于文件的套接字，代表 <em>地址家族(address family):UNIX</em>，<em>AF_INET</em> 是基于网络的套接字，代表 <em>地址家族：因特网</em>， <em>AF_INET6</em> 用于底6版因特网协议(IPv6)寻址。 <em>SOCK_STREAM</em> 表示面向连接的TCP套接字， <em>SOCK_DGRAM</em> 代表无连接的UDP套接字。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python网络编程(二)","date":"2018-02-24T01:40:06.000Z","copyright":true,"description":null,"_content":"上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录\n<!--More-->\n## socketserver模块\n[socketserver](https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver)是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。\n\n### socketserver模块类\n|                     类                      |                                                              描述                                                              |\n|:-------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n|                 BaseServer                  |        包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例        |\n|             TCPServer/UDPServer             |                                                  基础的网络同步TCP/UDP服务器                                                   |\n|     UnixStreamServer/UnixDatagramServer     |                                                基于文件的基础同步TCP/UDP服务器                                                 |\n|         ForkingMixIn/ThreadingMixIn         |                    核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类                    |\n|      ForkingTCPServer/ForkingUDPServer      |                                            ForkingMaxIn和TCPServer/UDPServer的组合                                             |\n|    ThreadingTCPServer/ThreadingUDPServer    |                                           ThreadingMixIn和TCPServer/UDPServer的组合                                            |\n|             BaseRequestHandler              | 包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例 |\n| StreamRequestHandler/DatagramRequestHandler |                                                 实现TCP/UDP服务器的服务处理器                                                  |\n\n### socketserver TCP服务器/客户端\n在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用\n\n#### TCP服务器\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    # 导入socketserver相关的类和time.ctime()的全部属性\n    from socketserver import (TCPServer as TCP,\n                              StreamRequestHandler as SRH)\n    from time import ctime\n\n    HOST = ''\n    PORT = 12345\n    ADDR = (HOST, PORT)\n\n\n    class MyRequestHandler(SRH):\n        # MyRequestHandler继承自StreamRequestHandler\n\n        def handle(self):\n            # 重写handle方法，当接收到一个客户端消息是，会调用handle()方法\n            print('...connected from:', self.client_address)\n            # StreamRequestHandler将输入和输出套接字看做类似文件的对象\n            # 所以使用write()将字符串返回客户端，用readline()来获取客户端信息\n            self.wfile.write(bytes('[%s] %s' % (\n                ctime(), self.rfile.readline().decode('utf-8')), 'utf-8'))\n\n    # 利用给定的主机信息和请求处理类创建了TCP服务器\n    # 然后无限循环地等待并服务于客户端请求\n    tcpServ = TCP(ADDR, MyRequestHandler)\n    print('waiting for connection...')\n    tcpServ.serve_forever()\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    from socket import *\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n    BUFSIZE = 1024\n    ADDR = (HOST, PORT)\n\n    while True:\n        tcpSocket = socket(AF_INET, SOCK_STREAM)\n        tcpSocket.connect(ADDR)\n        data = input('> ')\n        if not data:\n            break\n        # 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。\n        # 而服务器只是保留并重用这里发送的终止符\n        tcpSocket.send(bytes('%s\\r\\n' % data, 'utf-8'))\n        data = tcpSocket.recv(BUFSIZE)\n        if not data:\n            break\n        # 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符\n        print(data.decode('utf-8').strip())\n        tcpSocket.close()\n\n  ```\n#### socketserver TCP服务器和客户端运行结果\n  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器\n  * TCP服务器运行结果\n      ````\n      waiting for connection...\n      ...connected from: ('127.0.0.1', 51835)\n      ...connected from: ('127.0.0.1', 51877)\n      ...connected from: ('127.0.0.1', 51893)\n      ...connected from: ('127.0.0.1', 51901)\n\n      ````\n\n  * TCP客户端运行结果\n      ```\n      > hello\n      [Sat Feb 24 10:29:28 2018] hello\n      > hello\n      [Sat Feb 24 10:29:44 2018] hello\n      > hi\n      [Sat Feb 24 10:29:50 2018] hi\n      >\n      ```\n\n## Twisted框架的简单使用\n  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独[下载](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted)和安装它[^1]。\n  ```\n   pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  ```\n  安装成功显示\n  ```\n  Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  Requirement already satisfied: Automat>=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: zope.interface>=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: incremental>=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: hyperlink>=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: constantly>=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface>=4.0.2->Twisted==17.9.0)\n  Installing collected packages: Twisted\n  Successfully installed Twisted-17.9.0\n  ```\n### Twisted Reactor TCP 服务器/客户端\n#### TCP服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 常用模块导入，特别是twisted.internet的protocol和reactor\n  from twisted.internet import protocol, reactor\n  from time import ctime\n\n  # 设置端口号\n  PORT = 12345\n\n\n  class TWServProtocol(protocol.Protocol):\n      # 继承Protocol类\n      def connectionMade(self):\n          # 重写connectionMade()方法\n          # 当一个客户端连接到服务器是会执行这个方法\n          client = self.client = self.transport.getPeer().host\n          print('...connected from:', client)\n\n      def dataReceived(self, data):\n          # 重写dataReceived()方法\n          # 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法\n          self.transport.write(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n  # 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例\n  # 在reactor中安装一个TCP监听器，以此检查服务请求\n  # 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务\n  factory = protocol.Factory()\n  factory.protocol = TWServProtocol\n  print('waiting for connection...')\n  reactor.listenTCP(PORT, factory)\n  reactor.run()\n\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python\n    # -*- coding:UTF-8 -*-\n\n    from twisted.internet import  protocol, reactor\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n\n\n    class TWClientProtocol(protocol.Protocol):\n        def sendData(self):\n            # 需要发送数据时调用\n            # 会在一个循环中继续，直到不输入任何内容来关闭连接\n            data = input('> ')\n            if data:\n                print('...send %s...' % data)\n                self.transport.write(bytes(data, 'utf-8'))\n            else:\n                self.transport.loseConnection()\n\n        def connectionMade(self):\n            #\n            self.sendData()\n\n        def dataReceived(self, data):\n            print(data.decode('utf-8'))\n            self.sendData()\n\n\n    class TWClientFactory(protocol.ClientFactory):\n        # 创建了一个客户端工厂\n        protocol = TWClientProtocol\n        clientConnectionLost = clientConnectionFailed = \\\n            lambda self, connector, reason: reactor.stop()\n    # 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂\n    # 因为这里不是服务器，需要等待客户端与我们通信\n    # 并且这个工厂为每一次连接都创建一个新的协议对象。\n    # 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信\n    reactor.connectTCP(HOST, PORT, TWClientFactory())\n    reactor.run()\n  ```\n#### TCP服务器和客户端运行结果\n  * 服务器结果\n  ```\n  waiting for connection...\n  ...connected from: 127.0.0.1\n\n  ```\n  * 客户端结果\n  ```\n  > hello\n  ...send hello...\n  [Sat Feb 24 11:19:49 2018] hello\n  > hi\n  ...send hi...\n  [Sat Feb 24 11:20:02 2018] hi\n  >\n  ```\n\n[^1]:需要安装python对应的版本和位数\n","source":"_posts/Python网络编程-二.md","raw":"---\ntitle: Python网络编程(二)\ndate: 2018-02-24 09:40:06\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 网络编程\ndescription:\n---\n上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录\n<!--More-->\n## socketserver模块\n[socketserver](https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver)是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。\n\n### socketserver模块类\n|                     类                      |                                                              描述                                                              |\n|:-------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------:|\n|                 BaseServer                  |        包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例        |\n|             TCPServer/UDPServer             |                                                  基础的网络同步TCP/UDP服务器                                                   |\n|     UnixStreamServer/UnixDatagramServer     |                                                基于文件的基础同步TCP/UDP服务器                                                 |\n|         ForkingMixIn/ThreadingMixIn         |                    核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类                    |\n|      ForkingTCPServer/ForkingUDPServer      |                                            ForkingMaxIn和TCPServer/UDPServer的组合                                             |\n|    ThreadingTCPServer/ThreadingUDPServer    |                                           ThreadingMixIn和TCPServer/UDPServer的组合                                            |\n|             BaseRequestHandler              | 包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例 |\n| StreamRequestHandler/DatagramRequestHandler |                                                 实现TCP/UDP服务器的服务处理器                                                  |\n\n### socketserver TCP服务器/客户端\n在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用\n\n#### TCP服务器\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    # 导入socketserver相关的类和time.ctime()的全部属性\n    from socketserver import (TCPServer as TCP,\n                              StreamRequestHandler as SRH)\n    from time import ctime\n\n    HOST = ''\n    PORT = 12345\n    ADDR = (HOST, PORT)\n\n\n    class MyRequestHandler(SRH):\n        # MyRequestHandler继承自StreamRequestHandler\n\n        def handle(self):\n            # 重写handle方法，当接收到一个客户端消息是，会调用handle()方法\n            print('...connected from:', self.client_address)\n            # StreamRequestHandler将输入和输出套接字看做类似文件的对象\n            # 所以使用write()将字符串返回客户端，用readline()来获取客户端信息\n            self.wfile.write(bytes('[%s] %s' % (\n                ctime(), self.rfile.readline().decode('utf-8')), 'utf-8'))\n\n    # 利用给定的主机信息和请求处理类创建了TCP服务器\n    # 然后无限循环地等待并服务于客户端请求\n    tcpServ = TCP(ADDR, MyRequestHandler)\n    print('waiting for connection...')\n    tcpServ.serve_forever()\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python3\n    # -*- coding:UTF-8 -*-\n\n    from socket import *\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n    BUFSIZE = 1024\n    ADDR = (HOST, PORT)\n\n    while True:\n        tcpSocket = socket(AF_INET, SOCK_STREAM)\n        tcpSocket.connect(ADDR)\n        data = input('> ')\n        if not data:\n            break\n        # 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。\n        # 而服务器只是保留并重用这里发送的终止符\n        tcpSocket.send(bytes('%s\\r\\n' % data, 'utf-8'))\n        data = tcpSocket.recv(BUFSIZE)\n        if not data:\n            break\n        # 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符\n        print(data.decode('utf-8').strip())\n        tcpSocket.close()\n\n  ```\n#### socketserver TCP服务器和客户端运行结果\n  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器\n  * TCP服务器运行结果\n      ````\n      waiting for connection...\n      ...connected from: ('127.0.0.1', 51835)\n      ...connected from: ('127.0.0.1', 51877)\n      ...connected from: ('127.0.0.1', 51893)\n      ...connected from: ('127.0.0.1', 51901)\n\n      ````\n\n  * TCP客户端运行结果\n      ```\n      > hello\n      [Sat Feb 24 10:29:28 2018] hello\n      > hello\n      [Sat Feb 24 10:29:44 2018] hello\n      > hi\n      [Sat Feb 24 10:29:50 2018] hi\n      >\n      ```\n\n## Twisted框架的简单使用\n  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独[下载](https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted)和安装它[^1]。\n  ```\n   pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  ```\n  安装成功显示\n  ```\n  Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl\n  Requirement already satisfied: Automat>=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: zope.interface>=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: incremental>=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: hyperlink>=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: constantly>=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)\n  Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat>=0.3.0->Twisted==17.9.0)\n  Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface>=4.0.2->Twisted==17.9.0)\n  Installing collected packages: Twisted\n  Successfully installed Twisted-17.9.0\n  ```\n### Twisted Reactor TCP 服务器/客户端\n#### TCP服务器\n  ```Python\n  #!usr/bin/python3\n  # -*- coding:UTF-8 -*-\n\n  # 常用模块导入，特别是twisted.internet的protocol和reactor\n  from twisted.internet import protocol, reactor\n  from time import ctime\n\n  # 设置端口号\n  PORT = 12345\n\n\n  class TWServProtocol(protocol.Protocol):\n      # 继承Protocol类\n      def connectionMade(self):\n          # 重写connectionMade()方法\n          # 当一个客户端连接到服务器是会执行这个方法\n          client = self.client = self.transport.getPeer().host\n          print('...connected from:', client)\n\n      def dataReceived(self, data):\n          # 重写dataReceived()方法\n          # 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法\n          self.transport.write(bytes('[%s] %s' % (\n              ctime(), data.decode('utf-8')), 'utf-8'))\n\n  # 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例\n  # 在reactor中安装一个TCP监听器，以此检查服务请求\n  # 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务\n  factory = protocol.Factory()\n  factory.protocol = TWServProtocol\n  print('waiting for connection...')\n  reactor.listenTCP(PORT, factory)\n  reactor.run()\n\n  ```\n#### TCP客户端\n  ```Python\n    #!usr/bin/python\n    # -*- coding:UTF-8 -*-\n\n    from twisted.internet import  protocol, reactor\n\n    HOST = '127.0.0.1'\n    PORT = 12345\n\n\n    class TWClientProtocol(protocol.Protocol):\n        def sendData(self):\n            # 需要发送数据时调用\n            # 会在一个循环中继续，直到不输入任何内容来关闭连接\n            data = input('> ')\n            if data:\n                print('...send %s...' % data)\n                self.transport.write(bytes(data, 'utf-8'))\n            else:\n                self.transport.loseConnection()\n\n        def connectionMade(self):\n            #\n            self.sendData()\n\n        def dataReceived(self, data):\n            print(data.decode('utf-8'))\n            self.sendData()\n\n\n    class TWClientFactory(protocol.ClientFactory):\n        # 创建了一个客户端工厂\n        protocol = TWClientProtocol\n        clientConnectionLost = clientConnectionFailed = \\\n            lambda self, connector, reason: reactor.stop()\n    # 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂\n    # 因为这里不是服务器，需要等待客户端与我们通信\n    # 并且这个工厂为每一次连接都创建一个新的协议对象。\n    # 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信\n    reactor.connectTCP(HOST, PORT, TWClientFactory())\n    reactor.run()\n  ```\n#### TCP服务器和客户端运行结果\n  * 服务器结果\n  ```\n  waiting for connection...\n  ...connected from: 127.0.0.1\n\n  ```\n  * 客户端结果\n  ```\n  > hello\n  ...send hello...\n  [Sat Feb 24 11:19:49 2018] hello\n  > hi\n  ...send hi...\n  [Sat Feb 24 11:20:02 2018] hi\n  >\n  ```\n\n[^1]:需要安装python对应的版本和位数\n","slug":"Python网络编程-二","published":1,"updated":"2018-02-24T08:13:04.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw4y000utwn96jefmw2c","content":"<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br><a id=\"more\"></a></p>\n<h2 id=\"socketserver模块\"><a href=\"#socketserver模块\" class=\"headerlink\" title=\"socketserver模块\"></a>socketserver模块</h2><p><a href=\"https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver\" target=\"_blank\" rel=\"noopener\">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p>\n<h3 id=\"socketserver模块类\"><a href=\"#socketserver模块类\" class=\"headerlink\" title=\"socketserver模块类\"></a>socketserver模块类</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BaseServer</td>\n<td style=\"text-align:center\">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCPServer/UDPServer</td>\n<td style=\"text-align:center\">基础的网络同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UnixStreamServer/UnixDatagramServer</td>\n<td style=\"text-align:center\">基于文件的基础同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingMixIn/ThreadingMixIn</td>\n<td style=\"text-align:center\">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingTCPServer/ForkingUDPServer</td>\n<td style=\"text-align:center\">ForkingMaxIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ThreadingTCPServer/ThreadingUDPServer</td>\n<td style=\"text-align:center\">ThreadingMixIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BaseRequestHandler</td>\n<td style=\"text-align:center\">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">StreamRequestHandler/DatagramRequestHandler</td>\n<td style=\"text-align:center\">实现TCP/UDP服务器的服务处理器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socketserver-TCP服务器-客户端\"><a href=\"#socketserver-TCP服务器-客户端\" class=\"headerlink\" title=\"socketserver TCP服务器/客户端\"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p>\n<h4 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socketserver <span class=\"keyword\">import</span> (TCPServer <span class=\"keyword\">as</span> TCP,</span><br><span class=\"line\">                          StreamRequestHandler <span class=\"keyword\">as</span> SRH)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequestHandler</span><span class=\"params\">(SRH)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, self.client_address)</span><br><span class=\"line\">        <span class=\"comment\"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class=\"line\">        self.wfile.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), self.rfile.readline().decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class=\"line\">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">    tcpSocket.connect(ADDR)</span><br><span class=\"line\">    data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class=\"line\">    <span class=\"comment\"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class=\"line\">    tcpSocket.send(bytes(<span class=\"string\">'%s\\r\\n'</span> % data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    data = tcpSocket.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>).strip())</span><br><span class=\"line\">    tcpSocket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"socketserver-TCP服务器和客户端运行结果\"><a href=\"#socketserver-TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"socketserver TCP服务器和客户端运行结果\"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p>\n<ul>\n<li><p>TCP服务器运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP客户端运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:28 2018] hello</span><br><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:44 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Sat Feb 24 10:29:50 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Twisted框架的简单使用\"><a href=\"#Twisted框架的简单使用\" class=\"headerlink\" title=\"Twisted框架的简单使用\"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" target=\"_blank\" rel=\"noopener\">下载</a>和安装它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p>\n<p>  安装成功显示<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class=\"line\">Requirement already satisfied: Automat&gt;=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: incremental&gt;=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: constantly&gt;=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Installing collected packages: Twisted</span><br><span class=\"line\">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Twisted-Reactor-TCP-服务器-客户端\"><a href=\"#Twisted-Reactor-TCP-服务器-客户端\" class=\"headerlink\" title=\"Twisted Reactor TCP 服务器/客户端\"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id=\"TCP服务器-1\"><a href=\"#TCP服务器-1\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span> protocol, reactor</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置端口号</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWServProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承Protocol类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写connectionMade()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class=\"line\">        client = self.client = self.transport.getPeer().host</span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, client)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写dataReceived()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class=\"line\">        self.transport.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class=\"line\"><span class=\"comment\"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class=\"line\"><span class=\"comment\"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class=\"line\">factory = protocol.Factory()</span><br><span class=\"line\">factory.protocol = TWServProtocol</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">reactor.listenTCP(PORT, factory)</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端-1\"><a href=\"#TCP客户端-1\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span>  protocol, reactor</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendData</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 需要发送数据时调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class=\"line\">        data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            print(<span class=\"string\">'...send %s...'</span> % data)</span><br><span class=\"line\">            self.transport.write(bytes(data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.transport.loseConnection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientFactory</span><span class=\"params\">(protocol.ClientFactory)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个客户端工厂</span></span><br><span class=\"line\">    protocol = TWClientProtocol</span><br><span class=\"line\">    clientConnectionLost = clientConnectionFailed = \\</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> self, connector, reason: reactor.stop()</span><br><span class=\"line\"><span class=\"comment\"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class=\"line\"><span class=\"comment\"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class=\"line\"><span class=\"comment\"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class=\"line\">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h4><ul>\n<li><p>服务器结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">...send hello...</span><br><span class=\"line\">[Sat Feb 24 11:19:49 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">...send hi...</span><br><span class=\"line\">[Sat Feb 24 11:20:02 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">需要安装python对应的版本和位数</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"<p>上篇对Python中的socket模块的简单应用做了描述和记录，下面便是对SocketServer模块和Twisted框架做一个简要的记录<br>","more":"</p>\n<h2 id=\"socketserver模块\"><a href=\"#socketserver模块\" class=\"headerlink\" title=\"socketserver模块\"></a>socketserver模块</h2><p><a href=\"https://docs.python.org/3/library/socketserver.html?highlight=socketserver#module-socketserver\" target=\"_blank\" rel=\"noopener\">socketserver</a>是标准库的一个高级模块，它的目标是简化很多样板代码，它们是创建网络客户端和服务器所必需的代码。</p>\n<h3 id=\"socketserver模块类\"><a href=\"#socketserver模块类\" class=\"headerlink\" title=\"socketserver模块类\"></a>socketserver模块类</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BaseServer</td>\n<td style=\"text-align:center\">包含核心服务器功能和mix-in类的钩子；仅用于推导，这样不会创建这个类的实例；可以用TCPServer或UDPServer创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCPServer/UDPServer</td>\n<td style=\"text-align:center\">基础的网络同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UnixStreamServer/UnixDatagramServer</td>\n<td style=\"text-align:center\">基于文件的基础同步TCP/UDP服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingMixIn/ThreadingMixIn</td>\n<td style=\"text-align:center\">核心派出或线程功能；只用作mix-in类与一个服务器类配合实现一些异步性；不能直接实例化这个类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ForkingTCPServer/ForkingUDPServer</td>\n<td style=\"text-align:center\">ForkingMaxIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ThreadingTCPServer/ThreadingUDPServer</td>\n<td style=\"text-align:center\">ThreadingMixIn和TCPServer/UDPServer的组合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BaseRequestHandler</td>\n<td style=\"text-align:center\">包含处理服务请求的核心功能；仅用于推导，无法创建这个类的实例；可以使用StreamRequestHandler或DatagramRequestHandler创建类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">StreamRequestHandler/DatagramRequestHandler</td>\n<td style=\"text-align:center\">实现TCP/UDP服务器的服务处理器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"socketserver-TCP服务器-客户端\"><a href=\"#socketserver-TCP服务器-客户端\" class=\"headerlink\" title=\"socketserver TCP服务器/客户端\"></a>socketserver TCP服务器/客户端</h3><p>在原始服务器循环中，我们阻塞等待请求，当接收到请求时就对其提供服务，然后继续等待。在此处的服务器循环中，并非在服务器中创建代码，而是定义一个处理程序，当服务器接收到一个传入的请求时，服务器就可以调用</p>\n<h4 id=\"TCP服务器\"><a href=\"#TCP服务器\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入socketserver相关的类和time.ctime()的全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> socketserver <span class=\"keyword\">import</span> (TCPServer <span class=\"keyword\">as</span> TCP,</span><br><span class=\"line\">                          StreamRequestHandler <span class=\"keyword\">as</span> SRH)</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequestHandler</span><span class=\"params\">(SRH)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># MyRequestHandler继承自StreamRequestHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写handle方法，当接收到一个客户端消息是，会调用handle()方法</span></span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, self.client_address)</span><br><span class=\"line\">        <span class=\"comment\"># StreamRequestHandler将输入和输出套接字看做类似文件的对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以使用write()将字符串返回客户端，用readline()来获取客户端信息</span></span><br><span class=\"line\">        self.wfile.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), self.rfile.readline().decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用给定的主机信息和请求处理类创建了TCP服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 然后无限循环地等待并服务于客户端请求</span></span><br><span class=\"line\">tcpServ = TCP(ADDR, MyRequestHandler)</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">tcpServ.serve_forever()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">BUFSIZE = <span class=\"number\">1024</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    tcpSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">    tcpSocket.connect(ADDR)</span><br><span class=\"line\">    data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为处理程序类对待套接字通信像文件一样，所以必须发送行终止符。</span></span><br><span class=\"line\">    <span class=\"comment\"># 而服务器只是保留并重用这里发送的终止符</span></span><br><span class=\"line\">    tcpSocket.send(bytes(<span class=\"string\">'%s\\r\\n'</span> % data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    data = tcpSocket.recv(BUFSIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># 得到服务器返回的消息时，用strip()函数对其进行处理并使用print()自动提供的换行符</span></span><br><span class=\"line\">    print(data.decode(<span class=\"string\">'utf-8'</span>).strip())</span><br><span class=\"line\">    tcpSocket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"socketserver-TCP服务器和客户端运行结果\"><a href=\"#socketserver-TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"socketserver TCP服务器和客户端运行结果\"></a>socketserver TCP服务器和客户端运行结果</h4><p>  在客户端启动的时候连接了一次服务器，而每一次发送一个请求连接一次，所以发送了三个请求连接了四次服务器</p>\n<ul>\n<li><p>TCP服务器运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51835)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51877)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51893)</span><br><span class=\"line\">...connected from: (&apos;127.0.0.1&apos;, 51901)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TCP客户端运行结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:28 2018] hello</span><br><span class=\"line\">&gt; hello</span><br><span class=\"line\">[Sat Feb 24 10:29:44 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">[Sat Feb 24 10:29:50 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Twisted框架的简单使用\"><a href=\"#Twisted框架的简单使用\" class=\"headerlink\" title=\"Twisted框架的简单使用\"></a>Twisted框架的简单使用</h2><p>  Twisted是一个完整的事件驱动的网络框架，利用它既能使用也能开发完整的异步网络应用程序和协议。它不是Python标准库的一部分，所以需要单独<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted\" target=\"_blank\" rel=\"noopener\">下载</a>和安装它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p>\n<p>  安装成功显示<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Processing e:\\迅雷下载\\twisted-17.9.0-cp36-cp36m-win_amd64.whl</span><br><span class=\"line\">Requirement already satisfied: Automat&gt;=0.3.0 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: zope.interface&gt;=4.0.2 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: incremental&gt;=16.10.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: hyperlink&gt;=17.1.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: constantly&gt;=15.1 in e:\\python\\python36\\lib\\site-packages (from Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: attrs in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: six in e:\\python\\python36\\lib\\site-packages (from Automat&gt;=0.3.0-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Requirement already satisfied: setuptools in e:\\python\\python36\\lib\\site-packages (from zope.interface&gt;=4.0.2-&gt;Twisted==17.9.0)</span><br><span class=\"line\">Installing collected packages: Twisted</span><br><span class=\"line\">Successfully installed Twisted-17.9.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Twisted-Reactor-TCP-服务器-客户端\"><a href=\"#Twisted-Reactor-TCP-服务器-客户端\" class=\"headerlink\" title=\"Twisted Reactor TCP 服务器/客户端\"></a>Twisted Reactor TCP 服务器/客户端</h3><h4 id=\"TCP服务器-1\"><a href=\"#TCP服务器-1\" class=\"headerlink\" title=\"TCP服务器\"></a>TCP服务器</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用模块导入，特别是twisted.internet的protocol和reactor</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span> protocol, reactor</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置端口号</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWServProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承Protocol类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写connectionMade()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当一个客户端连接到服务器是会执行这个方法</span></span><br><span class=\"line\">        client = self.client = self.transport.getPeer().host</span><br><span class=\"line\">        print(<span class=\"string\">'...connected from:'</span>, client)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 重写dataReceived()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 当服务器接收到客户端通过网络发送的一些数据的时候会调用此方法</span></span><br><span class=\"line\">        self.transport.write(bytes(<span class=\"string\">'[%s] %s'</span> % (</span><br><span class=\"line\">            ctime(), data.decode(<span class=\"string\">'utf-8'</span>)), <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个协议工厂，每次得到一个接入连接是，制造协议的一个实例</span></span><br><span class=\"line\"><span class=\"comment\"># 在reactor中安装一个TCP监听器，以此检查服务请求</span></span><br><span class=\"line\"><span class=\"comment\"># 当接收到一个请求时，就是创建一个就是创建一个TWServProtocol实例来处理客户端事务</span></span><br><span class=\"line\">factory = protocol.Factory()</span><br><span class=\"line\">factory.protocol = TWServProtocol</span><br><span class=\"line\">print(<span class=\"string\">'waiting for connection...'</span>)</span><br><span class=\"line\">reactor.listenTCP(PORT, factory)</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP客户端-1\"><a href=\"#TCP客户端-1\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> twisted.internet <span class=\"keyword\">import</span>  protocol, reactor</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientProtocol</span><span class=\"params\">(protocol.Protocol)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendData</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 需要发送数据时调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 会在一个循环中继续，直到不输入任何内容来关闭连接</span></span><br><span class=\"line\">        data = input(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">            print(<span class=\"string\">'...send %s...'</span> % data)</span><br><span class=\"line\">            self.transport.write(bytes(data, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.transport.loseConnection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connectionMade</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReceived</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        print(data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">        self.sendData()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TWClientFactory</span><span class=\"params\">(protocol.ClientFactory)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建了一个客户端工厂</span></span><br><span class=\"line\">    protocol = TWClientProtocol</span><br><span class=\"line\">    clientConnectionLost = clientConnectionFailed = \\</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> self, connector, reason: reactor.stop()</span><br><span class=\"line\"><span class=\"comment\"># 创建了一个到服务器的连接并运行reactor，实例化了客户端工厂</span></span><br><span class=\"line\"><span class=\"comment\"># 因为这里不是服务器，需要等待客户端与我们通信</span></span><br><span class=\"line\"><span class=\"comment\"># 并且这个工厂为每一次连接都创建一个新的协议对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端创建单个连接到服务器的协议对象，而服务器的工厂则创建一个来与客户端通信</span></span><br><span class=\"line\">reactor.connectTCP(HOST, PORT, TWClientFactory())</span><br><span class=\"line\">reactor.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"TCP服务器和客户端运行结果\"><a href=\"#TCP服务器和客户端运行结果\" class=\"headerlink\" title=\"TCP服务器和客户端运行结果\"></a>TCP服务器和客户端运行结果</h4><ul>\n<li><p>服务器结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waiting for connection...</span><br><span class=\"line\">...connected from: 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hello</span><br><span class=\"line\">...send hello...</span><br><span class=\"line\">[Sat Feb 24 11:19:49 2018] hello</span><br><span class=\"line\">&gt; hi</span><br><span class=\"line\">...send hi...</span><br><span class=\"line\">[Sat Feb 24 11:20:02 2018] hi</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">需要安装python对应的版本和位数</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python数据库编程(二)","date":"2018-02-28T10:15:57.000Z","copyright":true,"description":null,"_content":"上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。\n<!--More-->\n## ORM\nORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。\n\n### python与ORM\n\n[SQLAlchemy](http://www.sqlalchemy.org/)和[SQLObject](http://sqlobject.org/)是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。\n* 安装SQLAlchemy\n`pip3 install sqlalchemy`\n\n* 安装SQLObject\n`pip3 install -U SQLObject`\n\n在这里将会通过两种ORM移植上一篇的[数据库适配器示例应用](http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用)\n\n#### SQLAlchemy\n> SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 首先导入标准库中的模块(os.path、random)\n# 然后是第三方或外部模块(sqlalchemy)\n# 最后是应用的本地模块(ushuffleDB)\nfrom os.path import dirname\nfrom random import randrange as rand\nfrom sqlalchemy import Column, Integer, \\\n    String, create_engine, exc, orm\nfrom sqlalchemy.ext.declarative \\\n    import declarative_base\nfrom ushuffleDB import DBNAME, NAMELEN, \\\n    randName, FIELDS, tformat, cformat, setup\n\n# 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称\nDSNs = {\n    'mysql': 'mysql+pymysql://root:root@localhost:3306/%s' % DBNAME,\n    'sqlite': 'sqlite:///:memory:',\n}\n\n# 使用SQLAlchemy的声明层\n# 使用导入的sqlalchemy.ext.declarative.declarative_base\n# 创建一个Base类\nBase = declarative_base()\n\n\nclass Users(Base):\n    # 数据子类\n    # __tablename__定义了映射的数据库表名\n    __tablename__ = 'users'\n    # 列的属性，可以查阅文档来获取所有支持的数据类型\n    login = Column(String(NAMELEN))\n    userid = Column(Integer, primary_key=True)\n    projid = Column(Integer)\n\n    def __str__(self):\n        # 用于返回易于阅读的数据行的字符串格式\n        return ''.join(map(tformat, (self.login, self.userid, self.projid)))\n\n\nclass SQLAlchemyTest(object):\n    def __init__(self, dsn):\n        # 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接\n        # 通过设置echo参数查看ORM生成的SQL语句\n        # create_engine('sqlite:///:memory:', echo=True)\n        try:\n            eng = create_engine(dsn)\n        except ImportError:\n            raise RuntimeError()\n\n        try:\n            eng.connect()\n        except exc.OperationalError:\n            # 此处连接失败是因为数据库不存在造成的\n            # 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分\n            # 使数据库的连接可以正常运行\n            # 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL\n            eng = create_engine(dirname(dsn))\n            eng.execute('CREATE DATABASE %s' % DBNAME).close()\n            eng = create_engine(dsn)\n        # 创建一个会话对象，用于管理单独的事务对象\n        # 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交\n        # 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来\n        # 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中\n        Session = orm.sessionmaker(bind=eng)\n        self.ses = Session()\n        self.users = Users.__table__\n        self.eng = self.users.metadata.bind = eng\n\n    def insert(self):\n        # session.add_all()使用迭代的方式产生一系列的插入操作\n        self.ses.add_all(\n            Users(login=who, userid=userid, projid=rand(1, 5))\n            for who, userid in randName()\n        )\n        # 决定是提交还是回滚\n        self.ses.commit()\n\n    def update(self):\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        # 会话查询的功能，使用query.filter_by()方法进行查找\n        users = self.ses.query(Users).filter_by(projid=fr).all()\n        for i, user in enumerate(users):\n            user.projid = to\n        self.ses.commit()\n        return fr, to, i+1\n\n    def delete(self):\n        rm = rand(1, 5)\n        i = -1\n        users = self.ses.query(Users).filter_by(projid=rm).all()\n        for i, user in enumerate(users):\n            self.ses.delete(user)\n        self.ses.commit()\n        return rm, i+1\n\n    def dbDump(self):\n        # 在屏幕上显示正确的输出\n        print('\\n%s' % ''.join(map(cformat, FIELDS)))\n        users = self.ses.query(Users).all()\n        for user in users:\n            print(user)\n        self.ses.commit()\n\n    def __getattr__(self, attr):\n        # __getattr__()可以避开创建drop()和create()方法\n        # __getattr__()只有在属性查找失败时才会被调用\n        # 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')\n        # 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现\n        # slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中\n        return getattr(self.users, attr)\n\n    def finish(self):\n        # 关闭连接\n        self.ses.connection().close()\n\n\ndef main():\n    # 入口函数\n    print('\\n***Connnect to %r database' % DBNAME)\n    db = setup()\n    if db not in DSNs:\n        print('ERROR: %r not supported, exit' % db)\n        return\n\n    try:\n        orm = SQLAlchemyTest(DSNs[db])\n    except RuntimeError:\n        print('ERROR: %r not supported, exit' % db)\n        return\n\n    print('\\n*** Create users table(drop old one if appl.')\n    orm.drop(checkfirst=True)\n    orm.create()\n\n    print('\\n***Insert namse into table')\n    orm.insert()\n    orm.dbDump()\n\n    print('\\n***Move users to a random group')\n    fr, to, num = orm.update()\n    print('\\t(%d users moved) from (%d) to (%d))' % (num, fr, to))\n    orm.dbDump()\n\n    print('\\n***Randomly delete group')\n    rm, num = orm.delete()\n    print('\\t(group #%d; %d users removed)' % (rm, num))\n    orm.dbDump()\n\n    print('\\n***Drop users table')\n    orm.drop()\n    print('***Close cxns')\n    orm.finish()\n\nif __name__ == '__main__':\n    main()\n```\n\n* mysql输出结果\n\n```\n***Connnect to 'test' database\n\nChoose a database system:\n    (M)ySQL\n    (S)QLite\nEnter choice:\nM\n\n\n*** Create users table(drop old one if appl.\n\n***Insert namse into table\n\nLOGIN     USERID    PROJID    \nBob       1234      1         \nDave      4523      1         \nAngela    4567      3         \n\n***Move users to a random group\n\t(2 users moved) from (1) to (4))\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      4         \nAngela    4567      3         \n\n***Randomly delete group\n\t(group #2; 0 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      4         \nAngela    4567      3         \n\n***Drop users table\n***Close cxns\n\n```\n\n* SQLite输出结果\n\n```\n\n***Connnect to 'test' database\n\nChoose a database system:\n        (M)ySQL\n        (S)QLite\nEnter choice:\nS\n\n*** Create users table(drop old one if appl.\n\n***Insert namse into table\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nDave      4523      1         \nAngela    4567      2         \n\n***Move users to a random group\n\t(2 users moved) from (2) to (2))\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nDave      4523      1         \nAngela    4567      2         \n\n***Randomly delete group\n\t(group #1; 1 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      2         \n\n***Drop users table\n***Close cxns\n```\n#### SQLObject\n\nSQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案[Mysqlclient](https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient)，选择对应的版本进行下载后执行相应的命令：\n`pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl`\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 使用SQLObject代替SQLAlchemy\n# 其余和使用SQLAlchemy的相同\nfrom os.path import dirname\nfrom random import randrange as rand\nfrom sqlobject import *\nfrom ushuffleDB import  DBNAME, NAMELEN, \\\n    randName, FIELDS, tformat, cformat, setup\n\nDSNs = {\n    'mysql': 'mysql://root:root@127.0.0.1:3306/%s' % DBNAME,\n    'sqlite': 'sqlite:///:memory:',\n}\n\n\nclass Users(SQLObject):\n    # 扩展了SQLObject.SQLObject类\n    # 定义列\n    login = StringCol(length=NAMELEN)\n    userid = IntCol()\n    projid = IntCol()\n\n    def __str__(self):\n        # 提供用于显示输出的方法\n        return ''.join(map(tformat, (\n            self.login, self.userid, self.projid)))\n\n\nclass SQLObjectTest(object):\n    def __init__(self, dsn):\n        # 确保得到一个可用的数据库，然后返回连接\n        try:\n            cxn = connectionForURI(dsn)\n        except ImportError:\n            raise RuntimeError()\n\n        try:\n            # 尝试对已存在的表建立连接\n            # 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常\n            cxn.releaseConnection(cxn.getConnection())\n        except dberrors.OperationalError:\n            # 出现异常则创建表\n            cxn = connectionForURI(dirname(dsn))\n            cxn.query('CREATE DATABASE %s' % DBNAME)\n            cxn = connectionForURI(dsn)\n        # 成功后在self.cxn中保存连接对象\n        self.cxn = sqlhub.processConnection = cxn\n\n    def insert(self):\n        # 插入\n        for who, userid in randName():\n            Users(login=who, userid=userid, projid=rand(1, 5))\n\n    def update(self):\n        # 更新\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        users = Users.selectBy(projid=fr)\n        for i, user in enumerate(users):\n            user.projid = to\n        return fr, to, i+1\n\n    def delete(self):\n        # 删除\n        rm = rand(1, 5)\n        users = Users.selectBy(projid=rm)\n        i = -1\n        for i, user in enumerate(users):\n            user.destroySelf()\n        return rm, i+1\n\n    def dbDump(self):\n        print('\\n%s' % ''.join(map(cformat, FIELDS)))\n        for user in Users.select():\n            print(user)\n\n    def finish(self):\n        # 关闭连接\n        self.cxn.close()\n\n\ndef main():\n    print('***Connect to %r database' % DBNAME)\n    db = setup()\n    if db not in DSNs:\n        print('\\nError: %r not support' % db)\n        return\n\n    try:\n        orm = SQLObjectTest(DSNs[db])\n    except RuntimeError:\n        print('\\nError: %r not support' % db)\n        return\n\n    print('\\n***Create users table(drop old one if appl.)')\n    Users.dropTable(True)\n    Users.createTable()\n\n    print('\\n*** Insert names into table')\n    orm.insert()\n    orm.dbDump()\n\n    print('\\n*** Move users to a random group')\n    fr, to, num = orm.update()\n    print('\\t(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    orm.dbDump()\n\n    print('\\n*** Randomly delete group')\n    rm, num = orm.delete()\n    print('\\t(group #%d;%d users removed)' % (rm, num))\n    orm.dbDump()\n\n    print('\\n*** Drop users table')\n    # 使用dropTable()方法\n    Users.dropTable()\n    print('\\n***Close cxns')\n    orm.finish()\n\nif __name__ == '__main__':\n    main()\n```\n\n* MySQL输出结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nM\n\n***Create users table(drop old one if appl.)\n\n*** Insert names into table\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      3         \nAngela    4567      1         \n\n*** Move users to a random group\n(0 users moved) from (2) to (4)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      3         \nAngela    4567      1         \n\n*** Randomly delete group\n(group #3;1 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nAngela    4567      1         \n\n*** Drop users table\n\n***Close cxns\n```\n\n* SQLite输出结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nS\n\n***Create users table(drop old one if appl.)\n\n*** Insert names into table\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      4         \nDave      4523      3         \n\n*** Move users to a random group\n(1 users moved) from (3) to (1)\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      4         \nDave      4523      1         \n\n*** Randomly delete group\n(group #2;1 users removed)\n\nLOGIN     USERID    PROJID    \nAngela    4567      4         \nDave      4523      1         \n\n*** Drop users table\n\n***Close cxns\n```\n\n## 非关系型数据库\n\nWeb和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。\n\n### MongoDB\n[MongoDB](https://www.mongodb.com/)是非常流行的文档存储非关系数据库。\n>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型\n\nMongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。\n\n### PyMongo:MongoDB和Python\nPyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要[安装MongoDB数据库](https://www.mongodb.com/download-center?jmp=nav#atlas)和PyMongo：\n` pip3 install pymongo`\n在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令\n` .mongod --dbpath E:\\MongoDB\\data`\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 主要导入的是MongoClient对象和及其包异常errors\nfrom random import randrange as rand\nfrom pymongo import MongoClient, errors\nfrom ushuffleDB import DBNAME, randName, FIELDS, tformat, cformat\n\n# 设置了集合(“表”)名\nCOLLECTION = 'users'\n\n\nclass MongoTest(object):\n    def __init__(self):\n        # 创建一个连接，如果服务器不可达，则抛出异常\n        try:\n            cxn = MongoClient()\n        except errors.AutoReconnect:\n            raise RuntimeError\n        # 创建并复用数据库及“users”集合\n        # 关系数据库中的表会对列的格式进行定义，\n        # 然后使遵循这个列定义的每条记录成为一行\n        # 非关系数据库中集合没有任何模式的需求，\n        # 每条记录都有其特定的文档\n        # 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中\n        self.db = cxn[DBNAME]\n        self.users = self.db[COLLECTION]\n\n    def insert(self):\n        # 向MongoDB的集合中添加值\n        # 使用dict()工厂函数为每条记录创建一个文档\n        # 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法\n        self.users.insert(\n            dict(login=who, userid=uid, projid=rand(1, 5)\n                 )for who, uid in randName()\n        )\n\n    def update(self):\n        # 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        # 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户\n        # 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)\n        for i, user in enumerate(self.users.find({'projid': fr})):\n            # 使用$set指令可以显式地修改已存在的值\n            # 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷\n            # 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值\n            # update()方法可以用来修改多个文档(将multi标志设为True)\n            self.users.update(user, {\n                '$set': {'projid': to}\n            })\n        return fr, to, i+1\n\n    def delete(self):\n        # 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除\n        # 然后返回结果\n        rm = rand(1, 5)\n        i = -1\n        for i, user in enumerate(self.users.find({'projid': rm})):\n            self.users.remove(user)\n        return rm, i+1\n\n    def dbDump(self):\n        # 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示\n        print('%s' % ''.join(map(cformat, FIELDS)))\n        for user in self.users.find():\n            print(''.join(map(tformat, (\n                user[k] for k in FIELDS))))\n\n\ndef main():\n    print('***Connect to %r database' % DBNAME)\n    try:\n        mongo = MongoTest()\n    except RuntimeError:\n        print('\\nERROR: MongoDB server unreadable, exit')\n        return\n\n    print('\\n***Insert names into table')\n    mongo.insert()\n    mongo.dbDump()\n\n    print('\\n***Move users to a random group')\n    fr, to, num = mongo.update()\n    print('\\t(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    mongo.dbDump()\n\n    print('\\n*** Randomly delete group')\n    rm, num = mongo.delete()\n    print('\\tgroup #%d; %d users removed' % (rm, num))\n    mongo.dbDump()\n\n    print('\\n***Drop users table')\n    mongo.db.drop_collection(COLLECTION)\n\nif __name__ == '__main__':\n    main()\n```\n\n* 执行结果\n\n```\n***Connect to 'test' database\n\n***Insert names into table\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \nAngela    4567      2         \n\n***Move users to a random group\n\t(0 users moved) from (1) to (2)\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \nAngela    4567      2         \n\n*** Randomly delete group\n\tgroup #2; 1 users removed\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \n\n***Drop users table\n```\n","source":"_posts/Python数据库编程-二.md","raw":"---\ntitle: Python数据库编程(二)\ndate: 2018-02-28 18:15:57\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 数据库编程\ndescription:\n---\n上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。\n<!--More-->\n## ORM\nORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。\n\n### python与ORM\n\n[SQLAlchemy](http://www.sqlalchemy.org/)和[SQLObject](http://sqlobject.org/)是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。\n* 安装SQLAlchemy\n`pip3 install sqlalchemy`\n\n* 安装SQLObject\n`pip3 install -U SQLObject`\n\n在这里将会通过两种ORM移植上一篇的[数据库适配器示例应用](http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用)\n\n#### SQLAlchemy\n> SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 首先导入标准库中的模块(os.path、random)\n# 然后是第三方或外部模块(sqlalchemy)\n# 最后是应用的本地模块(ushuffleDB)\nfrom os.path import dirname\nfrom random import randrange as rand\nfrom sqlalchemy import Column, Integer, \\\n    String, create_engine, exc, orm\nfrom sqlalchemy.ext.declarative \\\n    import declarative_base\nfrom ushuffleDB import DBNAME, NAMELEN, \\\n    randName, FIELDS, tformat, cformat, setup\n\n# 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称\nDSNs = {\n    'mysql': 'mysql+pymysql://root:root@localhost:3306/%s' % DBNAME,\n    'sqlite': 'sqlite:///:memory:',\n}\n\n# 使用SQLAlchemy的声明层\n# 使用导入的sqlalchemy.ext.declarative.declarative_base\n# 创建一个Base类\nBase = declarative_base()\n\n\nclass Users(Base):\n    # 数据子类\n    # __tablename__定义了映射的数据库表名\n    __tablename__ = 'users'\n    # 列的属性，可以查阅文档来获取所有支持的数据类型\n    login = Column(String(NAMELEN))\n    userid = Column(Integer, primary_key=True)\n    projid = Column(Integer)\n\n    def __str__(self):\n        # 用于返回易于阅读的数据行的字符串格式\n        return ''.join(map(tformat, (self.login, self.userid, self.projid)))\n\n\nclass SQLAlchemyTest(object):\n    def __init__(self, dsn):\n        # 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接\n        # 通过设置echo参数查看ORM生成的SQL语句\n        # create_engine('sqlite:///:memory:', echo=True)\n        try:\n            eng = create_engine(dsn)\n        except ImportError:\n            raise RuntimeError()\n\n        try:\n            eng.connect()\n        except exc.OperationalError:\n            # 此处连接失败是因为数据库不存在造成的\n            # 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分\n            # 使数据库的连接可以正常运行\n            # 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL\n            eng = create_engine(dirname(dsn))\n            eng.execute('CREATE DATABASE %s' % DBNAME).close()\n            eng = create_engine(dsn)\n        # 创建一个会话对象，用于管理单独的事务对象\n        # 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交\n        # 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来\n        # 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中\n        Session = orm.sessionmaker(bind=eng)\n        self.ses = Session()\n        self.users = Users.__table__\n        self.eng = self.users.metadata.bind = eng\n\n    def insert(self):\n        # session.add_all()使用迭代的方式产生一系列的插入操作\n        self.ses.add_all(\n            Users(login=who, userid=userid, projid=rand(1, 5))\n            for who, userid in randName()\n        )\n        # 决定是提交还是回滚\n        self.ses.commit()\n\n    def update(self):\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        # 会话查询的功能，使用query.filter_by()方法进行查找\n        users = self.ses.query(Users).filter_by(projid=fr).all()\n        for i, user in enumerate(users):\n            user.projid = to\n        self.ses.commit()\n        return fr, to, i+1\n\n    def delete(self):\n        rm = rand(1, 5)\n        i = -1\n        users = self.ses.query(Users).filter_by(projid=rm).all()\n        for i, user in enumerate(users):\n            self.ses.delete(user)\n        self.ses.commit()\n        return rm, i+1\n\n    def dbDump(self):\n        # 在屏幕上显示正确的输出\n        print('\\n%s' % ''.join(map(cformat, FIELDS)))\n        users = self.ses.query(Users).all()\n        for user in users:\n            print(user)\n        self.ses.commit()\n\n    def __getattr__(self, attr):\n        # __getattr__()可以避开创建drop()和create()方法\n        # __getattr__()只有在属性查找失败时才会被调用\n        # 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')\n        # 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现\n        # slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中\n        return getattr(self.users, attr)\n\n    def finish(self):\n        # 关闭连接\n        self.ses.connection().close()\n\n\ndef main():\n    # 入口函数\n    print('\\n***Connnect to %r database' % DBNAME)\n    db = setup()\n    if db not in DSNs:\n        print('ERROR: %r not supported, exit' % db)\n        return\n\n    try:\n        orm = SQLAlchemyTest(DSNs[db])\n    except RuntimeError:\n        print('ERROR: %r not supported, exit' % db)\n        return\n\n    print('\\n*** Create users table(drop old one if appl.')\n    orm.drop(checkfirst=True)\n    orm.create()\n\n    print('\\n***Insert namse into table')\n    orm.insert()\n    orm.dbDump()\n\n    print('\\n***Move users to a random group')\n    fr, to, num = orm.update()\n    print('\\t(%d users moved) from (%d) to (%d))' % (num, fr, to))\n    orm.dbDump()\n\n    print('\\n***Randomly delete group')\n    rm, num = orm.delete()\n    print('\\t(group #%d; %d users removed)' % (rm, num))\n    orm.dbDump()\n\n    print('\\n***Drop users table')\n    orm.drop()\n    print('***Close cxns')\n    orm.finish()\n\nif __name__ == '__main__':\n    main()\n```\n\n* mysql输出结果\n\n```\n***Connnect to 'test' database\n\nChoose a database system:\n    (M)ySQL\n    (S)QLite\nEnter choice:\nM\n\n\n*** Create users table(drop old one if appl.\n\n***Insert namse into table\n\nLOGIN     USERID    PROJID    \nBob       1234      1         \nDave      4523      1         \nAngela    4567      3         \n\n***Move users to a random group\n\t(2 users moved) from (1) to (4))\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      4         \nAngela    4567      3         \n\n***Randomly delete group\n\t(group #2; 0 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      4         \nAngela    4567      3         \n\n***Drop users table\n***Close cxns\n\n```\n\n* SQLite输出结果\n\n```\n\n***Connnect to 'test' database\n\nChoose a database system:\n        (M)ySQL\n        (S)QLite\nEnter choice:\nS\n\n*** Create users table(drop old one if appl.\n\n***Insert namse into table\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nDave      4523      1         \nAngela    4567      2         \n\n***Move users to a random group\n\t(2 users moved) from (2) to (2))\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nDave      4523      1         \nAngela    4567      2         \n\n***Randomly delete group\n\t(group #1; 1 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      2         \n\n***Drop users table\n***Close cxns\n```\n#### SQLObject\n\nSQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案[Mysqlclient](https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient)，选择对应的版本进行下载后执行相应的命令：\n`pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl`\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 使用SQLObject代替SQLAlchemy\n# 其余和使用SQLAlchemy的相同\nfrom os.path import dirname\nfrom random import randrange as rand\nfrom sqlobject import *\nfrom ushuffleDB import  DBNAME, NAMELEN, \\\n    randName, FIELDS, tformat, cformat, setup\n\nDSNs = {\n    'mysql': 'mysql://root:root@127.0.0.1:3306/%s' % DBNAME,\n    'sqlite': 'sqlite:///:memory:',\n}\n\n\nclass Users(SQLObject):\n    # 扩展了SQLObject.SQLObject类\n    # 定义列\n    login = StringCol(length=NAMELEN)\n    userid = IntCol()\n    projid = IntCol()\n\n    def __str__(self):\n        # 提供用于显示输出的方法\n        return ''.join(map(tformat, (\n            self.login, self.userid, self.projid)))\n\n\nclass SQLObjectTest(object):\n    def __init__(self, dsn):\n        # 确保得到一个可用的数据库，然后返回连接\n        try:\n            cxn = connectionForURI(dsn)\n        except ImportError:\n            raise RuntimeError()\n\n        try:\n            # 尝试对已存在的表建立连接\n            # 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常\n            cxn.releaseConnection(cxn.getConnection())\n        except dberrors.OperationalError:\n            # 出现异常则创建表\n            cxn = connectionForURI(dirname(dsn))\n            cxn.query('CREATE DATABASE %s' % DBNAME)\n            cxn = connectionForURI(dsn)\n        # 成功后在self.cxn中保存连接对象\n        self.cxn = sqlhub.processConnection = cxn\n\n    def insert(self):\n        # 插入\n        for who, userid in randName():\n            Users(login=who, userid=userid, projid=rand(1, 5))\n\n    def update(self):\n        # 更新\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        users = Users.selectBy(projid=fr)\n        for i, user in enumerate(users):\n            user.projid = to\n        return fr, to, i+1\n\n    def delete(self):\n        # 删除\n        rm = rand(1, 5)\n        users = Users.selectBy(projid=rm)\n        i = -1\n        for i, user in enumerate(users):\n            user.destroySelf()\n        return rm, i+1\n\n    def dbDump(self):\n        print('\\n%s' % ''.join(map(cformat, FIELDS)))\n        for user in Users.select():\n            print(user)\n\n    def finish(self):\n        # 关闭连接\n        self.cxn.close()\n\n\ndef main():\n    print('***Connect to %r database' % DBNAME)\n    db = setup()\n    if db not in DSNs:\n        print('\\nError: %r not support' % db)\n        return\n\n    try:\n        orm = SQLObjectTest(DSNs[db])\n    except RuntimeError:\n        print('\\nError: %r not support' % db)\n        return\n\n    print('\\n***Create users table(drop old one if appl.)')\n    Users.dropTable(True)\n    Users.createTable()\n\n    print('\\n*** Insert names into table')\n    orm.insert()\n    orm.dbDump()\n\n    print('\\n*** Move users to a random group')\n    fr, to, num = orm.update()\n    print('\\t(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    orm.dbDump()\n\n    print('\\n*** Randomly delete group')\n    rm, num = orm.delete()\n    print('\\t(group #%d;%d users removed)' % (rm, num))\n    orm.dbDump()\n\n    print('\\n*** Drop users table')\n    # 使用dropTable()方法\n    Users.dropTable()\n    print('\\n***Close cxns')\n    orm.finish()\n\nif __name__ == '__main__':\n    main()\n```\n\n* MySQL输出结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nM\n\n***Create users table(drop old one if appl.)\n\n*** Insert names into table\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      3         \nAngela    4567      1         \n\n*** Move users to a random group\n(0 users moved) from (2) to (4)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nDave      4523      3         \nAngela    4567      1         \n\n*** Randomly delete group\n(group #3;1 users removed)\n\nLOGIN     USERID    PROJID    \nBob       1234      4         \nAngela    4567      1         \n\n*** Drop users table\n\n***Close cxns\n```\n\n* SQLite输出结果\n\n```\nChoose a database system:\n(M)ySQL\n(S)QLite\nEnter choice:\nS\n\n***Create users table(drop old one if appl.)\n\n*** Insert names into table\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      4         \nDave      4523      3         \n\n*** Move users to a random group\n(1 users moved) from (3) to (1)\n\nLOGIN     USERID    PROJID    \nBob       1234      2         \nAngela    4567      4         \nDave      4523      1         \n\n*** Randomly delete group\n(group #2;1 users removed)\n\nLOGIN     USERID    PROJID    \nAngela    4567      4         \nDave      4523      1         \n\n*** Drop users table\n\n***Close cxns\n```\n\n## 非关系型数据库\n\nWeb和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。\n\n### MongoDB\n[MongoDB](https://www.mongodb.com/)是非常流行的文档存储非关系数据库。\n>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型\n\nMongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。\n\n### PyMongo:MongoDB和Python\nPyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要[安装MongoDB数据库](https://www.mongodb.com/download-center?jmp=nav#atlas)和PyMongo：\n` pip3 install pymongo`\n在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令\n` .mongod --dbpath E:\\MongoDB\\data`\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\n# 主要导入的是MongoClient对象和及其包异常errors\nfrom random import randrange as rand\nfrom pymongo import MongoClient, errors\nfrom ushuffleDB import DBNAME, randName, FIELDS, tformat, cformat\n\n# 设置了集合(“表”)名\nCOLLECTION = 'users'\n\n\nclass MongoTest(object):\n    def __init__(self):\n        # 创建一个连接，如果服务器不可达，则抛出异常\n        try:\n            cxn = MongoClient()\n        except errors.AutoReconnect:\n            raise RuntimeError\n        # 创建并复用数据库及“users”集合\n        # 关系数据库中的表会对列的格式进行定义，\n        # 然后使遵循这个列定义的每条记录成为一行\n        # 非关系数据库中集合没有任何模式的需求，\n        # 每条记录都有其特定的文档\n        # 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中\n        self.db = cxn[DBNAME]\n        self.users = self.db[COLLECTION]\n\n    def insert(self):\n        # 向MongoDB的集合中添加值\n        # 使用dict()工厂函数为每条记录创建一个文档\n        # 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法\n        self.users.insert(\n            dict(login=who, userid=uid, projid=rand(1, 5)\n                 )for who, uid in randName()\n        )\n\n    def update(self):\n        # 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项\n        fr = rand(1, 5)\n        to = rand(1, 5)\n        i = -1\n        # 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户\n        # 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)\n        for i, user in enumerate(self.users.find({'projid': fr})):\n            # 使用$set指令可以显式地修改已存在的值\n            # 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷\n            # 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值\n            # update()方法可以用来修改多个文档(将multi标志设为True)\n            self.users.update(user, {\n                '$set': {'projid': to}\n            })\n        return fr, to, i+1\n\n    def delete(self):\n        # 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除\n        # 然后返回结果\n        rm = rand(1, 5)\n        i = -1\n        for i, user in enumerate(self.users.find({'projid': rm})):\n            self.users.remove(user)\n        return rm, i+1\n\n    def dbDump(self):\n        # 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示\n        print('%s' % ''.join(map(cformat, FIELDS)))\n        for user in self.users.find():\n            print(''.join(map(tformat, (\n                user[k] for k in FIELDS))))\n\n\ndef main():\n    print('***Connect to %r database' % DBNAME)\n    try:\n        mongo = MongoTest()\n    except RuntimeError:\n        print('\\nERROR: MongoDB server unreadable, exit')\n        return\n\n    print('\\n***Insert names into table')\n    mongo.insert()\n    mongo.dbDump()\n\n    print('\\n***Move users to a random group')\n    fr, to, num = mongo.update()\n    print('\\t(%d users moved) from (%d) to (%d)' % (num, fr, to))\n    mongo.dbDump()\n\n    print('\\n*** Randomly delete group')\n    rm, num = mongo.delete()\n    print('\\tgroup #%d; %d users removed' % (rm, num))\n    mongo.dbDump()\n\n    print('\\n***Drop users table')\n    mongo.db.drop_collection(COLLECTION)\n\nif __name__ == '__main__':\n    main()\n```\n\n* 执行结果\n\n```\n***Connect to 'test' database\n\n***Insert names into table\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \nAngela    4567      2         \n\n***Move users to a random group\n\t(0 users moved) from (1) to (2)\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \nAngela    4567      2         \n\n*** Randomly delete group\n\tgroup #2; 1 users removed\nLOGIN     USERID    PROJID    \nDave      4523      4         \nBob       1234      4         \n\n***Drop users table\n```\n","slug":"Python数据库编程-二","published":1,"updated":"2018-03-02T06:55:46.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw50000wtwn990p98o8c","content":"<p>上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。<br><a id=\"more\"></a></p>\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><p>ORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。</p>\n<h3 id=\"python与ORM\"><a href=\"#python与ORM\" class=\"headerlink\" title=\"python与ORM\"></a>python与ORM</h3><p><a href=\"http://www.sqlalchemy.org/\" target=\"_blank\" rel=\"noopener\">SQLAlchemy</a>和<a href=\"http://sqlobject.org/\" target=\"_blank\" rel=\"noopener\">SQLObject</a>是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。</p>\n<ul>\n<li><p>安装SQLAlchemy<br><code>pip3 install sqlalchemy</code></p>\n</li>\n<li><p>安装SQLObject<br><code>pip3 install -U SQLObject</code></p>\n</li>\n</ul>\n<p>在这里将会通过两种ORM移植上一篇的<a href=\"http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用\">数据库适配器示例应用</a></p>\n<h4 id=\"SQLAlchemy\"><a href=\"#SQLAlchemy\" class=\"headerlink\" title=\"SQLAlchemy\"></a>SQLAlchemy</h4><blockquote>\n<p>SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先导入标准库中的模块(os.path、random)</span></span><br><span class=\"line\"><span class=\"comment\"># 然后是第三方或外部模块(sqlalchemy)</span></span><br><span class=\"line\"><span class=\"comment\"># 最后是应用的本地模块(ushuffleDB)</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> dirname</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, \\</span><br><span class=\"line\">    String, create_engine, exc, orm</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative \\</span><br><span class=\"line\">    <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span> DBNAME, NAMELEN, \\</span><br><span class=\"line\">    randName, FIELDS, tformat, cformat, setup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称</span></span><br><span class=\"line\">DSNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'mysql'</span>: <span class=\"string\">'mysql+pymysql://root:root@localhost:3306/%s'</span> % DBNAME,</span><br><span class=\"line\">    <span class=\"string\">'sqlite'</span>: <span class=\"string\">'sqlite:///:memory:'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用SQLAlchemy的声明层</span></span><br><span class=\"line\"><span class=\"comment\"># 使用导入的sqlalchemy.ext.declarative.declarative_base</span></span><br><span class=\"line\"><span class=\"comment\"># 创建一个Base类</span></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Users</span><span class=\"params\">(Base)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据子类</span></span><br><span class=\"line\">    <span class=\"comment\"># __tablename__定义了映射的数据库表名</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    <span class=\"comment\"># 列的属性，可以查阅文档来获取所有支持的数据类型</span></span><br><span class=\"line\">    login = Column(String(NAMELEN))</span><br><span class=\"line\">    userid = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    projid = Column(Integer)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于返回易于阅读的数据行的字符串格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(map(tformat, (self.login, self.userid, self.projid)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SQLAlchemyTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dsn)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过设置echo参数查看ORM生成的SQL语句</span></span><br><span class=\"line\">        <span class=\"comment\"># create_engine('sqlite:///:memory:', echo=True)</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            eng = create_engine(dsn)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            eng.connect()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> exc.OperationalError:</span><br><span class=\"line\">            <span class=\"comment\"># 此处连接失败是因为数据库不存在造成的</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分</span></span><br><span class=\"line\">            <span class=\"comment\"># 使数据库的连接可以正常运行</span></span><br><span class=\"line\">            <span class=\"comment\"># 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL</span></span><br><span class=\"line\">            eng = create_engine(dirname(dsn))</span><br><span class=\"line\">            eng.execute(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME).close()</span><br><span class=\"line\">            eng = create_engine(dsn)</span><br><span class=\"line\">        <span class=\"comment\"># 创建一个会话对象，用于管理单独的事务对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来</span></span><br><span class=\"line\">        <span class=\"comment\"># 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中</span></span><br><span class=\"line\">        Session = orm.sessionmaker(bind=eng)</span><br><span class=\"line\">        self.ses = Session()</span><br><span class=\"line\">        self.users = Users.__table__</span><br><span class=\"line\">        self.eng = self.users.metadata.bind = eng</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># session.add_all()使用迭代的方式产生一系列的插入操作</span></span><br><span class=\"line\">        self.ses.add_all(</span><br><span class=\"line\">            Users(login=who, userid=userid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> who, userid <span class=\"keyword\">in</span> randName()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 决定是提交还是回滚</span></span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 会话查询的功能，使用query.filter_by()方法进行查找</span></span><br><span class=\"line\">        users = self.ses.query(Users).filter_by(projid=fr).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.projid = to</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        users = self.ses.query(Users).filter_by(projid=rm).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            self.ses.delete(user)</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在屏幕上显示正确的输出</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        users = self.ses.query(Users).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</span><br><span class=\"line\">            print(user)</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># __getattr__()可以避开创建drop()和create()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># __getattr__()只有在属性查找失败时才会被调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')</span></span><br><span class=\"line\">        <span class=\"comment\"># 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现</span></span><br><span class=\"line\">        <span class=\"comment\"># slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getattr(self.users, attr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        self.ses.connection().close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 入口函数</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Connnect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> db <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> DSNs:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        orm = SQLAlchemyTest(DSNs[db])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Create users table(drop old one if appl.'</span>)</span><br><span class=\"line\">    orm.drop(checkfirst=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    orm.create()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Insert namse into table'</span>)</span><br><span class=\"line\">    orm.insert()</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = orm.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d))'</span> % (num, fr, to))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = orm.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Drop users table'</span>)</span><br><span class=\"line\">    orm.drop()</span><br><span class=\"line\">    print(<span class=\"string\">'***Close cxns'</span>)</span><br><span class=\"line\">    orm.finish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mysql输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Connnect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">Choose a database system:</span><br><span class=\"line\">    (M)ySQL</span><br><span class=\"line\">    (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*** Create users table(drop old one if appl.</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert namse into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      1         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(2 users moved) from (1) to (4))</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly delete group</span><br><span class=\"line\">\t(group #2; 0 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">***Connnect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">Choose a database system:</span><br><span class=\"line\">        (M)ySQL</span><br><span class=\"line\">        (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\"></span><br><span class=\"line\">*** Create users table(drop old one if appl.</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert namse into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(2 users moved) from (2) to (2))</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly delete group</span><br><span class=\"line\">\t(group #1; 1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<h4 id=\"SQLObject\"><a href=\"#SQLObject\" class=\"headerlink\" title=\"SQLObject\"></a>SQLObject</h4><p>SQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient\" target=\"_blank\" rel=\"noopener\">Mysqlclient</a>，选择对应的版本进行下载后执行相应的命令：<br><code>pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用SQLObject代替SQLAlchemy</span></span><br><span class=\"line\"><span class=\"comment\"># 其余和使用SQLAlchemy的相同</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> dirname</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlobject <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span>  DBNAME, NAMELEN, \\</span><br><span class=\"line\">    randName, FIELDS, tformat, cformat, setup</span><br><span class=\"line\"></span><br><span class=\"line\">DSNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'mysql'</span>: <span class=\"string\">'mysql://root:root@127.0.0.1:3306/%s'</span> % DBNAME,</span><br><span class=\"line\">    <span class=\"string\">'sqlite'</span>: <span class=\"string\">'sqlite:///:memory:'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Users</span><span class=\"params\">(SQLObject)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 扩展了SQLObject.SQLObject类</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义列</span></span><br><span class=\"line\">    login = StringCol(length=NAMELEN)</span><br><span class=\"line\">    userid = IntCol()</span><br><span class=\"line\">    projid = IntCol()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 提供用于显示输出的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(map(tformat, (</span><br><span class=\"line\">            self.login, self.userid, self.projid)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SQLObjectTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dsn)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 确保得到一个可用的数据库，然后返回连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cxn = connectionForURI(dsn)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 尝试对已存在的表建立连接</span></span><br><span class=\"line\">            <span class=\"comment\"># 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常</span></span><br><span class=\"line\">            cxn.releaseConnection(cxn.getConnection())</span><br><span class=\"line\">        <span class=\"keyword\">except</span> dberrors.OperationalError:</span><br><span class=\"line\">            <span class=\"comment\"># 出现异常则创建表</span></span><br><span class=\"line\">            cxn = connectionForURI(dirname(dsn))</span><br><span class=\"line\">            cxn.query(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class=\"line\">            cxn = connectionForURI(dsn)</span><br><span class=\"line\">        <span class=\"comment\"># 成功后在self.cxn中保存连接对象</span></span><br><span class=\"line\">        self.cxn = sqlhub.processConnection = cxn</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 插入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> who, userid <span class=\"keyword\">in</span> randName():</span><br><span class=\"line\">            Users(login=who, userid=userid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        users = Users.selectBy(projid=fr)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.projid = to</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 删除</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        users = Users.selectBy(projid=rm)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.destroySelf()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> Users.select():</span><br><span class=\"line\">            print(user)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        self.cxn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Connect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> db <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> DSNs:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nError: %r not support'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        orm = SQLObjectTest(DSNs[db])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nError: %r not support'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Create users table(drop old one if appl.)'</span>)</span><br><span class=\"line\">    Users.dropTable(<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    Users.createTable()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Insert names into table'</span>)</span><br><span class=\"line\">    orm.insert()</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = orm.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = orm.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d;%d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Drop users table'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 使用dropTable()方法</span></span><br><span class=\"line\">    Users.dropTable()</span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Close cxns'</span>)</span><br><span class=\"line\">    orm.finish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MySQL输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\"></span><br><span class=\"line\">***Create users table(drop old one if appl.)</span><br><span class=\"line\"></span><br><span class=\"line\">*** Insert names into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Move users to a random group</span><br><span class=\"line\">(0 users moved) from (2) to (4)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">(group #3;1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Drop users table</span><br><span class=\"line\"></span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\"></span><br><span class=\"line\">***Create users table(drop old one if appl.)</span><br><span class=\"line\"></span><br><span class=\"line\">*** Insert names into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Move users to a random group</span><br><span class=\"line\">(1 users moved) from (3) to (1)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">(group #2;1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Drop users table</span><br><span class=\"line\"></span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<h2 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h2><p>Web和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。</p>\n<h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><p><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">MongoDB</a>是非常流行的文档存储非关系数据库。</p>\n<blockquote>\n<p>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型</p>\n</blockquote>\n<p>MongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。</p>\n<h3 id=\"PyMongo-MongoDB和Python\"><a href=\"#PyMongo-MongoDB和Python\" class=\"headerlink\" title=\"PyMongo:MongoDB和Python\"></a>PyMongo:MongoDB和Python</h3><p>PyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要<a href=\"https://www.mongodb.com/download-center?jmp=nav#atlas\" target=\"_blank\" rel=\"noopener\">安装MongoDB数据库</a>和PyMongo：<br><code>pip3 install pymongo</code><br>在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令<br><code>.mongod --dbpath E:\\MongoDB\\data</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主要导入的是MongoClient对象和及其包异常errors</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient, errors</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span> DBNAME, randName, FIELDS, tformat, cformat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置了集合(“表”)名</span></span><br><span class=\"line\">COLLECTION = <span class=\"string\">'users'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建一个连接，如果服务器不可达，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cxn = MongoClient()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> errors.AutoReconnect:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError</span><br><span class=\"line\">        <span class=\"comment\"># 创建并复用数据库及“users”集合</span></span><br><span class=\"line\">        <span class=\"comment\"># 关系数据库中的表会对列的格式进行定义，</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后使遵循这个列定义的每条记录成为一行</span></span><br><span class=\"line\">        <span class=\"comment\"># 非关系数据库中集合没有任何模式的需求，</span></span><br><span class=\"line\">        <span class=\"comment\"># 每条记录都有其特定的文档</span></span><br><span class=\"line\">        <span class=\"comment\"># 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中</span></span><br><span class=\"line\">        self.db = cxn[DBNAME]</span><br><span class=\"line\">        self.users = self.db[COLLECTION]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 向MongoDB的集合中添加值</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用dict()工厂函数为每条记录创建一个文档</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法</span></span><br><span class=\"line\">        self.users.insert(</span><br><span class=\"line\">            dict(login=who, userid=uid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">                 )<span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(self.users.find(&#123;<span class=\"string\">'projid'</span>: fr&#125;)):</span><br><span class=\"line\">            <span class=\"comment\"># 使用$set指令可以显式地修改已存在的值</span></span><br><span class=\"line\">            <span class=\"comment\"># 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷</span></span><br><span class=\"line\">            <span class=\"comment\"># 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值</span></span><br><span class=\"line\">            <span class=\"comment\"># update()方法可以用来修改多个文档(将multi标志设为True)</span></span><br><span class=\"line\">            self.users.update(user, &#123;</span><br><span class=\"line\">                <span class=\"string\">'$set'</span>: &#123;<span class=\"string\">'projid'</span>: to&#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后返回结果</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(self.users.find(&#123;<span class=\"string\">'projid'</span>: rm&#125;)):</span><br><span class=\"line\">            self.users.remove(user)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> self.users.find():</span><br><span class=\"line\">            print(<span class=\"string\">''</span>.join(map(tformat, (</span><br><span class=\"line\">                user[k] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> FIELDS))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Connect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        mongo = MongoTest()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nERROR: MongoDB server unreadable, exit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Insert names into table'</span>)</span><br><span class=\"line\">    mongo.insert()</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = mongo.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = mongo.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\tgroup #%d; %d users removed'</span> % (rm, num))</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Drop users table'</span>)</span><br><span class=\"line\">    mongo.db.drop_collection(COLLECTION)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Connect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(0 users moved) from (1) to (2)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">\tgroup #2; 1 users removed</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>上一篇中主要对直接操作数据库做了一个比较详细的总结，这里将会对使用ORM框架进行简要的描述。<br>","more":"</p>\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><p>ORM系统的作者将纯SQL语句进行了抽象化处理，将其实现为Python中的对象，这样只操作这些对象就能完成与生成SQL语句相同的任务。</p>\n<h3 id=\"python与ORM\"><a href=\"#python与ORM\" class=\"headerlink\" title=\"python与ORM\"></a>python与ORM</h3><p><a href=\"http://www.sqlalchemy.org/\" target=\"_blank\" rel=\"noopener\">SQLAlchemy</a>和<a href=\"http://sqlobject.org/\" target=\"_blank\" rel=\"noopener\">SQLObject</a>是两种不同的Python ORM。这两种ORM并不在Python标准库中，所以需要安装。</p>\n<ul>\n<li><p>安装SQLAlchemy<br><code>pip3 install sqlalchemy</code></p>\n</li>\n<li><p>安装SQLObject<br><code>pip3 install -U SQLObject</code></p>\n</li>\n</ul>\n<p>在这里将会通过两种ORM移植上一篇的<a href=\"http://coldjune.com/2018/02/28/Python数据库编程-一#数据库适配器示例应用\">数据库适配器示例应用</a></p>\n<h4 id=\"SQLAlchemy\"><a href=\"#SQLAlchemy\" class=\"headerlink\" title=\"SQLAlchemy\"></a>SQLAlchemy</h4><blockquote>\n<p>SQLAlchemy相比于SQLObject的接口更加接近于SQL语句。SQLAlchemy中对象的抽象化十分完成，还可以以更好的灵活性提交原生的SQL语句</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先导入标准库中的模块(os.path、random)</span></span><br><span class=\"line\"><span class=\"comment\"># 然后是第三方或外部模块(sqlalchemy)</span></span><br><span class=\"line\"><span class=\"comment\"># 最后是应用的本地模块(ushuffleDB)</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> dirname</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, \\</span><br><span class=\"line\">    String, create_engine, exc, orm</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative \\</span><br><span class=\"line\">    <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span> DBNAME, NAMELEN, \\</span><br><span class=\"line\">    randName, FIELDS, tformat, cformat, setup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库类型+数据库驱动名称://用户名:密码@地址:端口号/数据库名称</span></span><br><span class=\"line\">DSNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'mysql'</span>: <span class=\"string\">'mysql+pymysql://root:root@localhost:3306/%s'</span> % DBNAME,</span><br><span class=\"line\">    <span class=\"string\">'sqlite'</span>: <span class=\"string\">'sqlite:///:memory:'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用SQLAlchemy的声明层</span></span><br><span class=\"line\"><span class=\"comment\"># 使用导入的sqlalchemy.ext.declarative.declarative_base</span></span><br><span class=\"line\"><span class=\"comment\"># 创建一个Base类</span></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Users</span><span class=\"params\">(Base)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据子类</span></span><br><span class=\"line\">    <span class=\"comment\"># __tablename__定义了映射的数据库表名</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    <span class=\"comment\"># 列的属性，可以查阅文档来获取所有支持的数据类型</span></span><br><span class=\"line\">    login = Column(String(NAMELEN))</span><br><span class=\"line\">    userid = Column(Integer, primary_key=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    projid = Column(Integer)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于返回易于阅读的数据行的字符串格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(map(tformat, (self.login, self.userid, self.projid)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SQLAlchemyTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dsn)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 类的初始化执行了所有可能的操作以便得到一个可用的数据库，然后保存其连接</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过设置echo参数查看ORM生成的SQL语句</span></span><br><span class=\"line\">        <span class=\"comment\"># create_engine('sqlite:///:memory:', echo=True)</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            eng = create_engine(dsn)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            eng.connect()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> exc.OperationalError:</span><br><span class=\"line\">            <span class=\"comment\"># 此处连接失败是因为数据库不存在造成的</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用dirname()来截取掉数据库名，并保留DSN中的剩余部分</span></span><br><span class=\"line\">            <span class=\"comment\"># 使数据库的连接可以正常运行</span></span><br><span class=\"line\">            <span class=\"comment\"># 这是一个典型的操作任务而不是面向应用的任务，所以使用原生SQL</span></span><br><span class=\"line\">            eng = create_engine(dirname(dsn))</span><br><span class=\"line\">            eng.execute(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME).close()</span><br><span class=\"line\">            eng = create_engine(dsn)</span><br><span class=\"line\">        <span class=\"comment\"># 创建一个会话对象，用于管理单独的事务对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 当涉及一个或多个数据库操作时，可以保证所有要写入的数据都必须提交</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后将这个会话对象保存，并将用户的表和引擎作为实例属性一同保存下来</span></span><br><span class=\"line\">        <span class=\"comment\"># 引擎和表的元数据进行了额外的绑定，使这张表的所有操作都会绑定到这个指定的引擎中</span></span><br><span class=\"line\">        Session = orm.sessionmaker(bind=eng)</span><br><span class=\"line\">        self.ses = Session()</span><br><span class=\"line\">        self.users = Users.__table__</span><br><span class=\"line\">        self.eng = self.users.metadata.bind = eng</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># session.add_all()使用迭代的方式产生一系列的插入操作</span></span><br><span class=\"line\">        self.ses.add_all(</span><br><span class=\"line\">            Users(login=who, userid=userid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> who, userid <span class=\"keyword\">in</span> randName()</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 决定是提交还是回滚</span></span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 会话查询的功能，使用query.filter_by()方法进行查找</span></span><br><span class=\"line\">        users = self.ses.query(Users).filter_by(projid=fr).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.projid = to</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        users = self.ses.query(Users).filter_by(projid=rm).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            self.ses.delete(user)</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在屏幕上显示正确的输出</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        users = self.ses.query(Users).all()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</span><br><span class=\"line\">            print(user)</span><br><span class=\"line\">        self.ses.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># __getattr__()可以避开创建drop()和create()方法</span></span><br><span class=\"line\">        <span class=\"comment\"># __getattr__()只有在属性查找失败时才会被调用</span></span><br><span class=\"line\">        <span class=\"comment\"># 当调用orm.drop()并发现没有这个方法时，就会调用getattr(orm, 'drop')</span></span><br><span class=\"line\">        <span class=\"comment\"># 此时调用__getattr__()，并且将属性名委托给self.users。结束期会发现</span></span><br><span class=\"line\">        <span class=\"comment\"># slef.users存在一个drop属性，然后传递这个方法调用到self.users.drop()中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getattr(self.users, attr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        self.ses.connection().close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 入口函数</span></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Connnect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> db <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> DSNs:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        orm = SQLAlchemyTest(DSNs[db])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'ERROR: %r not supported, exit'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Create users table(drop old one if appl.'</span>)</span><br><span class=\"line\">    orm.drop(checkfirst=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    orm.create()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Insert namse into table'</span>)</span><br><span class=\"line\">    orm.insert()</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = orm.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d))'</span> % (num, fr, to))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = orm.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d; %d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Drop users table'</span>)</span><br><span class=\"line\">    orm.drop()</span><br><span class=\"line\">    print(<span class=\"string\">'***Close cxns'</span>)</span><br><span class=\"line\">    orm.finish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mysql输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Connnect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">Choose a database system:</span><br><span class=\"line\">    (M)ySQL</span><br><span class=\"line\">    (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*** Create users table(drop old one if appl.</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert namse into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      1         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(2 users moved) from (1) to (4))</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly delete group</span><br><span class=\"line\">\t(group #2; 0 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Angela    4567      3         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">***Connnect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">Choose a database system:</span><br><span class=\"line\">        (M)ySQL</span><br><span class=\"line\">        (S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\"></span><br><span class=\"line\">*** Create users table(drop old one if appl.</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert namse into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(2 users moved) from (2) to (2))</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Randomly delete group</span><br><span class=\"line\">\t(group #1; 1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<h4 id=\"SQLObject\"><a href=\"#SQLObject\" class=\"headerlink\" title=\"SQLObject\"></a>SQLObject</h4><p>SQLObject需要mysqldb支持，但是由于mysqldb不再支持python3，所以根据提示安装替代方案<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#Mysqlclient\" target=\"_blank\" rel=\"noopener\">Mysqlclient</a>，选择对应的版本进行下载后执行相应的命令：<br><code>pip3 install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用SQLObject代替SQLAlchemy</span></span><br><span class=\"line\"><span class=\"comment\"># 其余和使用SQLAlchemy的相同</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> os.path <span class=\"keyword\">import</span> dirname</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlobject <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span>  DBNAME, NAMELEN, \\</span><br><span class=\"line\">    randName, FIELDS, tformat, cformat, setup</span><br><span class=\"line\"></span><br><span class=\"line\">DSNs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'mysql'</span>: <span class=\"string\">'mysql://root:root@127.0.0.1:3306/%s'</span> % DBNAME,</span><br><span class=\"line\">    <span class=\"string\">'sqlite'</span>: <span class=\"string\">'sqlite:///:memory:'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Users</span><span class=\"params\">(SQLObject)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 扩展了SQLObject.SQLObject类</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义列</span></span><br><span class=\"line\">    login = StringCol(length=NAMELEN)</span><br><span class=\"line\">    userid = IntCol()</span><br><span class=\"line\">    projid = IntCol()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 提供用于显示输出的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(map(tformat, (</span><br><span class=\"line\">            self.login, self.userid, self.projid)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SQLObjectTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dsn)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 确保得到一个可用的数据库，然后返回连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cxn = connectionForURI(dsn)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 尝试对已存在的表建立连接</span></span><br><span class=\"line\">            <span class=\"comment\"># 规避RMBMS适配器不可用，服务器不在线及数据库不存在等异常</span></span><br><span class=\"line\">            cxn.releaseConnection(cxn.getConnection())</span><br><span class=\"line\">        <span class=\"keyword\">except</span> dberrors.OperationalError:</span><br><span class=\"line\">            <span class=\"comment\"># 出现异常则创建表</span></span><br><span class=\"line\">            cxn = connectionForURI(dirname(dsn))</span><br><span class=\"line\">            cxn.query(<span class=\"string\">'CREATE DATABASE %s'</span> % DBNAME)</span><br><span class=\"line\">            cxn = connectionForURI(dsn)</span><br><span class=\"line\">        <span class=\"comment\"># 成功后在self.cxn中保存连接对象</span></span><br><span class=\"line\">        self.cxn = sqlhub.processConnection = cxn</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 插入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> who, userid <span class=\"keyword\">in</span> randName():</span><br><span class=\"line\">            Users(login=who, userid=userid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        users = Users.selectBy(projid=fr)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.projid = to</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 删除</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        users = Users.selectBy(projid=rm)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(users):</span><br><span class=\"line\">            user.destroySelf()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'\\n%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> Users.select():</span><br><span class=\"line\">            print(user)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        self.cxn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Connect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    db = setup()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> db <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> DSNs:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nError: %r not support'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        orm = SQLObjectTest(DSNs[db])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nError: %r not support'</span> % db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Create users table(drop old one if appl.)'</span>)</span><br><span class=\"line\">    Users.dropTable(<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    Users.createTable()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Insert names into table'</span>)</span><br><span class=\"line\">    orm.insert()</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = orm.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = orm.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(group #%d;%d users removed)'</span> % (rm, num))</span><br><span class=\"line\">    orm.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Drop users table'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 使用dropTable()方法</span></span><br><span class=\"line\">    Users.dropTable()</span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Close cxns'</span>)</span><br><span class=\"line\">    orm.finish()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MySQL输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">M</span><br><span class=\"line\"></span><br><span class=\"line\">***Create users table(drop old one if appl.)</span><br><span class=\"line\"></span><br><span class=\"line\">*** Insert names into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Move users to a random group</span><br><span class=\"line\">(0 users moved) from (2) to (4)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">(group #3;1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Drop users table</span><br><span class=\"line\"></span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SQLite输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Choose a database system:</span><br><span class=\"line\">(M)ySQL</span><br><span class=\"line\">(S)QLite</span><br><span class=\"line\">Enter choice:</span><br><span class=\"line\">S</span><br><span class=\"line\"></span><br><span class=\"line\">***Create users table(drop old one if appl.)</span><br><span class=\"line\"></span><br><span class=\"line\">*** Insert names into table</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      3         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Move users to a random group</span><br><span class=\"line\">(1 users moved) from (3) to (1)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Bob       1234      2         </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">(group #2;1 users removed)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Angela    4567      4         </span><br><span class=\"line\">Dave      4523      1         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Drop users table</span><br><span class=\"line\"></span><br><span class=\"line\">***Close cxns</span><br></pre></td></tr></table></figure>\n<h2 id=\"非关系型数据库\"><a href=\"#非关系型数据库\" class=\"headerlink\" title=\"非关系型数据库\"></a>非关系型数据库</h2><p>Web和社交服务会产生大量的数据，并且数据的产生速率可能要比关系型数据库能够处理得更快。非关系数据库有对象数据库、键-值对存储、文档存储（或数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。</p>\n<h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><p><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">MongoDB</a>是非常流行的文档存储非关系数据库。</p>\n<blockquote>\n<p>文档存储(MongoDB、CouchDB/Amazon SimpleDB)与其他非关系数据库的区别在于它介于简单的键-值对存储(Redis、Voldemort)与列存储(HBase、Google Bigtable)之间。比基于列的存储更简单、约束更少。比普通的键-值对存储更加灵活。一般情况下其数据会另存为JSON对象、并且允许诸如字符串、数值、列表甚至嵌套等数据类型</p>\n</blockquote>\n<p>MongoDB(以及NoSQL)要讨论的事文档、集合而不是关系数据库中的行和列。MongoDB将数据存储于特殊的JSON串(文档)中，由于它是一个二进制编码的序列化，通常也称其为BSON格式。它和JSON或者Python字典都很相似。</p>\n<h3 id=\"PyMongo-MongoDB和Python\"><a href=\"#PyMongo-MongoDB和Python\" class=\"headerlink\" title=\"PyMongo:MongoDB和Python\"></a>PyMongo:MongoDB和Python</h3><p>PyMongo是Python MongoDB驱动程序中最正式的一个。使用之前需要<a href=\"https://www.mongodb.com/download-center?jmp=nav#atlas\" target=\"_blank\" rel=\"noopener\">安装MongoDB数据库</a>和PyMongo：<br><code>pip3 install pymongo</code><br>在windows下需要运行mongo.exe启动MongoDB，进入cmd到MongoDB的bin目录下，执行如下命令<br><code>.mongod --dbpath E:\\MongoDB\\data</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主要导入的是MongoClient对象和及其包异常errors</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange <span class=\"keyword\">as</span> rand</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient, errors</span><br><span class=\"line\"><span class=\"keyword\">from</span> ushuffleDB <span class=\"keyword\">import</span> DBNAME, randName, FIELDS, tformat, cformat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置了集合(“表”)名</span></span><br><span class=\"line\">COLLECTION = <span class=\"string\">'users'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoTest</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建一个连接，如果服务器不可达，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cxn = MongoClient()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> errors.AutoReconnect:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError</span><br><span class=\"line\">        <span class=\"comment\"># 创建并复用数据库及“users”集合</span></span><br><span class=\"line\">        <span class=\"comment\"># 关系数据库中的表会对列的格式进行定义，</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后使遵循这个列定义的每条记录成为一行</span></span><br><span class=\"line\">        <span class=\"comment\"># 非关系数据库中集合没有任何模式的需求，</span></span><br><span class=\"line\">        <span class=\"comment\"># 每条记录都有其特定的文档</span></span><br><span class=\"line\">        <span class=\"comment\"># 每条记录都定义了自己的模式，所以保存的任何记录都会写入集合中</span></span><br><span class=\"line\">        self.db = cxn[DBNAME]</span><br><span class=\"line\">        self.users = self.db[COLLECTION]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 向MongoDB的集合中添加值</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用dict()工厂函数为每条记录创建一个文档</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后将所有文档通过生成器表达式的方式传递给集合的insert()方法</span></span><br><span class=\"line\">        self.users.insert(</span><br><span class=\"line\">            dict(login=who, userid=uid, projid=rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">                 )<span class=\"keyword\">for</span> who, uid <span class=\"keyword\">in</span> randName()</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 集合的update()方法可以给开发者相比于典型的数据库系统更多的选项</span></span><br><span class=\"line\">        fr = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        to = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 在更新前，首先查询系统中的项目ID(projid)与要更新的项目组相匹配的所有用户</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用find()方法，并将查询条件传进去(类似SQL的SELECT语句)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(self.users.find(&#123;<span class=\"string\">'projid'</span>: fr&#125;)):</span><br><span class=\"line\">            <span class=\"comment\"># 使用$set指令可以显式地修改已存在的值</span></span><br><span class=\"line\">            <span class=\"comment\"># 每条MongoDB指令都代表一个修改操作，使得修改操作更加高效、有用和便捷</span></span><br><span class=\"line\">            <span class=\"comment\"># 除了$set还有一些操作可以用于递增字段值、删除字段(键-值对)、对数组添加/删除值</span></span><br><span class=\"line\">            <span class=\"comment\"># update()方法可以用来修改多个文档(将multi标志设为True)</span></span><br><span class=\"line\">            self.users.update(user, &#123;</span><br><span class=\"line\">                <span class=\"string\">'$set'</span>: &#123;<span class=\"string\">'projid'</span>: to&#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fr, to, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 当得到所有匹配查询的用户后，一次性对其执行remove()操作进行删除</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后返回结果</span></span><br><span class=\"line\">        rm = rand(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, user <span class=\"keyword\">in</span> enumerate(self.users.find(&#123;<span class=\"string\">'projid'</span>: rm&#125;)):</span><br><span class=\"line\">            self.users.remove(user)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rm, i+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dbDump</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 没有天剑会返回集合中所有用户并对数据进行字符串格式化向用户显示</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s'</span> % <span class=\"string\">''</span>.join(map(cformat, FIELDS)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> self.users.find():</span><br><span class=\"line\">            print(<span class=\"string\">''</span>.join(map(tformat, (</span><br><span class=\"line\">                user[k] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> FIELDS))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'***Connect to %r database'</span> % DBNAME)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        mongo = MongoTest()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">        print(<span class=\"string\">'\\nERROR: MongoDB server unreadable, exit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Insert names into table'</span>)</span><br><span class=\"line\">    mongo.insert()</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Move users to a random group'</span>)</span><br><span class=\"line\">    fr, to, num = mongo.update()</span><br><span class=\"line\">    print(<span class=\"string\">'\\t(%d users moved) from (%d) to (%d)'</span> % (num, fr, to))</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n*** Randomly delete group'</span>)</span><br><span class=\"line\">    rm, num = mongo.delete()</span><br><span class=\"line\">    print(<span class=\"string\">'\\tgroup #%d; %d users removed'</span> % (rm, num))</span><br><span class=\"line\">    mongo.dbDump()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n***Drop users table'</span>)</span><br><span class=\"line\">    mongo.db.drop_collection(COLLECTION)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***Connect to &apos;test&apos; database</span><br><span class=\"line\"></span><br><span class=\"line\">***Insert names into table</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">***Move users to a random group</span><br><span class=\"line\">\t(0 users moved) from (1) to (2)</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\">Angela    4567      2         </span><br><span class=\"line\"></span><br><span class=\"line\">*** Randomly delete group</span><br><span class=\"line\">\tgroup #2; 1 users removed</span><br><span class=\"line\">LOGIN     USERID    PROJID    </span><br><span class=\"line\">Dave      4523      4         </span><br><span class=\"line\">Bob       1234      4         </span><br><span class=\"line\"></span><br><span class=\"line\">***Drop users table</span><br></pre></td></tr></table></figure>"},{"title":"numpy基础(一)","date":"2018-03-16T00:38:29.000Z","copyright":true,"description":"NumPy(Numerical Python的简称)是高性能科学计算和数据分析的基础包。NumPy本身并没有提供多么高级的数据分析功能，理解NumPy数组及面向数组的计算将在使用Pandas之类的工具时更加高效。","_content":"NumPy[^1]的部分功能如下：\n* ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组\n* 用于对数组数据进行快速运算的标准数学函数\n* 线性代数、随机数生成及傅里叶变换功能\n* 用于集成C、C++、Fortran等语言编写的代码的工具\n\n对于大部分数据分析应用，关注的功能集中在：\n* 用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算\n* 常用的数组算法，如排序、唯一化、集合运算等\n* 高效的描述统计和数据聚合/摘要运算\n* 用于异构数据集的合并/连接运算的数据对齐和关系型数据运算\n* 将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)\n* 数据的分组运算(聚合、转换、函数应用等)\n\n## 多维数组对象(ndarray)\nN维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：\n```\nIn [4]: data = np.array([[1,2,3],[3,4,5]])\n\nIn [5]: data\nOut[5]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [6]: data*10\nOut[6]:\narray([[10, 20, 30],\n       [30, 40, 50]])\n\nIn [7]: data+data\nOut[7]:\narray([[ 2,  4,  6],\n       [ 6,  8, 10]])\n```\n\n### 创建ndarray\narray函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。\n* 数组创建函数\n\n|       函数        |                                                    说明                                                     |\n|:-----------------:|:-----------------------------------------------------------------------------------------------------------:|\n|       array       | 将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据 |\n|      asarray      |                        将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制                         |\n|      arange       |                             类似于内置的range，但返回的是一个ndarray而不是列表                              |\n|  ones、ones_like  |    根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组    |\n| zeros、zeros_like |                                     类似于ones、ones_like，产生全0数组                                      |\n| empty、empty_like |                                  创建新数组，只分配内存空间但不填充任何值                                   |\n|   eye、identity   |                                创建一个正方的NXN单位矩阵(对角线为1，其余为0)                                |\n* 列表转换\n\n```\nIn [8]: arr1 = np.array([1,2,3])\n\nIn [9]: arr1\nOut[9]: array([1, 2, 3])\n```\n* 嵌套序列将会被转换为一个多维数组:\n\n```\nIn [10]: arr2 = np.array([[1,2,3],[1,2,3]])\n\nIn [11]: arr2\nOut[11]:\narray([[1, 2, 3],\n       [1, 2, 3]])\n```\n除非显式说明，`np.array`会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:\n```\nIn [12]: arr1.dtype\nOut[12]: dtype('int32')\n```\n除了`np.array`之外，`zeros`和`ones`可以创建指定长度或形状的全0或全1数组。`empty`可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:\n```\nIn [15]: np.zeros(10)\nOut[15]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])\n\nIn [16]: np.zeros((3,2))\nOut[16]:\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\nIn [17]: np.empty((3,2,3))\nOut[17]:\narray([[[  6.23042070e-307,   4.67296746e-307,   1.69121096e-306],\n        [  1.33511290e-306,   1.15711989e-306,   1.42418987e-306]],\n\n       [[  1.37961641e-306,   1.60220528e-306,   1.24611266e-306],\n        [  9.34598925e-307,   1.24612081e-306,   1.11260755e-306]],\n\n       [[  1.60220393e-306,   1.51320640e-306,   9.34609790e-307],\n        [  1.86921279e-306,   1.24610723e-306,   0.00000000e+000]]])\n```\n**使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0**\n`arange`是Python内置函数`range`的数组版:\n```\nIn [18]: np.arange(5)\nOut[18]: array([0, 1, 2, 3, 4])\n```\n\n### ndarray的数据类型\n* NumPy的数据类型\n\n|               类型                | 类型代码 |                                       说明                                       |\n|:---------------------------------:|:--------:|:--------------------------------------------------------------------------------:|\n|            int8、uint8            |  i1、u1  |                         有符号和无符号的8位(1个字节)整型                         |\n|           int16、uint16           |  i2、u2  |                        有符号和无符号的18位(2个字节)整型                         |\n|           int32、uint32           |  i4、u4  |                        有符号和无符号的32位(4个字节)整型                         |\n|           int64、uint64           |  i8、u8  |                        有符号和无符号的64位(8个字节)整型                         |\n|              float16              |    f2    |                                   半精度浮点数                                   |\n|              float32              |  f4或f   |                        标准的单精度浮点数。与C的float兼容                        |\n|              float64              |  f8或d   |              标准的双精度浮点数。与C的double和Python的float对象兼容              |\n|             float128              |  f16或g  |                                  扩展精度浮点数                                  |\n| complex64、complex128、complex256 |   c32    |                                       复数                                       |\n|               bool                |    ?     |                            存储True和False的布尔类型                             |\n|              object               |    O     |                                  Python对象类型                                  |\n|              string_              |    S     | 固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10 |\n|             unicode_              |    U     |      固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)      |\n\n可以再创建array对象时使用`dtype`参数设定数据类型，也可以通过`astype`方法显示转换其`dtype`,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用`astype`将其转换为数值形式：\n```\nIn [19]: arr = np.array([1.2,-3.4,5.6], dtype='f8')\n\nIn [20]: arr.dtype\nOut[20]: dtype('float64')\n\nIn [21]: arr.astype(np.int32)\nOut[21]: array([ 1, -3,  5])\n\nIn [22]: numeric_string = np.array(['1.5','2.5','1.1'],dtype=np.string_)\n\nIn [23]: numeric_string.astype(np.float64)\nOut[23]: array([ 1.5,  2.5,  1.1])\n```\n\n### 数组和标量之间的运算\n**矢量化** 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：\n```\nIn [24]: arr = np.array([[1,1,1],[2,2,2]])\n\nIn [25]: arr*arr\nOut[25]:\narray([[1, 1, 1],\n       [4, 4, 4]])\n\nIn [26]: arr+arr\nOut[26]:\narray([[2, 2, 2],\n       [4, 4, 4]])\n```\n数组和标量的运算会将标量值传播到各个元素:\n```\nIn [27]: 1/arr\nOut[27]:\narray([[ 1. ,  1. ,  1. ],\n       [ 0.5,  0.5,  0.5]])\n\nIn [28]: arr ** 0.5\nOut[28]:\narray([[ 1.        ,  1.        ,  1.        ],\n       [ 1.41421356,  1.41421356,  1.41421356]])\n```\n\n### 基本的索引和切片\n将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:[^2]\n\n```\nIn [35]: arr = np.arange(10)\n\nIn [36]: arr\nOut[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [37]: arr_slice = arr[2:5]\n\nIn [38]: arr_slice\nOut[38]: array([2, 3, 4])\n\nIn [39]: arr_slice[1:2] = 1000\n\nIn [40]: arr\nOut[40]: array([   0,    1,    2, 1000,    4,    5,    6,    7,    8,    9])\n\nIn [41]: arr_slice\nOut[41]: array([   2, 1000,    4])\n```\n对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:\n```\nIn [42]: arr = np.array([[1,2,3],[4,5,6]])\n\nIn [43]: arr\nOut[43]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [44]: arr[0]\nOut[44]: array([1, 2, 3])\n\nIn [45]: arr[0][1]\nOut[45]: 2\n\nIn [46]: arr[0,2]\nOut[46]: 3\n```\n对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):\n```\nIn [47]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n\nIn [48]: arr\nOut[48]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [49]: arr[0]\nOut[49]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [50]: arr[0,1]\nOut[50]: array([4, 5, 6])\n```\n标量和数组都可以赋值给原数组:\n```\nIn [67]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n\nIn [68]: arr\nOut[68]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [69]: old_arr = arr[0].copy()\n\nIn [70]: old_arr\nOut[70]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [71]: arr[0]= 1\n\nIn [72]: arr\nOut[72]:\narray([[[ 1,  1,  1],\n        [ 1,  1,  1]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [73]: arr[0] = old_arr\n\nIn [74]: arr\nOut[74]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n```\n#### 切片索引\nndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:[^3]\n```\nIn [75]: arr2d = np.array([[1,2,3],[3,4,5]])\n\nIn [76]: arr2d\nOut[76]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [77]: arr2d[:2]\nOut[77]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [78]: arr2d[:2,:1]\nOut[78]:\narray([[1],\n       [3]])\n```\n同时传入索引和切片可以得到低纬度的切片:\n```\nIn [80]: arr2d[1,:1]\nOut[80]: array([3])\n```\n只有`:`表示选取整个轴，可以通过这个对高纬度的进行切片：\n```\nIn [81]: arr2d[:,:1]\nOut[81]:\narray([[1],\n       [3]])\n```\n同时对切片表达式的赋值也会扩展到整个选区：\n```\nIn [82]: arr2d[:,:1] = 0\n\nIn [83]: arr2d\nOut[83]:\narray([[0, 2, 3],\n       [0, 4, 5]])\n```\n#### 布尔型索引\n可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回`True`对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:\n```\nIn [84]: names = np.array(['bob','john','tom'])\n\nIn [85]: data = randn(3,6)\n\nIn [86]: names\nOut[86]:\narray(['bob', 'john', 'tom'],\n      dtype='<U4')\n\nIn [87]: data\nOut[87]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489],\n       [-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [88]: names == 'bob'\nOut[88]: array([ True, False, False], dtype=bool)\n\nIn [90]: data[names == 'bob']\nOut[90]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489]])\n\n```\n布尔型数组还可以和切片、整数(或整数序列)混合使用:\n```\nIn [91]: data[names == 'bob',2:]\nOut[91]: array([[-0.83396793,  2.53149852, -0.55033656,  0.13621489]])\n\nIn [92]: data[names == 'bob',2]\nOut[92]: array([-0.83396793])\n```\n要选取除某个元素以外的值，可以使用不等号(`!=`)，也可以通过`~`对条件进行否定；同时也可以使用`&`(和)、`|`(或)之类的布尔运算符：\n```\nIn [93]: data[names != 'bob']\nOut[93]:\narray([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [95]: data[~(names == 'bob')]\nOut[95]:\narray([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [97]: data[(names == 'bob')| (names=='tom')]\nOut[97]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [98]: data[(names == 'bob')& (names=='tom')]\nOut[98]: array([], shape=(0, 6), dtype=float64)\n\n```\n通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。\n\n#### 花式索引\n花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：\n```\nIn [102]: arr = np.empty((7,4))\n\nIn [103]: for i in range(7):\n     ...:     arr[i]=i\n     ...:\n\nIn [104]: arr\nOut[104]:\narray([[ 0.,  0.,  0.,  0.],\n       [ 1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.],\n       [ 3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.],\n       [ 5.,  5.,  5.,  5.],\n       [ 6.,  6.,  6.,  6.]])\n\nIn [105]: arr[[4,3,1,2]]\nOut[105]:\narray([[ 4.,  4.,  4.,  4.],\n       [ 3.,  3.,  3.,  3.],\n       [ 1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.]])\n```\n使用负数索引将会从末尾开始选取行:\n```\nIn [106]: arr[[-4,-3,-1,-2]]\nOut[106]:\narray([[ 3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.],\n       [ 6.,  6.,  6.,  6.],\n       [ 5.,  5.,  5.,  5.]])\n```\n一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：\n```\nIn [107]: arr = np.arange(32).reshape((8,4))\n\nIn [108]: arr\nOut[108]:\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\n\nIn [109]: arr[[1,2,3,4],[1,2,3,4]]\n\nIn [110]: arr[[1,2,3,4],[0,1,2,3]]\nOut[110]: array([ 4,  9, 14, 19])\n```\n其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：\n```\nIn [111]: arr[[1,2,3,4]][:,[0,1,2,3]]\nOut[111]:\narray([[ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19]])\n```\n选取矩阵的另一个方法是使用`np.ix_`函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：\n```\nIn [112]: arr[np.ix_([1,2,3,4],[0,1,2,3])]\nOut[112]:\narray([[ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19]])\n```\n花式索引总是将数据复制到新数组中。\n\n### 数组转置和轴对换\n转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有`transpose`方法，还有一个特殊的`T`属性，在计算内积的时候经常需要用到：\n```\nIn [114]: arr.T\nOut[114]:\narray([[ 0,  4,  8, 12, 16, 20, 24, 28],\n       [ 1,  5,  9, 13, 17, 21, 25, 29],\n       [ 2,  6, 10, 14, 18, 22, 26, 30],\n       [ 3,  7, 11, 15, 19, 23, 27, 31]])\n\nIn [115]: np.dot(arr.T, arr)\nOut[115]:\narray([[2240, 2352, 2464, 2576],\n       [2352, 2472, 2592, 2712],\n       [2464, 2592, 2720, 2848],\n       [2576, 2712, 2848, 2984]])\n```\n`transpose`需要得到一个由轴编号组成的元组才能对这些轴进行转置:\n```\nIn [126]: arr\nOut[126]:\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]])\n\nIn [127]: arr.shape\nOut[127]: (2, 2, 3)\n\nIn [128]: arr.transpose((1,2,0))\nOut[128]:\narray([[[ 0,  6],\n        [ 1,  7],\n        [ 2,  8]],\n\n       [[ 3,  9],\n        [ 4, 10],\n        [ 5, 11]]])\n\nIn [129]: arr.transpose((1,0,2))\nOut[129]:\narray([[[ 0,  1,  2],\n        [ 6,  7,  8]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11]]])\n\n```\n上面`arr.shape`返回的结果是*(2,2,3)* 表明这是一个三维数组，形状为2x2x3,执行`arr.transpose((1,2,0))`对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：\n```\n[[[(0,0,0), (0,0,1), (0,0,2)],\n  [(0,1,0), (0,1,1), (0,1,2)]],\n  [[(1,0,0), (1,0,1), (1,0,2)],\n  [(1,1,0), (1,1,1),(1,1,2)]]\n]\n```\n进行轴变换之后的原下标变为:\n```\n(0,0,0)->(0,0,0)\n(0,0,1)->(0,1,0)\n(0,0,2)->(0,2,0)\n\n(0,1,0)->(1,0,0)\n(0,1,1)->(1,1,0)\n(0,1,2)->(1,2,0)\n\n(1,0,0)->(0,0,1)\n(1,0,1)->(0,1,1)\n(1,0,2)->(0,2,1)\n\n(1,1,0)->(1,0,1)\n(1,1,1)->(1,1,1)\n(1,1,2)->(1,2,1)\n```\n将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：\n```\n[[[(0,0,0), (0,0,1)],    ->  (0,0,0) ,(1,0,0) -> 0,6\n  [(0,1,0), (0,1,1)],    ->  (0,0,1) ,(1,0,1) -> 1,7\n  [(0,2,0), (0,2,1)]],   ->  (0,0,2) ,(1,0,2) -> 2,8\n [[(1,0,0), (1,0,1)],    ->  (0,1,0) ,(1,1,0) -> 3,9\n  [(1,1,0), (1,1,1)],    ->  (0,1,1) ,(1,1,1) -> 4,10\n  [(1,2,0), (1,2,1)]]    ->  (0,1,2) ,(1,1,2) -> 5, 11\n```\n所以最后的数组变为：\n```\narray([[[ 0,  6],\n        [ 1,  7],\n        [ 2,  8]],\n\n       [[ 3,  9],\n        [ 4, 10],\n        [ 5, 11]]])\n```\n`swapaxes`方法需要接受一对轴编号,其返回的事源数据的视图:\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]])\n\nIn [138]: arr.swapaxes(0,1)\nOut[138]:\narray([[[ 0,  1,  2],\n        [ 6,  7,  8]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11]]])\n```\n\n[^1]: NumPy将通过语句`import numpy as np`导入\n[^2]: 使用副本需要显式地进行复制操作，`arr[1:4].copy()`\n[^3]: 轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维\n","source":"_posts/numpy基础-一.md","raw":"---\ntitle: numpy基础(一)\ndate: 2018-03-16 08:38:29\ncategories: true\ncopyright: true\ntags:\n    - NumPy\n    - 数据分析\ndescription: NumPy(Numerical Python的简称)是高性能科学计算和数据分析的基础包。NumPy本身并没有提供多么高级的数据分析功能，理解NumPy数组及面向数组的计算将在使用Pandas之类的工具时更加高效。\n---\nNumPy[^1]的部分功能如下：\n* ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组\n* 用于对数组数据进行快速运算的标准数学函数\n* 线性代数、随机数生成及傅里叶变换功能\n* 用于集成C、C++、Fortran等语言编写的代码的工具\n\n对于大部分数据分析应用，关注的功能集中在：\n* 用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算\n* 常用的数组算法，如排序、唯一化、集合运算等\n* 高效的描述统计和数据聚合/摘要运算\n* 用于异构数据集的合并/连接运算的数据对齐和关系型数据运算\n* 将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)\n* 数据的分组运算(聚合、转换、函数应用等)\n\n## 多维数组对象(ndarray)\nN维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：\n```\nIn [4]: data = np.array([[1,2,3],[3,4,5]])\n\nIn [5]: data\nOut[5]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [6]: data*10\nOut[6]:\narray([[10, 20, 30],\n       [30, 40, 50]])\n\nIn [7]: data+data\nOut[7]:\narray([[ 2,  4,  6],\n       [ 6,  8, 10]])\n```\n\n### 创建ndarray\narray函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。\n* 数组创建函数\n\n|       函数        |                                                    说明                                                     |\n|:-----------------:|:-----------------------------------------------------------------------------------------------------------:|\n|       array       | 将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据 |\n|      asarray      |                        将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制                         |\n|      arange       |                             类似于内置的range，但返回的是一个ndarray而不是列表                              |\n|  ones、ones_like  |    根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组    |\n| zeros、zeros_like |                                     类似于ones、ones_like，产生全0数组                                      |\n| empty、empty_like |                                  创建新数组，只分配内存空间但不填充任何值                                   |\n|   eye、identity   |                                创建一个正方的NXN单位矩阵(对角线为1，其余为0)                                |\n* 列表转换\n\n```\nIn [8]: arr1 = np.array([1,2,3])\n\nIn [9]: arr1\nOut[9]: array([1, 2, 3])\n```\n* 嵌套序列将会被转换为一个多维数组:\n\n```\nIn [10]: arr2 = np.array([[1,2,3],[1,2,3]])\n\nIn [11]: arr2\nOut[11]:\narray([[1, 2, 3],\n       [1, 2, 3]])\n```\n除非显式说明，`np.array`会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:\n```\nIn [12]: arr1.dtype\nOut[12]: dtype('int32')\n```\n除了`np.array`之外，`zeros`和`ones`可以创建指定长度或形状的全0或全1数组。`empty`可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:\n```\nIn [15]: np.zeros(10)\nOut[15]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])\n\nIn [16]: np.zeros((3,2))\nOut[16]:\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\nIn [17]: np.empty((3,2,3))\nOut[17]:\narray([[[  6.23042070e-307,   4.67296746e-307,   1.69121096e-306],\n        [  1.33511290e-306,   1.15711989e-306,   1.42418987e-306]],\n\n       [[  1.37961641e-306,   1.60220528e-306,   1.24611266e-306],\n        [  9.34598925e-307,   1.24612081e-306,   1.11260755e-306]],\n\n       [[  1.60220393e-306,   1.51320640e-306,   9.34609790e-307],\n        [  1.86921279e-306,   1.24610723e-306,   0.00000000e+000]]])\n```\n**使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0**\n`arange`是Python内置函数`range`的数组版:\n```\nIn [18]: np.arange(5)\nOut[18]: array([0, 1, 2, 3, 4])\n```\n\n### ndarray的数据类型\n* NumPy的数据类型\n\n|               类型                | 类型代码 |                                       说明                                       |\n|:---------------------------------:|:--------:|:--------------------------------------------------------------------------------:|\n|            int8、uint8            |  i1、u1  |                         有符号和无符号的8位(1个字节)整型                         |\n|           int16、uint16           |  i2、u2  |                        有符号和无符号的18位(2个字节)整型                         |\n|           int32、uint32           |  i4、u4  |                        有符号和无符号的32位(4个字节)整型                         |\n|           int64、uint64           |  i8、u8  |                        有符号和无符号的64位(8个字节)整型                         |\n|              float16              |    f2    |                                   半精度浮点数                                   |\n|              float32              |  f4或f   |                        标准的单精度浮点数。与C的float兼容                        |\n|              float64              |  f8或d   |              标准的双精度浮点数。与C的double和Python的float对象兼容              |\n|             float128              |  f16或g  |                                  扩展精度浮点数                                  |\n| complex64、complex128、complex256 |   c32    |                                       复数                                       |\n|               bool                |    ?     |                            存储True和False的布尔类型                             |\n|              object               |    O     |                                  Python对象类型                                  |\n|              string_              |    S     | 固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10 |\n|             unicode_              |    U     |      固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)      |\n\n可以再创建array对象时使用`dtype`参数设定数据类型，也可以通过`astype`方法显示转换其`dtype`,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用`astype`将其转换为数值形式：\n```\nIn [19]: arr = np.array([1.2,-3.4,5.6], dtype='f8')\n\nIn [20]: arr.dtype\nOut[20]: dtype('float64')\n\nIn [21]: arr.astype(np.int32)\nOut[21]: array([ 1, -3,  5])\n\nIn [22]: numeric_string = np.array(['1.5','2.5','1.1'],dtype=np.string_)\n\nIn [23]: numeric_string.astype(np.float64)\nOut[23]: array([ 1.5,  2.5,  1.1])\n```\n\n### 数组和标量之间的运算\n**矢量化** 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：\n```\nIn [24]: arr = np.array([[1,1,1],[2,2,2]])\n\nIn [25]: arr*arr\nOut[25]:\narray([[1, 1, 1],\n       [4, 4, 4]])\n\nIn [26]: arr+arr\nOut[26]:\narray([[2, 2, 2],\n       [4, 4, 4]])\n```\n数组和标量的运算会将标量值传播到各个元素:\n```\nIn [27]: 1/arr\nOut[27]:\narray([[ 1. ,  1. ,  1. ],\n       [ 0.5,  0.5,  0.5]])\n\nIn [28]: arr ** 0.5\nOut[28]:\narray([[ 1.        ,  1.        ,  1.        ],\n       [ 1.41421356,  1.41421356,  1.41421356]])\n```\n\n### 基本的索引和切片\n将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:[^2]\n\n```\nIn [35]: arr = np.arange(10)\n\nIn [36]: arr\nOut[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [37]: arr_slice = arr[2:5]\n\nIn [38]: arr_slice\nOut[38]: array([2, 3, 4])\n\nIn [39]: arr_slice[1:2] = 1000\n\nIn [40]: arr\nOut[40]: array([   0,    1,    2, 1000,    4,    5,    6,    7,    8,    9])\n\nIn [41]: arr_slice\nOut[41]: array([   2, 1000,    4])\n```\n对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:\n```\nIn [42]: arr = np.array([[1,2,3],[4,5,6]])\n\nIn [43]: arr\nOut[43]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [44]: arr[0]\nOut[44]: array([1, 2, 3])\n\nIn [45]: arr[0][1]\nOut[45]: 2\n\nIn [46]: arr[0,2]\nOut[46]: 3\n```\n对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):\n```\nIn [47]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n\nIn [48]: arr\nOut[48]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [49]: arr[0]\nOut[49]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [50]: arr[0,1]\nOut[50]: array([4, 5, 6])\n```\n标量和数组都可以赋值给原数组:\n```\nIn [67]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])\n\nIn [68]: arr\nOut[68]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [69]: old_arr = arr[0].copy()\n\nIn [70]: old_arr\nOut[70]:\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nIn [71]: arr[0]= 1\n\nIn [72]: arr\nOut[72]:\narray([[[ 1,  1,  1],\n        [ 1,  1,  1]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\nIn [73]: arr[0] = old_arr\n\nIn [74]: arr\nOut[74]:\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n```\n#### 切片索引\nndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:[^3]\n```\nIn [75]: arr2d = np.array([[1,2,3],[3,4,5]])\n\nIn [76]: arr2d\nOut[76]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [77]: arr2d[:2]\nOut[77]:\narray([[1, 2, 3],\n       [3, 4, 5]])\n\nIn [78]: arr2d[:2,:1]\nOut[78]:\narray([[1],\n       [3]])\n```\n同时传入索引和切片可以得到低纬度的切片:\n```\nIn [80]: arr2d[1,:1]\nOut[80]: array([3])\n```\n只有`:`表示选取整个轴，可以通过这个对高纬度的进行切片：\n```\nIn [81]: arr2d[:,:1]\nOut[81]:\narray([[1],\n       [3]])\n```\n同时对切片表达式的赋值也会扩展到整个选区：\n```\nIn [82]: arr2d[:,:1] = 0\n\nIn [83]: arr2d\nOut[83]:\narray([[0, 2, 3],\n       [0, 4, 5]])\n```\n#### 布尔型索引\n可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回`True`对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:\n```\nIn [84]: names = np.array(['bob','john','tom'])\n\nIn [85]: data = randn(3,6)\n\nIn [86]: names\nOut[86]:\narray(['bob', 'john', 'tom'],\n      dtype='<U4')\n\nIn [87]: data\nOut[87]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489],\n       [-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [88]: names == 'bob'\nOut[88]: array([ True, False, False], dtype=bool)\n\nIn [90]: data[names == 'bob']\nOut[90]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489]])\n\n```\n布尔型数组还可以和切片、整数(或整数序列)混合使用:\n```\nIn [91]: data[names == 'bob',2:]\nOut[91]: array([[-0.83396793,  2.53149852, -0.55033656,  0.13621489]])\n\nIn [92]: data[names == 'bob',2]\nOut[92]: array([-0.83396793])\n```\n要选取除某个元素以外的值，可以使用不等号(`!=`)，也可以通过`~`对条件进行否定；同时也可以使用`&`(和)、`|`(或)之类的布尔运算符：\n```\nIn [93]: data[names != 'bob']\nOut[93]:\narray([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [95]: data[~(names == 'bob')]\nOut[95]:\narray([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,\n        -0.48010419],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [97]: data[(names == 'bob')| (names=='tom')]\nOut[97]:\narray([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,\n         0.13621489],\n       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,\n        -0.06341261]])\n\nIn [98]: data[(names == 'bob')& (names=='tom')]\nOut[98]: array([], shape=(0, 6), dtype=float64)\n\n```\n通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。\n\n#### 花式索引\n花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：\n```\nIn [102]: arr = np.empty((7,4))\n\nIn [103]: for i in range(7):\n     ...:     arr[i]=i\n     ...:\n\nIn [104]: arr\nOut[104]:\narray([[ 0.,  0.,  0.,  0.],\n       [ 1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.],\n       [ 3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.],\n       [ 5.,  5.,  5.,  5.],\n       [ 6.,  6.,  6.,  6.]])\n\nIn [105]: arr[[4,3,1,2]]\nOut[105]:\narray([[ 4.,  4.,  4.,  4.],\n       [ 3.,  3.,  3.,  3.],\n       [ 1.,  1.,  1.,  1.],\n       [ 2.,  2.,  2.,  2.]])\n```\n使用负数索引将会从末尾开始选取行:\n```\nIn [106]: arr[[-4,-3,-1,-2]]\nOut[106]:\narray([[ 3.,  3.,  3.,  3.],\n       [ 4.,  4.,  4.,  4.],\n       [ 6.,  6.,  6.,  6.],\n       [ 5.,  5.,  5.,  5.]])\n```\n一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：\n```\nIn [107]: arr = np.arange(32).reshape((8,4))\n\nIn [108]: arr\nOut[108]:\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\n\nIn [109]: arr[[1,2,3,4],[1,2,3,4]]\n\nIn [110]: arr[[1,2,3,4],[0,1,2,3]]\nOut[110]: array([ 4,  9, 14, 19])\n```\n其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：\n```\nIn [111]: arr[[1,2,3,4]][:,[0,1,2,3]]\nOut[111]:\narray([[ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19]])\n```\n选取矩阵的另一个方法是使用`np.ix_`函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：\n```\nIn [112]: arr[np.ix_([1,2,3,4],[0,1,2,3])]\nOut[112]:\narray([[ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19]])\n```\n花式索引总是将数据复制到新数组中。\n\n### 数组转置和轴对换\n转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有`transpose`方法，还有一个特殊的`T`属性，在计算内积的时候经常需要用到：\n```\nIn [114]: arr.T\nOut[114]:\narray([[ 0,  4,  8, 12, 16, 20, 24, 28],\n       [ 1,  5,  9, 13, 17, 21, 25, 29],\n       [ 2,  6, 10, 14, 18, 22, 26, 30],\n       [ 3,  7, 11, 15, 19, 23, 27, 31]])\n\nIn [115]: np.dot(arr.T, arr)\nOut[115]:\narray([[2240, 2352, 2464, 2576],\n       [2352, 2472, 2592, 2712],\n       [2464, 2592, 2720, 2848],\n       [2576, 2712, 2848, 2984]])\n```\n`transpose`需要得到一个由轴编号组成的元组才能对这些轴进行转置:\n```\nIn [126]: arr\nOut[126]:\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]])\n\nIn [127]: arr.shape\nOut[127]: (2, 2, 3)\n\nIn [128]: arr.transpose((1,2,0))\nOut[128]:\narray([[[ 0,  6],\n        [ 1,  7],\n        [ 2,  8]],\n\n       [[ 3,  9],\n        [ 4, 10],\n        [ 5, 11]]])\n\nIn [129]: arr.transpose((1,0,2))\nOut[129]:\narray([[[ 0,  1,  2],\n        [ 6,  7,  8]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11]]])\n\n```\n上面`arr.shape`返回的结果是*(2,2,3)* 表明这是一个三维数组，形状为2x2x3,执行`arr.transpose((1,2,0))`对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：\n```\n[[[(0,0,0), (0,0,1), (0,0,2)],\n  [(0,1,0), (0,1,1), (0,1,2)]],\n  [[(1,0,0), (1,0,1), (1,0,2)],\n  [(1,1,0), (1,1,1),(1,1,2)]]\n]\n```\n进行轴变换之后的原下标变为:\n```\n(0,0,0)->(0,0,0)\n(0,0,1)->(0,1,0)\n(0,0,2)->(0,2,0)\n\n(0,1,0)->(1,0,0)\n(0,1,1)->(1,1,0)\n(0,1,2)->(1,2,0)\n\n(1,0,0)->(0,0,1)\n(1,0,1)->(0,1,1)\n(1,0,2)->(0,2,1)\n\n(1,1,0)->(1,0,1)\n(1,1,1)->(1,1,1)\n(1,1,2)->(1,2,1)\n```\n将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：\n```\n[[[(0,0,0), (0,0,1)],    ->  (0,0,0) ,(1,0,0) -> 0,6\n  [(0,1,0), (0,1,1)],    ->  (0,0,1) ,(1,0,1) -> 1,7\n  [(0,2,0), (0,2,1)]],   ->  (0,0,2) ,(1,0,2) -> 2,8\n [[(1,0,0), (1,0,1)],    ->  (0,1,0) ,(1,1,0) -> 3,9\n  [(1,1,0), (1,1,1)],    ->  (0,1,1) ,(1,1,1) -> 4,10\n  [(1,2,0), (1,2,1)]]    ->  (0,1,2) ,(1,1,2) -> 5, 11\n```\n所以最后的数组变为：\n```\narray([[[ 0,  6],\n        [ 1,  7],\n        [ 2,  8]],\n\n       [[ 3,  9],\n        [ 4, 10],\n        [ 5, 11]]])\n```\n`swapaxes`方法需要接受一对轴编号,其返回的事源数据的视图:\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]]])\n\nIn [138]: arr.swapaxes(0,1)\nOut[138]:\narray([[[ 0,  1,  2],\n        [ 6,  7,  8]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11]]])\n```\n\n[^1]: NumPy将通过语句`import numpy as np`导入\n[^2]: 使用副本需要显式地进行复制操作，`arr[1:4].copy()`\n[^3]: 轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维\n","slug":"numpy基础-一","published":1,"updated":"2018-03-16T07:44:40.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw520010twn95sfughkh","content":"<p>NumPy<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的部分功能如下：</p>\n<ul>\n<li>ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组</li>\n<li>用于对数组数据进行快速运算的标准数学函数</li>\n<li>线性代数、随机数生成及傅里叶变换功能</li>\n<li>用于集成C、C++、Fortran等语言编写的代码的工具</li>\n</ul>\n<p>对于大部分数据分析应用，关注的功能集中在：</p>\n<ul>\n<li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算</li>\n<li>常用的数组算法，如排序、唯一化、集合运算等</li>\n<li>高效的描述统计和数据聚合/摘要运算</li>\n<li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li>\n<li>将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)</li>\n<li>数据的分组运算(聚合、转换、函数应用等)</li>\n</ul>\n<h2 id=\"多维数组对象-ndarray\"><a href=\"#多维数组对象-ndarray\" class=\"headerlink\" title=\"多维数组对象(ndarray)\"></a>多维数组对象(ndarray)</h2><p>N维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: data = np.array([[1,2,3],[3,4,5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: data</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: data*10</span><br><span class=\"line\">Out[6]:</span><br><span class=\"line\">array([[10, 20, 30],</span><br><span class=\"line\">       [30, 40, 50]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: data+data</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">array([[ 2,  4,  6],</span><br><span class=\"line\">       [ 6,  8, 10]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建ndarray\"><a href=\"#创建ndarray\" class=\"headerlink\" title=\"创建ndarray\"></a>创建ndarray</h3><p>array函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。</p>\n<ul>\n<li>数组创建函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">array</td>\n<td style=\"text-align:center\">将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asarray</td>\n<td style=\"text-align:center\">将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">arange</td>\n<td style=\"text-align:center\">类似于内置的range，但返回的是一个ndarray而不是列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ones、ones_like</td>\n<td style=\"text-align:center\">根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zeros、zeros_like</td>\n<td style=\"text-align:center\">类似于ones、ones_like，产生全0数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty、empty_like</td>\n<td style=\"text-align:center\">创建新数组，只分配内存空间但不填充任何值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eye、identity</td>\n<td style=\"text-align:center\">创建一个正方的NXN单位矩阵(对角线为1，其余为0)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>列表转换</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: arr1 = np.array([1,2,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: arr1</span><br><span class=\"line\">Out[9]: array([1, 2, 3])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>嵌套序列将会被转换为一个多维数组:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [10]: arr2 = np.array([[1,2,3],[1,2,3]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: arr2</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [1, 2, 3]])</span><br></pre></td></tr></table></figure>\n<p>除非显式说明，<code>np.array</code>会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: arr1.dtype</span><br><span class=\"line\">Out[12]: dtype(&apos;int32&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>除了<code>np.array</code>之外，<code>zeros</code>和<code>ones</code>可以创建指定长度或形状的全0或全1数组。<code>empty</code>可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: np.zeros(10)</span><br><span class=\"line\">Out[15]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: np.zeros((3,2))</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">array([[ 0.,  0.],</span><br><span class=\"line\">       [ 0.,  0.],</span><br><span class=\"line\">       [ 0.,  0.]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: np.empty((3,2,3))</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">array([[[  6.23042070e-307,   4.67296746e-307,   1.69121096e-306],</span><br><span class=\"line\">        [  1.33511290e-306,   1.15711989e-306,   1.42418987e-306]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[  1.37961641e-306,   1.60220528e-306,   1.24611266e-306],</span><br><span class=\"line\">        [  9.34598925e-307,   1.24612081e-306,   1.11260755e-306]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[  1.60220393e-306,   1.51320640e-306,   9.34609790e-307],</span><br><span class=\"line\">        [  1.86921279e-306,   1.24610723e-306,   0.00000000e+000]]])</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0</strong><br><code>arange</code>是Python内置函数<code>range</code>的数组版:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: np.arange(5)</span><br><span class=\"line\">Out[18]: array([0, 1, 2, 3, 4])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ndarray的数据类型\"><a href=\"#ndarray的数据类型\" class=\"headerlink\" title=\"ndarray的数据类型\"></a>ndarray的数据类型</h3><ul>\n<li>NumPy的数据类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">类型代码</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int8、uint8</td>\n<td style=\"text-align:center\">i1、u1</td>\n<td style=\"text-align:center\">有符号和无符号的8位(1个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int16、uint16</td>\n<td style=\"text-align:center\">i2、u2</td>\n<td style=\"text-align:center\">有符号和无符号的18位(2个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int32、uint32</td>\n<td style=\"text-align:center\">i4、u4</td>\n<td style=\"text-align:center\">有符号和无符号的32位(4个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int64、uint64</td>\n<td style=\"text-align:center\">i8、u8</td>\n<td style=\"text-align:center\">有符号和无符号的64位(8个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float16</td>\n<td style=\"text-align:center\">f2</td>\n<td style=\"text-align:center\">半精度浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float32</td>\n<td style=\"text-align:center\">f4或f</td>\n<td style=\"text-align:center\">标准的单精度浮点数。与C的float兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float64</td>\n<td style=\"text-align:center\">f8或d</td>\n<td style=\"text-align:center\">标准的双精度浮点数。与C的double和Python的float对象兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float128</td>\n<td style=\"text-align:center\">f16或g</td>\n<td style=\"text-align:center\">扩展精度浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">complex64、complex128、complex256</td>\n<td style=\"text-align:center\">c32</td>\n<td style=\"text-align:center\">复数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">存储True和False的布尔类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">object</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">Python对象类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string_</td>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unicode_</td>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)</td>\n</tr>\n</tbody>\n</table>\n<p>可以再创建array对象时使用<code>dtype</code>参数设定数据类型，也可以通过<code>astype</code>方法显示转换其<code>dtype</code>,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用<code>astype</code>将其转换为数值形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: arr = np.array([1.2,-3.4,5.6], dtype=&apos;f8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: arr.dtype</span><br><span class=\"line\">Out[20]: dtype(&apos;float64&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: arr.astype(np.int32)</span><br><span class=\"line\">Out[21]: array([ 1, -3,  5])</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: numeric_string = np.array([&apos;1.5&apos;,&apos;2.5&apos;,&apos;1.1&apos;],dtype=np.string_)</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: numeric_string.astype(np.float64)</span><br><span class=\"line\">Out[23]: array([ 1.5,  2.5,  1.1])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组和标量之间的运算\"><a href=\"#数组和标量之间的运算\" class=\"headerlink\" title=\"数组和标量之间的运算\"></a>数组和标量之间的运算</h3><p><strong>矢量化</strong> 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [24]: arr = np.array([[1,1,1],[2,2,2]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: arr*arr</span><br><span class=\"line\">Out[25]:</span><br><span class=\"line\">array([[1, 1, 1],</span><br><span class=\"line\">       [4, 4, 4]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: arr+arr</span><br><span class=\"line\">Out[26]:</span><br><span class=\"line\">array([[2, 2, 2],</span><br><span class=\"line\">       [4, 4, 4]])</span><br></pre></td></tr></table></figure></p>\n<p>数组和标量的运算会将标量值传播到各个元素:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [27]: 1/arr</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">array([[ 1. ,  1. ,  1. ],</span><br><span class=\"line\">       [ 0.5,  0.5,  0.5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: arr ** 0.5</span><br><span class=\"line\">Out[28]:</span><br><span class=\"line\">array([[ 1.        ,  1.        ,  1.        ],</span><br><span class=\"line\">       [ 1.41421356,  1.41421356,  1.41421356]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本的索引和切片\"><a href=\"#基本的索引和切片\" class=\"headerlink\" title=\"基本的索引和切片\"></a>基本的索引和切片</h3><p>将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [35]: arr = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [36]: arr</span><br><span class=\"line\">Out[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: arr_slice = arr[2:5]</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: arr_slice</span><br><span class=\"line\">Out[38]: array([2, 3, 4])</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: arr_slice[1:2] = 1000</span><br><span class=\"line\"></span><br><span class=\"line\">In [40]: arr</span><br><span class=\"line\">Out[40]: array([   0,    1,    2, 1000,    4,    5,    6,    7,    8,    9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: arr_slice</span><br><span class=\"line\">Out[41]: array([   2, 1000,    4])</span><br></pre></td></tr></table></figure>\n<p>对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [42]: arr = np.array([[1,2,3],[4,5,6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [43]: arr</span><br><span class=\"line\">Out[43]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [44]: arr[0]</span><br><span class=\"line\">Out[44]: array([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [45]: arr[0][1]</span><br><span class=\"line\">Out[45]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: arr[0,2]</span><br><span class=\"line\">Out[46]: 3</span><br></pre></td></tr></table></figure></p>\n<p>对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [47]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: arr</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: arr[0]</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: arr[0,1]</span><br><span class=\"line\">Out[50]: array([4, 5, 6])</span><br></pre></td></tr></table></figure></p>\n<p>标量和数组都可以赋值给原数组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [67]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: arr</span><br><span class=\"line\">Out[68]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: old_arr = arr[0].copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: old_arr</span><br><span class=\"line\">Out[70]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: arr[0]= 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: arr</span><br><span class=\"line\">Out[72]:</span><br><span class=\"line\">array([[[ 1,  1,  1],</span><br><span class=\"line\">        [ 1,  1,  1]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: arr[0] = old_arr</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: arr</span><br><span class=\"line\">Out[74]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"切片索引\"><a href=\"#切片索引\" class=\"headerlink\" title=\"切片索引\"></a>切片索引</h4><p>ndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [75]: arr2d = np.array([[1,2,3],[3,4,5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [76]: arr2d</span><br><span class=\"line\">Out[76]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: arr2d[:2]</span><br><span class=\"line\">Out[77]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: arr2d[:2,:1]</span><br><span class=\"line\">Out[78]:</span><br><span class=\"line\">array([[1],</span><br><span class=\"line\">       [3]])</span><br></pre></td></tr></table></figure></p>\n<p>同时传入索引和切片可以得到低纬度的切片:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [80]: arr2d[1,:1]</span><br><span class=\"line\">Out[80]: array([3])</span><br></pre></td></tr></table></figure></p>\n<p>只有<code>:</code>表示选取整个轴，可以通过这个对高纬度的进行切片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [81]: arr2d[:,:1]</span><br><span class=\"line\">Out[81]:</span><br><span class=\"line\">array([[1],</span><br><span class=\"line\">       [3]])</span><br></pre></td></tr></table></figure></p>\n<p>同时对切片表达式的赋值也会扩展到整个选区：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [82]: arr2d[:,:1] = 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: arr2d</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">array([[0, 2, 3],</span><br><span class=\"line\">       [0, 4, 5]])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"布尔型索引\"><a href=\"#布尔型索引\" class=\"headerlink\" title=\"布尔型索引\"></a>布尔型索引</h4><p>可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回<code>True</code>对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [84]: names = np.array([&apos;bob&apos;,&apos;john&apos;,&apos;tom&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: data = randn(3,6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: names</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">array([&apos;bob&apos;, &apos;john&apos;, &apos;tom&apos;],</span><br><span class=\"line\">      dtype=&apos;&lt;U4&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: data</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489],</span><br><span class=\"line\">       [-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: names == &apos;bob&apos;</span><br><span class=\"line\">Out[88]: array([ True, False, False], dtype=bool)</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: data[names == &apos;bob&apos;]</span><br><span class=\"line\">Out[90]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489]])</span><br></pre></td></tr></table></figure></p>\n<p>布尔型数组还可以和切片、整数(或整数序列)混合使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [91]: data[names == &apos;bob&apos;,2:]</span><br><span class=\"line\">Out[91]: array([[-0.83396793,  2.53149852, -0.55033656,  0.13621489]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: data[names == &apos;bob&apos;,2]</span><br><span class=\"line\">Out[92]: array([-0.83396793])</span><br></pre></td></tr></table></figure></p>\n<p>要选取除某个元素以外的值，可以使用不等号(<code>!=</code>)，也可以通过<code>~</code>对条件进行否定；同时也可以使用<code>&amp;</code>(和)、<code>|</code>(或)之类的布尔运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [93]: data[names != &apos;bob&apos;]</span><br><span class=\"line\">Out[93]:</span><br><span class=\"line\">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: data[~(names == &apos;bob&apos;)]</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: data[(names == &apos;bob&apos;)| (names==&apos;tom&apos;)]</span><br><span class=\"line\">Out[97]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: data[(names == &apos;bob&apos;)&amp; (names==&apos;tom&apos;)]</span><br><span class=\"line\">Out[98]: array([], shape=(0, 6), dtype=float64)</span><br></pre></td></tr></table></figure></p>\n<p>通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。</p>\n<h4 id=\"花式索引\"><a href=\"#花式索引\" class=\"headerlink\" title=\"花式索引\"></a>花式索引</h4><p>花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [102]: arr = np.empty((7,4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [103]: for i in range(7):</span><br><span class=\"line\">     ...:     arr[i]=i</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [104]: arr</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">array([[ 0.,  0.,  0.,  0.],</span><br><span class=\"line\">       [ 1.,  1.,  1.,  1.],</span><br><span class=\"line\">       [ 2.,  2.,  2.,  2.],</span><br><span class=\"line\">       [ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 5.,  5.,  5.,  5.],</span><br><span class=\"line\">       [ 6.,  6.,  6.,  6.]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: arr[[4,3,1,2]]</span><br><span class=\"line\">Out[105]:</span><br><span class=\"line\">array([[ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 1.,  1.,  1.,  1.],</span><br><span class=\"line\">       [ 2.,  2.,  2.,  2.]])</span><br></pre></td></tr></table></figure></p>\n<p>使用负数索引将会从末尾开始选取行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [106]: arr[[-4,-3,-1,-2]]</span><br><span class=\"line\">Out[106]:</span><br><span class=\"line\">array([[ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 6.,  6.,  6.,  6.],</span><br><span class=\"line\">       [ 5.,  5.,  5.,  5.]])</span><br></pre></td></tr></table></figure></p>\n<p>一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [107]: arr = np.arange(32).reshape((8,4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: arr</span><br><span class=\"line\">Out[108]:</span><br><span class=\"line\">array([[ 0,  1,  2,  3],</span><br><span class=\"line\">       [ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19],</span><br><span class=\"line\">       [20, 21, 22, 23],</span><br><span class=\"line\">       [24, 25, 26, 27],</span><br><span class=\"line\">       [28, 29, 30, 31]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: arr[[1,2,3,4],[1,2,3,4]]</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: arr[[1,2,3,4],[0,1,2,3]]</span><br><span class=\"line\">Out[110]: array([ 4,  9, 14, 19])</span><br></pre></td></tr></table></figure></p>\n<p>其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [111]: arr[[1,2,3,4]][:,[0,1,2,3]]</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">array([[ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p>\n<p>选取矩阵的另一个方法是使用<code>np.ix_</code>函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: arr[np.ix_([1,2,3,4],[0,1,2,3])]</span><br><span class=\"line\">Out[112]:</span><br><span class=\"line\">array([[ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p>\n<p>花式索引总是将数据复制到新数组中。</p>\n<h3 id=\"数组转置和轴对换\"><a href=\"#数组转置和轴对换\" class=\"headerlink\" title=\"数组转置和轴对换\"></a>数组转置和轴对换</h3><p>转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有<code>transpose</code>方法，还有一个特殊的<code>T</code>属性，在计算内积的时候经常需要用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [114]: arr.T</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">array([[ 0,  4,  8, 12, 16, 20, 24, 28],</span><br><span class=\"line\">       [ 1,  5,  9, 13, 17, 21, 25, 29],</span><br><span class=\"line\">       [ 2,  6, 10, 14, 18, 22, 26, 30],</span><br><span class=\"line\">       [ 3,  7, 11, 15, 19, 23, 27, 31]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: np.dot(arr.T, arr)</span><br><span class=\"line\">Out[115]:</span><br><span class=\"line\">array([[2240, 2352, 2464, 2576],</span><br><span class=\"line\">       [2352, 2472, 2592, 2712],</span><br><span class=\"line\">       [2464, 2592, 2720, 2848],</span><br><span class=\"line\">       [2576, 2712, 2848, 2984]])</span><br></pre></td></tr></table></figure></p>\n<p><code>transpose</code>需要得到一个由轴编号组成的元组才能对这些轴进行转置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [126]: arr</span><br><span class=\"line\">Out[126]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 3,  4,  5]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 6,  7,  8],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [127]: arr.shape</span><br><span class=\"line\">Out[127]: (2, 2, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: arr.transpose((1,2,0))</span><br><span class=\"line\">Out[128]:</span><br><span class=\"line\">array([[[ 0,  6],</span><br><span class=\"line\">        [ 1,  7],</span><br><span class=\"line\">        [ 2,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  9],</span><br><span class=\"line\">        [ 4, 10],</span><br><span class=\"line\">        [ 5, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [129]: arr.transpose((1,0,2))</span><br><span class=\"line\">Out[129]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 6,  7,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  4,  5],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p>\n<p>上面<code>arr.shape</code>返回的结果是<em>(2,2,3)</em> 表明这是一个三维数组，形状为2x2x3,执行<code>arr.transpose((1,2,0))</code>对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[(0,0,0), (0,0,1), (0,0,2)],</span><br><span class=\"line\">  [(0,1,0), (0,1,1), (0,1,2)]],</span><br><span class=\"line\">  [[(1,0,0), (1,0,1), (1,0,2)],</span><br><span class=\"line\">  [(1,1,0), (1,1,1),(1,1,2)]]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>进行轴变换之后的原下标变为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0,0,0)-&gt;(0,0,0)</span><br><span class=\"line\">(0,0,1)-&gt;(0,1,0)</span><br><span class=\"line\">(0,0,2)-&gt;(0,2,0)</span><br><span class=\"line\"></span><br><span class=\"line\">(0,1,0)-&gt;(1,0,0)</span><br><span class=\"line\">(0,1,1)-&gt;(1,1,0)</span><br><span class=\"line\">(0,1,2)-&gt;(1,2,0)</span><br><span class=\"line\"></span><br><span class=\"line\">(1,0,0)-&gt;(0,0,1)</span><br><span class=\"line\">(1,0,1)-&gt;(0,1,1)</span><br><span class=\"line\">(1,0,2)-&gt;(0,2,1)</span><br><span class=\"line\"></span><br><span class=\"line\">(1,1,0)-&gt;(1,0,1)</span><br><span class=\"line\">(1,1,1)-&gt;(1,1,1)</span><br><span class=\"line\">(1,1,2)-&gt;(1,2,1)</span><br></pre></td></tr></table></figure></p>\n<p>将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[(0,0,0), (0,0,1)],    -&gt;  (0,0,0) ,(1,0,0) -&gt; 0,6</span><br><span class=\"line\">  [(0,1,0), (0,1,1)],    -&gt;  (0,0,1) ,(1,0,1) -&gt; 1,7</span><br><span class=\"line\">  [(0,2,0), (0,2,1)]],   -&gt;  (0,0,2) ,(1,0,2) -&gt; 2,8</span><br><span class=\"line\"> [[(1,0,0), (1,0,1)],    -&gt;  (0,1,0) ,(1,1,0) -&gt; 3,9</span><br><span class=\"line\">  [(1,1,0), (1,1,1)],    -&gt;  (0,1,1) ,(1,1,1) -&gt; 4,10</span><br><span class=\"line\">  [(1,2,0), (1,2,1)]]    -&gt;  (0,1,2) ,(1,1,2) -&gt; 5, 11</span><br></pre></td></tr></table></figure></p>\n<p>所以最后的数组变为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[[ 0,  6],</span><br><span class=\"line\">        [ 1,  7],</span><br><span class=\"line\">        [ 2,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  9],</span><br><span class=\"line\">        [ 4, 10],</span><br><span class=\"line\">        [ 5, 11]]])</span><br></pre></td></tr></table></figure></p>\n<p><code>swapaxes</code>方法需要接受一对轴编号,其返回的事源数据的视图:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 3,  4,  5]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 6,  7,  8],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: arr.swapaxes(0,1)</span><br><span class=\"line\">Out[138]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 6,  7,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  4,  5],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">NumPy将通过语句<code>import numpy as np</code>导入</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">使用副本需要显式地进行复制操作，<code>arr[1:4].copy()</code></span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<p>NumPy<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>的部分功能如下：</p>\n<ul>\n<li>ndarray，一个具有矢量运算和复杂广播能力的快熟且节省空间的多维数组</li>\n<li>用于对数组数据进行快速运算的标准数学函数</li>\n<li>线性代数、随机数生成及傅里叶变换功能</li>\n<li>用于集成C、C++、Fortran等语言编写的代码的工具</li>\n</ul>\n<p>对于大部分数据分析应用，关注的功能集中在：</p>\n<ul>\n<li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算</li>\n<li>常用的数组算法，如排序、唯一化、集合运算等</li>\n<li>高效的描述统计和数据聚合/摘要运算</li>\n<li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算</li>\n<li>将条件逻辑表述为数组表达式(而不是带有if-ekif-else分支的循环)</li>\n<li>数据的分组运算(聚合、转换、函数应用等)</li>\n</ul>\n<h2 id=\"多维数组对象-ndarray\"><a href=\"#多维数组对象-ndarray\" class=\"headerlink\" title=\"多维数组对象(ndarray)\"></a>多维数组对象(ndarray)</h2><p>N维数组对象(即ndarray)是一个快速而灵活的大数据集容器。可以利用这种数组执行一些数学运算，语法和标量元素之间的运算一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: data = np.array([[1,2,3],[3,4,5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: data</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: data*10</span><br><span class=\"line\">Out[6]:</span><br><span class=\"line\">array([[10, 20, 30],</span><br><span class=\"line\">       [30, 40, 50]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: data+data</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">array([[ 2,  4,  6],</span><br><span class=\"line\">       [ 6,  8, 10]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建ndarray\"><a href=\"#创建ndarray\" class=\"headerlink\" title=\"创建ndarray\"></a>创建ndarray</h3><p>array函数是创建数组最简单的方法，它接受一切序列型的对象(包括其他数组)，然后产生一个新的含有传入数据的NumPy数组。</p>\n<ul>\n<li>数组创建函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">array</td>\n<td style=\"text-align:center\">将输入数据(列表、元组或其他序列类型)转换为ndarray。要么推断出dtype，要么显示指定dtype。默认直接复制输入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asarray</td>\n<td style=\"text-align:center\">将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">arange</td>\n<td style=\"text-align:center\">类似于内置的range，但返回的是一个ndarray而不是列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ones、ones_like</td>\n<td style=\"text-align:center\">根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，并根据其形状和dtype创建一个全1数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zeros、zeros_like</td>\n<td style=\"text-align:center\">类似于ones、ones_like，产生全0数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">empty、empty_like</td>\n<td style=\"text-align:center\">创建新数组，只分配内存空间但不填充任何值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eye、identity</td>\n<td style=\"text-align:center\">创建一个正方的NXN单位矩阵(对角线为1，其余为0)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>列表转换</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: arr1 = np.array([1,2,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: arr1</span><br><span class=\"line\">Out[9]: array([1, 2, 3])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>嵌套序列将会被转换为一个多维数组:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [10]: arr2 = np.array([[1,2,3],[1,2,3]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: arr2</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [1, 2, 3]])</span><br></pre></td></tr></table></figure>\n<p>除非显式说明，<code>np.array</code>会尝试为新建的数组推断一个合适的数据类型。数据类型保存在一个特殊的dtype对象中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [12]: arr1.dtype</span><br><span class=\"line\">Out[12]: dtype(&apos;int32&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>除了<code>np.array</code>之外，<code>zeros</code>和<code>ones</code>可以创建指定长度或形状的全0或全1数组。<code>empty</code>可以创建一个没有任何具体值的数组。使用这些方法创建数组，只需传入一个表示形状的元组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: np.zeros(10)</span><br><span class=\"line\">Out[15]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: np.zeros((3,2))</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">array([[ 0.,  0.],</span><br><span class=\"line\">       [ 0.,  0.],</span><br><span class=\"line\">       [ 0.,  0.]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: np.empty((3,2,3))</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">array([[[  6.23042070e-307,   4.67296746e-307,   1.69121096e-306],</span><br><span class=\"line\">        [  1.33511290e-306,   1.15711989e-306,   1.42418987e-306]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[  1.37961641e-306,   1.60220528e-306,   1.24611266e-306],</span><br><span class=\"line\">        [  9.34598925e-307,   1.24612081e-306,   1.11260755e-306]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[  1.60220393e-306,   1.51320640e-306,   9.34609790e-307],</span><br><span class=\"line\">        [  1.86921279e-306,   1.24610723e-306,   0.00000000e+000]]])</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用empty方法创建的数组返回的是一些未初始化的垃圾值，而不是0</strong><br><code>arange</code>是Python内置函数<code>range</code>的数组版:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [18]: np.arange(5)</span><br><span class=\"line\">Out[18]: array([0, 1, 2, 3, 4])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ndarray的数据类型\"><a href=\"#ndarray的数据类型\" class=\"headerlink\" title=\"ndarray的数据类型\"></a>ndarray的数据类型</h3><ul>\n<li>NumPy的数据类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">类型代码</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int8、uint8</td>\n<td style=\"text-align:center\">i1、u1</td>\n<td style=\"text-align:center\">有符号和无符号的8位(1个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int16、uint16</td>\n<td style=\"text-align:center\">i2、u2</td>\n<td style=\"text-align:center\">有符号和无符号的18位(2个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int32、uint32</td>\n<td style=\"text-align:center\">i4、u4</td>\n<td style=\"text-align:center\">有符号和无符号的32位(4个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int64、uint64</td>\n<td style=\"text-align:center\">i8、u8</td>\n<td style=\"text-align:center\">有符号和无符号的64位(8个字节)整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float16</td>\n<td style=\"text-align:center\">f2</td>\n<td style=\"text-align:center\">半精度浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float32</td>\n<td style=\"text-align:center\">f4或f</td>\n<td style=\"text-align:center\">标准的单精度浮点数。与C的float兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float64</td>\n<td style=\"text-align:center\">f8或d</td>\n<td style=\"text-align:center\">标准的双精度浮点数。与C的double和Python的float对象兼容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float128</td>\n<td style=\"text-align:center\">f16或g</td>\n<td style=\"text-align:center\">扩展精度浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">complex64、complex128、complex256</td>\n<td style=\"text-align:center\">c32</td>\n<td style=\"text-align:center\">复数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bool</td>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">存储True和False的布尔类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">object</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">Python对象类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string_</td>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">固定长度的字符串类型(每个字符1个字节)。例如要创建一个长度为10的字符串，应使用S10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unicode_</td>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">固定长度的unicode类型(字节数由平台决定)。跟字符串的定义方式一样(如U10)</td>\n</tr>\n</tbody>\n</table>\n<p>可以再创建array对象时使用<code>dtype</code>参数设定数据类型，也可以通过<code>astype</code>方法显示转换其<code>dtype</code>,如果将浮点数转换成整数，则小数部分将会被截断；如果字符串数组全是数字，也可以用<code>astype</code>将其转换为数值形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: arr = np.array([1.2,-3.4,5.6], dtype=&apos;f8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: arr.dtype</span><br><span class=\"line\">Out[20]: dtype(&apos;float64&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: arr.astype(np.int32)</span><br><span class=\"line\">Out[21]: array([ 1, -3,  5])</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: numeric_string = np.array([&apos;1.5&apos;,&apos;2.5&apos;,&apos;1.1&apos;],dtype=np.string_)</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: numeric_string.astype(np.float64)</span><br><span class=\"line\">Out[23]: array([ 1.5,  2.5,  1.1])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组和标量之间的运算\"><a href=\"#数组和标量之间的运算\" class=\"headerlink\" title=\"数组和标量之间的运算\"></a>数组和标量之间的运算</h3><p><strong>矢量化</strong> 是指数组不用编写任何循环即可对数据执行批量运算。大小相等的数组之间的任何算术运算都会将运算应用到元素级：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [24]: arr = np.array([[1,1,1],[2,2,2]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: arr*arr</span><br><span class=\"line\">Out[25]:</span><br><span class=\"line\">array([[1, 1, 1],</span><br><span class=\"line\">       [4, 4, 4]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: arr+arr</span><br><span class=\"line\">Out[26]:</span><br><span class=\"line\">array([[2, 2, 2],</span><br><span class=\"line\">       [4, 4, 4]])</span><br></pre></td></tr></table></figure></p>\n<p>数组和标量的运算会将标量值传播到各个元素:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [27]: 1/arr</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">array([[ 1. ,  1. ,  1. ],</span><br><span class=\"line\">       [ 0.5,  0.5,  0.5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: arr ** 0.5</span><br><span class=\"line\">Out[28]:</span><br><span class=\"line\">array([[ 1.        ,  1.        ,  1.        ],</span><br><span class=\"line\">       [ 1.41421356,  1.41421356,  1.41421356]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基本的索引和切片\"><a href=\"#基本的索引和切片\" class=\"headerlink\" title=\"基本的索引和切片\"></a>基本的索引和切片</h3><p>将一个标量赋值给一个切片时。改值会自动传播到整个选区。跟列表最重要的区别在于数组切片是原始数组的视图。这说明数据不会被复制，视图上的任何修改都会直接反映到原数组上:<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [35]: arr = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [36]: arr</span><br><span class=\"line\">Out[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: arr_slice = arr[2:5]</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: arr_slice</span><br><span class=\"line\">Out[38]: array([2, 3, 4])</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: arr_slice[1:2] = 1000</span><br><span class=\"line\"></span><br><span class=\"line\">In [40]: arr</span><br><span class=\"line\">Out[40]: array([   0,    1,    2, 1000,    4,    5,    6,    7,    8,    9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: arr_slice</span><br><span class=\"line\">Out[41]: array([   2, 1000,    4])</span><br></pre></td></tr></table></figure>\n<p>对于高维数组，各索引的位置上的元素不在是标量，而是降维数组，索引对各个元素进行递归访问。对二维数组而言，一级索引对应的事一维数组，二级索引对应的是一维数组下的元素索引(这里一维数组的元素是标量),索引有两种方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [42]: arr = np.array([[1,2,3],[4,5,6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [43]: arr</span><br><span class=\"line\">Out[43]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [44]: arr[0]</span><br><span class=\"line\">Out[44]: array([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [45]: arr[0][1]</span><br><span class=\"line\">Out[45]: 2</span><br><span class=\"line\"></span><br><span class=\"line\">In [46]: arr[0,2]</span><br><span class=\"line\">Out[46]: 3</span><br></pre></td></tr></table></figure></p>\n<p>对于高维数组而言，不添加索引返回整个数组，添加一级索引，返回一个降维数组(这里是2x3的数组)，添加二级索引则在一级索引的基础上添加索引返回(这里是一维数组):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [47]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: arr</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: arr[0]</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: arr[0,1]</span><br><span class=\"line\">Out[50]: array([4, 5, 6])</span><br></pre></td></tr></table></figure></p>\n<p>标量和数组都可以赋值给原数组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [67]: arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: arr</span><br><span class=\"line\">Out[68]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: old_arr = arr[0].copy()</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: old_arr</span><br><span class=\"line\">Out[70]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [4, 5, 6]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: arr[0]= 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: arr</span><br><span class=\"line\">Out[72]:</span><br><span class=\"line\">array([[[ 1,  1,  1],</span><br><span class=\"line\">        [ 1,  1,  1]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: arr[0] = old_arr</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: arr</span><br><span class=\"line\">Out[74]:</span><br><span class=\"line\">array([[[ 1,  2,  3],</span><br><span class=\"line\">        [ 4,  5,  6]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 7,  8,  9],</span><br><span class=\"line\">        [10, 11, 12]]])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"切片索引\"><a href=\"#切片索引\" class=\"headerlink\" title=\"切片索引\"></a>切片索引</h4><p>ndarray的切片语法跟Python列表的一维对象差不多，但是高纬度对象的花样很多，可以在一个或多个轴上进行切片，也可以跟整数索引混合使用,传入多个切片和索引相同都是递归切片:<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [75]: arr2d = np.array([[1,2,3],[3,4,5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [76]: arr2d</span><br><span class=\"line\">Out[76]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: arr2d[:2]</span><br><span class=\"line\">Out[77]:</span><br><span class=\"line\">array([[1, 2, 3],</span><br><span class=\"line\">       [3, 4, 5]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: arr2d[:2,:1]</span><br><span class=\"line\">Out[78]:</span><br><span class=\"line\">array([[1],</span><br><span class=\"line\">       [3]])</span><br></pre></td></tr></table></figure></p>\n<p>同时传入索引和切片可以得到低纬度的切片:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [80]: arr2d[1,:1]</span><br><span class=\"line\">Out[80]: array([3])</span><br></pre></td></tr></table></figure></p>\n<p>只有<code>:</code>表示选取整个轴，可以通过这个对高纬度的进行切片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [81]: arr2d[:,:1]</span><br><span class=\"line\">Out[81]:</span><br><span class=\"line\">array([[1],</span><br><span class=\"line\">       [3]])</span><br></pre></td></tr></table></figure></p>\n<p>同时对切片表达式的赋值也会扩展到整个选区：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [82]: arr2d[:,:1] = 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: arr2d</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">array([[0, 2, 3],</span><br><span class=\"line\">       [0, 4, 5]])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"布尔型索引\"><a href=\"#布尔型索引\" class=\"headerlink\" title=\"布尔型索引\"></a>布尔型索引</h4><p>可以对数组使用比较运算，其返回一个布尔型数组；可以使用布尔型数组进行数组索引，会返回<code>True</code>对应的数组，布尔型数组的长度必须跟被索引的轴长度一致:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [84]: names = np.array([&apos;bob&apos;,&apos;john&apos;,&apos;tom&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: data = randn(3,6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: names</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">array([&apos;bob&apos;, &apos;john&apos;, &apos;tom&apos;],</span><br><span class=\"line\">      dtype=&apos;&lt;U4&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: data</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489],</span><br><span class=\"line\">       [-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: names == &apos;bob&apos;</span><br><span class=\"line\">Out[88]: array([ True, False, False], dtype=bool)</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: data[names == &apos;bob&apos;]</span><br><span class=\"line\">Out[90]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489]])</span><br></pre></td></tr></table></figure></p>\n<p>布尔型数组还可以和切片、整数(或整数序列)混合使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [91]: data[names == &apos;bob&apos;,2:]</span><br><span class=\"line\">Out[91]: array([[-0.83396793,  2.53149852, -0.55033656,  0.13621489]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: data[names == &apos;bob&apos;,2]</span><br><span class=\"line\">Out[92]: array([-0.83396793])</span><br></pre></td></tr></table></figure></p>\n<p>要选取除某个元素以外的值，可以使用不等号(<code>!=</code>)，也可以通过<code>~</code>对条件进行否定；同时也可以使用<code>&amp;</code>(和)、<code>|</code>(或)之类的布尔运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [93]: data[names != &apos;bob&apos;]</span><br><span class=\"line\">Out[93]:</span><br><span class=\"line\">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: data[~(names == &apos;bob&apos;)]</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">array([[-1.92912846,  1.45011928,  0.76228734,  1.37168505,  0.71817348,</span><br><span class=\"line\">        -0.48010419],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: data[(names == &apos;bob&apos;)| (names==&apos;tom&apos;)]</span><br><span class=\"line\">Out[97]:</span><br><span class=\"line\">array([[-1.38783828,  1.53823048, -0.83396793,  2.53149852, -0.55033656,</span><br><span class=\"line\">         0.13621489],</span><br><span class=\"line\">       [-0.27052654,  0.72243318, -0.53976533, -0.55488584, -0.18700473,</span><br><span class=\"line\">        -0.06341261]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: data[(names == &apos;bob&apos;)&amp; (names==&apos;tom&apos;)]</span><br><span class=\"line\">Out[98]: array([], shape=(0, 6), dtype=float64)</span><br></pre></td></tr></table></figure></p>\n<p>通过布尔索引选取数组中的数据，总是创建数据的副本，即使返回一模一样的数组。</p>\n<h4 id=\"花式索引\"><a href=\"#花式索引\" class=\"headerlink\" title=\"花式索引\"></a>花式索引</h4><p>花式索引(Fancy indexing)指的是利用整数数组进行索引。为了以特定顺序选取行子集，只需传入一个指定顺序的整数列表或ndarray即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [102]: arr = np.empty((7,4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [103]: for i in range(7):</span><br><span class=\"line\">     ...:     arr[i]=i</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [104]: arr</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">array([[ 0.,  0.,  0.,  0.],</span><br><span class=\"line\">       [ 1.,  1.,  1.,  1.],</span><br><span class=\"line\">       [ 2.,  2.,  2.,  2.],</span><br><span class=\"line\">       [ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 5.,  5.,  5.,  5.],</span><br><span class=\"line\">       [ 6.,  6.,  6.,  6.]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: arr[[4,3,1,2]]</span><br><span class=\"line\">Out[105]:</span><br><span class=\"line\">array([[ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 1.,  1.,  1.,  1.],</span><br><span class=\"line\">       [ 2.,  2.,  2.,  2.]])</span><br></pre></td></tr></table></figure></p>\n<p>使用负数索引将会从末尾开始选取行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [106]: arr[[-4,-3,-1,-2]]</span><br><span class=\"line\">Out[106]:</span><br><span class=\"line\">array([[ 3.,  3.,  3.,  3.],</span><br><span class=\"line\">       [ 4.,  4.,  4.,  4.],</span><br><span class=\"line\">       [ 6.,  6.,  6.,  6.],</span><br><span class=\"line\">       [ 5.,  5.,  5.,  5.]])</span><br></pre></td></tr></table></figure></p>\n<p>一次性传入多个索引数组返回的事一个以为数组，其中的元素对应各个索引元组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [107]: arr = np.arange(32).reshape((8,4))</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: arr</span><br><span class=\"line\">Out[108]:</span><br><span class=\"line\">array([[ 0,  1,  2,  3],</span><br><span class=\"line\">       [ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19],</span><br><span class=\"line\">       [20, 21, 22, 23],</span><br><span class=\"line\">       [24, 25, 26, 27],</span><br><span class=\"line\">       [28, 29, 30, 31]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: arr[[1,2,3,4],[1,2,3,4]]</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: arr[[1,2,3,4],[0,1,2,3]]</span><br><span class=\"line\">Out[110]: array([ 4,  9, 14, 19])</span><br></pre></td></tr></table></figure></p>\n<p>其中选出的元素是(1,0),(2,1),(3,2),(4,3)。而选取矩阵的行列子集的方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [111]: arr[[1,2,3,4]][:,[0,1,2,3]]</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">array([[ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p>\n<p>选取矩阵的另一个方法是使用<code>np.ix_</code>函数，它可以将两个一维整数数组转换为一个用于选取方形区域的索引器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: arr[np.ix_([1,2,3,4],[0,1,2,3])]</span><br><span class=\"line\">Out[112]:</span><br><span class=\"line\">array([[ 4,  5,  6,  7],</span><br><span class=\"line\">       [ 8,  9, 10, 11],</span><br><span class=\"line\">       [12, 13, 14, 15],</span><br><span class=\"line\">       [16, 17, 18, 19]])</span><br></pre></td></tr></table></figure></p>\n<p>花式索引总是将数据复制到新数组中。</p>\n<h3 id=\"数组转置和轴对换\"><a href=\"#数组转置和轴对换\" class=\"headerlink\" title=\"数组转置和轴对换\"></a>数组转置和轴对换</h3><p>转置(transpose)是重塑的一种特殊形式，它返回的是源数据的视图。数组不仅有<code>transpose</code>方法，还有一个特殊的<code>T</code>属性，在计算内积的时候经常需要用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [114]: arr.T</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">array([[ 0,  4,  8, 12, 16, 20, 24, 28],</span><br><span class=\"line\">       [ 1,  5,  9, 13, 17, 21, 25, 29],</span><br><span class=\"line\">       [ 2,  6, 10, 14, 18, 22, 26, 30],</span><br><span class=\"line\">       [ 3,  7, 11, 15, 19, 23, 27, 31]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: np.dot(arr.T, arr)</span><br><span class=\"line\">Out[115]:</span><br><span class=\"line\">array([[2240, 2352, 2464, 2576],</span><br><span class=\"line\">       [2352, 2472, 2592, 2712],</span><br><span class=\"line\">       [2464, 2592, 2720, 2848],</span><br><span class=\"line\">       [2576, 2712, 2848, 2984]])</span><br></pre></td></tr></table></figure></p>\n<p><code>transpose</code>需要得到一个由轴编号组成的元组才能对这些轴进行转置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [126]: arr</span><br><span class=\"line\">Out[126]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 3,  4,  5]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 6,  7,  8],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [127]: arr.shape</span><br><span class=\"line\">Out[127]: (2, 2, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: arr.transpose((1,2,0))</span><br><span class=\"line\">Out[128]:</span><br><span class=\"line\">array([[[ 0,  6],</span><br><span class=\"line\">        [ 1,  7],</span><br><span class=\"line\">        [ 2,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  9],</span><br><span class=\"line\">        [ 4, 10],</span><br><span class=\"line\">        [ 5, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [129]: arr.transpose((1,0,2))</span><br><span class=\"line\">Out[129]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 6,  7,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  4,  5],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p>\n<p>上面<code>arr.shape</code>返回的结果是<em>(2,2,3)</em> 表明这是一个三维数组，形状为2x2x3,执行<code>arr.transpose((1,2,0))</code>对三个轴进行了重新排列形状变成了2x3x2。在原数组中元素对应的下标为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[(0,0,0), (0,0,1), (0,0,2)],</span><br><span class=\"line\">  [(0,1,0), (0,1,1), (0,1,2)]],</span><br><span class=\"line\">  [[(1,0,0), (1,0,1), (1,0,2)],</span><br><span class=\"line\">  [(1,1,0), (1,1,1),(1,1,2)]]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>进行轴变换之后的原下标变为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0,0,0)-&gt;(0,0,0)</span><br><span class=\"line\">(0,0,1)-&gt;(0,1,0)</span><br><span class=\"line\">(0,0,2)-&gt;(0,2,0)</span><br><span class=\"line\"></span><br><span class=\"line\">(0,1,0)-&gt;(1,0,0)</span><br><span class=\"line\">(0,1,1)-&gt;(1,1,0)</span><br><span class=\"line\">(0,1,2)-&gt;(1,2,0)</span><br><span class=\"line\"></span><br><span class=\"line\">(1,0,0)-&gt;(0,0,1)</span><br><span class=\"line\">(1,0,1)-&gt;(0,1,1)</span><br><span class=\"line\">(1,0,2)-&gt;(0,2,1)</span><br><span class=\"line\"></span><br><span class=\"line\">(1,1,0)-&gt;(1,0,1)</span><br><span class=\"line\">(1,1,1)-&gt;(1,1,1)</span><br><span class=\"line\">(1,1,2)-&gt;(1,2,1)</span><br></pre></td></tr></table></figure></p>\n<p>将将上面重新编号后的索引对应轴排列并将原数组对应的数字填入其中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[[(0,0,0), (0,0,1)],    -&gt;  (0,0,0) ,(1,0,0) -&gt; 0,6</span><br><span class=\"line\">  [(0,1,0), (0,1,1)],    -&gt;  (0,0,1) ,(1,0,1) -&gt; 1,7</span><br><span class=\"line\">  [(0,2,0), (0,2,1)]],   -&gt;  (0,0,2) ,(1,0,2) -&gt; 2,8</span><br><span class=\"line\"> [[(1,0,0), (1,0,1)],    -&gt;  (0,1,0) ,(1,1,0) -&gt; 3,9</span><br><span class=\"line\">  [(1,1,0), (1,1,1)],    -&gt;  (0,1,1) ,(1,1,1) -&gt; 4,10</span><br><span class=\"line\">  [(1,2,0), (1,2,1)]]    -&gt;  (0,1,2) ,(1,1,2) -&gt; 5, 11</span><br></pre></td></tr></table></figure></p>\n<p>所以最后的数组变为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[[ 0,  6],</span><br><span class=\"line\">        [ 1,  7],</span><br><span class=\"line\">        [ 2,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  9],</span><br><span class=\"line\">        [ 4, 10],</span><br><span class=\"line\">        [ 5, 11]]])</span><br></pre></td></tr></table></figure></p>\n<p><code>swapaxes</code>方法需要接受一对轴编号,其返回的事源数据的视图:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 3,  4,  5]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 6,  7,  8],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: arr.swapaxes(0,1)</span><br><span class=\"line\">Out[138]:</span><br><span class=\"line\">array([[[ 0,  1,  2],</span><br><span class=\"line\">        [ 6,  7,  8]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[ 3,  4,  5],</span><br><span class=\"line\">        [ 9, 10, 11]]])</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">NumPy将通过语句<code>import numpy as np</code>导入</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">使用副本需要显式地进行复制操作，<code>arr[1:4].copy()</code></span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li><li id=\"fn:3\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">3.</span><span style=\"display: inline-block; vertical-align: top;\">轴根据shape返回元组的大小确认，如果arr.shape返回(2,2,3)则表示这是一个三维数组，0就是对应第一个2的数轴，指的第一维，1对应第二个2的数轴，指的第二维，2对应3的数轴，指的第三维</span><a href=\"#fnref:3\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Web框架:Django","date":"2018-03-12T08:46:21.000Z","copyright":true,"description":"Web框架可以用于提供Web应用的所有相关服务，如Web服务器、数据库ORM、模板和所有需要的中间件hook","_content":"## Django简介\n* 安装\n在使用[Django](https://www.djangoproject.com/)开发之前，必须安装必需的组件，包括依赖组件和Django本身\n```\n pip3 install django\n```\n* 项目和应用\n**项目** 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 **应用**。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。\n1. **在Django中创建项目**\nDjango自带有一个名为`django-admin.py`/`django-admin.exe`的工具，它可以简.\n化任务。在POSIX平台上，一般在`/usr/local/bin`、`/usr/bin`这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如`E:\\Python\\Python36\\Scripts`。两种系统都应该确保文件位于PATH环境变量中。\n在项目文件加下执行命令创建项目:\n```\ndjango-admin.py startproject mysite\n```\n2. **Django项目文件**\n\n|   文件名    |        描述/用途         |\n|:-----------:|:------------------------:|\n| __init__.py | 告诉Python这是一个软件包 |\n|   urls.py   |  全局URL配置(\"URLconf\")  |\n| setting.py  |      项目相关的配置      |\n|  manage.py  |     应用的命令行接口     |\n\n* 运行开发服务器\nDjango内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：\n1. 可以直接运行与测试项目和应用，无需完整的生产环境\n2. 当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启\n3. 开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容\n\n>启动服务器\n\n```\npython manage.py runserver\n```\n## 应用\n### 创建应用\n在项目目录下使用如下命令创建一个应用：\n```\npython3 ./manage.py startapp blog\n```\n这样就建立了一个blog目录，其中有如下内容：\n\n|  文件名   |                               描述/目的                               |\n| :-------: | :-------------------------------------------------------------------: |\n| __init.py |                         告诉Python这是一个包                          |\n|  urls.py  | 应用的URL配置文件(\"URLconf\")，这个文件并不像项目的URLconf那样自动创建 |\n| models.py |                                数据模型                               |\n|  views.py |                       视图函数(即MVC中的控制器)                       |\n|  tests.py |                                单元测试                               |\n与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 *settings.py*，将应用名称(**blog**)添加到元组的末尾。Django使用 **INSTALLED_APPS** 来配置系统的不同部分，包括自动管理应用程序和测试框架。\n```Python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog'\n]\n```\n### 创建模型添加数据库服务\n#### 创建模型\n*models.py* 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多[字段类型](https://docs.djangoproject.com/en/2.0/ref/models/fields/)，用来将数据映射到应用中。\n```Python\nfrom django.db import models\n\n# Create your models here.\n\n\nclass BlogPost(models.Model):\n    \"\"\"\n    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。\n    BlogPost中的字段像普通类属性那样定义，\n    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。\n    \"\"\"\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n```\n#### 创建数据库\n在项目的*setting.py*文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):**ENGINE**、**NAME**、**HOST**、**PORT**、**USER**、**PASSWORD**。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。\n* 使用MySQL\n```Python\nDATABASES = {\n    # 使用mysql\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_test',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n```\n* 使用SQLite\nSQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。\n```Python\nDATABASES = {\n    # 使用sqlite\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n#### 创建表\n使用 *makemigrations* 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。\n```\npython3 ./manage.py makemigrations\n```\n使用 *migrate* 映射到数据库\n```\npython3 ./manage.py migrate\n```\n\n### Python应用Shell\n#### 在Django中使用Python shell\n即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：\n```\npython3 ./manage.py shell\n\nPython 3.6.4 (default, Jan  6 2018, 11:51:59)\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]:\n```\n[Django shell](https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api)和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 *-i* 来强制使用普通解释器。\n```\npython3 ./manage.py shell -i python\n\nPython 3.6.4 (default, Jan  6 2018, 11:51:59)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>>\n```\n#### 测试数据模型\n在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。\n```\nIn [1]: from datetime import datetime\n\nIn [2]: from blog.models import BlogPost\n\nIn [3]: BlogPost.objects.all()\nOut[3]: <QuerySet [<BlogPost: BlogPost object (1)>, <BlogPost: BlogPost object (2)>, <BlogPost: BlogPost object (3)>]>\n\nIn [4]: bp = BlogPost(title='my blog', body='''\n   ...: my 1st blog...\n   ...: yoooo!''',\n   ...: timestamp=datetime.now())\n\nIn [5]: bp\nOut[5]: <BlogPost: BlogPost object (None)>\n\nIn [6]: bp.save()\n\nIn [7]: BlogPost.objects.count()\nOut[7]: 4\n\n\nIn [9]: bp = BlogPost.objects.all()[0]\n\n\nIn [11]: print(bp.title)\ntest shell\n\n\nIn [13]: print(bp.body)\n\nmy 1st blog post...\nyo!\n\nIn [14]: bp.timestamp.ctime()\nOut[14]: 'Sun Mar 11 08:13:31 2018'\n```\n前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。\n设置时区:\n```Python\nLANGUAGE_CODE = 'zh-hans'\n\nTIME_ZONE = 'Asia/Shanghai'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n```\n### Django管理应用\nadmin应用让开发者在完成完整的UI之前验证处理数据的代码。\n#### 设置admin\n在 *setting.py* 的`INSTALLED_APP`中添加`'django.contrib.admin',`，然后运行`python3 ./manage.py makemigrations`和`python3 ./manage.py migrate`两条命令来创建其对应的表。在admin设置完之后于 *urls.py* 中设置url路径：\n```Python\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n```\n最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 *admin.py* 中注册BlogPost：\n```Python\nfrom django.contrib import admin\nfrom blog import models\n# Register your models here.\nadmin.site.register(models.BlogPost)\n```\n#### 使用admin\n使用命令`python3 ./manage.py runserver`启动服务，然后在浏览器中输入 *http://localhost:8000/admin* 访问admin页面。在访问之前使用`python3 manage.py createsuperuser`创建的超级用户的用户名和密码用于登录管理页面。（账号：*root*，密码：*Aa123456*）\n为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：\n```Python\nfrom django.contrib import admin\nfrom blog import models\n# Register your models here.\n\n\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'timestamp')\n\n\nadmin.site.register(models.BlogPost, BlogPostAdmin)\n\n```\n### 创建博客的用户界面\nDjango shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：\n1. **模板**，用于显示通过Python类字典对象传入的信息\n2. **视图函数**，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果\n3. **模式**，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图\n\nDjango是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：\n1. 因为需要一些可观察对象，所以先创建基本的模板\n2. 设计一个简单的URL模式，让Django可以立刻访问应用\n3. 开发出一个视图函数原型，然后在此基础上迭代开发\n在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 *测试驱动模型(TDD)* 的开发模式。\n\n#### [创建模板](https://docs.djangoproject.com/en/2.0/topics/templates/#tags)\n* *变量标签*\n**变量标签** 是由 *花括号({{……}})* 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 *点分割标识* 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号\"()\"来表示这个函数或方法可调用。\n\n* *过滤器*\n**过滤器** 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 *管道符号(\"|\")*，接着跟上过滤器名称。`<h2> { { post.title | title } } </h2>`\n\n* *上下文*\n**上下文** 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为\"post\"。通过上下文传入所有的博文，这样可以通过循环显示所有文章。\n\n* *块标签*\n**块标签** 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。\n\n将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 **templates** 目录下，模版名称任取，但模版目录一定是 *templates*\n```Html\n{%for post in posts%}\n    <h2>{{post.title}}</h2>\n    <h2>{{post.timestamp}}</h2>\n    <h2>{{post.body}}</h2>\n{% endfor%}\n```\n#### 创建URL模式\n* 项目的URLconf\n服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。\n```Python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.urls import include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # include函数将动作推迟到其他URLconf\n    # 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py\n    path('blog/', include('blog.urls'))\n]\n```\n*include()* 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（*当输入'http://localhost:8080/blog/foo/bar' 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py*）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 **字符串**，未使用include传递的是 **对象**。\n\n* 应用的URLconf\n在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：\n```Python\nfrom django.urls import *\nimport blog.views\nurlpatterns = [\n    # 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息\n    path('', blog.views.archive)\n]\n```\n请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。\n#### 创建视图函数\n一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：\n1. 向数据库查询所有博客条目\n2. 载入模板文件\n3. 为模板创建上下文字典\n4. 将模板渲染到HTML中\n5. 通过HTTP响应返回HTML\n在应用的views.py中添加如下代码:\n```Python\nfrom django.shortcuts import render\nfrom blog.models import BlogPost\nfrom django.template import loader, Context\nfrom django.shortcuts import render_to_response\n# Create your views here.\n\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    return render_to_response('archive.html', {'posts': posts})\n\n```\n### 改进输出\n现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。\n> BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。\n\n实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all().order_by('-timestamp')\n    return render_to_response('archive.html', {'posts': posts})\n```\n为了测试限制显示数目，先启动Django shell添加数据：\n```\npython ./manage.py shell\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from datetime import datetime\n>>> from blog.models import BlogPost\n>>> for i in range(10):\n...     bp = BlogPost(title='post $%d' % i ,body='body of post $%d' %d, timestamp=datetime.now())\n...     bp.save()\n...\n```\n然后使用切片的方式获取最新的10篇(views.py)：\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all().order_by('-timestamp')[:10]\n    return render_to_response('archive.html', {'posts': posts})\n```\n\n* 设置模型的默认排序方式\n\n如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 **Meta** 的内部类，在其中设置一个名为 **ordering** 的属性(models.py):\n```Python\nclass BlogPost(models.Model):\n    \"\"\"\n    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。\n    BlogPost中的字段像普通类属性那样定义，\n    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。\n    \"\"\"\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-timestamp',)\n```\n取消视图函数中的排序(views.py):\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all()[:10]\n    return render_to_response('archive.html', {'posts': posts})\n```\n\n### 处理用户输入\n1. 添加一个HTML表单，让用户可以输入数据(archive.html),为了防止\n```Html\n<form action=\"/blog/create/\" method=\"post\">\n    Title:\n    <input type=\"text\" name=\"title\"><br>\n    Body:\n    <textarea name=\"body\" rows=\"3\" cols=\"60\"></textarea><br>\n    <input type=\"submit\">\n</form>\n<hr>\n{%for post in posts%}\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n\n```\n\n2. 插入(URL，视图)这样的URLConf项\n使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：\n```Python\nfrom django.urls import *\nimport blog.views\nurlpatterns = [\n    # 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息\n    path('', blog.views.archive),\n    path(r'create/', blog.views.create_blogpost)\n]\n```\n\n3. 创建视图来处理用户输入\n在应用的views.py中添加上面定义的处理方法\n```Python\ndef create_blogpost(request):\n    if request.method == 'POST':\n        # 检查POST请求\n        # 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。\n        BlogPost(\n            title=request.POST.get('title'),\n            body=request.POST.get('body'),\n            timestamp=datetime.now()\n        ).save()\n    # 重定向会/blog\n    return HttpResponseRedirect('/blog')\n```\n\n* 在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 *跨站点请求伪造（Cross-site Request Forgery,CSRF）* 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):\n```Html\n<form action=\"/blog/create/\" method=\"post\">{%csrf_token%}\n    Title:\n    <input type=\"text\" name=\"title\"><br>\n    Body:\n    <textarea name=\"body\" rows=\"3\" cols=\"60\"></textarea><br>\n    <input type=\"submit\">\n</form>\n<hr>\n    {%for post in posts%}\n\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n```\n通过模板发送向这些标记请求的上下文实例，这里将`archive()`方法调用的`render_to_response()`改为`render`:\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all()[:10]\n    return render(request, 'archive.html', {'posts': posts})\n```\n\n### 表单和模型表单\n* 如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):\n```Python\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        # 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。\n        # 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。\n        model = BlogPost\n        exclude = ('timestamp',)\n```\n* 使用ModelForm来生成HTML表单(archive.html):\n```Python\n<form action=\"/blog/create/\" method=\"post\">{%csrf_token%}\n  <table>{{form}}</table>\n    <input type=\"submit\">\n</form>\n<hr>\n    {%for post in posts%}\n\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n```\n* 因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中`create_blogpost()`方法如下:\n```Python\ndef create_blogpost(request):\n    if request.method == 'POST':\n        # 检查POST请求\n        # 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。\n        # BlogPost(\n        #     title=request.POST.get('title'),\n        #     body=request.POST.get('body'),\n        #     timestamp=datetime.now()\n        # ).save()\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.timestamp = datetime.now()\n            post.save()\n    # 重定向会/blog\n    return HttpResponseRedirect('/blog')\n```\n\n### 添加测试\nDjango通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 *文档测试(doctest)*\n>应用的tests.py\n\n```Python\nfrom django.test import TestCase\nfrom datetime import datetime\nfrom django.test.client import Client\nfrom blog.models import BlogPost\n# Create your tests here.\n\n\nclass BlogPostTest(TestCase):\n    # 测试方法必须以“test_”开头，方法名后面的部分随意。\n    def test_obj_create(self):\n        # 这里仅仅通过测试确保对象成功创建，并验证标题内容\n        BlogPost.objects.create(\n            title='raw title', body='raw body', timestamp=datetime.now())\n        # 如果两个参数相等则测试成功，否则该测试失败\n        # 这里验证对象的数目和标题\n        self.assertEqual(1, BlogPost.objects.count())\n        self.assertEqual('raw title', BlogPost.objects.get(id=1).title)\n\n    def test_home(self):\n        # 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码\n        response = self.client.get('/blog/')\n        self.assertIn(response.status_code, (200, ))\n\n    def test_slash(self):\n        # 测试确认重定向\n        response = self.client.get('/')\n        self.assertIn(response.status_code, (301, 302))\n\n    def test_empty_create(self):\n        # 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，\n        # 代码应该忽略掉这个请求，然后重定向到'/blog'\n        response = self.client.get('/blog/create/')\n        self.assertIn(response.status_code, (301, 302))\n\n    def test_post_create(self):\n        # 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到\"/blog\"\n        response = self.client.post('/blog/create/', {\n            'title': 'post title',\n            'body': 'post body'\n        })\n        self.assertIn(response.status_code, (301, 302))\n        self.assertEqual(1, BlogPost.objects.count())\n        self.assertEqual('post title', BlogPost.objects.get(id=1).title)\n```\n[源代码](https://github.com/coldJune/Python/tree/master/mysite)\n","source":"_posts/Web框架-Django.md","raw":"---\ntitle: 'Web框架:Django'\ndate: 2018-03-12 16:46:21\ncategories: Python\ncopyright: true\ntags:\n    - Web框架\n    - Django\ndescription: Web框架可以用于提供Web应用的所有相关服务，如Web服务器、数据库ORM、模板和所有需要的中间件hook\n---\n## Django简介\n* 安装\n在使用[Django](https://www.djangoproject.com/)开发之前，必须安装必需的组件，包括依赖组件和Django本身\n```\n pip3 install django\n```\n* 项目和应用\n**项目** 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 **应用**。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。\n1. **在Django中创建项目**\nDjango自带有一个名为`django-admin.py`/`django-admin.exe`的工具，它可以简.\n化任务。在POSIX平台上，一般在`/usr/local/bin`、`/usr/bin`这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如`E:\\Python\\Python36\\Scripts`。两种系统都应该确保文件位于PATH环境变量中。\n在项目文件加下执行命令创建项目:\n```\ndjango-admin.py startproject mysite\n```\n2. **Django项目文件**\n\n|   文件名    |        描述/用途         |\n|:-----------:|:------------------------:|\n| __init__.py | 告诉Python这是一个软件包 |\n|   urls.py   |  全局URL配置(\"URLconf\")  |\n| setting.py  |      项目相关的配置      |\n|  manage.py  |     应用的命令行接口     |\n\n* 运行开发服务器\nDjango内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：\n1. 可以直接运行与测试项目和应用，无需完整的生产环境\n2. 当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启\n3. 开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容\n\n>启动服务器\n\n```\npython manage.py runserver\n```\n## 应用\n### 创建应用\n在项目目录下使用如下命令创建一个应用：\n```\npython3 ./manage.py startapp blog\n```\n这样就建立了一个blog目录，其中有如下内容：\n\n|  文件名   |                               描述/目的                               |\n| :-------: | :-------------------------------------------------------------------: |\n| __init.py |                         告诉Python这是一个包                          |\n|  urls.py  | 应用的URL配置文件(\"URLconf\")，这个文件并不像项目的URLconf那样自动创建 |\n| models.py |                                数据模型                               |\n|  views.py |                       视图函数(即MVC中的控制器)                       |\n|  tests.py |                                单元测试                               |\n与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 *settings.py*，将应用名称(**blog**)添加到元组的末尾。Django使用 **INSTALLED_APPS** 来配置系统的不同部分，包括自动管理应用程序和测试框架。\n```Python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog'\n]\n```\n### 创建模型添加数据库服务\n#### 创建模型\n*models.py* 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多[字段类型](https://docs.djangoproject.com/en/2.0/ref/models/fields/)，用来将数据映射到应用中。\n```Python\nfrom django.db import models\n\n# Create your models here.\n\n\nclass BlogPost(models.Model):\n    \"\"\"\n    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。\n    BlogPost中的字段像普通类属性那样定义，\n    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。\n    \"\"\"\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n```\n#### 创建数据库\n在项目的*setting.py*文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):**ENGINE**、**NAME**、**HOST**、**PORT**、**USER**、**PASSWORD**。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。\n* 使用MySQL\n```Python\nDATABASES = {\n    # 使用mysql\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_test',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n```\n* 使用SQLite\nSQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。\n```Python\nDATABASES = {\n    # 使用sqlite\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n#### 创建表\n使用 *makemigrations* 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。\n```\npython3 ./manage.py makemigrations\n```\n使用 *migrate* 映射到数据库\n```\npython3 ./manage.py migrate\n```\n\n### Python应用Shell\n#### 在Django中使用Python shell\n即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：\n```\npython3 ./manage.py shell\n\nPython 3.6.4 (default, Jan  6 2018, 11:51:59)\nType 'copyright', 'credits' or 'license' for more information\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]:\n```\n[Django shell](https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api)和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 *-i* 来强制使用普通解释器。\n```\npython3 ./manage.py shell -i python\n\nPython 3.6.4 (default, Jan  6 2018, 11:51:59)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>>\n```\n#### 测试数据模型\n在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。\n```\nIn [1]: from datetime import datetime\n\nIn [2]: from blog.models import BlogPost\n\nIn [3]: BlogPost.objects.all()\nOut[3]: <QuerySet [<BlogPost: BlogPost object (1)>, <BlogPost: BlogPost object (2)>, <BlogPost: BlogPost object (3)>]>\n\nIn [4]: bp = BlogPost(title='my blog', body='''\n   ...: my 1st blog...\n   ...: yoooo!''',\n   ...: timestamp=datetime.now())\n\nIn [5]: bp\nOut[5]: <BlogPost: BlogPost object (None)>\n\nIn [6]: bp.save()\n\nIn [7]: BlogPost.objects.count()\nOut[7]: 4\n\n\nIn [9]: bp = BlogPost.objects.all()[0]\n\n\nIn [11]: print(bp.title)\ntest shell\n\n\nIn [13]: print(bp.body)\n\nmy 1st blog post...\nyo!\n\nIn [14]: bp.timestamp.ctime()\nOut[14]: 'Sun Mar 11 08:13:31 2018'\n```\n前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。\n设置时区:\n```Python\nLANGUAGE_CODE = 'zh-hans'\n\nTIME_ZONE = 'Asia/Shanghai'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n```\n### Django管理应用\nadmin应用让开发者在完成完整的UI之前验证处理数据的代码。\n#### 设置admin\n在 *setting.py* 的`INSTALLED_APP`中添加`'django.contrib.admin',`，然后运行`python3 ./manage.py makemigrations`和`python3 ./manage.py migrate`两条命令来创建其对应的表。在admin设置完之后于 *urls.py* 中设置url路径：\n```Python\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n```\n最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 *admin.py* 中注册BlogPost：\n```Python\nfrom django.contrib import admin\nfrom blog import models\n# Register your models here.\nadmin.site.register(models.BlogPost)\n```\n#### 使用admin\n使用命令`python3 ./manage.py runserver`启动服务，然后在浏览器中输入 *http://localhost:8000/admin* 访问admin页面。在访问之前使用`python3 manage.py createsuperuser`创建的超级用户的用户名和密码用于登录管理页面。（账号：*root*，密码：*Aa123456*）\n为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：\n```Python\nfrom django.contrib import admin\nfrom blog import models\n# Register your models here.\n\n\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'timestamp')\n\n\nadmin.site.register(models.BlogPost, BlogPostAdmin)\n\n```\n### 创建博客的用户界面\nDjango shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：\n1. **模板**，用于显示通过Python类字典对象传入的信息\n2. **视图函数**，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果\n3. **模式**，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图\n\nDjango是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：\n1. 因为需要一些可观察对象，所以先创建基本的模板\n2. 设计一个简单的URL模式，让Django可以立刻访问应用\n3. 开发出一个视图函数原型，然后在此基础上迭代开发\n在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 *测试驱动模型(TDD)* 的开发模式。\n\n#### [创建模板](https://docs.djangoproject.com/en/2.0/topics/templates/#tags)\n* *变量标签*\n**变量标签** 是由 *花括号({{……}})* 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 *点分割标识* 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号\"()\"来表示这个函数或方法可调用。\n\n* *过滤器*\n**过滤器** 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 *管道符号(\"|\")*，接着跟上过滤器名称。`<h2> { { post.title | title } } </h2>`\n\n* *上下文*\n**上下文** 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为\"post\"。通过上下文传入所有的博文，这样可以通过循环显示所有文章。\n\n* *块标签*\n**块标签** 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。\n\n将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 **templates** 目录下，模版名称任取，但模版目录一定是 *templates*\n```Html\n{%for post in posts%}\n    <h2>{{post.title}}</h2>\n    <h2>{{post.timestamp}}</h2>\n    <h2>{{post.body}}</h2>\n{% endfor%}\n```\n#### 创建URL模式\n* 项目的URLconf\n服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。\n```Python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.urls import include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # include函数将动作推迟到其他URLconf\n    # 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py\n    path('blog/', include('blog.urls'))\n]\n```\n*include()* 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（*当输入'http://localhost:8080/blog/foo/bar' 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py*）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 **字符串**，未使用include传递的是 **对象**。\n\n* 应用的URLconf\n在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：\n```Python\nfrom django.urls import *\nimport blog.views\nurlpatterns = [\n    # 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息\n    path('', blog.views.archive)\n]\n```\n请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。\n#### 创建视图函数\n一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：\n1. 向数据库查询所有博客条目\n2. 载入模板文件\n3. 为模板创建上下文字典\n4. 将模板渲染到HTML中\n5. 通过HTTP响应返回HTML\n在应用的views.py中添加如下代码:\n```Python\nfrom django.shortcuts import render\nfrom blog.models import BlogPost\nfrom django.template import loader, Context\nfrom django.shortcuts import render_to_response\n# Create your views here.\n\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    return render_to_response('archive.html', {'posts': posts})\n\n```\n### 改进输出\n现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。\n> BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。\n\n实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all().order_by('-timestamp')\n    return render_to_response('archive.html', {'posts': posts})\n```\n为了测试限制显示数目，先启动Django shell添加数据：\n```\npython ./manage.py shell\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from datetime import datetime\n>>> from blog.models import BlogPost\n>>> for i in range(10):\n...     bp = BlogPost(title='post $%d' % i ,body='body of post $%d' %d, timestamp=datetime.now())\n...     bp.save()\n...\n```\n然后使用切片的方式获取最新的10篇(views.py)：\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all().order_by('-timestamp')[:10]\n    return render_to_response('archive.html', {'posts': posts})\n```\n\n* 设置模型的默认排序方式\n\n如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 **Meta** 的内部类，在其中设置一个名为 **ordering** 的属性(models.py):\n```Python\nclass BlogPost(models.Model):\n    \"\"\"\n    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。\n    BlogPost中的字段像普通类属性那样定义，\n    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。\n    \"\"\"\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-timestamp',)\n```\n取消视图函数中的排序(views.py):\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all()[:10]\n    return render_to_response('archive.html', {'posts': posts})\n```\n\n### 处理用户输入\n1. 添加一个HTML表单，让用户可以输入数据(archive.html),为了防止\n```Html\n<form action=\"/blog/create/\" method=\"post\">\n    Title:\n    <input type=\"text\" name=\"title\"><br>\n    Body:\n    <textarea name=\"body\" rows=\"3\" cols=\"60\"></textarea><br>\n    <input type=\"submit\">\n</form>\n<hr>\n{%for post in posts%}\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n\n```\n\n2. 插入(URL，视图)这样的URLConf项\n使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：\n```Python\nfrom django.urls import *\nimport blog.views\nurlpatterns = [\n    # 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息\n    path('', blog.views.archive),\n    path(r'create/', blog.views.create_blogpost)\n]\n```\n\n3. 创建视图来处理用户输入\n在应用的views.py中添加上面定义的处理方法\n```Python\ndef create_blogpost(request):\n    if request.method == 'POST':\n        # 检查POST请求\n        # 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。\n        BlogPost(\n            title=request.POST.get('title'),\n            body=request.POST.get('body'),\n            timestamp=datetime.now()\n        ).save()\n    # 重定向会/blog\n    return HttpResponseRedirect('/blog')\n```\n\n* 在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 *跨站点请求伪造（Cross-site Request Forgery,CSRF）* 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):\n```Html\n<form action=\"/blog/create/\" method=\"post\">{%csrf_token%}\n    Title:\n    <input type=\"text\" name=\"title\"><br>\n    Body:\n    <textarea name=\"body\" rows=\"3\" cols=\"60\"></textarea><br>\n    <input type=\"submit\">\n</form>\n<hr>\n    {%for post in posts%}\n\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n```\n通过模板发送向这些标记请求的上下文实例，这里将`archive()`方法调用的`render_to_response()`改为`render`:\n```Python\ndef archive(request):\n    # 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号\n    posts = BlogPost.objects.all()[:10]\n    return render(request, 'archive.html', {'posts': posts})\n```\n\n### 表单和模型表单\n* 如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):\n```Python\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        # 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。\n        # 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。\n        model = BlogPost\n        exclude = ('timestamp',)\n```\n* 使用ModelForm来生成HTML表单(archive.html):\n```Python\n<form action=\"/blog/create/\" method=\"post\">{%csrf_token%}\n  <table>{{form}}</table>\n    <input type=\"submit\">\n</form>\n<hr>\n    {%for post in posts%}\n\n    <h2>{{post.title}}</h2>\n    <p>{{post.timestamp}}</p>\n    <p>{{post.body}}</p>\n<hr>\n{% endfor %}\n```\n* 因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中`create_blogpost()`方法如下:\n```Python\ndef create_blogpost(request):\n    if request.method == 'POST':\n        # 检查POST请求\n        # 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。\n        # BlogPost(\n        #     title=request.POST.get('title'),\n        #     body=request.POST.get('body'),\n        #     timestamp=datetime.now()\n        # ).save()\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.timestamp = datetime.now()\n            post.save()\n    # 重定向会/blog\n    return HttpResponseRedirect('/blog')\n```\n\n### 添加测试\nDjango通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 *文档测试(doctest)*\n>应用的tests.py\n\n```Python\nfrom django.test import TestCase\nfrom datetime import datetime\nfrom django.test.client import Client\nfrom blog.models import BlogPost\n# Create your tests here.\n\n\nclass BlogPostTest(TestCase):\n    # 测试方法必须以“test_”开头，方法名后面的部分随意。\n    def test_obj_create(self):\n        # 这里仅仅通过测试确保对象成功创建，并验证标题内容\n        BlogPost.objects.create(\n            title='raw title', body='raw body', timestamp=datetime.now())\n        # 如果两个参数相等则测试成功，否则该测试失败\n        # 这里验证对象的数目和标题\n        self.assertEqual(1, BlogPost.objects.count())\n        self.assertEqual('raw title', BlogPost.objects.get(id=1).title)\n\n    def test_home(self):\n        # 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码\n        response = self.client.get('/blog/')\n        self.assertIn(response.status_code, (200, ))\n\n    def test_slash(self):\n        # 测试确认重定向\n        response = self.client.get('/')\n        self.assertIn(response.status_code, (301, 302))\n\n    def test_empty_create(self):\n        # 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，\n        # 代码应该忽略掉这个请求，然后重定向到'/blog'\n        response = self.client.get('/blog/create/')\n        self.assertIn(response.status_code, (301, 302))\n\n    def test_post_create(self):\n        # 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到\"/blog\"\n        response = self.client.post('/blog/create/', {\n            'title': 'post title',\n            'body': 'post body'\n        })\n        self.assertIn(response.status_code, (301, 302))\n        self.assertEqual(1, BlogPost.objects.count())\n        self.assertEqual('post title', BlogPost.objects.get(id=1).title)\n```\n[源代码](https://github.com/coldJune/Python/tree/master/mysite)\n","slug":"Web框架-Django","published":1,"updated":"2018-03-13T06:47:31.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw550013twn9wi6eb8qa","content":"<h2 id=\"Django简介\"><a href=\"#Django简介\" class=\"headerlink\" title=\"Django简介\"></a>Django简介</h2><ul>\n<li><p>安装<br>在使用<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django</a>开发之前，必须安装必需的组件，包括依赖组件和Django本身</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目和应用<br><strong>项目</strong> 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 <strong>应用</strong>。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。</p>\n</li>\n</ul>\n<ol>\n<li><p><strong>在Django中创建项目</strong><br>Django自带有一个名为<code>django-admin.py</code>/<code>django-admin.exe</code>的工具，它可以简.<br>化任务。在POSIX平台上，一般在<code>/usr/local/bin</code>、<code>/usr/bin</code>这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如<code>E:\\Python\\Python36\\Scripts</code>。两种系统都应该确保文件位于PATH环境变量中。<br>在项目文件加下执行命令创建项目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Django项目文件</strong></p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件名</th>\n<th style=\"text-align:center\">描述/用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>init</strong>.py</td>\n<td style=\"text-align:center\">告诉Python这是一个软件包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urls.py</td>\n<td style=\"text-align:center\">全局URL配置(“URLconf”)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setting.py</td>\n<td style=\"text-align:center\">项目相关的配置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">manage.py</td>\n<td style=\"text-align:center\">应用的命令行接口</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>运行开发服务器<br>Django内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：</li>\n</ul>\n<ol>\n<li>可以直接运行与测试项目和应用，无需完整的生产环境</li>\n<li>当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启</li>\n<li>开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容</li>\n</ol>\n<blockquote>\n<p>启动服务器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><p>在项目目录下使用如下命令创建一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py startapp blog</span><br></pre></td></tr></table></figure></p>\n<p>这样就建立了一个blog目录，其中有如下内容：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件名</th>\n<th style=\"text-align:center\">描述/目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__init.py</td>\n<td style=\"text-align:center\">告诉Python这是一个包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urls.py</td>\n<td style=\"text-align:center\">应用的URL配置文件(“URLconf”)，这个文件并不像项目的URLconf那样自动创建</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">models.py</td>\n<td style=\"text-align:center\">数据模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">views.py</td>\n<td style=\"text-align:center\">视图函数(即MVC中的控制器)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tests.py</td>\n<td style=\"text-align:center\">单元测试</td>\n</tr>\n</tbody>\n</table>\n<p>与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 <em>settings.py</em>，将应用名称(<strong>blog</strong>)添加到元组的末尾。Django使用 <strong>INSTALLED_APPS</strong> 来配置系统的不同部分，包括自动管理应用程序和测试框架。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">    <span class=\"string\">'blog'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建模型添加数据库服务\"><a href=\"#创建模型添加数据库服务\" class=\"headerlink\" title=\"创建模型添加数据库服务\"></a>创建模型添加数据库服务</h3><h4 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h4><p><em>models.py</em> 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多<a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">字段类型</a>，用来将数据映射到应用中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class=\"line\"><span class=\"string\">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class=\"line\"><span class=\"string\">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">150</span>)</span><br><span class=\"line\">    body = models.TextField()</span><br><span class=\"line\">    timestamp = models.DateTimeField()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p>在项目的<em>setting.py</em>文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):<strong>ENGINE</strong>、<strong>NAME</strong>、<strong>HOST</strong>、<strong>PORT</strong>、<strong>USER</strong>、<strong>PASSWORD</strong>。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。</p>\n<ul>\n<li><p>使用MySQL</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 使用mysql</span></span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'django_test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用SQLite<br>SQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 使用sqlite</span></span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: os.path.join(BASE_DIR, <span class=\"string\">'db.sqlite3'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h4><p>使用 <em>makemigrations</em> 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py makemigrations</span><br></pre></td></tr></table></figure></p>\n<p>使用 <em>migrate</em> 映射到数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py migrate</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python应用Shell\"><a href=\"#Python应用Shell\" class=\"headerlink\" title=\"Python应用Shell\"></a>Python应用Shell</h3><h4 id=\"在Django中使用Python-shell\"><a href=\"#在Django中使用Python-shell\" class=\"headerlink\" title=\"在Django中使用Python shell\"></a>在Django中使用Python shell</h4><p>即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py shell</span><br><span class=\"line\"></span><br><span class=\"line\">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api\" target=\"_blank\" rel=\"noopener\">Django shell</a>和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 <em>-i</em> 来强制使用普通解释器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py shell -i python</span><br><span class=\"line\"></span><br><span class=\"line\">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">(InteractiveConsole)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试数据模型\"><a href=\"#测试数据模型\" class=\"headerlink\" title=\"测试数据模型\"></a>测试数据模型</h4><p>在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: from blog.models import BlogPost</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: BlogPost.objects.all()</span><br><span class=\"line\">Out[3]: &lt;QuerySet [&lt;BlogPost: BlogPost object (1)&gt;, &lt;BlogPost: BlogPost object (2)&gt;, &lt;BlogPost: BlogPost object (3)&gt;]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: bp = BlogPost(title=&apos;my blog&apos;, body=&apos;&apos;&apos;</span><br><span class=\"line\">   ...: my 1st blog...</span><br><span class=\"line\">   ...: yoooo!&apos;&apos;&apos;,</span><br><span class=\"line\">   ...: timestamp=datetime.now())</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: bp</span><br><span class=\"line\">Out[5]: &lt;BlogPost: BlogPost object (None)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: bp.save()</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: BlogPost.objects.count()</span><br><span class=\"line\">Out[7]: 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: bp = BlogPost.objects.all()[0]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: print(bp.title)</span><br><span class=\"line\">test shell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: print(bp.body)</span><br><span class=\"line\"></span><br><span class=\"line\">my 1st blog post...</span><br><span class=\"line\">yo!</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: bp.timestamp.ctime()</span><br><span class=\"line\">Out[14]: &apos;Sun Mar 11 08:13:31 2018&apos;</span><br></pre></td></tr></table></figure></p>\n<p>前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。<br>设置时区:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-hans'</span></span><br><span class=\"line\"></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_I18N = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_L10N = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_TZ = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Django管理应用\"><a href=\"#Django管理应用\" class=\"headerlink\" title=\"Django管理应用\"></a>Django管理应用</h3><p>admin应用让开发者在完成完整的UI之前验证处理数据的代码。</p>\n<h4 id=\"设置admin\"><a href=\"#设置admin\" class=\"headerlink\" title=\"设置admin\"></a>设置admin</h4><p>在 <em>setting.py</em> 的<code>INSTALLED_APP</code>中添加<code>&#39;django.contrib.admin&#39;,</code>，然后运行<code>python3 ./manage.py makemigrations</code>和<code>python3 ./manage.py migrate</code>两条命令来创建其对应的表。在admin设置完之后于 <em>urls.py</em> 中设置url路径：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 <em>admin.py</em> 中注册BlogPost：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\">admin.site.register(models.BlogPost)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用admin\"><a href=\"#使用admin\" class=\"headerlink\" title=\"使用admin\"></a>使用admin</h4><p>使用命令<code>python3 ./manage.py runserver</code>启动服务，然后在浏览器中输入 <em><a href=\"http://localhost:8000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/admin</a></em> 访问admin页面。在访问之前使用<code>python3 manage.py createsuperuser</code>创建的超级用户的用户名和密码用于登录管理页面。（账号：<em>root</em>，密码：<em>Aa123456</em>）<br>为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    list_display = (<span class=\"string\">'title'</span>, <span class=\"string\">'timestamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(models.BlogPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建博客的用户界面\"><a href=\"#创建博客的用户界面\" class=\"headerlink\" title=\"创建博客的用户界面\"></a>创建博客的用户界面</h3><p>Django shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：</p>\n<ol>\n<li><strong>模板</strong>，用于显示通过Python类字典对象传入的信息</li>\n<li><strong>视图函数</strong>，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果</li>\n<li><strong>模式</strong>，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图</li>\n</ol>\n<p>Django是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：</p>\n<ol>\n<li>因为需要一些可观察对象，所以先创建基本的模板</li>\n<li>设计一个简单的URL模式，让Django可以立刻访问应用</li>\n<li>开发出一个视图函数原型，然后在此基础上迭代开发<br>在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 <em>测试驱动模型(TDD)</em> 的开发模式。</li>\n</ol>\n<h4 id=\"创建模板\"><a href=\"#创建模板\" class=\"headerlink\" title=\"创建模板\"></a><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#tags\" target=\"_blank\" rel=\"noopener\">创建模板</a></h4><ul>\n<li><p><em>变量标签</em><br><strong>变量标签</strong> 是由 <em>花括号()</em> 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 <em>点分割标识</em> 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号”()”来表示这个函数或方法可调用。</p>\n</li>\n<li><p><em>过滤器</em><br><strong>过滤器</strong> 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 <em>管道符号(“|”)</em>，接着跟上过滤器名称。<code>&lt;h2&gt; { { post.title | title } } &lt;/h2&gt;</code></p>\n</li>\n<li><p><em>上下文</em><br><strong>上下文</strong> 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为”post”。通过上下文传入所有的博文，这样可以通过循环显示所有文章。</p>\n</li>\n<li><p><em>块标签</em><br><strong>块标签</strong> 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。</p>\n</li>\n</ul>\n<p>将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 <strong>templates</strong> 目录下，模版名称任取，但模版目录一定是 <em>templates</em><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%for post in posts%&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建URL模式\"><a href=\"#创建URL模式\" class=\"headerlink\" title=\"创建URL模式\"></a>创建URL模式</h4><ul>\n<li>项目的URLconf<br>服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    <span class=\"comment\"># include函数将动作推迟到其他URLconf</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py</span></span><br><span class=\"line\">    path(<span class=\"string\">'blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>include()</em> 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（<em>当输入’<a href=\"http://localhost:8080/blog/foo/bar\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/blog/foo/bar</a>‘ 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py</em>）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 <strong>字符串</strong>，未使用include传递的是 <strong>对象</strong>。</p>\n<ul>\n<li>应用的URLconf<br>在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class=\"line\">    path(<span class=\"string\">''</span>, blog.views.archive)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。</p>\n<h4 id=\"创建视图函数\"><a href=\"#创建视图函数\" class=\"headerlink\" title=\"创建视图函数\"></a>创建视图函数</h4><p>一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：</p>\n<ol>\n<li>向数据库查询所有博客条目</li>\n<li>载入模板文件</li>\n<li>为模板创建上下文字典</li>\n<li>将模板渲染到HTML中</li>\n<li>通过HTTP响应返回HTML<br>在应用的views.py中添加如下代码:<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog.models <span class=\"keyword\">import</span> BlogPost</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader, Context</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"改进输出\"><a href=\"#改进输出\" class=\"headerlink\" title=\"改进输出\"></a>改进输出</h3><p>现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。</p>\n<blockquote>\n<p>BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。</p>\n</blockquote>\n<p>实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all().order_by(<span class=\"string\">'-timestamp'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>为了测试限制显示数目，先启动Django shell添加数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python ./manage.py shell</span><br><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">(InteractiveConsole)</span><br><span class=\"line\">&gt;&gt;&gt; from datetime import datetime</span><br><span class=\"line\">&gt;&gt;&gt; from blog.models import BlogPost</span><br><span class=\"line\">&gt;&gt;&gt; for i in range(10):</span><br><span class=\"line\">...     bp = BlogPost(title=&apos;post $%d&apos; % i ,body=&apos;body of post $%d&apos; %d, timestamp=datetime.now())</span><br><span class=\"line\">...     bp.save()</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>然后使用切片的方式获取最新的10篇(views.py)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all().order_by(<span class=\"string\">'-timestamp'</span>)[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>设置模型的默认排序方式</li>\n</ul>\n<p>如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 <strong>Meta</strong> 的内部类，在其中设置一个名为 <strong>ordering</strong> 的属性(models.py):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class=\"line\"><span class=\"string\">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class=\"line\"><span class=\"string\">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">150</span>)</span><br><span class=\"line\">    body = models.TextField()</span><br><span class=\"line\">    timestamp = models.DateTimeField()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        ordering = (<span class=\"string\">'-timestamp'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>取消视图函数中的排序(views.py):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"处理用户输入\"><a href=\"#处理用户输入\" class=\"headerlink\" title=\"处理用户输入\"></a>处理用户输入</h3><ol>\n<li><p>添加一个HTML表单，让用户可以输入数据(archive.html),为了防止</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/blog/create/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    Title:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Body:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"body\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;%for post in posts%&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>插入(URL，视图)这样的URLConf项<br>使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class=\"line\">    path(<span class=\"string\">''</span>, blog.views.archive),</span><br><span class=\"line\">    path(<span class=\"string\">r'create/'</span>, blog.views.create_blogpost)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建视图来处理用户输入<br>在应用的views.py中添加上面定义的处理方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_blogpost</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 检查POST请求</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class=\"line\">        BlogPost(</span><br><span class=\"line\">            title=request.POST.get(<span class=\"string\">'title'</span>),</span><br><span class=\"line\">            body=request.POST.get(<span class=\"string\">'body'</span>),</span><br><span class=\"line\">            timestamp=datetime.now()</span><br><span class=\"line\">        ).save()</span><br><span class=\"line\">    <span class=\"comment\"># 重定向会/blog</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponseRedirect(<span class=\"string\">'/blog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 <em>跨站点请求伪造（Cross-site Request Forgery,CSRF）</em> 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/blog/create/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span>&#123;%csrf_token%&#125;</span><br><span class=\"line\">    Title:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Body:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"body\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;%for post in posts%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过模板发送向这些标记请求的上下文实例，这里将<code>archive()</code>方法调用的<code>render_to_response()</code>改为<code>render</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"表单和模型表单\"><a href=\"#表单和模型表单\" class=\"headerlink\" title=\"表单和模型表单\"></a>表单和模型表单</h3><ul>\n<li><p>如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostForm</span><span class=\"params\">(forms.ModelForm)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。</span></span><br><span class=\"line\">        <span class=\"comment\"># 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。</span></span><br><span class=\"line\">        model = BlogPost</span><br><span class=\"line\">        exclude = (<span class=\"string\">'timestamp'</span>,)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用ModelForm来生成HTML表单(archive.html):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"/blog/create/\"</span> method=<span class=\"string\">\"post\"</span>&gt;&#123;%csrf_token%&#125;</span><br><span class=\"line\">  &lt;table&gt;&#123;&#123;form&#125;&#125;&lt;/table&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">    &#123;%<span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;post.title&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;post.timestamp&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;post.body&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中<code>create_blogpost()</code>方法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_blogpost</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 检查POST请求</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class=\"line\">        <span class=\"comment\"># BlogPost(</span></span><br><span class=\"line\">        <span class=\"comment\">#     title=request.POST.get('title'),</span></span><br><span class=\"line\">        <span class=\"comment\">#     body=request.POST.get('body'),</span></span><br><span class=\"line\">        <span class=\"comment\">#     timestamp=datetime.now()</span></span><br><span class=\"line\">        <span class=\"comment\"># ).save()</span></span><br><span class=\"line\">        form = BlogPostForm(request.POST)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> form.is_valid():</span><br><span class=\"line\">            post = form.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">            post.timestamp = datetime.now()</span><br><span class=\"line\">            post.save()</span><br><span class=\"line\">    <span class=\"comment\"># 重定向会/blog</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponseRedirect(<span class=\"string\">'/blog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加测试\"><a href=\"#添加测试\" class=\"headerlink\" title=\"添加测试\"></a>添加测试</h3><p>Django通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 <em>文档测试(doctest)</em></p>\n<blockquote>\n<p>应用的tests.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> TestCase</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.test.client <span class=\"keyword\">import</span> Client</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog.models <span class=\"keyword\">import</span> BlogPost</span><br><span class=\"line\"><span class=\"comment\"># Create your tests here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostTest</span><span class=\"params\">(TestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 测试方法必须以“test_”开头，方法名后面的部分随意。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_obj_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里仅仅通过测试确保对象成功创建，并验证标题内容</span></span><br><span class=\"line\">        BlogPost.objects.create(</span><br><span class=\"line\">            title=<span class=\"string\">'raw title'</span>, body=<span class=\"string\">'raw body'</span>, timestamp=datetime.now())</span><br><span class=\"line\">        <span class=\"comment\"># 如果两个参数相等则测试成功，否则该测试失败</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里验证对象的数目和标题</span></span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, BlogPost.objects.count())</span><br><span class=\"line\">        self.assertEqual(<span class=\"string\">'raw title'</span>, BlogPost.objects.get(id=<span class=\"number\">1</span>).title)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_home</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/blog/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">200</span>, ))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_slash</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 测试确认重定向</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_empty_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，</span></span><br><span class=\"line\">        <span class=\"comment\"># 代码应该忽略掉这个请求，然后重定向到'/blog'</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/blog/create/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_post_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到\"/blog\"</span></span><br><span class=\"line\">        response = self.client.post(<span class=\"string\">'/blog/create/'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'title'</span>: <span class=\"string\">'post title'</span>,</span><br><span class=\"line\">            <span class=\"string\">'body'</span>: <span class=\"string\">'post body'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, BlogPost.objects.count())</span><br><span class=\"line\">        self.assertEqual(<span class=\"string\">'post title'</span>, BlogPost.objects.get(id=<span class=\"number\">1</span>).title)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/mysite\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django简介\"><a href=\"#Django简介\" class=\"headerlink\" title=\"Django简介\"></a>Django简介</h2><ul>\n<li><p>安装<br>在使用<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django</a>开发之前，必须安装必需的组件，包括依赖组件和Django本身</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目和应用<br><strong>项目</strong> 是指的一系列文件，用来创建并运行一个完整的Web站点。在项目文件夹下，有一个或多个子文件夹，每个文件夹有特定的功能，称为 <strong>应用</strong>。应用不一定要位于项目文件夹中。应用可以专注于项目某一方面的功能，或可以作为通用组件，用于不同的项目。应用是一个具有特定功能的子模块，这些子模块组合起来就能完成Web站点的功能。</p>\n</li>\n</ul>\n<ol>\n<li><p><strong>在Django中创建项目</strong><br>Django自带有一个名为<code>django-admin.py</code>/<code>django-admin.exe</code>的工具，它可以简.<br>化任务。在POSIX平台上，一般在<code>/usr/local/bin</code>、<code>/usr/bin</code>这样的目录中。使用Windows系统会安装在Python包下的Scripts目录下，如<code>E:\\Python\\Python36\\Scripts</code>。两种系统都应该确保文件位于PATH环境变量中。<br>在项目文件加下执行命令创建项目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Django项目文件</strong></p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件名</th>\n<th style=\"text-align:center\">描述/用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>init</strong>.py</td>\n<td style=\"text-align:center\">告诉Python这是一个软件包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urls.py</td>\n<td style=\"text-align:center\">全局URL配置(“URLconf”)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setting.py</td>\n<td style=\"text-align:center\">项目相关的配置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">manage.py</td>\n<td style=\"text-align:center\">应用的命令行接口</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>运行开发服务器<br>Django内置Web服务器，该服务器运行在本地，专门用于开发阶段，仅用于开发用途。使用开发服务器有以下几个优点：</li>\n</ul>\n<ol>\n<li>可以直接运行与测试项目和应用，无需完整的生产环境</li>\n<li>当改动Python源码文件并重新载入模块时，开发服务器会自动检测，无须每次编辑代码后手动重启</li>\n<li>开发服务器知道如何为Django管理应用程序寻找和显示静态媒体文件，所以无须立即了解管理方面的内容</li>\n</ol>\n<blockquote>\n<p>启动服务器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><p>在项目目录下使用如下命令创建一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py startapp blog</span><br></pre></td></tr></table></figure></p>\n<p>这样就建立了一个blog目录，其中有如下内容：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件名</th>\n<th style=\"text-align:center\">描述/目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__init.py</td>\n<td style=\"text-align:center\">告诉Python这是一个包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">urls.py</td>\n<td style=\"text-align:center\">应用的URL配置文件(“URLconf”)，这个文件并不像项目的URLconf那样自动创建</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">models.py</td>\n<td style=\"text-align:center\">数据模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">views.py</td>\n<td style=\"text-align:center\">视图函数(即MVC中的控制器)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tests.py</td>\n<td style=\"text-align:center\">单元测试</td>\n</tr>\n</tbody>\n</table>\n<p>与项目类似，应用也是一个Python包。本地应用的URLconf需要手动创建，接着使用URLconf里的include()指令将请求分配给应用的URLconf。为了让Django知道这个新应用是项目的一部分，需要编辑 <em>settings.py</em>，将应用名称(<strong>blog</strong>)添加到元组的末尾。Django使用 <strong>INSTALLED_APPS</strong> 来配置系统的不同部分，包括自动管理应用程序和测试框架。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">    <span class=\"string\">'blog'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建模型添加数据库服务\"><a href=\"#创建模型添加数据库服务\" class=\"headerlink\" title=\"创建模型添加数据库服务\"></a>创建模型添加数据库服务</h3><h4 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h4><p><em>models.py</em> 将定义博客的数据结构，首先创建一个基本类型。数据模型表示将会存储在数据库每条记录的数据类型。Django提供了许多<a href=\"https://docs.djangoproject.com/en/2.0/ref/models/fields/\" target=\"_blank\" rel=\"noopener\">字段类型</a>，用来将数据映射到应用中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class=\"line\"><span class=\"string\">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class=\"line\"><span class=\"string\">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">150</span>)</span><br><span class=\"line\">    body = models.TextField()</span><br><span class=\"line\">    timestamp = models.DateTimeField()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p>在项目的<em>setting.py</em>文件中设置数据库。关于数据库，有6个相关设置(有时只需要两个):<strong>ENGINE</strong>、<strong>NAME</strong>、<strong>HOST</strong>、<strong>PORT</strong>、<strong>USER</strong>、<strong>PASSWORD</strong>。只需要在相关设置选项后面添上需要让Django使用的数据库服务器中合适的值即可。</p>\n<ul>\n<li><p>使用MySQL</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 使用mysql</span></span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'django_test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用SQLite<br>SQLite一般用于测试，它没有主机、端口、用户、密码信息。因为其使用本地文件存储信息，本地文件系统的访问权限就是数据库的访问控制。SQLite不仅可以使用本地文件，还可以使用纯内存数据库。使用实际的Web服务器(如Apache)来使用SQLite时，需要确保拥有Web服务器进程的账户同时拥有数据库文件本身和含有数据库文件目录的写入权限。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 使用sqlite</span></span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: os.path.join(BASE_DIR, <span class=\"string\">'db.sqlite3'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h4><p>使用 <em>makemigrations</em> 参数创建映射文件，当执行命令时Django会查找INSTALLED_APPS中列出的应用的models.py文件。对于每个找到的模型，都会创建一个映射表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py makemigrations</span><br></pre></td></tr></table></figure></p>\n<p>使用 <em>migrate</em> 映射到数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py migrate</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python应用Shell\"><a href=\"#Python应用Shell\" class=\"headerlink\" title=\"Python应用Shell\"></a>Python应用Shell</h3><h4 id=\"在Django中使用Python-shell\"><a href=\"#在Django中使用Python-shell\" class=\"headerlink\" title=\"在Django中使用Python shell\"></a>在Django中使用Python shell</h4><p>即使没有模版(view)或视图(controller)，也可以通过添加一些BlogPost项来测试数据模型。如果应用由RDBMS支持，则可以为每个blog项的表添加一个数据记录。如果使用的是NoSQL数据库，则需要向数据库中添加其他对象、文档或实体。通过以下命令启动shell(使用对应版本)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py shell</span><br><span class=\"line\"></span><br><span class=\"line\">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class=\"line\">Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information</span><br><span class=\"line\">IPython 6.2.1 -- An enhanced Interactive Python. Type &apos;?&apos; for help.</span><br><span class=\"line\">In [1]:</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://docs.djangoproject.com/en/dev/intro/tutorial01/#playing-with-the-api\" target=\"_blank\" rel=\"noopener\">Django shell</a>和标准的shell相比更专注于Django项目的环境，可以与视图函数和数据模型交互，这个shell会自动设置环境变量，包括sys.path，它可以访问Django与自己项目中的模块和包，否则需要手动配置。除了标准shell之外，还有其他的交互式解释器可供选择。Django更倾向于使用功能丰富的shell，如IPython和bpython，这些shell在普通的解释器基础上提供及其强大的功能。运行shell命令时，Django首先查找含有扩展功能的shell，如果没有回返回标准解释器。这里使用的是IPython。也可以使用 <em>-i</em> 来强制使用普通解释器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 ./manage.py shell -i python</span><br><span class=\"line\"></span><br><span class=\"line\">Python 3.6.4 (default, Jan  6 2018, 11:51:59)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">(InteractiveConsole)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试数据模型\"><a href=\"#测试数据模型\" class=\"headerlink\" title=\"测试数据模型\"></a>测试数据模型</h4><p>在启动Python shell之后输入一些Python或IPython命令来测试应用及其数据模型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]: from blog.models import BlogPost</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: BlogPost.objects.all()</span><br><span class=\"line\">Out[3]: &lt;QuerySet [&lt;BlogPost: BlogPost object (1)&gt;, &lt;BlogPost: BlogPost object (2)&gt;, &lt;BlogPost: BlogPost object (3)&gt;]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: bp = BlogPost(title=&apos;my blog&apos;, body=&apos;&apos;&apos;</span><br><span class=\"line\">   ...: my 1st blog...</span><br><span class=\"line\">   ...: yoooo!&apos;&apos;&apos;,</span><br><span class=\"line\">   ...: timestamp=datetime.now())</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: bp</span><br><span class=\"line\">Out[5]: &lt;BlogPost: BlogPost object (None)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: bp.save()</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: BlogPost.objects.count()</span><br><span class=\"line\">Out[7]: 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: bp = BlogPost.objects.all()[0]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: print(bp.title)</span><br><span class=\"line\">test shell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: print(bp.body)</span><br><span class=\"line\"></span><br><span class=\"line\">my 1st blog post...</span><br><span class=\"line\">yo!</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: bp.timestamp.ctime()</span><br><span class=\"line\">Out[14]: &apos;Sun Mar 11 08:13:31 2018&apos;</span><br></pre></td></tr></table></figure></p>\n<p>前两行命令导入相应的对象，第3步查询数据库中BlogPost对象，第4步是实例化一个BlogPost对象来向数据库中添加BlogPost对象，向其中传入对应属性的值(title、body和timestamp)。创建完对象后，需要通过BlogPost.save()方法将其写入到数据库中。完成创建和写入后，使用BlogPost.objects.count()方法确认数据库中对象的个数。然后获取BlogPost对象列表的第一个元素并获取对应属性的值。<br>设置时区:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-hans'</span></span><br><span class=\"line\"></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_I18N = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_L10N = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">USE_TZ = <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Django管理应用\"><a href=\"#Django管理应用\" class=\"headerlink\" title=\"Django管理应用\"></a>Django管理应用</h3><p>admin应用让开发者在完成完整的UI之前验证处理数据的代码。</p>\n<h4 id=\"设置admin\"><a href=\"#设置admin\" class=\"headerlink\" title=\"设置admin\"></a>设置admin</h4><p>在 <em>setting.py</em> 的<code>INSTALLED_APP</code>中添加<code>&#39;django.contrib.admin&#39;,</code>，然后运行<code>python3 ./manage.py makemigrations</code>和<code>python3 ./manage.py migrate</code>两条命令来创建其对应的表。在admin设置完之后于 <em>urls.py</em> 中设置url路径：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>最后应用程序需要告诉Django哪个模型需要在admin页面中显示并编辑，这时候就需要在应用的 <em>admin.py</em> 中注册BlogPost：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\">admin.site.register(models.BlogPost)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用admin\"><a href=\"#使用admin\" class=\"headerlink\" title=\"使用admin\"></a>使用admin</h4><p>使用命令<code>python3 ./manage.py runserver</code>启动服务，然后在浏览器中输入 <em><a href=\"http://localhost:8000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/admin</a></em> 访问admin页面。在访问之前使用<code>python3 manage.py createsuperuser</code>创建的超级用户的用户名和密码用于登录管理页面。（账号：<em>root</em>，密码：<em>Aa123456</em>）<br>为了更好地显示博文列表，更新blog/admin.py文件，使用新的BlogPostAdmin类：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    list_display = (<span class=\"string\">'title'</span>, <span class=\"string\">'timestamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(models.BlogPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建博客的用户界面\"><a href=\"#创建博客的用户界面\" class=\"headerlink\" title=\"创建博客的用户界面\"></a>创建博客的用户界面</h3><p>Django shell和admin是针对于开发者的工具，而现在需要构建用户的界面。Web页面应该有以下几个经典组建：</p>\n<ol>\n<li><strong>模板</strong>，用于显示通过Python类字典对象传入的信息</li>\n<li><strong>视图函数</strong>，用于执行针对请求的核心逻辑。视图会从数据库中获取信息，并格式化显示结果</li>\n<li><strong>模式</strong>，将传入的请求映射到对应的视图中，同时也可以将参数传递给视图</li>\n</ol>\n<p>Django是自底向上处理请求，它首先查找匹配的URL模式，接着调用对应的视图函数，最后将渲染好的数据通过模板展现给用户。构建应用可以按照如下顺序：</p>\n<ol>\n<li>因为需要一些可观察对象，所以先创建基本的模板</li>\n<li>设计一个简单的URL模式，让Django可以立刻访问应用</li>\n<li>开发出一个视图函数原型，然后在此基础上迭代开发<br>在构建应用过程中模板和URL模式不会发生太大的变化，而应用的核心是视图。这非常符合 <em>测试驱动模型(TDD)</em> 的开发模式。</li>\n</ol>\n<h4 id=\"创建模板\"><a href=\"#创建模板\" class=\"headerlink\" title=\"创建模板\"></a><a href=\"https://docs.djangoproject.com/en/2.0/topics/templates/#tags\" target=\"_blank\" rel=\"noopener\">创建模板</a></h4><ul>\n<li><p><em>变量标签</em><br><strong>变量标签</strong> 是由 <em>花括号()</em> 括起来的内容，花括号内用于显示对象的内容。在变量标签中，可以使用Python风格的 <em>点分割标识</em> 访问这些变量的属性。这些值可以是纯数据，也可以是可调用对象，如果是后者，会自动调用这些对象而无需添加圆括号”()”来表示这个函数或方法可调用。</p>\n</li>\n<li><p><em>过滤器</em><br><strong>过滤器</strong> 是在变量标签中使用的特殊函数，它能在标签中立即对变量进行处理。方法是在变量右边插入一个 <em>管道符号(“|”)</em>，接着跟上过滤器名称。<code>&lt;h2&gt; { { post.title | title } } &lt;/h2&gt;</code></p>\n</li>\n<li><p><em>上下文</em><br><strong>上下文</strong> 是一种特殊的Python字典，是传递给模板的变量。假设通过上下文传入的BlogPost对象称为”post”。通过上下文传入所有的博文，这样可以通过循环显示所有文章。</p>\n</li>\n<li><p><em>块标签</em><br><strong>块标签</strong> 通过花括号和百分号来表示：&#123;%…%&#125;，它们用于向HTML模版中插入如循环或判断这样的逻辑。</p>\n</li>\n</ul>\n<p>将HTML模版代码保存到一个简单的模版文件中，命名为archive.html，放置在应用文件夹下的 <strong>templates</strong> 目录下，模版名称任取，但模版目录一定是 <em>templates</em><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%for post in posts%&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建URL模式\"><a href=\"#创建URL模式\" class=\"headerlink\" title=\"创建URL模式\"></a>创建URL模式</h4><ul>\n<li>项目的URLconf<br>服务器通过WSGI的功能，最终会将请求传递给Django。接受请求的类型(GET、POST等)和路径(URL中除了协议、主机、端口之外的内容)并传递到项目的URLconf文件(mysite/urls.py)。为了符合代码重用、DRY、在一处调试相同的代码等准则，需要应用能负责自己的URL。在项目的urls.py(这里时mysite/urls.py)中添加url配置项，让其指向应用的URLconf。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    <span class=\"comment\"># include函数将动作推迟到其他URLconf</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里将以blog/开通的请求缓存起来，并传递给mysite/blog/urls.py</span></span><br><span class=\"line\">    path(<span class=\"string\">'blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>include()</em> 会移除当前的URL路径头，路径中剩下的部分传递给下游URLconf中的path()函数。（<em>当输入’<a href=\"http://localhost:8080/blog/foo/bar\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/blog/foo/bar</a>‘ 这个URL时，项目的URLconf接收到的是blog/foo/bar，匹配blog找到一个include()函数，然后将foo/bar传递给mysite/blog/urls.py</em>）。上述代码中使用include()和未使用include()的区别在于使用include()传递的是 <strong>字符串</strong>，未使用include传递的是 <strong>对象</strong>。</p>\n<ul>\n<li>应用的URLconf<br>在项目的URLconf中通过include()包含blog.urls，让匹配blog应用的URL将剩余的部分传递到blog应用中处理。在mysite/blog/urls.py(没有就创建),添加以下代码：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class=\"line\">    path(<span class=\"string\">''</span>, blog.views.archive)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求URL的头部分(blog/)匹配到的是根URLconf已经被去除。添加新的视图在列表中添加一行代码即可。</p>\n<h4 id=\"创建视图函数\"><a href=\"#创建视图函数\" class=\"headerlink\" title=\"创建视图函数\"></a>创建视图函数</h4><p>一个简单的视图函数会从数据库获取所有博文，并使用模板显示给用户：</p>\n<ol>\n<li>向数据库查询所有博客条目</li>\n<li>载入模板文件</li>\n<li>为模板创建上下文字典</li>\n<li>将模板渲染到HTML中</li>\n<li>通过HTTP响应返回HTML<br>在应用的views.py中添加如下代码:<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog.models <span class=\"keyword\">import</span> BlogPost</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader, Context</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"改进输出\"><a href=\"#改进输出\" class=\"headerlink\" title=\"改进输出\"></a>改进输出</h3><p>现在得到了一个可以工作的应用，有了可以工作的简单博客，可以响应客户端的请求，从数据库提取信息，向用户显示博文。现在更改查询方式，让博文按时间逆序显示，并且限制每页显示的数目。</p>\n<blockquote>\n<p>BlogPOST是数据模型类。Objects属性是模型的Manager类，其中含有all()方法来获取QuerySet。QuerySet执行“惰性迭代”，在求值时才会真正查询数据库。</p>\n</blockquote>\n<p>实现排序只需调用order_by()方法时提供一个排序参数即可(views.py)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all().order_by(<span class=\"string\">'-timestamp'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>为了测试限制显示数目，先启动Django shell添加数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python ./manage.py shell</span><br><span class=\"line\">Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">(InteractiveConsole)</span><br><span class=\"line\">&gt;&gt;&gt; from datetime import datetime</span><br><span class=\"line\">&gt;&gt;&gt; from blog.models import BlogPost</span><br><span class=\"line\">&gt;&gt;&gt; for i in range(10):</span><br><span class=\"line\">...     bp = BlogPost(title=&apos;post $%d&apos; % i ,body=&apos;body of post $%d&apos; %d, timestamp=datetime.now())</span><br><span class=\"line\">...     bp.save()</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>然后使用切片的方式获取最新的10篇(views.py)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all().order_by(<span class=\"string\">'-timestamp'</span>)[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>设置模型的默认排序方式</li>\n</ul>\n<p>如果在模型中设置首选的排序方式，其他基于Django的应用或访问这个数据的项目也会使用这个顺序。为了给模型设置默认顺序，需要创建一个名为 <strong>Meta</strong> 的内部类，在其中设置一个名为 <strong>ordering</strong> 的属性(models.py):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPost</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    django.db.models.Model的子类Model是Django中用于数据模型的标准基类。</span></span><br><span class=\"line\"><span class=\"string\">    BlogPost中的字段像普通类属性那样定义，</span></span><br><span class=\"line\"><span class=\"string\">    每个都是特定字段类的实例，每个实例对应数据库中的一条记录。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">150</span>)</span><br><span class=\"line\">    body = models.TextField()</span><br><span class=\"line\">    timestamp = models.DateTimeField()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        ordering = (<span class=\"string\">'-timestamp'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>取消视图函数中的排序(views.py):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"处理用户输入\"><a href=\"#处理用户输入\" class=\"headerlink\" title=\"处理用户输入\"></a>处理用户输入</h3><ol>\n<li><p>添加一个HTML表单，让用户可以输入数据(archive.html),为了防止</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/blog/create/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    Title:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Body:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"body\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;%for post in posts%&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>插入(URL，视图)这样的URLConf项<br>使用前面的HTML，需要用到/blog/create/的路径，所以需要将其关联到一个视图函数中，该函数用于把内容保存到数据库中，这个函数命名为create_blogpost()，在应用的urls.py中添加：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> blog.views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"comment\"># 第一个参数是路径，第二个参数是视图函数，在调用到这个URL时用于处理信息</span></span><br><span class=\"line\">    path(<span class=\"string\">''</span>, blog.views.archive),</span><br><span class=\"line\">    path(<span class=\"string\">r'create/'</span>, blog.views.create_blogpost)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建视图来处理用户输入<br>在应用的views.py中添加上面定义的处理方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_blogpost</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 检查POST请求</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class=\"line\">        BlogPost(</span><br><span class=\"line\">            title=request.POST.get(<span class=\"string\">'title'</span>),</span><br><span class=\"line\">            body=request.POST.get(<span class=\"string\">'body'</span>),</span><br><span class=\"line\">            timestamp=datetime.now()</span><br><span class=\"line\">        ).save()</span><br><span class=\"line\">    <span class=\"comment\"># 重定向会/blog</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponseRedirect(<span class=\"string\">'/blog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>在完成上面的步骤之后，会发现创建表单的调用会被拦截报403的错误。这是因为Django有数据保留特性，不允许不安全的POST通过 <em>跨站点请求伪造（Cross-site Request Forgery,CSRF）</em> 来进行攻击。需要在HTML表单添加CSRF标记(&#123;% csrf_token %&#125;):<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/blog/create/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span>&#123;%csrf_token%&#125;</span><br><span class=\"line\">    Title:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    Body:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"body\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;%for post in posts%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.timestamp&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过模板发送向这些标记请求的上下文实例，这里将<code>archive()</code>方法调用的<code>render_to_response()</code>改为<code>render</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 在timestamp前面加上减号(-)指定按时间逆序排列。正常的升序只需要移除减号</span></span><br><span class=\"line\">    posts = BlogPost.objects.all()[:<span class=\"number\">10</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'archive.html'</span>, &#123;<span class=\"string\">'posts'</span>: posts&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"表单和模型表单\"><a href=\"#表单和模型表单\" class=\"headerlink\" title=\"表单和模型表单\"></a>表单和模型表单</h3><ul>\n<li><p>如果表单字段完全匹配一个数据模型，则通过Django ModelForm能更好的完成任务(models.py):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostForm</span><span class=\"params\">(forms.ModelForm)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义一个Meta类，他表示表单基于哪个数据模型。当生成HTML表单时，会含有对应数据模型中的所有属性字段。</span></span><br><span class=\"line\">        <span class=\"comment\"># 不信赖用户输入正确的时间戳可以通过添加exclude属性来设置。</span></span><br><span class=\"line\">        model = BlogPost</span><br><span class=\"line\">        exclude = (<span class=\"string\">'timestamp'</span>,)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用ModelForm来生成HTML表单(archive.html):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"/blog/create/\"</span> method=<span class=\"string\">\"post\"</span>&gt;&#123;%csrf_token%&#125;</span><br><span class=\"line\">  &lt;table&gt;&#123;&#123;form&#125;&#125;&lt;/table&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">    &#123;%<span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123;post.title&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;post.timestamp&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;post.body&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>因为数据已经存在于数据模型中，便不用去通过请求获取单个字段，而由于timestamp不能从表单获取，所以修改后的views.py中<code>create_blogpost()</code>方法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_blogpost</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 检查POST请求</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建新的BlogPost项，获取表单数据，并用当前时间建立时间戳。</span></span><br><span class=\"line\">        <span class=\"comment\"># BlogPost(</span></span><br><span class=\"line\">        <span class=\"comment\">#     title=request.POST.get('title'),</span></span><br><span class=\"line\">        <span class=\"comment\">#     body=request.POST.get('body'),</span></span><br><span class=\"line\">        <span class=\"comment\">#     timestamp=datetime.now()</span></span><br><span class=\"line\">        <span class=\"comment\"># ).save()</span></span><br><span class=\"line\">        form = BlogPostForm(request.POST)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> form.is_valid():</span><br><span class=\"line\">            post = form.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">            post.timestamp = datetime.now()</span><br><span class=\"line\">            post.save()</span><br><span class=\"line\">    <span class=\"comment\"># 重定向会/blog</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponseRedirect(<span class=\"string\">'/blog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加测试\"><a href=\"#添加测试\" class=\"headerlink\" title=\"添加测试\"></a>添加测试</h3><p>Django通过扩展Python自带的单元测试模块来提供测试功能。Django还可以测试文档字符串(即docstring)，这称为 <em>文档测试(doctest)</em></p>\n<blockquote>\n<p>应用的tests.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> TestCase</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.test.client <span class=\"keyword\">import</span> Client</span><br><span class=\"line\"><span class=\"keyword\">from</span> blog.models <span class=\"keyword\">import</span> BlogPost</span><br><span class=\"line\"><span class=\"comment\"># Create your tests here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostTest</span><span class=\"params\">(TestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 测试方法必须以“test_”开头，方法名后面的部分随意。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_obj_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里仅仅通过测试确保对象成功创建，并验证标题内容</span></span><br><span class=\"line\">        BlogPost.objects.create(</span><br><span class=\"line\">            title=<span class=\"string\">'raw title'</span>, body=<span class=\"string\">'raw body'</span>, timestamp=datetime.now())</span><br><span class=\"line\">        <span class=\"comment\"># 如果两个参数相等则测试成功，否则该测试失败</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里验证对象的数目和标题</span></span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, BlogPost.objects.count())</span><br><span class=\"line\">        self.assertEqual(<span class=\"string\">'raw title'</span>, BlogPost.objects.get(id=<span class=\"number\">1</span>).title)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_home</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在'/blog/'中调用应用的主页面，确保收到200这个HTTP返回码</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/blog/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">200</span>, ))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_slash</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 测试确认重定向</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_empty_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 测试'/blog/create/'生成的视图，测试在没有任何数据就错误地生成GET请求，</span></span><br><span class=\"line\">        <span class=\"comment\"># 代码应该忽略掉这个请求，然后重定向到'/blog'</span></span><br><span class=\"line\">        response = self.client.get(<span class=\"string\">'/blog/create/'</span>)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_post_create</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 模拟真实用户请求通过POST发送真实数据，创建博客项，让后将用户重定向到\"/blog\"</span></span><br><span class=\"line\">        response = self.client.post(<span class=\"string\">'/blog/create/'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'title'</span>: <span class=\"string\">'post title'</span>,</span><br><span class=\"line\">            <span class=\"string\">'body'</span>: <span class=\"string\">'post body'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        self.assertIn(response.status_code, (<span class=\"number\">301</span>, <span class=\"number\">302</span>))</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, BlogPost.objects.count())</span><br><span class=\"line\">        self.assertEqual(<span class=\"string\">'post title'</span>, BlogPost.objects.get(id=<span class=\"number\">1</span>).title)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/mysite\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n"},{"title":"numpy基础(二)","date":"2018-03-17T03:33:50.000Z","copyright":true,"description":null,"_content":"## 通用函数\n通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。\n\n* 一元ufunc\n\n|                        函数                       |                                      说明                                      |\n| :-----------------------------------------------: | :----------------------------------------------------------------------------: |\n|                     abs、fabs                     |            计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs            |\n|                        sqrt                       |                       计算各元素的平方根。相当于arr**0.5                       |\n|                       square                      |                         计算各元素的平方。相当于arr**2                         |\n|                        exp                        |                              计算各元素的指数e^x                               |\n|              log、log10、log2、log1p              |            分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)            |\n|                        sign                       |                  计算各元素的正负号:1(正数)、0(零)、-1(负数)                   |\n|                        ceil                       |                计算各元素的ceiling值，即大于等于该值的最小整数                 |\n|                       floor                       |                 计算各元素的floor值，即小于等于该值的最大整数                  |\n|                        rint                       |                   将各元素四舍五入到最接近的整数，保留dtype                    |\n|                        modf                       |                   将数组的小数和整数部分以独立数组的形式返回                   |\n|                       isnan                       |              返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组             |\n|                  isfinite、isinf                  | 分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组 |\n|          cos、cosh、sin、sinh、tan、tanh          |                             普通型和双曲型三角函数                             |\n| arccos、arccosh、arcsin、arcsinh、arctan、arctanh |                                   反三角函数                                   |\n|                    logical_not                    | 计算各元素not x的真值。相当于-arr                                                                               |\n\n* 二元ufunc\n\n|                            函数                            |                                      说明                                      |\n| :--------------------------------------------------------: | :----------------------------------------------------------------------------: |\n|                            add                             |                             将数组中对应的元素相加                             |\n|                          subtract                          |                      从第一个数组中减去第二个数组中的元素                      |\n|                          multiply                          |                                  数组元素相乘                                  |\n|                    divide、floor_divide                    |                          除法或向下圆整除法(丢弃余数)                          |\n|                           power                            |           对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B          |\n|                        maximum、fmax                       |                        元素级的最大值计算。fmax将忽略NaN                       |\n|                        minimum、fmin                       |                        元素级的最小值计算。fmin将忽略NaN                       |\n|                            mod                             |                          元素级的求模计算(除法的余数)                          |\n|                          copysign                          |                 将第二个数组中的值的符号复制给第一个数组中的值                 |\n| greater、greater_equal、less、less_equal、equal、not_equal | 执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符>、>=、<、<=、==、!= |\n|            logical_and、logical_or、logical_xor            | 执行元素级的真值逻辑运算。相当于中缀运算符&、&#124;、^                                                                               |\n\n许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：\n```\nIn [2]: arr  = np.arange(10)\n\nIn [3]: arr\nOut[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [4]: np.sqrt(arr)\nOut[4]:\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\nIn [5]: np.exp(arr)\nOut[5]:\narray([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03])\n\nIn [6]: x = randn(5)\n\nIn [7]: y = randn(5)\n\nIn [8]: x\nOut[8]:\narray([-9.27415622e-01, -1.67964296e-03, -1.91023663e+00, -1.31307986e-01,\n       -1.17927352e+00])\n\nIn [9]: y\nOut[9]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])\n\nIn [10]: np.maximum(x,y)\nOut[10]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])\n```\n\n## 利用数组进行数据处理\n**矢量化**将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。`np.meshgrid`接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):\n```\nIn [11]: points = np.arange(-5, 5, 0.01)\n\nIn [12]: xs, ys = np.meshgrid(points,points)\n\nIn [13]: xs\nOut[13]:\narray([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       ...,\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])\n\nIn [14]: z = np.sqrt(np.square(xs)+np.square(ys))\n\nIn [15]: z\nOut[15]:\narray([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,\n        7.06400028],\n       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,\n        7.05692568],\n       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,\n        7.04985815],\n       ...,\n       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,\n        7.04279774],\n       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,\n        7.04985815],\n       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,\n        7.05692568]])\n```\n\n### 将条件逻辑表述为数组运算\n`np.where`是三元表达式`x if condition else y`的矢量化版本。`np.wehere`接受三个参数`cond、xarr、yarr`,当判定`cond`为true时选择执行`xarr`否则执行`yarr`。因此`np.where`也可以嵌套使用。`np.where`的第二个和第三个参数不必时数组，可以是标量值。`where`通常用于根据另一个数组产生新的数组。\n```\nIn [23]: xarr = np.array([0.1,0.2,0.3])\n\nIn [24]: yarr = np.array([1.1,1.2,1.3])\n\nIn [25]: cond = np.array([True,False,True])\n\nIn [26]: result = np.where(cond,xarr,yarr)\n\nIn [27]: result\nOut[27]: array([0.1, 1.2, 0.3])\n\nIn [28]: arr = randn(4,4)\n\nIn [29]: arr\nOut[29]:\narray([[ 0.17276546, -1.27954884, -0.07326268, -2.40995669],\n       [-0.15796552, -1.85102248,  0.53499154, -0.1332765 ],\n       [ 0.81853502,  1.35768841,  1.55543773,  1.01407613],\n       [-1.05967769,  0.39289449,  0.13509303, -0.68143339]])\n\nIn [30]: np.where(arr>0,1,-1)\nOut[30]:\narray([[ 1, -1, -1, -1],\n       [-1, -1,  1, -1],\n       [ 1,  1,  1,  1],\n       [-1,  1,  1, -1]])\n\nIn [31]: np.where(arr>0,1,arr)\nOut[31]:\narray([[ 1.        , -1.27954884, -0.07326268, -2.40995669],\n       [-0.15796552, -1.85102248,  1.        , -0.1332765 ],\n       [ 1.        ,  1.        ,  1.        ,  1.        ],\n       [-1.05967769,  1.        ,  1.        , -0.68143339]])\n\nIn [32]: cond2 = np.array([False,False,True])\n\nIn [33]: np.where(cond&cond2,0,np.where(cond,1,np.where(cond,2,3)))\nOut[33]: array([1, 3, 0])\n```\n\n### 数学和统计方法\n可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。`sum`、`mean`以及标准差`std`等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。\n\n* 基本数组统计方法\n\n|      方法      |                         说明                         |\n| :------------: | :--------------------------------------------------: |\n|      sum       | 对数组中全部或某轴向的元素求和。零长度的数组的sum为0 |\n|      mean      |         算数平均数。零长度的数组的mean为NaN          |\n|    std、var    |       分别为标准差和方差，自由度可调(默认为n)        |\n| argmin、argmax |              分别为最大和最小元素的索引              |\n|     cumsum     |                   所有元素的累计和                   |\n|    cumprod     |                   所有元素的累计积                   |\n\n`mean`和`sum`这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:\n```\nIn [36]: arr =  np.random.randn(5,4)\n\nIn [37]: arr\nOut[37]:\narray([[-0.00502805,  0.23545272,  0.04886622, -0.46971953],\n       [-1.08918278,  1.19958904, -0.54808552, -1.60148873],\n       [-0.60059372, -0.9743709 ,  1.39660621, -0.97132217],\n       [-0.11917925,  1.99922758, -1.58943388,  1.60237969],\n       [-0.28361465, -2.57463163, -0.96786527, -0.00376026]])\n\nIn [38]: arr.mean()\nOut[38]: -0.26580774446749256\n\nIn [39]: np.mean(arr)\nOut[39]: -0.26580774446749256\n\nIn [40]: arr.mean(axis=1)\nOut[40]: array([-0.04760716, -0.509792  , -0.28742014,  0.47324854, -0.95746796])\n```\n`cumsum`和`cumprod`之类的方法不聚合，而是产生一个由中间结果组成的数组：\n```\nIn [47]: arr = np.array([[0,1,2],[3,4,5],[6,7,8]])\n\nIn [48]: arr.cumsum(0)\nOut[48]:\narray([[ 0,  1,  2],\n       [ 3,  5,  7],\n       [ 9, 12, 15]])\n\nIn [49]: arr.cumsum(1)\nOut[49]:\narray([[ 0,  1,  3],\n       [ 3,  7, 12],\n       [ 6, 13, 21]])\n\nIn [50]: arr.cumprod(0)\nOut[50]:\narray([[ 0,  1,  2],\n       [ 0,  4, 10],\n       [ 0, 28, 80]])\n\nIn [51]: arr.cumprod(1)\nOut[51]:\narray([[  0,   0,   0],\n       [  3,  12,  60],\n       [  6,  42, 336]])\n```\n### 用于布尔型数组的方法\n上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以`sum`可以用来对布尔型数组中的True值计数。而`any`方法用来测试数组中是否存在一个或多个True，`all`用来检查数组中所有值是否都是True：\n```\nIn [52]: arr = randn(20)\n\nIn [53]: (arr > 0).sum()\nOut[53]: 11\n\nIn [54]: bools=np.array([False,True,False])\n\nIn [55]: bools.any()\nOut[55]: True\n\nIn [56]: np.all(bools)\nOut[56]: False\n```\n\n### 排序\nNumPy数组通过`sort`方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给`sort`。顶级方法`np.sort`返回的是数组的已排序副本，而就地排序则会修改数组本身：\n```\nIn [57]: arr = randn(6)\n\nIn [58]: arr\nOut[58]:\narray([ 0.20563118, -0.6733116 , -1.44713961,  0.49352122,  0.73564391,\n        1.71627219])\n\nIn [59]: arr.sort()\n\nIn [60]: arr\nOut[60]:\narray([-1.44713961, -0.6733116 ,  0.20563118,  0.49352122,  0.73564391,\n        1.71627219])\n\nIn [61]: arr = rand(5,3)\n\nIn [62]: arr\nOut[62]:\narray([[0.18125744, 0.10766187, 0.46160903],\n       [0.34363544, 0.28353683, 0.06096776],\n       [0.52424935, 0.13756835, 0.78614215],\n       [0.12944147, 0.95273729, 0.09078996],\n       [0.85118943, 0.18928544, 0.23857278]])\n\nIn [63]: np.sort(arr,1)\nOut[63]:\narray([[0.10766187, 0.18125744, 0.46160903],\n       [0.06096776, 0.28353683, 0.34363544],\n       [0.13756835, 0.52424935, 0.78614215],\n       [0.09078996, 0.12944147, 0.95273729],\n       [0.18928544, 0.23857278, 0.85118943]])\n\nIn [64]: arr\nOut[64]:\narray([[0.18125744, 0.10766187, 0.46160903],\n       [0.34363544, 0.28353683, 0.06096776],\n       [0.52424935, 0.13756835, 0.78614215],\n       [0.12944147, 0.95273729, 0.09078996],\n       [0.85118943, 0.18928544, 0.23857278]])\n```\n### 唯一化及其他集合逻辑\nNumPy提供了一些针对一维ndarray的基本集合运算。\n\n* 数组的集合运算\n\n|       方法       |                     说明                     |\n| :--------------: | :------------------------------------------: |\n|    unique(x)     |      计算x中的唯一元素，并返回有序结果       |\n| intersect1d(x,y) |     计算x和y中的公共元素，并返回有序结果     |\n|   union1d(x,y)   |        计算x和y的并集，并返回有序结果        |\n|    in1d(x,y)     | 得到一个表示“x的元素是否包含于y”的布尔型数组 |\n|  setdiff1d(x,y)  |        集合的差，即元素在x中且不在y中        |\n|  setxor1d(x,y)   | 集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)                                             |\n```\nIn [66]: np.unique(names)\nOut[66]: array(['Jim', 'Tom', 'bob'], dtype='<U3')\n```\n\n## 用于数组的文件输入输出\n### 将数组以二进制格式保存到磁盘\n`np.save`和`np.load`是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 *.npy*的文件中。`np.savez`可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 *.npz*文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:\n```\nIn [68]: arr = np.arange(10)\n\nIn [69]: np.save('arr',arr)\n\nIn [70]: np.load('arr.npy')\nOut[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [71]: np.savez('arr_more',a=arr,b=arr)\n\nIn [72]: arr_more = np.load('arr_more.npz')\n\nIn [73]: arr_more['a']\nOut[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n\n## 线性代数\n\n* numpy.linalg函数\n\n| 函数  | 说明                                                                                      |\n| :---: | :---:                                                                                   |\n| diag  | 以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0) |\n| dot   | 矩阵乘法                                                                                  |\n| trace | 计算对角线的和                                                                            |\n| det   | 计算矩阵行列式                                                                            |\n| eig   | 计算方阵的特征值和特征向量                                                                |\n| inv   | 计算方阵的逆                                                                              |\n| pinv  | 计算矩阵的Moore-Penrose伪逆                                                               |\n| qr    | 计算QR分解                                                                                |\n| svd   | 计算奇异值分解(SVD)                                                                       |\n| solve | 解线性方程组Ax=b，其中A为一个方阵                                                         |\n| lstsq | 计算Ax=b的最小二乘解                                                                      |\n\n\n```\nIn [83]: x = randn(3,3)\n\nIn [84]: x\nOut[84]:\narray([[ 0.45880764, -0.90269718, -1.62963467],\n       [-0.76727739,  2.24799683,  0.65118256],\n       [ 0.43217346, -2.47319723, -0.48442667]])\n\nIn [85]: mat = x.T.dot(x)\n\nIn [86]: mat\nOut[86]:\narray([[ 0.98599295, -3.20785172, -1.45668284],\n       [-3.20785172, 11.9850565 ,  4.13300564],\n       [-1.45668284,  4.13300564,  3.31441709]])\n\nIn [87]: inv(mat)\nOut[87]:\narray([[16.03043111,  3.2650856 ,  2.97386734],\n       [ 3.2650856 ,  0.8114194 ,  0.42317945],\n       [ 2.97386734,  0.42317945,  1.08102824]])\n\nIn [88]: mat\nOut[88]:\narray([[ 0.98599295, -3.20785172, -1.45668284],\n       [-3.20785172, 11.9850565 ,  4.13300564],\n       [-1.45668284,  4.13300564,  3.31441709]])\n\nIn [89]: mat.dot(inv(mat))\nOut[89]:\narray([[ 1.00000000e+00, -1.71619808e-16,  2.22044605e-16],\n       [ 1.06801676e-14,  1.00000000e+00,  0.00000000e+00],\n       [ 3.55271368e-15,  8.88178420e-16,  1.00000000e+00]])\n\nIn [90]: q,r = qr(mat)\n\nIn [91]: r\nOut[91]:\narray([[-3.65847231, 13.01900838,  5.33621718],\n       [ 0.        , -1.23249681,  1.27109691],\n       [ 0.        ,  0.        ,  0.31324131]])\n```\n\n## 随机数生成\n\n* 部分numpy.random函数\n\n|     函数    |                      说明                      |\n| :---------: | :--------------------------------------------: |\n|     seed    |             确定随机数生成器的种子             |\n| permutation | 返回一个序列的随机排列或返回一个随机排列的范围 |\n|   shuffle   |             对一个序列就地随机排序             |\n|     rand    |              产生均匀分布的样本值              |\n|   randint   |        从给定的上下限范围内随机选取整数        |\n|    randn    |   产生正态分布(平均值为0，标准差为1)的样本值   |\n|    normal   |           产生正态(高斯)分布的样本值           |\n|   binomial  |              产生二项分布的样本值              |\n|     beta    |              产生Beta分布的样本值              |\n|  chisquare  |              产生卡方分布的样本值              |\n|    gamma    |             产生Gamma分布的样本值              |\n|   uniform   |         产生在[0,1）中均匀分布的样本值         |\n\n### 随机漫步\n使用`np.random`模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：\n```\nIn [96]: nsteps = 1000\n\nIn [97]: draws = np.random.randint(0, 2, size=nsteps)\n\nIn [98]: steps = np.where(draws>0,1,-1)\n\nIn [99]: walk = steps.cumsum()\n\nIn [101]: walk.min()\nOut[101]: -24\n\nIn [102]: walk.max()\nOut[102]: 9\n```\n然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用`np.abs(walk)>=10`得到一个布尔型数组，它表示的距离是否达到或超过10，使用`argmax`(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):\n```\nIn [103]: (np.abs(walk)>=10).argmax()\nOut[103]: 107\n```\n\n### 一次模拟多个随机漫步\n通过给`numpy.random`函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用`any`进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用`argmax`在轴1上获取穿越时间\n```\nIn [104]: nwalks = 5000\n\nIn [105]: nsteps = 5000\n\nIn [106]: draws = np.random.randint(0,2,size=(nwalks,nsteps))\n\nIn [107]: steps = np.where(draws>0,1,-1)\n\nIn [108]: walks = steps.cumsum(1)\n\nIn [109]: walks\nOut[109]:\narray([[  -1,   -2,   -1, ...,   20,   19,   18],\n       [  -1,    0,    1, ...,   16,   17,   18],\n       [  -1,    0,    1, ...,   80,   79,   78],\n       ...,\n       [   1,    2,    3, ...,    6,    5,    6],\n       [   1,    0,   -1, ..., -130, -131, -132],\n       [   1,    0,    1, ...,  -16,  -17,  -16]])\n\nIn [110]: walks.max()\nOut[110]: 255\n\nIn [111]: walks.min()\nOut[111]: -235\n\nIn [112]: hits30 = (np.abs(walks)>=30).any(1)\n\nIn [113]: hits30\nOut[113]: array([ True,  True,  True, ...,  True,  True,  True])\n\nIn [115]: hits30.sum()\nOut[115]: 4992\n\nIn [117]: crossing_time  =(np.abs(walks[hits30])>=30).argmax(1)\n\nIn [118]: crossing_time.mean()\nOut[118]: 883.0564903846154\n```\n","source":"_posts/numpy基础-二.md","raw":"---\ntitle: numpy基础(二)\ndate: 2018-03-17 11:33:50\ncategories: true\ncopyright: true\ntags:\n    - NumPy\n    - 数据分析\ndescription:\n---\n## 通用函数\n通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。\n\n* 一元ufunc\n\n|                        函数                       |                                      说明                                      |\n| :-----------------------------------------------: | :----------------------------------------------------------------------------: |\n|                     abs、fabs                     |            计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs            |\n|                        sqrt                       |                       计算各元素的平方根。相当于arr**0.5                       |\n|                       square                      |                         计算各元素的平方。相当于arr**2                         |\n|                        exp                        |                              计算各元素的指数e^x                               |\n|              log、log10、log2、log1p              |            分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)            |\n|                        sign                       |                  计算各元素的正负号:1(正数)、0(零)、-1(负数)                   |\n|                        ceil                       |                计算各元素的ceiling值，即大于等于该值的最小整数                 |\n|                       floor                       |                 计算各元素的floor值，即小于等于该值的最大整数                  |\n|                        rint                       |                   将各元素四舍五入到最接近的整数，保留dtype                    |\n|                        modf                       |                   将数组的小数和整数部分以独立数组的形式返回                   |\n|                       isnan                       |              返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组             |\n|                  isfinite、isinf                  | 分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组 |\n|          cos、cosh、sin、sinh、tan、tanh          |                             普通型和双曲型三角函数                             |\n| arccos、arccosh、arcsin、arcsinh、arctan、arctanh |                                   反三角函数                                   |\n|                    logical_not                    | 计算各元素not x的真值。相当于-arr                                                                               |\n\n* 二元ufunc\n\n|                            函数                            |                                      说明                                      |\n| :--------------------------------------------------------: | :----------------------------------------------------------------------------: |\n|                            add                             |                             将数组中对应的元素相加                             |\n|                          subtract                          |                      从第一个数组中减去第二个数组中的元素                      |\n|                          multiply                          |                                  数组元素相乘                                  |\n|                    divide、floor_divide                    |                          除法或向下圆整除法(丢弃余数)                          |\n|                           power                            |           对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B          |\n|                        maximum、fmax                       |                        元素级的最大值计算。fmax将忽略NaN                       |\n|                        minimum、fmin                       |                        元素级的最小值计算。fmin将忽略NaN                       |\n|                            mod                             |                          元素级的求模计算(除法的余数)                          |\n|                          copysign                          |                 将第二个数组中的值的符号复制给第一个数组中的值                 |\n| greater、greater_equal、less、less_equal、equal、not_equal | 执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符>、>=、<、<=、==、!= |\n|            logical_and、logical_or、logical_xor            | 执行元素级的真值逻辑运算。相当于中缀运算符&、&#124;、^                                                                               |\n\n许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：\n```\nIn [2]: arr  = np.arange(10)\n\nIn [3]: arr\nOut[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [4]: np.sqrt(arr)\nOut[4]:\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\nIn [5]: np.exp(arr)\nOut[5]:\narray([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03])\n\nIn [6]: x = randn(5)\n\nIn [7]: y = randn(5)\n\nIn [8]: x\nOut[8]:\narray([-9.27415622e-01, -1.67964296e-03, -1.91023663e+00, -1.31307986e-01,\n       -1.17927352e+00])\n\nIn [9]: y\nOut[9]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])\n\nIn [10]: np.maximum(x,y)\nOut[10]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])\n```\n\n## 利用数组进行数据处理\n**矢量化**将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。`np.meshgrid`接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):\n```\nIn [11]: points = np.arange(-5, 5, 0.01)\n\nIn [12]: xs, ys = np.meshgrid(points,points)\n\nIn [13]: xs\nOut[13]:\narray([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       ...,\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])\n\nIn [14]: z = np.sqrt(np.square(xs)+np.square(ys))\n\nIn [15]: z\nOut[15]:\narray([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,\n        7.06400028],\n       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,\n        7.05692568],\n       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,\n        7.04985815],\n       ...,\n       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,\n        7.04279774],\n       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,\n        7.04985815],\n       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,\n        7.05692568]])\n```\n\n### 将条件逻辑表述为数组运算\n`np.where`是三元表达式`x if condition else y`的矢量化版本。`np.wehere`接受三个参数`cond、xarr、yarr`,当判定`cond`为true时选择执行`xarr`否则执行`yarr`。因此`np.where`也可以嵌套使用。`np.where`的第二个和第三个参数不必时数组，可以是标量值。`where`通常用于根据另一个数组产生新的数组。\n```\nIn [23]: xarr = np.array([0.1,0.2,0.3])\n\nIn [24]: yarr = np.array([1.1,1.2,1.3])\n\nIn [25]: cond = np.array([True,False,True])\n\nIn [26]: result = np.where(cond,xarr,yarr)\n\nIn [27]: result\nOut[27]: array([0.1, 1.2, 0.3])\n\nIn [28]: arr = randn(4,4)\n\nIn [29]: arr\nOut[29]:\narray([[ 0.17276546, -1.27954884, -0.07326268, -2.40995669],\n       [-0.15796552, -1.85102248,  0.53499154, -0.1332765 ],\n       [ 0.81853502,  1.35768841,  1.55543773,  1.01407613],\n       [-1.05967769,  0.39289449,  0.13509303, -0.68143339]])\n\nIn [30]: np.where(arr>0,1,-1)\nOut[30]:\narray([[ 1, -1, -1, -1],\n       [-1, -1,  1, -1],\n       [ 1,  1,  1,  1],\n       [-1,  1,  1, -1]])\n\nIn [31]: np.where(arr>0,1,arr)\nOut[31]:\narray([[ 1.        , -1.27954884, -0.07326268, -2.40995669],\n       [-0.15796552, -1.85102248,  1.        , -0.1332765 ],\n       [ 1.        ,  1.        ,  1.        ,  1.        ],\n       [-1.05967769,  1.        ,  1.        , -0.68143339]])\n\nIn [32]: cond2 = np.array([False,False,True])\n\nIn [33]: np.where(cond&cond2,0,np.where(cond,1,np.where(cond,2,3)))\nOut[33]: array([1, 3, 0])\n```\n\n### 数学和统计方法\n可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。`sum`、`mean`以及标准差`std`等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。\n\n* 基本数组统计方法\n\n|      方法      |                         说明                         |\n| :------------: | :--------------------------------------------------: |\n|      sum       | 对数组中全部或某轴向的元素求和。零长度的数组的sum为0 |\n|      mean      |         算数平均数。零长度的数组的mean为NaN          |\n|    std、var    |       分别为标准差和方差，自由度可调(默认为n)        |\n| argmin、argmax |              分别为最大和最小元素的索引              |\n|     cumsum     |                   所有元素的累计和                   |\n|    cumprod     |                   所有元素的累计积                   |\n\n`mean`和`sum`这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:\n```\nIn [36]: arr =  np.random.randn(5,4)\n\nIn [37]: arr\nOut[37]:\narray([[-0.00502805,  0.23545272,  0.04886622, -0.46971953],\n       [-1.08918278,  1.19958904, -0.54808552, -1.60148873],\n       [-0.60059372, -0.9743709 ,  1.39660621, -0.97132217],\n       [-0.11917925,  1.99922758, -1.58943388,  1.60237969],\n       [-0.28361465, -2.57463163, -0.96786527, -0.00376026]])\n\nIn [38]: arr.mean()\nOut[38]: -0.26580774446749256\n\nIn [39]: np.mean(arr)\nOut[39]: -0.26580774446749256\n\nIn [40]: arr.mean(axis=1)\nOut[40]: array([-0.04760716, -0.509792  , -0.28742014,  0.47324854, -0.95746796])\n```\n`cumsum`和`cumprod`之类的方法不聚合，而是产生一个由中间结果组成的数组：\n```\nIn [47]: arr = np.array([[0,1,2],[3,4,5],[6,7,8]])\n\nIn [48]: arr.cumsum(0)\nOut[48]:\narray([[ 0,  1,  2],\n       [ 3,  5,  7],\n       [ 9, 12, 15]])\n\nIn [49]: arr.cumsum(1)\nOut[49]:\narray([[ 0,  1,  3],\n       [ 3,  7, 12],\n       [ 6, 13, 21]])\n\nIn [50]: arr.cumprod(0)\nOut[50]:\narray([[ 0,  1,  2],\n       [ 0,  4, 10],\n       [ 0, 28, 80]])\n\nIn [51]: arr.cumprod(1)\nOut[51]:\narray([[  0,   0,   0],\n       [  3,  12,  60],\n       [  6,  42, 336]])\n```\n### 用于布尔型数组的方法\n上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以`sum`可以用来对布尔型数组中的True值计数。而`any`方法用来测试数组中是否存在一个或多个True，`all`用来检查数组中所有值是否都是True：\n```\nIn [52]: arr = randn(20)\n\nIn [53]: (arr > 0).sum()\nOut[53]: 11\n\nIn [54]: bools=np.array([False,True,False])\n\nIn [55]: bools.any()\nOut[55]: True\n\nIn [56]: np.all(bools)\nOut[56]: False\n```\n\n### 排序\nNumPy数组通过`sort`方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给`sort`。顶级方法`np.sort`返回的是数组的已排序副本，而就地排序则会修改数组本身：\n```\nIn [57]: arr = randn(6)\n\nIn [58]: arr\nOut[58]:\narray([ 0.20563118, -0.6733116 , -1.44713961,  0.49352122,  0.73564391,\n        1.71627219])\n\nIn [59]: arr.sort()\n\nIn [60]: arr\nOut[60]:\narray([-1.44713961, -0.6733116 ,  0.20563118,  0.49352122,  0.73564391,\n        1.71627219])\n\nIn [61]: arr = rand(5,3)\n\nIn [62]: arr\nOut[62]:\narray([[0.18125744, 0.10766187, 0.46160903],\n       [0.34363544, 0.28353683, 0.06096776],\n       [0.52424935, 0.13756835, 0.78614215],\n       [0.12944147, 0.95273729, 0.09078996],\n       [0.85118943, 0.18928544, 0.23857278]])\n\nIn [63]: np.sort(arr,1)\nOut[63]:\narray([[0.10766187, 0.18125744, 0.46160903],\n       [0.06096776, 0.28353683, 0.34363544],\n       [0.13756835, 0.52424935, 0.78614215],\n       [0.09078996, 0.12944147, 0.95273729],\n       [0.18928544, 0.23857278, 0.85118943]])\n\nIn [64]: arr\nOut[64]:\narray([[0.18125744, 0.10766187, 0.46160903],\n       [0.34363544, 0.28353683, 0.06096776],\n       [0.52424935, 0.13756835, 0.78614215],\n       [0.12944147, 0.95273729, 0.09078996],\n       [0.85118943, 0.18928544, 0.23857278]])\n```\n### 唯一化及其他集合逻辑\nNumPy提供了一些针对一维ndarray的基本集合运算。\n\n* 数组的集合运算\n\n|       方法       |                     说明                     |\n| :--------------: | :------------------------------------------: |\n|    unique(x)     |      计算x中的唯一元素，并返回有序结果       |\n| intersect1d(x,y) |     计算x和y中的公共元素，并返回有序结果     |\n|   union1d(x,y)   |        计算x和y的并集，并返回有序结果        |\n|    in1d(x,y)     | 得到一个表示“x的元素是否包含于y”的布尔型数组 |\n|  setdiff1d(x,y)  |        集合的差，即元素在x中且不在y中        |\n|  setxor1d(x,y)   | 集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)                                             |\n```\nIn [66]: np.unique(names)\nOut[66]: array(['Jim', 'Tom', 'bob'], dtype='<U3')\n```\n\n## 用于数组的文件输入输出\n### 将数组以二进制格式保存到磁盘\n`np.save`和`np.load`是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 *.npy*的文件中。`np.savez`可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 *.npz*文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:\n```\nIn [68]: arr = np.arange(10)\n\nIn [69]: np.save('arr',arr)\n\nIn [70]: np.load('arr.npy')\nOut[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [71]: np.savez('arr_more',a=arr,b=arr)\n\nIn [72]: arr_more = np.load('arr_more.npz')\n\nIn [73]: arr_more['a']\nOut[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n\n## 线性代数\n\n* numpy.linalg函数\n\n| 函数  | 说明                                                                                      |\n| :---: | :---:                                                                                   |\n| diag  | 以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0) |\n| dot   | 矩阵乘法                                                                                  |\n| trace | 计算对角线的和                                                                            |\n| det   | 计算矩阵行列式                                                                            |\n| eig   | 计算方阵的特征值和特征向量                                                                |\n| inv   | 计算方阵的逆                                                                              |\n| pinv  | 计算矩阵的Moore-Penrose伪逆                                                               |\n| qr    | 计算QR分解                                                                                |\n| svd   | 计算奇异值分解(SVD)                                                                       |\n| solve | 解线性方程组Ax=b，其中A为一个方阵                                                         |\n| lstsq | 计算Ax=b的最小二乘解                                                                      |\n\n\n```\nIn [83]: x = randn(3,3)\n\nIn [84]: x\nOut[84]:\narray([[ 0.45880764, -0.90269718, -1.62963467],\n       [-0.76727739,  2.24799683,  0.65118256],\n       [ 0.43217346, -2.47319723, -0.48442667]])\n\nIn [85]: mat = x.T.dot(x)\n\nIn [86]: mat\nOut[86]:\narray([[ 0.98599295, -3.20785172, -1.45668284],\n       [-3.20785172, 11.9850565 ,  4.13300564],\n       [-1.45668284,  4.13300564,  3.31441709]])\n\nIn [87]: inv(mat)\nOut[87]:\narray([[16.03043111,  3.2650856 ,  2.97386734],\n       [ 3.2650856 ,  0.8114194 ,  0.42317945],\n       [ 2.97386734,  0.42317945,  1.08102824]])\n\nIn [88]: mat\nOut[88]:\narray([[ 0.98599295, -3.20785172, -1.45668284],\n       [-3.20785172, 11.9850565 ,  4.13300564],\n       [-1.45668284,  4.13300564,  3.31441709]])\n\nIn [89]: mat.dot(inv(mat))\nOut[89]:\narray([[ 1.00000000e+00, -1.71619808e-16,  2.22044605e-16],\n       [ 1.06801676e-14,  1.00000000e+00,  0.00000000e+00],\n       [ 3.55271368e-15,  8.88178420e-16,  1.00000000e+00]])\n\nIn [90]: q,r = qr(mat)\n\nIn [91]: r\nOut[91]:\narray([[-3.65847231, 13.01900838,  5.33621718],\n       [ 0.        , -1.23249681,  1.27109691],\n       [ 0.        ,  0.        ,  0.31324131]])\n```\n\n## 随机数生成\n\n* 部分numpy.random函数\n\n|     函数    |                      说明                      |\n| :---------: | :--------------------------------------------: |\n|     seed    |             确定随机数生成器的种子             |\n| permutation | 返回一个序列的随机排列或返回一个随机排列的范围 |\n|   shuffle   |             对一个序列就地随机排序             |\n|     rand    |              产生均匀分布的样本值              |\n|   randint   |        从给定的上下限范围内随机选取整数        |\n|    randn    |   产生正态分布(平均值为0，标准差为1)的样本值   |\n|    normal   |           产生正态(高斯)分布的样本值           |\n|   binomial  |              产生二项分布的样本值              |\n|     beta    |              产生Beta分布的样本值              |\n|  chisquare  |              产生卡方分布的样本值              |\n|    gamma    |             产生Gamma分布的样本值              |\n|   uniform   |         产生在[0,1）中均匀分布的样本值         |\n\n### 随机漫步\n使用`np.random`模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：\n```\nIn [96]: nsteps = 1000\n\nIn [97]: draws = np.random.randint(0, 2, size=nsteps)\n\nIn [98]: steps = np.where(draws>0,1,-1)\n\nIn [99]: walk = steps.cumsum()\n\nIn [101]: walk.min()\nOut[101]: -24\n\nIn [102]: walk.max()\nOut[102]: 9\n```\n然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用`np.abs(walk)>=10`得到一个布尔型数组，它表示的距离是否达到或超过10，使用`argmax`(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):\n```\nIn [103]: (np.abs(walk)>=10).argmax()\nOut[103]: 107\n```\n\n### 一次模拟多个随机漫步\n通过给`numpy.random`函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用`any`进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用`argmax`在轴1上获取穿越时间\n```\nIn [104]: nwalks = 5000\n\nIn [105]: nsteps = 5000\n\nIn [106]: draws = np.random.randint(0,2,size=(nwalks,nsteps))\n\nIn [107]: steps = np.where(draws>0,1,-1)\n\nIn [108]: walks = steps.cumsum(1)\n\nIn [109]: walks\nOut[109]:\narray([[  -1,   -2,   -1, ...,   20,   19,   18],\n       [  -1,    0,    1, ...,   16,   17,   18],\n       [  -1,    0,    1, ...,   80,   79,   78],\n       ...,\n       [   1,    2,    3, ...,    6,    5,    6],\n       [   1,    0,   -1, ..., -130, -131, -132],\n       [   1,    0,    1, ...,  -16,  -17,  -16]])\n\nIn [110]: walks.max()\nOut[110]: 255\n\nIn [111]: walks.min()\nOut[111]: -235\n\nIn [112]: hits30 = (np.abs(walks)>=30).any(1)\n\nIn [113]: hits30\nOut[113]: array([ True,  True,  True, ...,  True,  True,  True])\n\nIn [115]: hits30.sum()\nOut[115]: 4992\n\nIn [117]: crossing_time  =(np.abs(walks[hits30])>=30).argmax(1)\n\nIn [118]: crossing_time.mean()\nOut[118]: 883.0564903846154\n```\n","slug":"numpy基础-二","published":1,"updated":"2018-03-19T09:47:10.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw550016twn9paje48y7","content":"<h2 id=\"通用函数\"><a href=\"#通用函数\" class=\"headerlink\" title=\"通用函数\"></a>通用函数</h2><p>通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。</p>\n<ul>\n<li>一元ufunc</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">abs、fabs</td>\n<td style=\"text-align:center\">计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqrt</td>\n<td style=\"text-align:center\">计算各元素的平方根。相当于arr**0.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">square</td>\n<td style=\"text-align:center\">计算各元素的平方。相当于arr**2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exp</td>\n<td style=\"text-align:center\">计算各元素的指数e^x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log、log10、log2、log1p</td>\n<td style=\"text-align:center\">分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sign</td>\n<td style=\"text-align:center\">计算各元素的正负号:1(正数)、0(零)、-1(负数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ceil</td>\n<td style=\"text-align:center\">计算各元素的ceiling值，即大于等于该值的最小整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">floor</td>\n<td style=\"text-align:center\">计算各元素的floor值，即小于等于该值的最大整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rint</td>\n<td style=\"text-align:center\">将各元素四舍五入到最接近的整数，保留dtype</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">modf</td>\n<td style=\"text-align:center\">将数组的小数和整数部分以独立数组的形式返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isnan</td>\n<td style=\"text-align:center\">返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isfinite、isinf</td>\n<td style=\"text-align:center\">分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cos、cosh、sin、sinh、tan、tanh</td>\n<td style=\"text-align:center\">普通型和双曲型三角函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td>\n<td style=\"text-align:center\">反三角函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">logical_not</td>\n<td style=\"text-align:center\">计算各元素not x的真值。相当于-arr</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>二元ufunc</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\">将数组中对应的元素相加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtract</td>\n<td style=\"text-align:center\">从第一个数组中减去第二个数组中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiply</td>\n<td style=\"text-align:center\">数组元素相乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">divide、floor_divide</td>\n<td style=\"text-align:center\">除法或向下圆整除法(丢弃余数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">power</td>\n<td style=\"text-align:center\">对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maximum、fmax</td>\n<td style=\"text-align:center\">元素级的最大值计算。fmax将忽略NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minimum、fmin</td>\n<td style=\"text-align:center\">元素级的最小值计算。fmin将忽略NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mod</td>\n<td style=\"text-align:center\">元素级的求模计算(除法的余数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">copysign</td>\n<td style=\"text-align:center\">将第二个数组中的值的符号复制给第一个数组中的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">greater、greater_equal、less、less_equal、equal、not_equal</td>\n<td style=\"text-align:center\">执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符&gt;、&gt;=、&lt;、&lt;=、==、!=</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">logical_and、logical_or、logical_xor</td>\n<td style=\"text-align:center\">执行元素级的真值逻辑运算。相当于中缀运算符&amp;、&#124;、^</td>\n</tr>\n</tbody>\n</table>\n<p>许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [2]: arr  = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: arr</span><br><span class=\"line\">Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: np.sqrt(arr)</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,</span><br><span class=\"line\">       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: np.exp(arr)</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,</span><br><span class=\"line\">       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,</span><br><span class=\"line\">       2.98095799e+03, 8.10308393e+03])</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: x = randn(5)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: y = randn(5)</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: x</span><br><span class=\"line\">Out[8]:</span><br><span class=\"line\">array([-9.27415622e-01, -1.67964296e-03, -1.91023663e+00, -1.31307986e-01,</span><br><span class=\"line\">       -1.17927352e+00])</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: y</span><br><span class=\"line\">Out[9]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: np.maximum(x,y)</span><br><span class=\"line\">Out[10]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用数组进行数据处理\"><a href=\"#利用数组进行数据处理\" class=\"headerlink\" title=\"利用数组进行数据处理\"></a>利用数组进行数据处理</h2><p><strong>矢量化</strong>将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: points = np.arange(-5, 5, 0.01)</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: xs, ys = np.meshgrid(points,points)</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: xs</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: z = np.sqrt(np.square(xs)+np.square(ys))</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: z</span><br><span class=\"line\">Out[15]:</span><br><span class=\"line\">array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,</span><br><span class=\"line\">        7.06400028],</span><br><span class=\"line\">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class=\"line\">        7.05692568],</span><br><span class=\"line\">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class=\"line\">        7.04985815],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,</span><br><span class=\"line\">        7.04279774],</span><br><span class=\"line\">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class=\"line\">        7.04985815],</span><br><span class=\"line\">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class=\"line\">        7.05692568]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"将条件逻辑表述为数组运算\"><a href=\"#将条件逻辑表述为数组运算\" class=\"headerlink\" title=\"将条件逻辑表述为数组运算\"></a>将条件逻辑表述为数组运算</h3><p><code>np.where</code>是三元表达式<code>x if condition else y</code>的矢量化版本。<code>np.wehere</code>接受三个参数<code>cond、xarr、yarr</code>,当判定<code>cond</code>为true时选择执行<code>xarr</code>否则执行<code>yarr</code>。因此<code>np.where</code>也可以嵌套使用。<code>np.where</code>的第二个和第三个参数不必时数组，可以是标量值。<code>where</code>通常用于根据另一个数组产生新的数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: xarr = np.array([0.1,0.2,0.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: yarr = np.array([1.1,1.2,1.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: cond = np.array([True,False,True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: result = np.where(cond,xarr,yarr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: result</span><br><span class=\"line\">Out[27]: array([0.1, 1.2, 0.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: arr = randn(4,4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [29]: arr</span><br><span class=\"line\">Out[29]:</span><br><span class=\"line\">array([[ 0.17276546, -1.27954884, -0.07326268, -2.40995669],</span><br><span class=\"line\">       [-0.15796552, -1.85102248,  0.53499154, -0.1332765 ],</span><br><span class=\"line\">       [ 0.81853502,  1.35768841,  1.55543773,  1.01407613],</span><br><span class=\"line\">       [-1.05967769,  0.39289449,  0.13509303, -0.68143339]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [30]: np.where(arr&gt;0,1,-1)</span><br><span class=\"line\">Out[30]:</span><br><span class=\"line\">array([[ 1, -1, -1, -1],</span><br><span class=\"line\">       [-1, -1,  1, -1],</span><br><span class=\"line\">       [ 1,  1,  1,  1],</span><br><span class=\"line\">       [-1,  1,  1, -1]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [31]: np.where(arr&gt;0,1,arr)</span><br><span class=\"line\">Out[31]:</span><br><span class=\"line\">array([[ 1.        , -1.27954884, -0.07326268, -2.40995669],</span><br><span class=\"line\">       [-0.15796552, -1.85102248,  1.        , -0.1332765 ],</span><br><span class=\"line\">       [ 1.        ,  1.        ,  1.        ,  1.        ],</span><br><span class=\"line\">       [-1.05967769,  1.        ,  1.        , -0.68143339]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [32]: cond2 = np.array([False,False,True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [33]: np.where(cond&amp;cond2,0,np.where(cond,1,np.where(cond,2,3)))</span><br><span class=\"line\">Out[33]: array([1, 3, 0])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数学和统计方法\"><a href=\"#数学和统计方法\" class=\"headerlink\" title=\"数学和统计方法\"></a>数学和统计方法</h3><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。<code>sum</code>、<code>mean</code>以及标准差<code>std</code>等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p>\n<ul>\n<li>基本数组统计方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum</td>\n<td style=\"text-align:center\">对数组中全部或某轴向的元素求和。零长度的数组的sum为0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mean</td>\n<td style=\"text-align:center\">算数平均数。零长度的数组的mean为NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">std、var</td>\n<td style=\"text-align:center\">分别为标准差和方差，自由度可调(默认为n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">argmin、argmax</td>\n<td style=\"text-align:center\">分别为最大和最小元素的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumsum</td>\n<td style=\"text-align:center\">所有元素的累计和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumprod</td>\n<td style=\"text-align:center\">所有元素的累计积</td>\n</tr>\n</tbody>\n</table>\n<p><code>mean</code>和<code>sum</code>这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [36]: arr =  np.random.randn(5,4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: arr</span><br><span class=\"line\">Out[37]:</span><br><span class=\"line\">array([[-0.00502805,  0.23545272,  0.04886622, -0.46971953],</span><br><span class=\"line\">       [-1.08918278,  1.19958904, -0.54808552, -1.60148873],</span><br><span class=\"line\">       [-0.60059372, -0.9743709 ,  1.39660621, -0.97132217],</span><br><span class=\"line\">       [-0.11917925,  1.99922758, -1.58943388,  1.60237969],</span><br><span class=\"line\">       [-0.28361465, -2.57463163, -0.96786527, -0.00376026]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: arr.mean()</span><br><span class=\"line\">Out[38]: -0.26580774446749256</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: np.mean(arr)</span><br><span class=\"line\">Out[39]: -0.26580774446749256</span><br><span class=\"line\"></span><br><span class=\"line\">In [40]: arr.mean(axis=1)</span><br><span class=\"line\">Out[40]: array([-0.04760716, -0.509792  , -0.28742014,  0.47324854, -0.95746796])</span><br></pre></td></tr></table></figure></p>\n<p><code>cumsum</code>和<code>cumprod</code>之类的方法不聚合，而是产生一个由中间结果组成的数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [47]: arr = np.array([[0,1,2],[3,4,5],[6,7,8]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: arr.cumsum(0)</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">array([[ 0,  1,  2],</span><br><span class=\"line\">       [ 3,  5,  7],</span><br><span class=\"line\">       [ 9, 12, 15]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: arr.cumsum(1)</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">array([[ 0,  1,  3],</span><br><span class=\"line\">       [ 3,  7, 12],</span><br><span class=\"line\">       [ 6, 13, 21]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: arr.cumprod(0)</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">array([[ 0,  1,  2],</span><br><span class=\"line\">       [ 0,  4, 10],</span><br><span class=\"line\">       [ 0, 28, 80]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [51]: arr.cumprod(1)</span><br><span class=\"line\">Out[51]:</span><br><span class=\"line\">array([[  0,   0,   0],</span><br><span class=\"line\">       [  3,  12,  60],</span><br><span class=\"line\">       [  6,  42, 336]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用于布尔型数组的方法\"><a href=\"#用于布尔型数组的方法\" class=\"headerlink\" title=\"用于布尔型数组的方法\"></a>用于布尔型数组的方法</h3><p>上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以<code>sum</code>可以用来对布尔型数组中的True值计数。而<code>any</code>方法用来测试数组中是否存在一个或多个True，<code>all</code>用来检查数组中所有值是否都是True：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [52]: arr = randn(20)</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: (arr &gt; 0).sum()</span><br><span class=\"line\">Out[53]: 11</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: bools=np.array([False,True,False])</span><br><span class=\"line\"></span><br><span class=\"line\">In [55]: bools.any()</span><br><span class=\"line\">Out[55]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: np.all(bools)</span><br><span class=\"line\">Out[56]: False</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>NumPy数组通过<code>sort</code>方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给<code>sort</code>。顶级方法<code>np.sort</code>返回的是数组的已排序副本，而就地排序则会修改数组本身：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [57]: arr = randn(6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: arr</span><br><span class=\"line\">Out[58]:</span><br><span class=\"line\">array([ 0.20563118, -0.6733116 , -1.44713961,  0.49352122,  0.73564391,</span><br><span class=\"line\">        1.71627219])</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: arr.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: arr</span><br><span class=\"line\">Out[60]:</span><br><span class=\"line\">array([-1.44713961, -0.6733116 ,  0.20563118,  0.49352122,  0.73564391,</span><br><span class=\"line\">        1.71627219])</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: arr = rand(5,3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [62]: arr</span><br><span class=\"line\">Out[62]:</span><br><span class=\"line\">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class=\"line\">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class=\"line\">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class=\"line\">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class=\"line\">       [0.85118943, 0.18928544, 0.23857278]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [63]: np.sort(arr,1)</span><br><span class=\"line\">Out[63]:</span><br><span class=\"line\">array([[0.10766187, 0.18125744, 0.46160903],</span><br><span class=\"line\">       [0.06096776, 0.28353683, 0.34363544],</span><br><span class=\"line\">       [0.13756835, 0.52424935, 0.78614215],</span><br><span class=\"line\">       [0.09078996, 0.12944147, 0.95273729],</span><br><span class=\"line\">       [0.18928544, 0.23857278, 0.85118943]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: arr</span><br><span class=\"line\">Out[64]:</span><br><span class=\"line\">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class=\"line\">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class=\"line\">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class=\"line\">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class=\"line\">       [0.85118943, 0.18928544, 0.23857278]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"唯一化及其他集合逻辑\"><a href=\"#唯一化及其他集合逻辑\" class=\"headerlink\" title=\"唯一化及其他集合逻辑\"></a>唯一化及其他集合逻辑</h3><p>NumPy提供了一些针对一维ndarray的基本集合运算。</p>\n<ul>\n<li>数组的集合运算</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">unique(x)</td>\n<td style=\"text-align:center\">计算x中的唯一元素，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersect1d(x,y)</td>\n<td style=\"text-align:center\">计算x和y中的公共元素，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">union1d(x,y)</td>\n<td style=\"text-align:center\">计算x和y的并集，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in1d(x,y)</td>\n<td style=\"text-align:center\">得到一个表示“x的元素是否包含于y”的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setdiff1d(x,y)</td>\n<td style=\"text-align:center\">集合的差，即元素在x中且不在y中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setxor1d(x,y)</td>\n<td style=\"text-align:center\">集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: np.unique(names)</span><br><span class=\"line\">Out[66]: array([&apos;Jim&apos;, &apos;Tom&apos;, &apos;bob&apos;], dtype=&apos;&lt;U3&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"用于数组的文件输入输出\"><a href=\"#用于数组的文件输入输出\" class=\"headerlink\" title=\"用于数组的文件输入输出\"></a>用于数组的文件输入输出</h2><h3 id=\"将数组以二进制格式保存到磁盘\"><a href=\"#将数组以二进制格式保存到磁盘\" class=\"headerlink\" title=\"将数组以二进制格式保存到磁盘\"></a>将数组以二进制格式保存到磁盘</h3><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 <em>.npy</em>的文件中。<code>np.savez</code>可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 <em>.npz</em>文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [68]: arr = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: np.save(&apos;arr&apos;,arr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: np.load(&apos;arr.npy&apos;)</span><br><span class=\"line\">Out[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: np.savez(&apos;arr_more&apos;,a=arr,b=arr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: arr_more = np.load(&apos;arr_more.npz&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: arr_more[&apos;a&apos;]</span><br><span class=\"line\">Out[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"线性代数\"><a href=\"#线性代数\" class=\"headerlink\" title=\"线性代数\"></a>线性代数</h2><ul>\n<li>numpy.linalg函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">diag</td>\n<td style=\"text-align:center\">以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dot</td>\n<td style=\"text-align:center\">矩阵乘法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trace</td>\n<td style=\"text-align:center\">计算对角线的和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">det</td>\n<td style=\"text-align:center\">计算矩阵行列式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eig</td>\n<td style=\"text-align:center\">计算方阵的特征值和特征向量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inv</td>\n<td style=\"text-align:center\">计算方阵的逆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pinv</td>\n<td style=\"text-align:center\">计算矩阵的Moore-Penrose伪逆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qr</td>\n<td style=\"text-align:center\">计算QR分解</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svd</td>\n<td style=\"text-align:center\">计算奇异值分解(SVD)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">solve</td>\n<td style=\"text-align:center\">解线性方程组Ax=b，其中A为一个方阵</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lstsq</td>\n<td style=\"text-align:center\">计算Ax=b的最小二乘解</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [83]: x = randn(3,3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: x</span><br><span class=\"line\">Out[84]:</span><br><span class=\"line\">array([[ 0.45880764, -0.90269718, -1.62963467],</span><br><span class=\"line\">       [-0.76727739,  2.24799683,  0.65118256],</span><br><span class=\"line\">       [ 0.43217346, -2.47319723, -0.48442667]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: mat = x.T.dot(x)</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: mat</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class=\"line\">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class=\"line\">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: inv(mat)</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">array([[16.03043111,  3.2650856 ,  2.97386734],</span><br><span class=\"line\">       [ 3.2650856 ,  0.8114194 ,  0.42317945],</span><br><span class=\"line\">       [ 2.97386734,  0.42317945,  1.08102824]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: mat</span><br><span class=\"line\">Out[88]:</span><br><span class=\"line\">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class=\"line\">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class=\"line\">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [89]: mat.dot(inv(mat))</span><br><span class=\"line\">Out[89]:</span><br><span class=\"line\">array([[ 1.00000000e+00, -1.71619808e-16,  2.22044605e-16],</span><br><span class=\"line\">       [ 1.06801676e-14,  1.00000000e+00,  0.00000000e+00],</span><br><span class=\"line\">       [ 3.55271368e-15,  8.88178420e-16,  1.00000000e+00]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: q,r = qr(mat)</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: r</span><br><span class=\"line\">Out[91]:</span><br><span class=\"line\">array([[-3.65847231, 13.01900838,  5.33621718],</span><br><span class=\"line\">       [ 0.        , -1.23249681,  1.27109691],</span><br><span class=\"line\">       [ 0.        ,  0.        ,  0.31324131]])</span><br></pre></td></tr></table></figure>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><ul>\n<li>部分numpy.random函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">seed</td>\n<td style=\"text-align:center\">确定随机数生成器的种子</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permutation</td>\n<td style=\"text-align:center\">返回一个序列的随机排列或返回一个随机排列的范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">shuffle</td>\n<td style=\"text-align:center\">对一个序列就地随机排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rand</td>\n<td style=\"text-align:center\">产生均匀分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">randint</td>\n<td style=\"text-align:center\">从给定的上下限范围内随机选取整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">randn</td>\n<td style=\"text-align:center\">产生正态分布(平均值为0，标准差为1)的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">normal</td>\n<td style=\"text-align:center\">产生正态(高斯)分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">binomial</td>\n<td style=\"text-align:center\">产生二项分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beta</td>\n<td style=\"text-align:center\">产生Beta分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chisquare</td>\n<td style=\"text-align:center\">产生卡方分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gamma</td>\n<td style=\"text-align:center\">产生Gamma分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uniform</td>\n<td style=\"text-align:center\">产生在[0,1）中均匀分布的样本值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"随机漫步\"><a href=\"#随机漫步\" class=\"headerlink\" title=\"随机漫步\"></a>随机漫步</h3><p>使用<code>np.random</code>模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [96]: nsteps = 1000</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: draws = np.random.randint(0, 2, size=nsteps)</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: steps = np.where(draws&gt;0,1,-1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: walk = steps.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [101]: walk.min()</span><br><span class=\"line\">Out[101]: -24</span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: walk.max()</span><br><span class=\"line\">Out[102]: 9</span><br></pre></td></tr></table></figure></p>\n<p>然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用<code>np.abs(walk)&gt;=10</code>得到一个布尔型数组，它表示的距离是否达到或超过10，使用<code>argmax</code>(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [103]: (np.abs(walk)&gt;=10).argmax()</span><br><span class=\"line\">Out[103]: 107</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一次模拟多个随机漫步\"><a href=\"#一次模拟多个随机漫步\" class=\"headerlink\" title=\"一次模拟多个随机漫步\"></a>一次模拟多个随机漫步</h3><p>通过给<code>numpy.random</code>函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用<code>any</code>进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用<code>argmax</code>在轴1上获取穿越时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: nwalks = 5000</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: nsteps = 5000</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: draws = np.random.randint(0,2,size=(nwalks,nsteps))</span><br><span class=\"line\"></span><br><span class=\"line\">In [107]: steps = np.where(draws&gt;0,1,-1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: walks = steps.cumsum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: walks</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">array([[  -1,   -2,   -1, ...,   20,   19,   18],</span><br><span class=\"line\">       [  -1,    0,    1, ...,   16,   17,   18],</span><br><span class=\"line\">       [  -1,    0,    1, ...,   80,   79,   78],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [   1,    2,    3, ...,    6,    5,    6],</span><br><span class=\"line\">       [   1,    0,   -1, ..., -130, -131, -132],</span><br><span class=\"line\">       [   1,    0,    1, ...,  -16,  -17,  -16]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: walks.max()</span><br><span class=\"line\">Out[110]: 255</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: walks.min()</span><br><span class=\"line\">Out[111]: -235</span><br><span class=\"line\"></span><br><span class=\"line\">In [112]: hits30 = (np.abs(walks)&gt;=30).any(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: hits30</span><br><span class=\"line\">Out[113]: array([ True,  True,  True, ...,  True,  True,  True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: hits30.sum()</span><br><span class=\"line\">Out[115]: 4992</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: crossing_time  =(np.abs(walks[hits30])&gt;=30).argmax(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: crossing_time.mean()</span><br><span class=\"line\">Out[118]: 883.0564903846154</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通用函数\"><a href=\"#通用函数\" class=\"headerlink\" title=\"通用函数\"></a>通用函数</h2><p>通用函数(即ufunc)是一种对ndarray中的数据执行元素级运算的函数。它是简单函数(接受一个或多个标量值，并产生一个或多个标量值)的矢量化包装器。</p>\n<ul>\n<li>一元ufunc</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">abs、fabs</td>\n<td style=\"text-align:center\">计算整数、浮点数或复数的绝对值。对于非复数值，可以使fabs</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqrt</td>\n<td style=\"text-align:center\">计算各元素的平方根。相当于arr**0.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">square</td>\n<td style=\"text-align:center\">计算各元素的平方。相当于arr**2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exp</td>\n<td style=\"text-align:center\">计算各元素的指数e^x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log、log10、log2、log1p</td>\n<td style=\"text-align:center\">分别对自然对数(底为e)、底为10的log、底为2的log、log(1+x)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sign</td>\n<td style=\"text-align:center\">计算各元素的正负号:1(正数)、0(零)、-1(负数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ceil</td>\n<td style=\"text-align:center\">计算各元素的ceiling值，即大于等于该值的最小整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">floor</td>\n<td style=\"text-align:center\">计算各元素的floor值，即小于等于该值的最大整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rint</td>\n<td style=\"text-align:center\">将各元素四舍五入到最接近的整数，保留dtype</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">modf</td>\n<td style=\"text-align:center\">将数组的小数和整数部分以独立数组的形式返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isnan</td>\n<td style=\"text-align:center\">返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isfinite、isinf</td>\n<td style=\"text-align:center\">分别返回一个表示“哪些元素是有穷的(非inf、非NaN)”或“哪些元素是无穷的”布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cos、cosh、sin、sinh、tan、tanh</td>\n<td style=\"text-align:center\">普通型和双曲型三角函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td>\n<td style=\"text-align:center\">反三角函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">logical_not</td>\n<td style=\"text-align:center\">计算各元素not x的真值。相当于-arr</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>二元ufunc</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\">将数组中对应的元素相加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtract</td>\n<td style=\"text-align:center\">从第一个数组中减去第二个数组中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiply</td>\n<td style=\"text-align:center\">数组元素相乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">divide、floor_divide</td>\n<td style=\"text-align:center\">除法或向下圆整除法(丢弃余数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">power</td>\n<td style=\"text-align:center\">对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A^B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maximum、fmax</td>\n<td style=\"text-align:center\">元素级的最大值计算。fmax将忽略NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minimum、fmin</td>\n<td style=\"text-align:center\">元素级的最小值计算。fmin将忽略NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mod</td>\n<td style=\"text-align:center\">元素级的求模计算(除法的余数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">copysign</td>\n<td style=\"text-align:center\">将第二个数组中的值的符号复制给第一个数组中的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">greater、greater_equal、less、less_equal、equal、not_equal</td>\n<td style=\"text-align:center\">执行元素级的比较运算，最终产生布尔型数组。相当于中缀运算符&gt;、&gt;=、&lt;、&lt;=、==、!=</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">logical_and、logical_or、logical_xor</td>\n<td style=\"text-align:center\">执行元素级的真值逻辑运算。相当于中缀运算符&amp;、&#124;、^</td>\n</tr>\n</tbody>\n</table>\n<p>许多ufunc都是简单的元素级变体，一元的ufunc接受一个数组，二元的接受两个并返回一个结果数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [2]: arr  = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [3]: arr</span><br><span class=\"line\">Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: np.sqrt(arr)</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,</span><br><span class=\"line\">       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: np.exp(arr)</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,</span><br><span class=\"line\">       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,</span><br><span class=\"line\">       2.98095799e+03, 8.10308393e+03])</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: x = randn(5)</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: y = randn(5)</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: x</span><br><span class=\"line\">Out[8]:</span><br><span class=\"line\">array([-9.27415622e-01, -1.67964296e-03, -1.91023663e+00, -1.31307986e-01,</span><br><span class=\"line\">       -1.17927352e+00])</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: y</span><br><span class=\"line\">Out[9]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: np.maximum(x,y)</span><br><span class=\"line\">Out[10]: array([ 0.82239493,  0.43695129, -0.00905311,  0.31991891, -0.34529735])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用数组进行数据处理\"><a href=\"#利用数组进行数据处理\" class=\"headerlink\" title=\"利用数组进行数据处理\"></a>利用数组进行数据处理</h2><p><strong>矢量化</strong>将数据处理任务表述为简洁的数组表达式，用数组表达式代替循环。例如计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>接受两个一维数组，并产生两个二维矩阵(对应两个数组中所有(x,y)对):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [11]: points = np.arange(-5, 5, 0.01)</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: xs, ys = np.meshgrid(points,points)</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: xs</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],</span><br><span class=\"line\">       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: z = np.sqrt(np.square(xs)+np.square(ys))</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: z</span><br><span class=\"line\">Out[15]:</span><br><span class=\"line\">array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,</span><br><span class=\"line\">        7.06400028],</span><br><span class=\"line\">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class=\"line\">        7.05692568],</span><br><span class=\"line\">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class=\"line\">        7.04985815],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,</span><br><span class=\"line\">        7.04279774],</span><br><span class=\"line\">       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,</span><br><span class=\"line\">        7.04985815],</span><br><span class=\"line\">       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,</span><br><span class=\"line\">        7.05692568]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"将条件逻辑表述为数组运算\"><a href=\"#将条件逻辑表述为数组运算\" class=\"headerlink\" title=\"将条件逻辑表述为数组运算\"></a>将条件逻辑表述为数组运算</h3><p><code>np.where</code>是三元表达式<code>x if condition else y</code>的矢量化版本。<code>np.wehere</code>接受三个参数<code>cond、xarr、yarr</code>,当判定<code>cond</code>为true时选择执行<code>xarr</code>否则执行<code>yarr</code>。因此<code>np.where</code>也可以嵌套使用。<code>np.where</code>的第二个和第三个参数不必时数组，可以是标量值。<code>where</code>通常用于根据另一个数组产生新的数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: xarr = np.array([0.1,0.2,0.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: yarr = np.array([1.1,1.2,1.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: cond = np.array([True,False,True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: result = np.where(cond,xarr,yarr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: result</span><br><span class=\"line\">Out[27]: array([0.1, 1.2, 0.3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: arr = randn(4,4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [29]: arr</span><br><span class=\"line\">Out[29]:</span><br><span class=\"line\">array([[ 0.17276546, -1.27954884, -0.07326268, -2.40995669],</span><br><span class=\"line\">       [-0.15796552, -1.85102248,  0.53499154, -0.1332765 ],</span><br><span class=\"line\">       [ 0.81853502,  1.35768841,  1.55543773,  1.01407613],</span><br><span class=\"line\">       [-1.05967769,  0.39289449,  0.13509303, -0.68143339]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [30]: np.where(arr&gt;0,1,-1)</span><br><span class=\"line\">Out[30]:</span><br><span class=\"line\">array([[ 1, -1, -1, -1],</span><br><span class=\"line\">       [-1, -1,  1, -1],</span><br><span class=\"line\">       [ 1,  1,  1,  1],</span><br><span class=\"line\">       [-1,  1,  1, -1]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [31]: np.where(arr&gt;0,1,arr)</span><br><span class=\"line\">Out[31]:</span><br><span class=\"line\">array([[ 1.        , -1.27954884, -0.07326268, -2.40995669],</span><br><span class=\"line\">       [-0.15796552, -1.85102248,  1.        , -0.1332765 ],</span><br><span class=\"line\">       [ 1.        ,  1.        ,  1.        ,  1.        ],</span><br><span class=\"line\">       [-1.05967769,  1.        ,  1.        , -0.68143339]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [32]: cond2 = np.array([False,False,True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [33]: np.where(cond&amp;cond2,0,np.where(cond,1,np.where(cond,2,3)))</span><br><span class=\"line\">Out[33]: array([1, 3, 0])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数学和统计方法\"><a href=\"#数学和统计方法\" class=\"headerlink\" title=\"数学和统计方法\"></a>数学和统计方法</h3><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计。<code>sum</code>、<code>mean</code>以及标准差<code>std</code>等聚合计算(aggregation)既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p>\n<ul>\n<li>基本数组统计方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum</td>\n<td style=\"text-align:center\">对数组中全部或某轴向的元素求和。零长度的数组的sum为0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mean</td>\n<td style=\"text-align:center\">算数平均数。零长度的数组的mean为NaN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">std、var</td>\n<td style=\"text-align:center\">分别为标准差和方差，自由度可调(默认为n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">argmin、argmax</td>\n<td style=\"text-align:center\">分别为最大和最小元素的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumsum</td>\n<td style=\"text-align:center\">所有元素的累计和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumprod</td>\n<td style=\"text-align:center\">所有元素的累计积</td>\n</tr>\n</tbody>\n</table>\n<p><code>mean</code>和<code>sum</code>这类的函数接受一个axis参数(用于计算该轴向上的统计值)，最终结果是一个少一维的数组:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [36]: arr =  np.random.randn(5,4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: arr</span><br><span class=\"line\">Out[37]:</span><br><span class=\"line\">array([[-0.00502805,  0.23545272,  0.04886622, -0.46971953],</span><br><span class=\"line\">       [-1.08918278,  1.19958904, -0.54808552, -1.60148873],</span><br><span class=\"line\">       [-0.60059372, -0.9743709 ,  1.39660621, -0.97132217],</span><br><span class=\"line\">       [-0.11917925,  1.99922758, -1.58943388,  1.60237969],</span><br><span class=\"line\">       [-0.28361465, -2.57463163, -0.96786527, -0.00376026]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: arr.mean()</span><br><span class=\"line\">Out[38]: -0.26580774446749256</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: np.mean(arr)</span><br><span class=\"line\">Out[39]: -0.26580774446749256</span><br><span class=\"line\"></span><br><span class=\"line\">In [40]: arr.mean(axis=1)</span><br><span class=\"line\">Out[40]: array([-0.04760716, -0.509792  , -0.28742014,  0.47324854, -0.95746796])</span><br></pre></td></tr></table></figure></p>\n<p><code>cumsum</code>和<code>cumprod</code>之类的方法不聚合，而是产生一个由中间结果组成的数组：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [47]: arr = np.array([[0,1,2],[3,4,5],[6,7,8]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: arr.cumsum(0)</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">array([[ 0,  1,  2],</span><br><span class=\"line\">       [ 3,  5,  7],</span><br><span class=\"line\">       [ 9, 12, 15]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: arr.cumsum(1)</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">array([[ 0,  1,  3],</span><br><span class=\"line\">       [ 3,  7, 12],</span><br><span class=\"line\">       [ 6, 13, 21]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: arr.cumprod(0)</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">array([[ 0,  1,  2],</span><br><span class=\"line\">       [ 0,  4, 10],</span><br><span class=\"line\">       [ 0, 28, 80]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [51]: arr.cumprod(1)</span><br><span class=\"line\">Out[51]:</span><br><span class=\"line\">array([[  0,   0,   0],</span><br><span class=\"line\">       [  3,  12,  60],</span><br><span class=\"line\">       [  6,  42, 336]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用于布尔型数组的方法\"><a href=\"#用于布尔型数组的方法\" class=\"headerlink\" title=\"用于布尔型数组的方法\"></a>用于布尔型数组的方法</h3><p>上面罗列的方法中，布尔值会被强制转换为1(True)和0(False)。所以<code>sum</code>可以用来对布尔型数组中的True值计数。而<code>any</code>方法用来测试数组中是否存在一个或多个True，<code>all</code>用来检查数组中所有值是否都是True：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [52]: arr = randn(20)</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: (arr &gt; 0).sum()</span><br><span class=\"line\">Out[53]: 11</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: bools=np.array([False,True,False])</span><br><span class=\"line\"></span><br><span class=\"line\">In [55]: bools.any()</span><br><span class=\"line\">Out[55]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: np.all(bools)</span><br><span class=\"line\">Out[56]: False</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>NumPy数组通过<code>sort</code>方法就地排序，多维数组可以在任何一个轴向上进行排序，只需将轴编号传给<code>sort</code>。顶级方法<code>np.sort</code>返回的是数组的已排序副本，而就地排序则会修改数组本身：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [57]: arr = randn(6)</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: arr</span><br><span class=\"line\">Out[58]:</span><br><span class=\"line\">array([ 0.20563118, -0.6733116 , -1.44713961,  0.49352122,  0.73564391,</span><br><span class=\"line\">        1.71627219])</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: arr.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: arr</span><br><span class=\"line\">Out[60]:</span><br><span class=\"line\">array([-1.44713961, -0.6733116 ,  0.20563118,  0.49352122,  0.73564391,</span><br><span class=\"line\">        1.71627219])</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: arr = rand(5,3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [62]: arr</span><br><span class=\"line\">Out[62]:</span><br><span class=\"line\">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class=\"line\">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class=\"line\">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class=\"line\">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class=\"line\">       [0.85118943, 0.18928544, 0.23857278]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [63]: np.sort(arr,1)</span><br><span class=\"line\">Out[63]:</span><br><span class=\"line\">array([[0.10766187, 0.18125744, 0.46160903],</span><br><span class=\"line\">       [0.06096776, 0.28353683, 0.34363544],</span><br><span class=\"line\">       [0.13756835, 0.52424935, 0.78614215],</span><br><span class=\"line\">       [0.09078996, 0.12944147, 0.95273729],</span><br><span class=\"line\">       [0.18928544, 0.23857278, 0.85118943]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: arr</span><br><span class=\"line\">Out[64]:</span><br><span class=\"line\">array([[0.18125744, 0.10766187, 0.46160903],</span><br><span class=\"line\">       [0.34363544, 0.28353683, 0.06096776],</span><br><span class=\"line\">       [0.52424935, 0.13756835, 0.78614215],</span><br><span class=\"line\">       [0.12944147, 0.95273729, 0.09078996],</span><br><span class=\"line\">       [0.85118943, 0.18928544, 0.23857278]])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"唯一化及其他集合逻辑\"><a href=\"#唯一化及其他集合逻辑\" class=\"headerlink\" title=\"唯一化及其他集合逻辑\"></a>唯一化及其他集合逻辑</h3><p>NumPy提供了一些针对一维ndarray的基本集合运算。</p>\n<ul>\n<li>数组的集合运算</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">unique(x)</td>\n<td style=\"text-align:center\">计算x中的唯一元素，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersect1d(x,y)</td>\n<td style=\"text-align:center\">计算x和y中的公共元素，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">union1d(x,y)</td>\n<td style=\"text-align:center\">计算x和y的并集，并返回有序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in1d(x,y)</td>\n<td style=\"text-align:center\">得到一个表示“x的元素是否包含于y”的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setdiff1d(x,y)</td>\n<td style=\"text-align:center\">集合的差，即元素在x中且不在y中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setxor1d(x,y)</td>\n<td style=\"text-align:center\">集合的对称差，即存在于一个数组中单不同时存在于两个数组中的元素(异或)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: np.unique(names)</span><br><span class=\"line\">Out[66]: array([&apos;Jim&apos;, &apos;Tom&apos;, &apos;bob&apos;], dtype=&apos;&lt;U3&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"用于数组的文件输入输出\"><a href=\"#用于数组的文件输入输出\" class=\"headerlink\" title=\"用于数组的文件输入输出\"></a>用于数组的文件输入输出</h2><h3 id=\"将数组以二进制格式保存到磁盘\"><a href=\"#将数组以二进制格式保存到磁盘\" class=\"headerlink\" title=\"将数组以二进制格式保存到磁盘\"></a>将数组以二进制格式保存到磁盘</h3><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个组药函数。默认情况下数组以未压缩的原始二进制格式保存在扩展名为 <em>.npy</em>的文件中。<code>np.savez</code>可以将多个数组保存到一个压缩文件中，将数组以关键字参数的形式传入即可。加载 <em>.npz</em>文件时，将会得到一个类似字典的对象，该对象对各个数组进行延迟加载:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [68]: arr = np.arange(10)</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: np.save(&apos;arr&apos;,arr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [70]: np.load(&apos;arr.npy&apos;)</span><br><span class=\"line\">Out[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: np.savez(&apos;arr_more&apos;,a=arr,b=arr)</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: arr_more = np.load(&apos;arr_more.npz&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: arr_more[&apos;a&apos;]</span><br><span class=\"line\">Out[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"线性代数\"><a href=\"#线性代数\" class=\"headerlink\" title=\"线性代数\"></a>线性代数</h2><ul>\n<li>numpy.linalg函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">diag</td>\n<td style=\"text-align:center\">以一维数组的形式返回方阵的对角线(或非对角线)元素，或将一维数组转换为方阵(非对角线元素为0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dot</td>\n<td style=\"text-align:center\">矩阵乘法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trace</td>\n<td style=\"text-align:center\">计算对角线的和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">det</td>\n<td style=\"text-align:center\">计算矩阵行列式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eig</td>\n<td style=\"text-align:center\">计算方阵的特征值和特征向量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inv</td>\n<td style=\"text-align:center\">计算方阵的逆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pinv</td>\n<td style=\"text-align:center\">计算矩阵的Moore-Penrose伪逆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qr</td>\n<td style=\"text-align:center\">计算QR分解</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svd</td>\n<td style=\"text-align:center\">计算奇异值分解(SVD)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">solve</td>\n<td style=\"text-align:center\">解线性方程组Ax=b，其中A为一个方阵</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lstsq</td>\n<td style=\"text-align:center\">计算Ax=b的最小二乘解</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [83]: x = randn(3,3)</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: x</span><br><span class=\"line\">Out[84]:</span><br><span class=\"line\">array([[ 0.45880764, -0.90269718, -1.62963467],</span><br><span class=\"line\">       [-0.76727739,  2.24799683,  0.65118256],</span><br><span class=\"line\">       [ 0.43217346, -2.47319723, -0.48442667]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: mat = x.T.dot(x)</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: mat</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class=\"line\">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class=\"line\">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: inv(mat)</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">array([[16.03043111,  3.2650856 ,  2.97386734],</span><br><span class=\"line\">       [ 3.2650856 ,  0.8114194 ,  0.42317945],</span><br><span class=\"line\">       [ 2.97386734,  0.42317945,  1.08102824]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: mat</span><br><span class=\"line\">Out[88]:</span><br><span class=\"line\">array([[ 0.98599295, -3.20785172, -1.45668284],</span><br><span class=\"line\">       [-3.20785172, 11.9850565 ,  4.13300564],</span><br><span class=\"line\">       [-1.45668284,  4.13300564,  3.31441709]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [89]: mat.dot(inv(mat))</span><br><span class=\"line\">Out[89]:</span><br><span class=\"line\">array([[ 1.00000000e+00, -1.71619808e-16,  2.22044605e-16],</span><br><span class=\"line\">       [ 1.06801676e-14,  1.00000000e+00,  0.00000000e+00],</span><br><span class=\"line\">       [ 3.55271368e-15,  8.88178420e-16,  1.00000000e+00]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: q,r = qr(mat)</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: r</span><br><span class=\"line\">Out[91]:</span><br><span class=\"line\">array([[-3.65847231, 13.01900838,  5.33621718],</span><br><span class=\"line\">       [ 0.        , -1.23249681,  1.27109691],</span><br><span class=\"line\">       [ 0.        ,  0.        ,  0.31324131]])</span><br></pre></td></tr></table></figure>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><ul>\n<li>部分numpy.random函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">seed</td>\n<td style=\"text-align:center\">确定随机数生成器的种子</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permutation</td>\n<td style=\"text-align:center\">返回一个序列的随机排列或返回一个随机排列的范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">shuffle</td>\n<td style=\"text-align:center\">对一个序列就地随机排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rand</td>\n<td style=\"text-align:center\">产生均匀分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">randint</td>\n<td style=\"text-align:center\">从给定的上下限范围内随机选取整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">randn</td>\n<td style=\"text-align:center\">产生正态分布(平均值为0，标准差为1)的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">normal</td>\n<td style=\"text-align:center\">产生正态(高斯)分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">binomial</td>\n<td style=\"text-align:center\">产生二项分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beta</td>\n<td style=\"text-align:center\">产生Beta分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chisquare</td>\n<td style=\"text-align:center\">产生卡方分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gamma</td>\n<td style=\"text-align:center\">产生Gamma分布的样本值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uniform</td>\n<td style=\"text-align:center\">产生在[0,1）中均匀分布的样本值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"随机漫步\"><a href=\"#随机漫步\" class=\"headerlink\" title=\"随机漫步\"></a>随机漫步</h3><p>使用<code>np.random</code>模块一次性产生1000个“掷硬币”结果(即两个数中任选一个),将其分别设置为1或-1，然后计算累计和,然后可以做求取最大值最小值的简单统计：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [96]: nsteps = 1000</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: draws = np.random.randint(0, 2, size=nsteps)</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: steps = np.where(draws&gt;0,1,-1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: walk = steps.cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">In [101]: walk.min()</span><br><span class=\"line\">Out[101]: -24</span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: walk.max()</span><br><span class=\"line\">Out[102]: 9</span><br></pre></td></tr></table></figure></p>\n<p>然后可以计算首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。使用<code>np.abs(walk)&gt;=10</code>得到一个布尔型数组，它表示的距离是否达到或超过10，使用<code>argmax</code>(并不高效，会对数组进行完全扫描)找到布尔型数组第一个最大值索引(True就是最大值):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [103]: (np.abs(walk)&gt;=10).argmax()</span><br><span class=\"line\">Out[103]: 107</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一次模拟多个随机漫步\"><a href=\"#一次模拟多个随机漫步\" class=\"headerlink\" title=\"一次模拟多个随机漫步\"></a>一次模拟多个随机漫步</h3><p>通过给<code>numpy.random</code>函数传入一个二元元组产生一个二维数组,然后使用累计和创建随机漫步过程(一行一个)，接着计算最大值和最小值。得到这些数据后来计算30或-30的最小穿越时间。因为不是5000个都达到了30，所以使用<code>any</code>进行检查，然后利用检查后的布尔数组选出哪些穿越了30(绝对值)的随机漫步(行)，并调用<code>argmax</code>在轴1上获取穿越时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: nwalks = 5000</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: nsteps = 5000</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: draws = np.random.randint(0,2,size=(nwalks,nsteps))</span><br><span class=\"line\"></span><br><span class=\"line\">In [107]: steps = np.where(draws&gt;0,1,-1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: walks = steps.cumsum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: walks</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">array([[  -1,   -2,   -1, ...,   20,   19,   18],</span><br><span class=\"line\">       [  -1,    0,    1, ...,   16,   17,   18],</span><br><span class=\"line\">       [  -1,    0,    1, ...,   80,   79,   78],</span><br><span class=\"line\">       ...,</span><br><span class=\"line\">       [   1,    2,    3, ...,    6,    5,    6],</span><br><span class=\"line\">       [   1,    0,   -1, ..., -130, -131, -132],</span><br><span class=\"line\">       [   1,    0,    1, ...,  -16,  -17,  -16]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: walks.max()</span><br><span class=\"line\">Out[110]: 255</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: walks.min()</span><br><span class=\"line\">Out[111]: -235</span><br><span class=\"line\"></span><br><span class=\"line\">In [112]: hits30 = (np.abs(walks)&gt;=30).any(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: hits30</span><br><span class=\"line\">Out[113]: array([ True,  True,  True, ...,  True,  True,  True])</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: hits30.sum()</span><br><span class=\"line\">Out[115]: 4992</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: crossing_time  =(np.abs(walks[hits30])&gt;=30).argmax(1)</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: crossing_time.mean()</span><br><span class=\"line\">Out[118]: 883.0564903846154</span><br></pre></td></tr></table></figure></p>\n"},{"title":"pandas入门(一)","date":"2018-03-19T02:48:58.000Z","copyright":true,"description":"pandas含有使数据分析工作变得更快更简单的高级数据结构和操作工具。","_content":"## Series\n**Series**[^1] 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过`index`参数指定索引来代替自动生成的索引:\n```\nIn [4]: ser1 = Series([1,2,2,3])\n\nIn [5]: ser1\nOut[5]:\n0    1\n1    2\n2    2\n3    3\ndtype: int64\n\nIn [6]: ser2 = Series([1,2,2,3],index=['a','b','c','d'])\n\nIn [7]: ser2\nOut[7]:\na    1\nb    2\nc    2\nd    3\ndtype: int64\n```\n可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:\n```\nIn [8]: ser2['a']\nOut[8]: 1\n\nIn [9]: ser2[['a','b']]\nOut[9]:\na    1\nb    2\ndtype: int64\n\nIn [10]: ser2*2\nOut[10]:\na    2\nb    4\nc    4\nd    6\ndtype: int64\n\nIn [11]: ser2[ser2>=2]\nOut[11]:\nb    2\nc    2\nd    3\ndtype: int64\n\nIn [12]: 'a' in ser2\nOut[12]: True\n\nIn [13]: 'g' in ser2\nOut[13]: False\n```\n可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用`NA`表示缺失数据,pandas的`isnull`和`notnull`函数可用于检测缺失数据：\n```\nIn [14]: dic = {'a':1,'b':2,'c':3}\n\nIn [15]: dics = Series(dic)\n\nIn [16]: dics\nOut[16]:\na    1\nb    2\nc    3\ndtype: int64\n\nIn [17]: states = ['a','b','c','d']\n\nIn [18]: dicstates = Series(dic,index=states)\n\nIn [19]: dicstates\nOut[19]:\na    1.0\nb    2.0\nc    3.0\nd    NaN\n```\n**Series在算数运算中会自动对齐不同索引的数据**：\n```\nIn [20]: dics\nOut[20]:\na    1\nb    2\nc    3\ndtype: int64\n\nIn [21]: dicstates\nOut[21]:\na    1.0\nb    2.0\nc    3.0\nd    NaN\ndtype: float64\n\nIn [22]: dics+dicstates\nOut[22]:\na    2.0\nb    4.0\nc    6.0\nd    NaN\ndtype: float64\n```\nSeries本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:\n```\nIn [23]: dics.name='dics'\n\nIn [24]: dics.index.name='letter'\n\nIn [25]: dics\nOut[25]:\nletter\na    1\nb    2\nc    3\nName: dics, dtype: int64\n\nIn [26]: dics.index=['z','x','y']\n\nIn [27]: dics\nOut[27]:\nz    1\nx    2\ny    3\nName: dics, dtype: int64\n```\n## DataFrame\n\n### 构造DataFrame\n* 可以输入给DataFrame构造器的数据\n\n|             类型             |                                        说明                                        |\n|:----------------------------:|:----------------------------------------------------------------------------------:|\n|         二维ndarray          |                           数据矩阵，还可以传入行标和列标                           |\n| 由数组、列标或元组组成的字典 |               每个序列会变成DataFrame的一列，所有序列的长度必须相同                |\n|    NumPy的结构化/记录数组    |                              类似于“由数组组成的字典”                              |\n|      由Series组成的字典      | 每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引 |\n|       由字典组成的字典       |   各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样   |\n|      字典或Series的列表      |    各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标    |\n|       另一个DataFrame        |                该DataFrame的索引将会被沿用，除非显式指定了其他索引                 |\n|      NumPy的MaskedArray      |        类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值         |\n\n**DataFrame** 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。\n构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：\n```\nIn [30]: data ={'state':['a','b','c','d'],\n    ...: 'year':[2000,2001,2002,2003],\n    ...: 'pop':[1,2,3,4]}\n\nIn [31]: frame = DataFrame(data)\n\nIn [32]: frame\nOut[32]:\n   pop state  year\n0    1     a  2000\n1    2     b  2001\n2    3     c  2002\n3    4     d  2003\n\nIn [34]: DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\nOut[34]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [35]: frame.columns\nOut[35]: Index(['pop', 'state', 'year'], dtype='object')\n```\n可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其`name`属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:\n```\nIn [40]: frame.state\nOut[40]:\n0    a\n1    b\n2    c\n3    d\nName: state, dtype: object\n\nIn [41]: frame['year']\nOut[41]:\n0    2000\n1    2001\n2    2002\n3    2003\nName: year, dtype: int64\n\nIn [42]: frame.ix[1]\nOut[42]:\npop         2\nstate       b\nyear     2001\nName: 1, dtype: object\n```\n列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字`del`可以删除列:\n```\nIn [49]: frame2=DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\n\nIn [50]: frame2\nOut[50]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [51]: frame2['debt']=np.arange(4.)\n\nIn [52]: frame2\nOut[52]:\n    year  pop state  debt\ni1  2000    1     a   0.0\ni2  2001    2     b   1.0\ni3  2002    3     c   2.0\ni4  2003    4     d   3.0\n\nIn [53]: frame2=DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\n\nIn [54]: frame2\nOut[54]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [55]: val = Series([-1,-2,-3],index=['i1','i3','i4'])\n\nIn [56]: frame2['debt']=val\n\nIn [57]: frame2\nOut[57]:\n    year  pop state  debt\ni1  2000    1     a  -1.0\ni2  2001    2     b   NaN\ni3  2002    3     c  -2.0\ni4  2003    4     d  -3.0\n\nIn [58]: frame2['big']= frame2['pop']>=3\n\nIn [59]: frame2\nOut[59]:\n    year  pop state  debt    big\ni1  2000    1     a  -1.0  False\ni2  2001    2     b   NaN  False\ni3  2002    3     c  -2.0   True\ni4  2003    4     d  -3.0   True\n\nIn [60]: del frame2['big']\n\nIn [61]: frame2\nOut[61]:\n    year  pop state  debt\ni1  2000    1     a  -1.0\ni2  2001    2     b   NaN\ni3  2002    3     c  -2.0\ni4  2003    4     d  -3.0\n```\n嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过`T`进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:\n```\nIn [63]: pop = {'out1':{2002:1.1,2001:1.2},\n    ...: 'out2':{2001:1.3,2004:1.4}}\n\nIn [64]: frame3 = DataFrame(pop)\n\nIn [65]: frame3\nOut[65]:\n      out1  out2\n2001   1.2   1.3\n2002   1.1   NaN\n2004   NaN   1.4\n\nIn [66]: frame3.T\nOut[66]:\n      2001  2002  2004\nout1   1.2   1.1   NaN\nout2   1.3   NaN   1.4\n\nIn [67]: DataFrame(pop,index=[2002,2001,2004])\nOut[67]:\n      out1  out2\n2002   1.1   NaN\n2001   1.2   1.3\n2004   NaN   1.4\n\nIn [68]: sData = {'out1':frame3['out1'][:-1],\n    ...: 'out2':frame3['out2'][:-1]}\n\nIn [69]: DataFrame(sData)\nOut[69]:\n      out1  out2\n2001   1.2   1.3\n2002   1.1   NaN\n```\n设置了DataFrame的`index`和`columns`的`name`属性，这些信息将会被显示出来，`values`属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：\n```\nIn [70]: frame3.index.name='year'\n\nIn [71]: frame3.columns.name='state'\n\nIn [72]: frame3\nOut[72]:\nstate  out1  out2\nyear\n2001    1.2   1.3\n2002    1.1   NaN\n2004    NaN   1.4\n\nIn [73]: frame3.values\nOut[73]:\narray([[ 1.2,  1.3],\n       [ 1.1,  nan],\n       [ nan,  1.4]])\n\nIn [74]: frame2.values\nOut[74]:\narray([[2000, 1, 'a', -1.0],\n       [2001, 2, 'b', nan],\n       [2002, 3, 'c', -2.0],\n       [2003, 4, 'd', -3.0]], dtype=object)\n```\n### 索引对象\npandas的索引对象负责管理轴标签和其他元数据。\n* pandas中主要的Index对象\n\n|      类       |                                说明                                |\n|:-------------:|:------------------------------------------------------------------:|\n|     Index     |  最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组  |\n|  Int64Index   |                        针对整数的特殊Index                         |\n|  MultiIndex   | \"层次化\"索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组 |\n| DatetimeIndex |           存储纳秒级时间戳(用NumPy的datetime64类型表示)            |\n|  PeriodIndex  |                针对Period数据(时间间隔)的特殊Index                 |\n\n* Index的方法和属性\n\n|     方法     |                        说明                        |\n|:------------:|:--------------------------------------------------:|\n|    append    |       连接另一个Index对象，产生一个新的Index       |\n|     diff     |             计算差集，并得到一个Index              |\n| intersection |                      计算交集                      |\n|    union     |                      计算并集                      |\n|     isin     | 计算一个指示各值是否都包含在参数集合中的布尔型数组 |\n|    delete    |         删除索引i处的元素，并得到新的Index         |\n|     drop     |           删除传入的值，并得到新的Index            |\n|    insert    |        将元素插入到索引i处，并得到新的Index        |\n| is_monotonic |      当各元素均大于等于前一个元素时，返回True      |\n|  is_unique   |           当Index没有重复值时，返回True            |\n|    unique    |              计算Index中唯一值的数组               |\n\n构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 **不可修改的**，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:\n```\nIn [76]: obj = Series(range(3),index=['a','b','c'])\n\nIn [77]: index =obj.index\n\nIn [78]: index\nOut[78]: Index(['a', 'b', 'c'], dtype='object')\n\nIn [79]: index[:-1]\nOut[79]: Index(['a', 'b'], dtype='object')\n\nIn [80]: inde=pd.Index(np.arange(3))\n\nIn [81]: obj2=Series(['a','b','c'],index=inde)\n\nIn [82]: obj2.index is inde\nOut[82]: True\n\nIn [83]: frame3\nOut[83]:\nstate  out1  out2\nyear\n2001    1.2   1.3\n2002    1.1   NaN\n2004    NaN   1.4\n\nIn [84]: 'out1' in frame3.columns\nOut[84]: True\n\nIn [85]: 2005 in frame3.index\nOut[85]: False\n```\n\n[^1]:使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包\n","source":"_posts/pandas入门-一.md","raw":"---\ntitle: pandas入门(一)\ndate: 2018-03-19 10:48:58\ncategories: true\ncopyright: true\ntags:\n    - 数据分析\n    - pandas\ndescription: pandas含有使数据分析工作变得更快更简单的高级数据结构和操作工具。\n---\n## Series\n**Series**[^1] 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过`index`参数指定索引来代替自动生成的索引:\n```\nIn [4]: ser1 = Series([1,2,2,3])\n\nIn [5]: ser1\nOut[5]:\n0    1\n1    2\n2    2\n3    3\ndtype: int64\n\nIn [6]: ser2 = Series([1,2,2,3],index=['a','b','c','d'])\n\nIn [7]: ser2\nOut[7]:\na    1\nb    2\nc    2\nd    3\ndtype: int64\n```\n可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:\n```\nIn [8]: ser2['a']\nOut[8]: 1\n\nIn [9]: ser2[['a','b']]\nOut[9]:\na    1\nb    2\ndtype: int64\n\nIn [10]: ser2*2\nOut[10]:\na    2\nb    4\nc    4\nd    6\ndtype: int64\n\nIn [11]: ser2[ser2>=2]\nOut[11]:\nb    2\nc    2\nd    3\ndtype: int64\n\nIn [12]: 'a' in ser2\nOut[12]: True\n\nIn [13]: 'g' in ser2\nOut[13]: False\n```\n可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用`NA`表示缺失数据,pandas的`isnull`和`notnull`函数可用于检测缺失数据：\n```\nIn [14]: dic = {'a':1,'b':2,'c':3}\n\nIn [15]: dics = Series(dic)\n\nIn [16]: dics\nOut[16]:\na    1\nb    2\nc    3\ndtype: int64\n\nIn [17]: states = ['a','b','c','d']\n\nIn [18]: dicstates = Series(dic,index=states)\n\nIn [19]: dicstates\nOut[19]:\na    1.0\nb    2.0\nc    3.0\nd    NaN\n```\n**Series在算数运算中会自动对齐不同索引的数据**：\n```\nIn [20]: dics\nOut[20]:\na    1\nb    2\nc    3\ndtype: int64\n\nIn [21]: dicstates\nOut[21]:\na    1.0\nb    2.0\nc    3.0\nd    NaN\ndtype: float64\n\nIn [22]: dics+dicstates\nOut[22]:\na    2.0\nb    4.0\nc    6.0\nd    NaN\ndtype: float64\n```\nSeries本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:\n```\nIn [23]: dics.name='dics'\n\nIn [24]: dics.index.name='letter'\n\nIn [25]: dics\nOut[25]:\nletter\na    1\nb    2\nc    3\nName: dics, dtype: int64\n\nIn [26]: dics.index=['z','x','y']\n\nIn [27]: dics\nOut[27]:\nz    1\nx    2\ny    3\nName: dics, dtype: int64\n```\n## DataFrame\n\n### 构造DataFrame\n* 可以输入给DataFrame构造器的数据\n\n|             类型             |                                        说明                                        |\n|:----------------------------:|:----------------------------------------------------------------------------------:|\n|         二维ndarray          |                           数据矩阵，还可以传入行标和列标                           |\n| 由数组、列标或元组组成的字典 |               每个序列会变成DataFrame的一列，所有序列的长度必须相同                |\n|    NumPy的结构化/记录数组    |                              类似于“由数组组成的字典”                              |\n|      由Series组成的字典      | 每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引 |\n|       由字典组成的字典       |   各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样   |\n|      字典或Series的列表      |    各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标    |\n|       另一个DataFrame        |                该DataFrame的索引将会被沿用，除非显式指定了其他索引                 |\n|      NumPy的MaskedArray      |        类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值         |\n\n**DataFrame** 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。\n构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：\n```\nIn [30]: data ={'state':['a','b','c','d'],\n    ...: 'year':[2000,2001,2002,2003],\n    ...: 'pop':[1,2,3,4]}\n\nIn [31]: frame = DataFrame(data)\n\nIn [32]: frame\nOut[32]:\n   pop state  year\n0    1     a  2000\n1    2     b  2001\n2    3     c  2002\n3    4     d  2003\n\nIn [34]: DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\nOut[34]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [35]: frame.columns\nOut[35]: Index(['pop', 'state', 'year'], dtype='object')\n```\n可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其`name`属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:\n```\nIn [40]: frame.state\nOut[40]:\n0    a\n1    b\n2    c\n3    d\nName: state, dtype: object\n\nIn [41]: frame['year']\nOut[41]:\n0    2000\n1    2001\n2    2002\n3    2003\nName: year, dtype: int64\n\nIn [42]: frame.ix[1]\nOut[42]:\npop         2\nstate       b\nyear     2001\nName: 1, dtype: object\n```\n列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字`del`可以删除列:\n```\nIn [49]: frame2=DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\n\nIn [50]: frame2\nOut[50]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [51]: frame2['debt']=np.arange(4.)\n\nIn [52]: frame2\nOut[52]:\n    year  pop state  debt\ni1  2000    1     a   0.0\ni2  2001    2     b   1.0\ni3  2002    3     c   2.0\ni4  2003    4     d   3.0\n\nIn [53]: frame2=DataFrame(data,columns=['year','pop','state','debt'],index=['i1','i2','i3','i4'])\n\nIn [54]: frame2\nOut[54]:\n    year  pop state debt\ni1  2000    1     a  NaN\ni2  2001    2     b  NaN\ni3  2002    3     c  NaN\ni4  2003    4     d  NaN\n\nIn [55]: val = Series([-1,-2,-3],index=['i1','i3','i4'])\n\nIn [56]: frame2['debt']=val\n\nIn [57]: frame2\nOut[57]:\n    year  pop state  debt\ni1  2000    1     a  -1.0\ni2  2001    2     b   NaN\ni3  2002    3     c  -2.0\ni4  2003    4     d  -3.0\n\nIn [58]: frame2['big']= frame2['pop']>=3\n\nIn [59]: frame2\nOut[59]:\n    year  pop state  debt    big\ni1  2000    1     a  -1.0  False\ni2  2001    2     b   NaN  False\ni3  2002    3     c  -2.0   True\ni4  2003    4     d  -3.0   True\n\nIn [60]: del frame2['big']\n\nIn [61]: frame2\nOut[61]:\n    year  pop state  debt\ni1  2000    1     a  -1.0\ni2  2001    2     b   NaN\ni3  2002    3     c  -2.0\ni4  2003    4     d  -3.0\n```\n嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过`T`进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:\n```\nIn [63]: pop = {'out1':{2002:1.1,2001:1.2},\n    ...: 'out2':{2001:1.3,2004:1.4}}\n\nIn [64]: frame3 = DataFrame(pop)\n\nIn [65]: frame3\nOut[65]:\n      out1  out2\n2001   1.2   1.3\n2002   1.1   NaN\n2004   NaN   1.4\n\nIn [66]: frame3.T\nOut[66]:\n      2001  2002  2004\nout1   1.2   1.1   NaN\nout2   1.3   NaN   1.4\n\nIn [67]: DataFrame(pop,index=[2002,2001,2004])\nOut[67]:\n      out1  out2\n2002   1.1   NaN\n2001   1.2   1.3\n2004   NaN   1.4\n\nIn [68]: sData = {'out1':frame3['out1'][:-1],\n    ...: 'out2':frame3['out2'][:-1]}\n\nIn [69]: DataFrame(sData)\nOut[69]:\n      out1  out2\n2001   1.2   1.3\n2002   1.1   NaN\n```\n设置了DataFrame的`index`和`columns`的`name`属性，这些信息将会被显示出来，`values`属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：\n```\nIn [70]: frame3.index.name='year'\n\nIn [71]: frame3.columns.name='state'\n\nIn [72]: frame3\nOut[72]:\nstate  out1  out2\nyear\n2001    1.2   1.3\n2002    1.1   NaN\n2004    NaN   1.4\n\nIn [73]: frame3.values\nOut[73]:\narray([[ 1.2,  1.3],\n       [ 1.1,  nan],\n       [ nan,  1.4]])\n\nIn [74]: frame2.values\nOut[74]:\narray([[2000, 1, 'a', -1.0],\n       [2001, 2, 'b', nan],\n       [2002, 3, 'c', -2.0],\n       [2003, 4, 'd', -3.0]], dtype=object)\n```\n### 索引对象\npandas的索引对象负责管理轴标签和其他元数据。\n* pandas中主要的Index对象\n\n|      类       |                                说明                                |\n|:-------------:|:------------------------------------------------------------------:|\n|     Index     |  最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组  |\n|  Int64Index   |                        针对整数的特殊Index                         |\n|  MultiIndex   | \"层次化\"索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组 |\n| DatetimeIndex |           存储纳秒级时间戳(用NumPy的datetime64类型表示)            |\n|  PeriodIndex  |                针对Period数据(时间间隔)的特殊Index                 |\n\n* Index的方法和属性\n\n|     方法     |                        说明                        |\n|:------------:|:--------------------------------------------------:|\n|    append    |       连接另一个Index对象，产生一个新的Index       |\n|     diff     |             计算差集，并得到一个Index              |\n| intersection |                      计算交集                      |\n|    union     |                      计算并集                      |\n|     isin     | 计算一个指示各值是否都包含在参数集合中的布尔型数组 |\n|    delete    |         删除索引i处的元素，并得到新的Index         |\n|     drop     |           删除传入的值，并得到新的Index            |\n|    insert    |        将元素插入到索引i处，并得到新的Index        |\n| is_monotonic |      当各元素均大于等于前一个元素时，返回True      |\n|  is_unique   |           当Index没有重复值时，返回True            |\n|    unique    |              计算Index中唯一值的数组               |\n\n构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 **不可修改的**，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:\n```\nIn [76]: obj = Series(range(3),index=['a','b','c'])\n\nIn [77]: index =obj.index\n\nIn [78]: index\nOut[78]: Index(['a', 'b', 'c'], dtype='object')\n\nIn [79]: index[:-1]\nOut[79]: Index(['a', 'b'], dtype='object')\n\nIn [80]: inde=pd.Index(np.arange(3))\n\nIn [81]: obj2=Series(['a','b','c'],index=inde)\n\nIn [82]: obj2.index is inde\nOut[82]: True\n\nIn [83]: frame3\nOut[83]:\nstate  out1  out2\nyear\n2001    1.2   1.3\n2002    1.1   NaN\n2004    NaN   1.4\n\nIn [84]: 'out1' in frame3.columns\nOut[84]: True\n\nIn [85]: 2005 in frame3.index\nOut[85]: False\n```\n\n[^1]:使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包\n","slug":"pandas入门-一","published":1,"updated":"2018-03-19T07:34:31.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw550018twn968j4bwq5","content":"<h2 id=\"Series\"><a href=\"#Series\" class=\"headerlink\" title=\"Series\"></a>Series</h2><p><strong>Series</strong><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过<code>index</code>参数指定索引来代替自动生成的索引:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: ser1 = Series([1,2,2,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: ser1</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">0    1</span><br><span class=\"line\">1    2</span><br><span class=\"line\">2    2</span><br><span class=\"line\">3    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: ser2 = Series([1,2,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: ser2</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: ser2[&apos;a&apos;]</span><br><span class=\"line\">Out[8]: 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: ser2[[&apos;a&apos;,&apos;b&apos;]]</span><br><span class=\"line\">Out[9]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: ser2*2</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">a    2</span><br><span class=\"line\">b    4</span><br><span class=\"line\">c    4</span><br><span class=\"line\">d    6</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: ser2[ser2&gt;=2]</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: &apos;a&apos; in ser2</span><br><span class=\"line\">Out[12]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: &apos;g&apos; in ser2</span><br><span class=\"line\">Out[13]: False</span><br></pre></td></tr></table></figure></p>\n<p>可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用<code>NA</code>表示缺失数据,pandas的<code>isnull</code>和<code>notnull</code>函数可用于检测缺失数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [14]: dic = &#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: dics = Series(dic)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: dics</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: states = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: dicstates = Series(dic,index=states)</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: dicstates</span><br><span class=\"line\">Out[19]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    NaN</span><br></pre></td></tr></table></figure></p>\n<p><strong>Series在算数运算中会自动对齐不同索引的数据</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: dics</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: dicstates</span><br><span class=\"line\">Out[21]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: dics+dicstates</span><br><span class=\"line\">Out[22]:</span><br><span class=\"line\">a    2.0</span><br><span class=\"line\">b    4.0</span><br><span class=\"line\">c    6.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>Series本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: dics.name=&apos;dics&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: dics.index.name=&apos;letter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: dics</span><br><span class=\"line\">Out[25]:</span><br><span class=\"line\">letter</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">Name: dics, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: dics.index=[&apos;z&apos;,&apos;x&apos;,&apos;y&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: dics</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">z    1</span><br><span class=\"line\">x    2</span><br><span class=\"line\">y    3</span><br><span class=\"line\">Name: dics, dtype: int64</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"DataFrame\"><a href=\"#DataFrame\" class=\"headerlink\" title=\"DataFrame\"></a>DataFrame</h2><h3 id=\"构造DataFrame\"><a href=\"#构造DataFrame\" class=\"headerlink\" title=\"构造DataFrame\"></a>构造DataFrame</h3><ul>\n<li>可以输入给DataFrame构造器的数据</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">二维ndarray</td>\n<td style=\"text-align:center\">数据矩阵，还可以传入行标和列标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由数组、列标或元组组成的字典</td>\n<td style=\"text-align:center\">每个序列会变成DataFrame的一列，所有序列的长度必须相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NumPy的结构化/记录数组</td>\n<td style=\"text-align:center\">类似于“由数组组成的字典”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由Series组成的字典</td>\n<td style=\"text-align:center\">每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由字典组成的字典</td>\n<td style=\"text-align:center\">各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字典或Series的列表</td>\n<td style=\"text-align:center\">各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">另一个DataFrame</td>\n<td style=\"text-align:center\">该DataFrame的索引将会被沿用，除非显式指定了其他索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NumPy的MaskedArray</td>\n<td style=\"text-align:center\">类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>DataFrame</strong> 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。<br>构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [30]: data =&#123;&apos;state&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class=\"line\">    ...: &apos;year&apos;:[2000,2001,2002,2003],</span><br><span class=\"line\">    ...: &apos;pop&apos;:[1,2,3,4]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [31]: frame = DataFrame(data)</span><br><span class=\"line\"></span><br><span class=\"line\">In [32]: frame</span><br><span class=\"line\">Out[32]:</span><br><span class=\"line\">   pop state  year</span><br><span class=\"line\">0    1     a  2000</span><br><span class=\"line\">1    2     b  2001</span><br><span class=\"line\">2    3     c  2002</span><br><span class=\"line\">3    4     d  2003</span><br><span class=\"line\"></span><br><span class=\"line\">In [34]: DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\">Out[34]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [35]: frame.columns</span><br><span class=\"line\">Out[35]: Index([&apos;pop&apos;, &apos;state&apos;, &apos;year&apos;], dtype=&apos;object&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其<code>name</code>属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: frame.state</span><br><span class=\"line\">Out[40]:</span><br><span class=\"line\">0    a</span><br><span class=\"line\">1    b</span><br><span class=\"line\">2    c</span><br><span class=\"line\">3    d</span><br><span class=\"line\">Name: state, dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: frame[&apos;year&apos;]</span><br><span class=\"line\">Out[41]:</span><br><span class=\"line\">0    2000</span><br><span class=\"line\">1    2001</span><br><span class=\"line\">2    2002</span><br><span class=\"line\">3    2003</span><br><span class=\"line\">Name: year, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: frame.ix[1]</span><br><span class=\"line\">Out[42]:</span><br><span class=\"line\">pop         2</span><br><span class=\"line\">state       b</span><br><span class=\"line\">year     2001</span><br><span class=\"line\">Name: 1, dtype: object</span><br></pre></td></tr></table></figure></p>\n<p>列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字<code>del</code>可以删除列:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [49]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: frame2</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [51]: frame2[&apos;debt&apos;]=np.arange(4.)</span><br><span class=\"line\"></span><br><span class=\"line\">In [52]: frame2</span><br><span class=\"line\">Out[52]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a   0.0</span><br><span class=\"line\">i2  2001    2     b   1.0</span><br><span class=\"line\">i3  2002    3     c   2.0</span><br><span class=\"line\">i4  2003    4     d   3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: frame2</span><br><span class=\"line\">Out[54]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [55]: val = Series([-1,-2,-3],index=[&apos;i1&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: frame2[&apos;debt&apos;]=val</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: frame2</span><br><span class=\"line\">Out[57]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a  -1.0</span><br><span class=\"line\">i2  2001    2     b   NaN</span><br><span class=\"line\">i3  2002    3     c  -2.0</span><br><span class=\"line\">i4  2003    4     d  -3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: frame2[&apos;big&apos;]= frame2[&apos;pop&apos;]&gt;=3</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: frame2</span><br><span class=\"line\">Out[59]:</span><br><span class=\"line\">    year  pop state  debt    big</span><br><span class=\"line\">i1  2000    1     a  -1.0  False</span><br><span class=\"line\">i2  2001    2     b   NaN  False</span><br><span class=\"line\">i3  2002    3     c  -2.0   True</span><br><span class=\"line\">i4  2003    4     d  -3.0   True</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: del frame2[&apos;big&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: frame2</span><br><span class=\"line\">Out[61]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a  -1.0</span><br><span class=\"line\">i2  2001    2     b   NaN</span><br><span class=\"line\">i3  2002    3     c  -2.0</span><br><span class=\"line\">i4  2003    4     d  -3.0</span><br></pre></td></tr></table></figure></p>\n<p>嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过<code>T</code>进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [63]: pop = &#123;&apos;out1&apos;:&#123;2002:1.1,2001:1.2&#125;,</span><br><span class=\"line\">    ...: &apos;out2&apos;:&#123;2001:1.3,2004:1.4&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: frame3 = DataFrame(pop)</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: frame3</span><br><span class=\"line\">Out[65]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2002   1.1   NaN</span><br><span class=\"line\">2004   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [66]: frame3.T</span><br><span class=\"line\">Out[66]:</span><br><span class=\"line\">      2001  2002  2004</span><br><span class=\"line\">out1   1.2   1.1   NaN</span><br><span class=\"line\">out2   1.3   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: DataFrame(pop,index=[2002,2001,2004])</span><br><span class=\"line\">Out[67]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2002   1.1   NaN</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2004   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: sData = &#123;&apos;out1&apos;:frame3[&apos;out1&apos;][:-1],</span><br><span class=\"line\">    ...: &apos;out2&apos;:frame3[&apos;out2&apos;][:-1]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: DataFrame(sData)</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2002   1.1   NaN</span><br></pre></td></tr></table></figure></p>\n<p>设置了DataFrame的<code>index</code>和<code>columns</code>的<code>name</code>属性，这些信息将会被显示出来，<code>values</code>属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [70]: frame3.index.name=&apos;year&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: frame3.columns.name=&apos;state&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: frame3</span><br><span class=\"line\">Out[72]:</span><br><span class=\"line\">state  out1  out2</span><br><span class=\"line\">year</span><br><span class=\"line\">2001    1.2   1.3</span><br><span class=\"line\">2002    1.1   NaN</span><br><span class=\"line\">2004    NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: frame3.values</span><br><span class=\"line\">Out[73]:</span><br><span class=\"line\">array([[ 1.2,  1.3],</span><br><span class=\"line\">       [ 1.1,  nan],</span><br><span class=\"line\">       [ nan,  1.4]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: frame2.values</span><br><span class=\"line\">Out[74]:</span><br><span class=\"line\">array([[2000, 1, &apos;a&apos;, -1.0],</span><br><span class=\"line\">       [2001, 2, &apos;b&apos;, nan],</span><br><span class=\"line\">       [2002, 3, &apos;c&apos;, -2.0],</span><br><span class=\"line\">       [2003, 4, &apos;d&apos;, -3.0]], dtype=object)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引对象\"><a href=\"#索引对象\" class=\"headerlink\" title=\"索引对象\"></a>索引对象</h3><p>pandas的索引对象负责管理轴标签和其他元数据。</p>\n<ul>\n<li>pandas中主要的Index对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Index</td>\n<td style=\"text-align:center\">最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int64Index</td>\n<td style=\"text-align:center\">针对整数的特殊Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MultiIndex</td>\n<td style=\"text-align:center\">“层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DatetimeIndex</td>\n<td style=\"text-align:center\">存储纳秒级时间戳(用NumPy的datetime64类型表示)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PeriodIndex</td>\n<td style=\"text-align:center\">针对Period数据(时间间隔)的特殊Index</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Index的方法和属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">append</td>\n<td style=\"text-align:center\">连接另一个Index对象，产生一个新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">diff</td>\n<td style=\"text-align:center\">计算差集，并得到一个Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersection</td>\n<td style=\"text-align:center\">计算交集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">union</td>\n<td style=\"text-align:center\">计算并集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isin</td>\n<td style=\"text-align:center\">计算一个指示各值是否都包含在参数集合中的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete</td>\n<td style=\"text-align:center\">删除索引i处的元素，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">drop</td>\n<td style=\"text-align:center\">删除传入的值，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert</td>\n<td style=\"text-align:center\">将元素插入到索引i处，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is_monotonic</td>\n<td style=\"text-align:center\">当各元素均大于等于前一个元素时，返回True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is_unique</td>\n<td style=\"text-align:center\">当Index没有重复值时，返回True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unique</td>\n<td style=\"text-align:center\">计算Index中唯一值的数组</td>\n</tr>\n</tbody>\n</table>\n<p>构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 <strong>不可修改的</strong>，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [76]: obj = Series(range(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: index =obj.index</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: index</span><br><span class=\"line\">Out[78]: Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], dtype=&apos;object&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: index[:-1]</span><br><span class=\"line\">Out[79]: Index([&apos;a&apos;, &apos;b&apos;], dtype=&apos;object&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: inde=pd.Index(np.arange(3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: obj2=Series([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],index=inde)</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: obj2.index is inde</span><br><span class=\"line\">Out[82]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: frame3</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">state  out1  out2</span><br><span class=\"line\">year</span><br><span class=\"line\">2001    1.2   1.3</span><br><span class=\"line\">2002    1.1   NaN</span><br><span class=\"line\">2004    NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: &apos;out1&apos; in frame3.columns</span><br><span class=\"line\">Out[84]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: 2005 in frame3.index</span><br><span class=\"line\">Out[85]: False</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Series\"><a href=\"#Series\" class=\"headerlink\" title=\"Series\"></a>Series</h2><p><strong>Series</strong><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> 是一种类似于一维数组的对象，它由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，会自动创建一个0到n-1的整数型索引。可以通过<code>index</code>参数指定索引来代替自动生成的索引:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: ser1 = Series([1,2,2,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: ser1</span><br><span class=\"line\">Out[5]:</span><br><span class=\"line\">0    1</span><br><span class=\"line\">1    2</span><br><span class=\"line\">2    2</span><br><span class=\"line\">3    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: ser2 = Series([1,2,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: ser2</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>可以通过索引的方式选取Series中的单个或一组值；数组运算(布尔型数组进行过滤，标量乘法，应用数学函数)都会保留索引和值之间的连接；Series可以看成是一个定长的有序字典，可以用在原本需要字典参数的函数中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [8]: ser2[&apos;a&apos;]</span><br><span class=\"line\">Out[8]: 1</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: ser2[[&apos;a&apos;,&apos;b&apos;]]</span><br><span class=\"line\">Out[9]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: ser2*2</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">a    2</span><br><span class=\"line\">b    4</span><br><span class=\"line\">c    4</span><br><span class=\"line\">d    6</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: ser2[ser2&gt;=2]</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: &apos;a&apos; in ser2</span><br><span class=\"line\">Out[12]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: &apos;g&apos; in ser2</span><br><span class=\"line\">Out[13]: False</span><br></pre></td></tr></table></figure></p>\n<p>可以直接通过字典来创建Series，则Series中的索引就是原字典的键(有序列表)，如果键对应的值找不到，将会是使用<code>NA</code>表示缺失数据,pandas的<code>isnull</code>和<code>notnull</code>函数可用于检测缺失数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [14]: dic = &#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: dics = Series(dic)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: dics</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: states = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: dicstates = Series(dic,index=states)</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: dicstates</span><br><span class=\"line\">Out[19]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    NaN</span><br></pre></td></tr></table></figure></p>\n<p><strong>Series在算数运算中会自动对齐不同索引的数据</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [20]: dics</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: dicstates</span><br><span class=\"line\">Out[21]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: dics+dicstates</span><br><span class=\"line\">Out[22]:</span><br><span class=\"line\">a    2.0</span><br><span class=\"line\">b    4.0</span><br><span class=\"line\">c    6.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>Series本身及其索引有一个name属性，同时Series的索引可以通过赋值的方式就地修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [23]: dics.name=&apos;dics&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: dics.index.name=&apos;letter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [25]: dics</span><br><span class=\"line\">Out[25]:</span><br><span class=\"line\">letter</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">Name: dics, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: dics.index=[&apos;z&apos;,&apos;x&apos;,&apos;y&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: dics</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">z    1</span><br><span class=\"line\">x    2</span><br><span class=\"line\">y    3</span><br><span class=\"line\">Name: dics, dtype: int64</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"DataFrame\"><a href=\"#DataFrame\" class=\"headerlink\" title=\"DataFrame\"></a>DataFrame</h2><h3 id=\"构造DataFrame\"><a href=\"#构造DataFrame\" class=\"headerlink\" title=\"构造DataFrame\"></a>构造DataFrame</h3><ul>\n<li>可以输入给DataFrame构造器的数据</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">二维ndarray</td>\n<td style=\"text-align:center\">数据矩阵，还可以传入行标和列标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由数组、列标或元组组成的字典</td>\n<td style=\"text-align:center\">每个序列会变成DataFrame的一列，所有序列的长度必须相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NumPy的结构化/记录数组</td>\n<td style=\"text-align:center\">类似于“由数组组成的字典”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由Series组成的字典</td>\n<td style=\"text-align:center\">每个Series会成为一列。如果没有显示指定索引，则个Series的索引会被合并成结果的行索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">由字典组成的字典</td>\n<td style=\"text-align:center\">各内层字典会成为一列。键会被合并成结果的行索引，跟“由Series组成的字典”情况一样</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字典或Series的列表</td>\n<td style=\"text-align:center\">各项将会成为DataFrame的一行。字典键或Series索引的并集将会成为DataFrame的列标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">另一个DataFrame</td>\n<td style=\"text-align:center\">该DataFrame的索引将会被沿用，除非显式指定了其他索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NumPy的MaskedArray</td>\n<td style=\"text-align:center\">类似于“二维ndarray”的情况，只是掩码值在结果DataFrame会编程NA/缺失值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>DataFrame</strong> 是一个表格型的数据结构。它含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔值等)。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典(共同用一个索引)，DataFrame面向行和面向列的操作基本上是平衡的。<br>构建DataFrame可以通过直接传入一个由等长列表或NumPy数组组成的字典，和Series一样DataFrame也会自动加上索引且全部列会被有序排列，如果指定了列索引，则DataFrame的列会按照指定顺序进行排列。如果传入的列在数据中找不到，会产生NA值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [30]: data =&#123;&apos;state&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class=\"line\">    ...: &apos;year&apos;:[2000,2001,2002,2003],</span><br><span class=\"line\">    ...: &apos;pop&apos;:[1,2,3,4]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [31]: frame = DataFrame(data)</span><br><span class=\"line\"></span><br><span class=\"line\">In [32]: frame</span><br><span class=\"line\">Out[32]:</span><br><span class=\"line\">   pop state  year</span><br><span class=\"line\">0    1     a  2000</span><br><span class=\"line\">1    2     b  2001</span><br><span class=\"line\">2    3     c  2002</span><br><span class=\"line\">3    4     d  2003</span><br><span class=\"line\"></span><br><span class=\"line\">In [34]: DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\">Out[34]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [35]: frame.columns</span><br><span class=\"line\">Out[35]: Index([&apos;pop&apos;, &apos;state&apos;, &apos;year&apos;], dtype=&apos;object&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>可以通过字典标记的方式或属性的方式将DataFrame的列获取为一个Series，返回的Series拥有原DataFrame相同的索引，且其<code>name</code>属性已经被相应地设置好了。行也可以通过位置或名称的方式进行获取，比如用索引字段ix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: frame.state</span><br><span class=\"line\">Out[40]:</span><br><span class=\"line\">0    a</span><br><span class=\"line\">1    b</span><br><span class=\"line\">2    c</span><br><span class=\"line\">3    d</span><br><span class=\"line\">Name: state, dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: frame[&apos;year&apos;]</span><br><span class=\"line\">Out[41]:</span><br><span class=\"line\">0    2000</span><br><span class=\"line\">1    2001</span><br><span class=\"line\">2    2002</span><br><span class=\"line\">3    2003</span><br><span class=\"line\">Name: year, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: frame.ix[1]</span><br><span class=\"line\">Out[42]:</span><br><span class=\"line\">pop         2</span><br><span class=\"line\">state       b</span><br><span class=\"line\">year     2001</span><br><span class=\"line\">Name: 1, dtype: object</span><br></pre></td></tr></table></figure></p>\n<p>列可以通过赋值的方式进行修改，将列表或数组给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的事一个Series就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值，为不存在的列赋值会创建出一个新列，关键字<code>del</code>可以删除列:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [49]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: frame2</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [51]: frame2[&apos;debt&apos;]=np.arange(4.)</span><br><span class=\"line\"></span><br><span class=\"line\">In [52]: frame2</span><br><span class=\"line\">Out[52]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a   0.0</span><br><span class=\"line\">i2  2001    2     b   1.0</span><br><span class=\"line\">i3  2002    3     c   2.0</span><br><span class=\"line\">i4  2003    4     d   3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [53]: frame2=DataFrame(data,columns=[&apos;year&apos;,&apos;pop&apos;,&apos;state&apos;,&apos;debt&apos;],index=[&apos;i1&apos;,&apos;i2&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [54]: frame2</span><br><span class=\"line\">Out[54]:</span><br><span class=\"line\">    year  pop state debt</span><br><span class=\"line\">i1  2000    1     a  NaN</span><br><span class=\"line\">i2  2001    2     b  NaN</span><br><span class=\"line\">i3  2002    3     c  NaN</span><br><span class=\"line\">i4  2003    4     d  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [55]: val = Series([-1,-2,-3],index=[&apos;i1&apos;,&apos;i3&apos;,&apos;i4&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: frame2[&apos;debt&apos;]=val</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: frame2</span><br><span class=\"line\">Out[57]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a  -1.0</span><br><span class=\"line\">i2  2001    2     b   NaN</span><br><span class=\"line\">i3  2002    3     c  -2.0</span><br><span class=\"line\">i4  2003    4     d  -3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: frame2[&apos;big&apos;]= frame2[&apos;pop&apos;]&gt;=3</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: frame2</span><br><span class=\"line\">Out[59]:</span><br><span class=\"line\">    year  pop state  debt    big</span><br><span class=\"line\">i1  2000    1     a  -1.0  False</span><br><span class=\"line\">i2  2001    2     b   NaN  False</span><br><span class=\"line\">i3  2002    3     c  -2.0   True</span><br><span class=\"line\">i4  2003    4     d  -3.0   True</span><br><span class=\"line\"></span><br><span class=\"line\">In [60]: del frame2[&apos;big&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: frame2</span><br><span class=\"line\">Out[61]:</span><br><span class=\"line\">    year  pop state  debt</span><br><span class=\"line\">i1  2000    1     a  -1.0</span><br><span class=\"line\">i2  2001    2     b   NaN</span><br><span class=\"line\">i3  2002    3     c  -2.0</span><br><span class=\"line\">i4  2003    4     d  -3.0</span><br></pre></td></tr></table></figure></p>\n<p>嵌套字典被传给DataFrame后会被解释为：外层字典的键作为列，内层字典键作为行索引，可以通过<code>T</code>进行转置。内层字典的键会被合并，排序以形成最终的索引。如果现实指定了索引，就不会如此。同理，Series组成的字典也是一样的用法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [63]: pop = &#123;&apos;out1&apos;:&#123;2002:1.1,2001:1.2&#125;,</span><br><span class=\"line\">    ...: &apos;out2&apos;:&#123;2001:1.3,2004:1.4&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: frame3 = DataFrame(pop)</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: frame3</span><br><span class=\"line\">Out[65]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2002   1.1   NaN</span><br><span class=\"line\">2004   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [66]: frame3.T</span><br><span class=\"line\">Out[66]:</span><br><span class=\"line\">      2001  2002  2004</span><br><span class=\"line\">out1   1.2   1.1   NaN</span><br><span class=\"line\">out2   1.3   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: DataFrame(pop,index=[2002,2001,2004])</span><br><span class=\"line\">Out[67]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2002   1.1   NaN</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2004   NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: sData = &#123;&apos;out1&apos;:frame3[&apos;out1&apos;][:-1],</span><br><span class=\"line\">    ...: &apos;out2&apos;:frame3[&apos;out2&apos;][:-1]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: DataFrame(sData)</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">      out1  out2</span><br><span class=\"line\">2001   1.2   1.3</span><br><span class=\"line\">2002   1.1   NaN</span><br></pre></td></tr></table></figure></p>\n<p>设置了DataFrame的<code>index</code>和<code>columns</code>的<code>name</code>属性，这些信息将会被显示出来，<code>values</code>属性会以二维ndarray的形式返回DataFrame中的数据，如果DataFrame各列的数据类型不同，则值数组的数据类型就会选用能兼容所有列的数据类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [70]: frame3.index.name=&apos;year&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [71]: frame3.columns.name=&apos;state&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">In [72]: frame3</span><br><span class=\"line\">Out[72]:</span><br><span class=\"line\">state  out1  out2</span><br><span class=\"line\">year</span><br><span class=\"line\">2001    1.2   1.3</span><br><span class=\"line\">2002    1.1   NaN</span><br><span class=\"line\">2004    NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [73]: frame3.values</span><br><span class=\"line\">Out[73]:</span><br><span class=\"line\">array([[ 1.2,  1.3],</span><br><span class=\"line\">       [ 1.1,  nan],</span><br><span class=\"line\">       [ nan,  1.4]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [74]: frame2.values</span><br><span class=\"line\">Out[74]:</span><br><span class=\"line\">array([[2000, 1, &apos;a&apos;, -1.0],</span><br><span class=\"line\">       [2001, 2, &apos;b&apos;, nan],</span><br><span class=\"line\">       [2002, 3, &apos;c&apos;, -2.0],</span><br><span class=\"line\">       [2003, 4, &apos;d&apos;, -3.0]], dtype=object)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引对象\"><a href=\"#索引对象\" class=\"headerlink\" title=\"索引对象\"></a>索引对象</h3><p>pandas的索引对象负责管理轴标签和其他元数据。</p>\n<ul>\n<li>pandas中主要的Index对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Index</td>\n<td style=\"text-align:center\">最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int64Index</td>\n<td style=\"text-align:center\">针对整数的特殊Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MultiIndex</td>\n<td style=\"text-align:center\">“层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DatetimeIndex</td>\n<td style=\"text-align:center\">存储纳秒级时间戳(用NumPy的datetime64类型表示)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PeriodIndex</td>\n<td style=\"text-align:center\">针对Period数据(时间间隔)的特殊Index</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Index的方法和属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">append</td>\n<td style=\"text-align:center\">连接另一个Index对象，产生一个新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">diff</td>\n<td style=\"text-align:center\">计算差集，并得到一个Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersection</td>\n<td style=\"text-align:center\">计算交集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">union</td>\n<td style=\"text-align:center\">计算并集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isin</td>\n<td style=\"text-align:center\">计算一个指示各值是否都包含在参数集合中的布尔型数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete</td>\n<td style=\"text-align:center\">删除索引i处的元素，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">drop</td>\n<td style=\"text-align:center\">删除传入的值，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert</td>\n<td style=\"text-align:center\">将元素插入到索引i处，并得到新的Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is_monotonic</td>\n<td style=\"text-align:center\">当各元素均大于等于前一个元素时，返回True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is_unique</td>\n<td style=\"text-align:center\">当Index没有重复值时，返回True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unique</td>\n<td style=\"text-align:center\">计算Index中唯一值的数组</td>\n</tr>\n</tbody>\n</table>\n<p>构建Series或DataFrame时，所得到的任何数组或其他序列的标签都会被转换成一个Index，Index对象是 <strong>不可修改的</strong>，这使得Index对象在多个数据结构之间安全共享。除了长得像数组，Index的功能也类似与一个固定大小的集合，每个索引都有一些方法和属性，它们用于设置逻辑并回答有关索引所包含数据的常见问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [76]: obj = Series(range(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: index =obj.index</span><br><span class=\"line\"></span><br><span class=\"line\">In [78]: index</span><br><span class=\"line\">Out[78]: Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], dtype=&apos;object&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: index[:-1]</span><br><span class=\"line\">Out[79]: Index([&apos;a&apos;, &apos;b&apos;], dtype=&apos;object&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: inde=pd.Index(np.arange(3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: obj2=Series([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],index=inde)</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: obj2.index is inde</span><br><span class=\"line\">Out[82]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: frame3</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">state  out1  out2</span><br><span class=\"line\">year</span><br><span class=\"line\">2001    1.2   1.3</span><br><span class=\"line\">2002    1.1   NaN</span><br><span class=\"line\">2004    NaN   1.4</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: &apos;out1&apos; in frame3.columns</span><br><span class=\"line\">Out[84]: True</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: 2005 in frame3.index</span><br><span class=\"line\">Out[85]: False</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">使用 from pandas import Series, DataFrame和 import pandas as pd引入相关的包</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"pandas入门(三)","date":"2018-03-20T01:14:48.000Z","copyright":true,"description":"更高级的数学及数据处理方法","_content":"## 汇总和计算描述统计\npandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。\n* 约简方法的选项\n|  选项  |                          说明                           |\n|:------:|:-------------------------------------------------------:|\n|  axis  |            约简的轴。DataFrame的行用0，列用1            |\n| skipna |                排除缺失值，默认值为True                 |\n| level  | 如果轴是层次化索引的(即MultiIndex)，则根据level分组约简 |\n\n* 描述和汇总统计\n\n|      方法      |                     说明                     |\n|:--------------:|:--------------------------------------------:|\n|     count      |                 非NA值的数量                 |\n|    describe    |    针对Series或各DataFrame列计算汇总统计     |\n|    min、max    |              计算最小值和最大值              |\n| argmin、argmax | 计算能够获取到最小值和最大值的索引位置(整数) |\n| idxmin、idmax  |     计算能够获取到最小值和最大值的索引值     |\n|    quantile    |            计算样本的分位数(0到1)            |\n|      sum       |                   值的总和                   |\n|      mean      |                  值的平均值                  |\n|     median     |                指的算术中位数                |\n|      mad       |          根据平均值计算平均绝对离差          |\n|      var       |                 样本值的方差                 |\n|      std       |                样本值的标准差                |\n|      skew      |             样本值的偏度(三阶矩)             |\n|      kurt      |             样本值的峰度(四阶矩)             |\n|     cumsum     |                样本值的累计和                |\n| cummin、cummax |        样本值的累计最小值和累计最大值        |\n|    cumprod     |                样本值的累计积                |\n|      diff      |        计算一阶差分(对时间序列有用)_         |\n|   pct_change   | 计算百分数变化                                             |\n```\nIn [33]: df = DataFrame([[1,np.nan],[2,3],[np.nan,np.nan],[4,5]],\n    ...:                 index=list('abcd'),\n    ...:                 columns=['one','two'])\n    ...:\n\nIn [34]: df\nOut[34]:\n   one  two\na  1.0  NaN\nb  2.0  3.0\nc  NaN  NaN\nd  4.0  5.0\n\nIn [35]: df.sum()\nOut[35]:\none    7.0\ntwo    8.0\ndtype: float64\n\nIn [36]: df.sum(axis=1)\nOut[36]:\na    1.0\nb    5.0\nc    NaN\nd    9.0\ndtype: float64\n\nIn [37]: df.mean(axis=1,skipna=False)\nOut[37]:\na    NaN\nb    2.5\nc    NaN\nd    4.5\ndtype: float64\n\nIn [38]: df.idxmax()\nOut[38]:\none    d\ntwo    d\ndtype: object\n\nIn [39]: df.cumsum()\nOut[39]:\n   one  two\na  1.0  NaN\nb  3.0  3.0\nc  NaN  NaN\nd  7.0  8.0\n```\n`describe`用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：\n```\nIn [40]: df.describe()\nOut[40]:\n            one       two\ncount  3.000000  2.000000\nmean   2.333333  4.000000\nstd    1.527525  1.414214\nmin    1.000000  3.000000\n25%    1.500000  3.500000\n50%    2.000000  4.000000\n75%    3.000000  4.500000\nmax    4.000000  5.000000\n\nIn [41]: obj =Series(list('aabc')*4)\n\nIn [42]: obj.describe()\nOut[42]:\ncount     16\nunique     3\ntop        a\nfreq       8\ndtype: object\n```\n\n### 相关系数和协方差\nSeries的`corr`方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用`cov`计算协方差：\n```\nIn [46]: obj = Series([1,2,3,4],index=list('abcd'))\n\nIn [47]: obj2 = Series([1,np.nan,5,6,7],index=list('acdse'))\n\nIn [48]: obj.corr(obj2)\nOut[48]: 1.0\n\nIn [49]: obj.cov(obj2)\nOut[49]: 6.0\n```\nDataFrame的`corr`和`cov`方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：\n```\nIn [60]: df = DataFrame(np.arange(16).reshape(4,4),\n    ...:                 index=list('abcd'),\n    ...:                 columns=['col1','col2','col3','col4'])\n    ...:\n\nIn [61]: df2 = DataFrame(np.arange(25).reshape(5,5),\n    ...:                 index=list('abcde'),\n    ...:                 columns=['col1','col2','col3','col4','col5'])\n    ...:\n    ...:\n\nIn [62]: df\nOut[62]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [63]: df2\nOut[63]:\n   col1  col2  col3  col4  col5\na     0     1     2     3     4\nb     5     6     7     8     9\nc    10    11    12    13    14\nd    15    16    17    18    19\ne    20    21    22    23    24\n\nIn [64]: df.corr()\nOut[64]:\n      col1  col2  col3  col4\ncol1   1.0   1.0   1.0   1.0\ncol2   1.0   1.0   1.0   1.0\ncol3   1.0   1.0   1.0   1.0\ncol4   1.0   1.0   1.0   1.0\n\nIn [65]: df.cov()\nOut[65]:\n           col1       col2       col3       col4\ncol1  26.666667  26.666667  26.666667  26.666667\ncol2  26.666667  26.666667  26.666667  26.666667\ncol3  26.666667  26.666667  26.666667  26.666667\ncol4  26.666667  26.666667  26.666667  26.666667\n```\n利用DataFrame的`corrwith`方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：\n```\nIn [66]: df.corrwith(df2)\nOut[66]:\ncol1    1.0\ncol2    1.0\ncol3    1.0\ncol4    1.0\ncol5    NaN\ndtype: float64\n\nIn [69]: df.corrwith(df2.col1)\nOut[69]:\ncol1    1.0\ncol2    1.0\ncol3    1.0\ncol4    1.0\ndtype: float64\n```\n\n###唯一值、值计数以及成员资格\n\n* 唯一值、值计数、成员资格方法\n|     方法     |                             说明                             |\n|:------------:|:------------------------------------------------------------:|\n|     isin     | 计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组 |\n|    unique    |           计算Series中的唯一值数组，按发现顺序返回           |\n| value_counts | 返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列 |\n\n`unique`可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(`unique().sort()`)。`value_counts`用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。`value_counts`是一个顶级pandas方法，可以用于任何数组或序列；`isin`用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：\n```\nIn [78]: obj = Series(list('abbddc'))\n\nIn [79]: sor  = obj.unique()\n\nIn [80]: sor\nOut[80]: array(['a', 'b', 'd', 'c'], dtype=object)\n\nIn [81]: sor.sort()\n\nIn [82]: sor\nOut[82]: array(['a', 'b', 'c', 'd'], dtype=object)\n\nIn [83]: obj.value_counts()\nOut[83]:\nb    2\nd    2\nc    1\na    1\ndtype: int64\n\nIn [84]: pd.value_counts(obj.values, sort=False)\nOut[84]:\nd    2\na    1\nb    2\nc    1\ndtype: int64\n\nIn [85]: mask = obj.isin(['a','c'])\n\nIn [86]: mask\nOut[86]:\n0     True\n1    False\n2    False\n3    False\n4    False\n5     True\ndtype: bool\n\nIn [87]: obj[mask]\nOut[87]:\n0    a\n5    c\ndtype: object\n```\n可以将`pandas.value_counts`传递给DataFrame的`aplly`函数得到DataFrame中多个相关列的柱状图：\n```\nIn [89]: data = DataFrame({'Q1':[1,3,4,4,5],\n    ...:                    'Q2':[2,3,4,2,1],\n    ...:                     'Q3':[4,1,4,5,6]})\n    ...:\n\nIn [90]: data\nOut[90]:\n   Q1  Q2  Q3\n0   1   2   4\n1   3   3   1\n2   4   4   4\n3   4   2   5\n4   5   1   6\n\nIn [91]: result = data.apply(pd.value_counts).fillna(0)\n\nIn [92]: result\nOut[92]:\n    Q1   Q2   Q3\n1  1.0  1.0  1.0\n2  0.0  2.0  0.0\n3  1.0  1.0  0.0\n4  2.0  1.0  2.0\n5  1.0  0.0  1.0\n6  0.0  0.0  1.0\n```\n\n## 处理缺失数据\n缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理\n\n* NA处理方法\n|  方法   |                                        说明                                         |\n|:-------:|:-----------------------------------------------------------------------------------:|\n| dropna  |    根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度     |\n| fillna  |                   用指定值或插值方法(如ffill或bfill)填充缺失数据                    |\n| isnull  | 返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样 |\n| notnull |                                   isnull的否定式                                    |\n\n```\nIn [99]: obj = Series([1,np.nan,2,np.nan,4])\n\nIn [100]: obj.isnull()\nOut[100]:\n0    False\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n\nIn [101]: obj[0]=None\n\nIn [102]: obj.isnull()\nOut[102]:\n0     True\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n```\n\n### 滤除缺失数据\n对于Series，`dropna`返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：\n```\nIn [104]: obj\nOut[104]:\n0    NaN\n1    NaN\n2    2.0\n3    NaN\n4    4.0\ndtype: float64\n\nIn [105]: obj.dropna()\nOut[105]:\n2    2.0\n4    4.0\ndtype: float64\n\nIn [106]: obj[obj.notnull()]\nOut[106]:\n2    2.0\n4    4.0\ndtype: float64\n```\n对于DataFrame对象，`dropna`默认丢弃任何含有缺失值的行，传入`how='all'`将只丢弃全为NA的那些行，要丢弃列需要传入`axis=1`\n```\nIn [108]: data = DataFrame([[1,4,5],[1,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,2,3]])\n\nIn [109]: data\nOut[109]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  2.0  3.0\n\nIn [110]: data.dropna()\nOut[110]:\n     0    1    2\n0  1.0  4.0  5.0\n\nIn [111]: data.dropna(how='all')\nOut[111]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n3  NaN  2.0  3.0\n\nIn [112]: data[3]=np.nan\n\nIn [113]: data\nOut[113]:\n     0    1    2   3\n0  1.0  4.0  5.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  2.0  3.0 NaN\n\nIn [114]: data.dropna(axis=1,how='all')\nOut[114]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  2.0  3.0\n```\n`thresh`参数移除非NA个数小于设定值的行：\n```\nIn [123]: df = DataFrame(np.random.randn(7,3))\n\nIn [124]: df.loc[:3,1] = np.nan\n\nIn [125]: df.loc[:2,2] = np.nan\n\nIn [126]: df.dropna(thresh=2)\nOut[126]:\n          0         1         2\n3  0.620445       NaN -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n```\n\n### 填充缺失数据\n`fillna`方法是填充缺失数据的主要函数。通过一个常数调用`fillna`将会将缺失值替换为那个常数值；通过字典调用`fillna`可以实现对不同的列填充不同的值；`fillna`默认会返回新对象，通过设置`inplace=True`可以对现有对象进行就地修改，对`reindex`有效的插值方法也可用于`fillna`:\n* fillna函数的参数\n\n|  参数   |                           说明                            |\n|:-------:|:---------------------------------------------------------:|\n|  value  |             用于填充缺失值的标量值或字典对象              |\n| method  | 插值方式。如果函数调用时未指定其他参数的话，默认为“ffill” |\n|  axis   |                  待填充的轴，默认axis=0                   |\n| inplace |                修改调用者对象而不产生副本                 |\n|  limit  |        (对于前向和后向填充)可以连续填充的最大数量         |\n\n```\nIn [127]: df\nOut[127]:\n          0         1         2\n0 -0.293799       NaN       NaN\n1  0.728953       NaN       NaN\n2  0.573023       NaN       NaN\n3  0.620445       NaN -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [128]: df.fillna(0)\nOut[128]:\n          0         1         2\n0 -0.293799  0.000000  0.000000\n1  0.728953  0.000000  0.000000\n2  0.573023  0.000000  0.000000\n3  0.620445  0.000000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [129]: df.fillna({1:0.5, 3:-1})\nOut[129]:\n          0         1         2\n0 -0.293799  0.500000       NaN\n1  0.728953  0.500000       NaN\n2  0.573023  0.500000       NaN\n3  0.620445  0.500000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [130]: _  = df.fillna(0,inplace=True)\n\nIn [131]: df\nOut[131]:\n          0         1         2\n0 -0.293799  0.000000  0.000000\n1  0.728953  0.000000  0.000000\n2  0.573023  0.000000  0.000000\n3  0.620445  0.000000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [138]: df = DataFrame(np.random.randn(7,3))\n\nIn [139]: df.loc[3:,1] = np.nan\n\nIn [140]: df.loc[2:,2] = np.nan\n\nIn [141]: df\nOut[141]:\n          0         1         2\n0 -1.741073 -0.993316 -1.030055\n1  0.139948 -1.446029  0.797856\n2 -0.373251  0.505183       NaN\n3  1.179879       NaN       NaN\n4  0.764752       NaN       NaN\n5  1.405856       NaN       NaN\n6 -1.053222       NaN       NaN\n\nIn [142]: df.fillna(method='ffill')\nOut[142]:\n          0         1         2\n0 -1.741073 -0.993316 -1.030055\n1  0.139948 -1.446029  0.797856\n2 -0.373251  0.505183  0.797856\n3  1.179879  0.505183  0.797856\n4  0.764752  0.505183  0.797856\n5  1.405856  0.505183  0.797856\n6 -1.053222  0.505183  0.797856\n```\n","source":"_posts/pandas入门-三.md","raw":"---\ntitle: pandas入门(三)\ndate: 2018-03-20 09:14:48\ncategories: true\ncopyright: true\ntags:\n    - 数据分析\n    - pandas\ndescription: 更高级的数学及数据处理方法\n---\n## 汇总和计算描述统计\npandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。\n* 约简方法的选项\n|  选项  |                          说明                           |\n|:------:|:-------------------------------------------------------:|\n|  axis  |            约简的轴。DataFrame的行用0，列用1            |\n| skipna |                排除缺失值，默认值为True                 |\n| level  | 如果轴是层次化索引的(即MultiIndex)，则根据level分组约简 |\n\n* 描述和汇总统计\n\n|      方法      |                     说明                     |\n|:--------------:|:--------------------------------------------:|\n|     count      |                 非NA值的数量                 |\n|    describe    |    针对Series或各DataFrame列计算汇总统计     |\n|    min、max    |              计算最小值和最大值              |\n| argmin、argmax | 计算能够获取到最小值和最大值的索引位置(整数) |\n| idxmin、idmax  |     计算能够获取到最小值和最大值的索引值     |\n|    quantile    |            计算样本的分位数(0到1)            |\n|      sum       |                   值的总和                   |\n|      mean      |                  值的平均值                  |\n|     median     |                指的算术中位数                |\n|      mad       |          根据平均值计算平均绝对离差          |\n|      var       |                 样本值的方差                 |\n|      std       |                样本值的标准差                |\n|      skew      |             样本值的偏度(三阶矩)             |\n|      kurt      |             样本值的峰度(四阶矩)             |\n|     cumsum     |                样本值的累计和                |\n| cummin、cummax |        样本值的累计最小值和累计最大值        |\n|    cumprod     |                样本值的累计积                |\n|      diff      |        计算一阶差分(对时间序列有用)_         |\n|   pct_change   | 计算百分数变化                                             |\n```\nIn [33]: df = DataFrame([[1,np.nan],[2,3],[np.nan,np.nan],[4,5]],\n    ...:                 index=list('abcd'),\n    ...:                 columns=['one','two'])\n    ...:\n\nIn [34]: df\nOut[34]:\n   one  two\na  1.0  NaN\nb  2.0  3.0\nc  NaN  NaN\nd  4.0  5.0\n\nIn [35]: df.sum()\nOut[35]:\none    7.0\ntwo    8.0\ndtype: float64\n\nIn [36]: df.sum(axis=1)\nOut[36]:\na    1.0\nb    5.0\nc    NaN\nd    9.0\ndtype: float64\n\nIn [37]: df.mean(axis=1,skipna=False)\nOut[37]:\na    NaN\nb    2.5\nc    NaN\nd    4.5\ndtype: float64\n\nIn [38]: df.idxmax()\nOut[38]:\none    d\ntwo    d\ndtype: object\n\nIn [39]: df.cumsum()\nOut[39]:\n   one  two\na  1.0  NaN\nb  3.0  3.0\nc  NaN  NaN\nd  7.0  8.0\n```\n`describe`用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：\n```\nIn [40]: df.describe()\nOut[40]:\n            one       two\ncount  3.000000  2.000000\nmean   2.333333  4.000000\nstd    1.527525  1.414214\nmin    1.000000  3.000000\n25%    1.500000  3.500000\n50%    2.000000  4.000000\n75%    3.000000  4.500000\nmax    4.000000  5.000000\n\nIn [41]: obj =Series(list('aabc')*4)\n\nIn [42]: obj.describe()\nOut[42]:\ncount     16\nunique     3\ntop        a\nfreq       8\ndtype: object\n```\n\n### 相关系数和协方差\nSeries的`corr`方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用`cov`计算协方差：\n```\nIn [46]: obj = Series([1,2,3,4],index=list('abcd'))\n\nIn [47]: obj2 = Series([1,np.nan,5,6,7],index=list('acdse'))\n\nIn [48]: obj.corr(obj2)\nOut[48]: 1.0\n\nIn [49]: obj.cov(obj2)\nOut[49]: 6.0\n```\nDataFrame的`corr`和`cov`方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：\n```\nIn [60]: df = DataFrame(np.arange(16).reshape(4,4),\n    ...:                 index=list('abcd'),\n    ...:                 columns=['col1','col2','col3','col4'])\n    ...:\n\nIn [61]: df2 = DataFrame(np.arange(25).reshape(5,5),\n    ...:                 index=list('abcde'),\n    ...:                 columns=['col1','col2','col3','col4','col5'])\n    ...:\n    ...:\n\nIn [62]: df\nOut[62]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [63]: df2\nOut[63]:\n   col1  col2  col3  col4  col5\na     0     1     2     3     4\nb     5     6     7     8     9\nc    10    11    12    13    14\nd    15    16    17    18    19\ne    20    21    22    23    24\n\nIn [64]: df.corr()\nOut[64]:\n      col1  col2  col3  col4\ncol1   1.0   1.0   1.0   1.0\ncol2   1.0   1.0   1.0   1.0\ncol3   1.0   1.0   1.0   1.0\ncol4   1.0   1.0   1.0   1.0\n\nIn [65]: df.cov()\nOut[65]:\n           col1       col2       col3       col4\ncol1  26.666667  26.666667  26.666667  26.666667\ncol2  26.666667  26.666667  26.666667  26.666667\ncol3  26.666667  26.666667  26.666667  26.666667\ncol4  26.666667  26.666667  26.666667  26.666667\n```\n利用DataFrame的`corrwith`方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：\n```\nIn [66]: df.corrwith(df2)\nOut[66]:\ncol1    1.0\ncol2    1.0\ncol3    1.0\ncol4    1.0\ncol5    NaN\ndtype: float64\n\nIn [69]: df.corrwith(df2.col1)\nOut[69]:\ncol1    1.0\ncol2    1.0\ncol3    1.0\ncol4    1.0\ndtype: float64\n```\n\n###唯一值、值计数以及成员资格\n\n* 唯一值、值计数、成员资格方法\n|     方法     |                             说明                             |\n|:------------:|:------------------------------------------------------------:|\n|     isin     | 计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组 |\n|    unique    |           计算Series中的唯一值数组，按发现顺序返回           |\n| value_counts | 返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列 |\n\n`unique`可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(`unique().sort()`)。`value_counts`用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。`value_counts`是一个顶级pandas方法，可以用于任何数组或序列；`isin`用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：\n```\nIn [78]: obj = Series(list('abbddc'))\n\nIn [79]: sor  = obj.unique()\n\nIn [80]: sor\nOut[80]: array(['a', 'b', 'd', 'c'], dtype=object)\n\nIn [81]: sor.sort()\n\nIn [82]: sor\nOut[82]: array(['a', 'b', 'c', 'd'], dtype=object)\n\nIn [83]: obj.value_counts()\nOut[83]:\nb    2\nd    2\nc    1\na    1\ndtype: int64\n\nIn [84]: pd.value_counts(obj.values, sort=False)\nOut[84]:\nd    2\na    1\nb    2\nc    1\ndtype: int64\n\nIn [85]: mask = obj.isin(['a','c'])\n\nIn [86]: mask\nOut[86]:\n0     True\n1    False\n2    False\n3    False\n4    False\n5     True\ndtype: bool\n\nIn [87]: obj[mask]\nOut[87]:\n0    a\n5    c\ndtype: object\n```\n可以将`pandas.value_counts`传递给DataFrame的`aplly`函数得到DataFrame中多个相关列的柱状图：\n```\nIn [89]: data = DataFrame({'Q1':[1,3,4,4,5],\n    ...:                    'Q2':[2,3,4,2,1],\n    ...:                     'Q3':[4,1,4,5,6]})\n    ...:\n\nIn [90]: data\nOut[90]:\n   Q1  Q2  Q3\n0   1   2   4\n1   3   3   1\n2   4   4   4\n3   4   2   5\n4   5   1   6\n\nIn [91]: result = data.apply(pd.value_counts).fillna(0)\n\nIn [92]: result\nOut[92]:\n    Q1   Q2   Q3\n1  1.0  1.0  1.0\n2  0.0  2.0  0.0\n3  1.0  1.0  0.0\n4  2.0  1.0  2.0\n5  1.0  0.0  1.0\n6  0.0  0.0  1.0\n```\n\n## 处理缺失数据\n缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理\n\n* NA处理方法\n|  方法   |                                        说明                                         |\n|:-------:|:-----------------------------------------------------------------------------------:|\n| dropna  |    根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度     |\n| fillna  |                   用指定值或插值方法(如ffill或bfill)填充缺失数据                    |\n| isnull  | 返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样 |\n| notnull |                                   isnull的否定式                                    |\n\n```\nIn [99]: obj = Series([1,np.nan,2,np.nan,4])\n\nIn [100]: obj.isnull()\nOut[100]:\n0    False\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n\nIn [101]: obj[0]=None\n\nIn [102]: obj.isnull()\nOut[102]:\n0     True\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n```\n\n### 滤除缺失数据\n对于Series，`dropna`返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：\n```\nIn [104]: obj\nOut[104]:\n0    NaN\n1    NaN\n2    2.0\n3    NaN\n4    4.0\ndtype: float64\n\nIn [105]: obj.dropna()\nOut[105]:\n2    2.0\n4    4.0\ndtype: float64\n\nIn [106]: obj[obj.notnull()]\nOut[106]:\n2    2.0\n4    4.0\ndtype: float64\n```\n对于DataFrame对象，`dropna`默认丢弃任何含有缺失值的行，传入`how='all'`将只丢弃全为NA的那些行，要丢弃列需要传入`axis=1`\n```\nIn [108]: data = DataFrame([[1,4,5],[1,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,2,3]])\n\nIn [109]: data\nOut[109]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  2.0  3.0\n\nIn [110]: data.dropna()\nOut[110]:\n     0    1    2\n0  1.0  4.0  5.0\n\nIn [111]: data.dropna(how='all')\nOut[111]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n3  NaN  2.0  3.0\n\nIn [112]: data[3]=np.nan\n\nIn [113]: data\nOut[113]:\n     0    1    2   3\n0  1.0  4.0  5.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  2.0  3.0 NaN\n\nIn [114]: data.dropna(axis=1,how='all')\nOut[114]:\n     0    1    2\n0  1.0  4.0  5.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  2.0  3.0\n```\n`thresh`参数移除非NA个数小于设定值的行：\n```\nIn [123]: df = DataFrame(np.random.randn(7,3))\n\nIn [124]: df.loc[:3,1] = np.nan\n\nIn [125]: df.loc[:2,2] = np.nan\n\nIn [126]: df.dropna(thresh=2)\nOut[126]:\n          0         1         2\n3  0.620445       NaN -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n```\n\n### 填充缺失数据\n`fillna`方法是填充缺失数据的主要函数。通过一个常数调用`fillna`将会将缺失值替换为那个常数值；通过字典调用`fillna`可以实现对不同的列填充不同的值；`fillna`默认会返回新对象，通过设置`inplace=True`可以对现有对象进行就地修改，对`reindex`有效的插值方法也可用于`fillna`:\n* fillna函数的参数\n\n|  参数   |                           说明                            |\n|:-------:|:---------------------------------------------------------:|\n|  value  |             用于填充缺失值的标量值或字典对象              |\n| method  | 插值方式。如果函数调用时未指定其他参数的话，默认为“ffill” |\n|  axis   |                  待填充的轴，默认axis=0                   |\n| inplace |                修改调用者对象而不产生副本                 |\n|  limit  |        (对于前向和后向填充)可以连续填充的最大数量         |\n\n```\nIn [127]: df\nOut[127]:\n          0         1         2\n0 -0.293799       NaN       NaN\n1  0.728953       NaN       NaN\n2  0.573023       NaN       NaN\n3  0.620445       NaN -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [128]: df.fillna(0)\nOut[128]:\n          0         1         2\n0 -0.293799  0.000000  0.000000\n1  0.728953  0.000000  0.000000\n2  0.573023  0.000000  0.000000\n3  0.620445  0.000000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [129]: df.fillna({1:0.5, 3:-1})\nOut[129]:\n          0         1         2\n0 -0.293799  0.500000       NaN\n1  0.728953  0.500000       NaN\n2  0.573023  0.500000       NaN\n3  0.620445  0.500000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [130]: _  = df.fillna(0,inplace=True)\n\nIn [131]: df\nOut[131]:\n          0         1         2\n0 -0.293799  0.000000  0.000000\n1  0.728953  0.000000  0.000000\n2  0.573023  0.000000  0.000000\n3  0.620445  0.000000 -0.379638\n4 -0.642811  0.033634  0.700009\n5  0.510774  1.458027  1.247687\n6  0.614596 -1.986715 -0.378179\n\nIn [138]: df = DataFrame(np.random.randn(7,3))\n\nIn [139]: df.loc[3:,1] = np.nan\n\nIn [140]: df.loc[2:,2] = np.nan\n\nIn [141]: df\nOut[141]:\n          0         1         2\n0 -1.741073 -0.993316 -1.030055\n1  0.139948 -1.446029  0.797856\n2 -0.373251  0.505183       NaN\n3  1.179879       NaN       NaN\n4  0.764752       NaN       NaN\n5  1.405856       NaN       NaN\n6 -1.053222       NaN       NaN\n\nIn [142]: df.fillna(method='ffill')\nOut[142]:\n          0         1         2\n0 -1.741073 -0.993316 -1.030055\n1  0.139948 -1.446029  0.797856\n2 -0.373251  0.505183  0.797856\n3  1.179879  0.505183  0.797856\n4  0.764752  0.505183  0.797856\n5  1.405856  0.505183  0.797856\n6 -1.053222  0.505183  0.797856\n```\n","slug":"pandas入门-三","published":1,"updated":"2018-03-20T07:35:58.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw55001btwn93npr8gsx","content":"<h2 id=\"汇总和计算描述统计\"><a href=\"#汇总和计算描述统计\" class=\"headerlink\" title=\"汇总和计算描述统计\"></a>汇总和计算描述统计</h2><p>pandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。</p>\n<ul>\n<li><p>约简方法的选项<br>|  选项  |                          说明                           |<br>|:——:|:——————————————————-:|<br>|  axis  |            约简的轴。DataFrame的行用0，列用1            |<br>| skipna |                排除缺失值，默认值为True                 |<br>| level  | 如果轴是层次化索引的(即MultiIndex)，则根据level分组约简 |</p>\n</li>\n<li><p>描述和汇总统计</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:center\">非NA值的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describe</td>\n<td style=\"text-align:center\">针对Series或各DataFrame列计算汇总统计</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min、max</td>\n<td style=\"text-align:center\">计算最小值和最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">argmin、argmax</td>\n<td style=\"text-align:center\">计算能够获取到最小值和最大值的索引位置(整数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">idxmin、idmax</td>\n<td style=\"text-align:center\">计算能够获取到最小值和最大值的索引值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">quantile</td>\n<td style=\"text-align:center\">计算样本的分位数(0到1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sum</td>\n<td style=\"text-align:center\">值的总和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mean</td>\n<td style=\"text-align:center\">值的平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">median</td>\n<td style=\"text-align:center\">指的算术中位数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mad</td>\n<td style=\"text-align:center\">根据平均值计算平均绝对离差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td style=\"text-align:center\">样本值的方差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">std</td>\n<td style=\"text-align:center\">样本值的标准差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">skew</td>\n<td style=\"text-align:center\">样本值的偏度(三阶矩)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">kurt</td>\n<td style=\"text-align:center\">样本值的峰度(四阶矩)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumsum</td>\n<td style=\"text-align:center\">样本值的累计和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cummin、cummax</td>\n<td style=\"text-align:center\">样本值的累计最小值和累计最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumprod</td>\n<td style=\"text-align:center\">样本值的累计积</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">diff</td>\n<td style=\"text-align:center\">计算一阶差分(对时间序列有用)_</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pct_change</td>\n<td style=\"text-align:center\">计算百分数变化</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [33]: df = DataFrame([[1,np.nan],[2,3],[np.nan,np.nan],[4,5]],</span><br><span class=\"line\">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;one&apos;,&apos;two&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [34]: df</span><br><span class=\"line\">Out[34]:</span><br><span class=\"line\">   one  two</span><br><span class=\"line\">a  1.0  NaN</span><br><span class=\"line\">b  2.0  3.0</span><br><span class=\"line\">c  NaN  NaN</span><br><span class=\"line\">d  4.0  5.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [35]: df.sum()</span><br><span class=\"line\">Out[35]:</span><br><span class=\"line\">one    7.0</span><br><span class=\"line\">two    8.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [36]: df.sum(axis=1)</span><br><span class=\"line\">Out[36]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    5.0</span><br><span class=\"line\">c    NaN</span><br><span class=\"line\">d    9.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: df.mean(axis=1,skipna=False)</span><br><span class=\"line\">Out[37]:</span><br><span class=\"line\">a    NaN</span><br><span class=\"line\">b    2.5</span><br><span class=\"line\">c    NaN</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: df.idxmax()</span><br><span class=\"line\">Out[38]:</span><br><span class=\"line\">one    d</span><br><span class=\"line\">two    d</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: df.cumsum()</span><br><span class=\"line\">Out[39]:</span><br><span class=\"line\">   one  two</span><br><span class=\"line\">a  1.0  NaN</span><br><span class=\"line\">b  3.0  3.0</span><br><span class=\"line\">c  NaN  NaN</span><br><span class=\"line\">d  7.0  8.0</span><br></pre></td></tr></table></figure>\n<p><code>describe</code>用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: df.describe()</span><br><span class=\"line\">Out[40]:</span><br><span class=\"line\">            one       two</span><br><span class=\"line\">count  3.000000  2.000000</span><br><span class=\"line\">mean   2.333333  4.000000</span><br><span class=\"line\">std    1.527525  1.414214</span><br><span class=\"line\">min    1.000000  3.000000</span><br><span class=\"line\">25%    1.500000  3.500000</span><br><span class=\"line\">50%    2.000000  4.000000</span><br><span class=\"line\">75%    3.000000  4.500000</span><br><span class=\"line\">max    4.000000  5.000000</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: obj =Series(list(&apos;aabc&apos;)*4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: obj.describe()</span><br><span class=\"line\">Out[42]:</span><br><span class=\"line\">count     16</span><br><span class=\"line\">unique     3</span><br><span class=\"line\">top        a</span><br><span class=\"line\">freq       8</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相关系数和协方差\"><a href=\"#相关系数和协方差\" class=\"headerlink\" title=\"相关系数和协方差\"></a>相关系数和协方差</h3><p>Series的<code>corr</code>方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用<code>cov</code>计算协方差：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [46]: obj = Series([1,2,3,4],index=list(&apos;abcd&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [47]: obj2 = Series([1,np.nan,5,6,7],index=list(&apos;acdse&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: obj.corr(obj2)</span><br><span class=\"line\">Out[48]: 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: obj.cov(obj2)</span><br><span class=\"line\">Out[49]: 6.0</span><br></pre></td></tr></table></figure></p>\n<p>DataFrame的<code>corr</code>和<code>cov</code>方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [60]: df = DataFrame(np.arange(16).reshape(4,4),</span><br><span class=\"line\">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: df2 = DataFrame(np.arange(25).reshape(5,5),</span><br><span class=\"line\">    ...:                 index=list(&apos;abcde&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;,&apos;col5&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [62]: df</span><br><span class=\"line\">Out[62]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [63]: df2</span><br><span class=\"line\">Out[63]:</span><br><span class=\"line\">   col1  col2  col3  col4  col5</span><br><span class=\"line\">a     0     1     2     3     4</span><br><span class=\"line\">b     5     6     7     8     9</span><br><span class=\"line\">c    10    11    12    13    14</span><br><span class=\"line\">d    15    16    17    18    19</span><br><span class=\"line\">e    20    21    22    23    24</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: df.corr()</span><br><span class=\"line\">Out[64]:</span><br><span class=\"line\">      col1  col2  col3  col4</span><br><span class=\"line\">col1   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col2   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col3   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col4   1.0   1.0   1.0   1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: df.cov()</span><br><span class=\"line\">Out[65]:</span><br><span class=\"line\">           col1       col2       col3       col4</span><br><span class=\"line\">col1  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col2  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col3  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col4  26.666667  26.666667  26.666667  26.666667</span><br></pre></td></tr></table></figure></p>\n<p>利用DataFrame的<code>corrwith</code>方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: df.corrwith(df2)</span><br><span class=\"line\">Out[66]:</span><br><span class=\"line\">col1    1.0</span><br><span class=\"line\">col2    1.0</span><br><span class=\"line\">col3    1.0</span><br><span class=\"line\">col4    1.0</span><br><span class=\"line\">col5    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: df.corrwith(df2.col1)</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">col1    1.0</span><br><span class=\"line\">col2    1.0</span><br><span class=\"line\">col3    1.0</span><br><span class=\"line\">col4    1.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>###唯一值、值计数以及成员资格</p>\n<ul>\n<li>唯一值、值计数、成员资格方法<br>|     方法     |                             说明                             |<br>|:————:|:————————————————————:|<br>|     isin     | 计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组 |<br>|    unique    |           计算Series中的唯一值数组，按发现顺序返回           |<br>| value_counts | 返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列 |</li>\n</ul>\n<p><code>unique</code>可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(<code>unique().sort()</code>)。<code>value_counts</code>用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。<code>value_counts</code>是一个顶级pandas方法，可以用于任何数组或序列；<code>isin</code>用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [78]: obj = Series(list(&apos;abbddc&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: sor  = obj.unique()</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: sor</span><br><span class=\"line\">Out[80]: array([&apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;], dtype=object)</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: sor.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: sor</span><br><span class=\"line\">Out[82]: array([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=object)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: obj.value_counts()</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">d    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">a    1</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: pd.value_counts(obj.values, sort=False)</span><br><span class=\"line\">Out[84]:</span><br><span class=\"line\">d    2</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: mask = obj.isin([&apos;a&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: mask</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">0     True</span><br><span class=\"line\">1    False</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3    False</span><br><span class=\"line\">4    False</span><br><span class=\"line\">5     True</span><br><span class=\"line\">dtype: bool</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: obj[mask]</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">0    a</span><br><span class=\"line\">5    c</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure></p>\n<p>可以将<code>pandas.value_counts</code>传递给DataFrame的<code>aplly</code>函数得到DataFrame中多个相关列的柱状图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [89]: data = DataFrame(&#123;&apos;Q1&apos;:[1,3,4,4,5],</span><br><span class=\"line\">    ...:                    &apos;Q2&apos;:[2,3,4,2,1],</span><br><span class=\"line\">    ...:                     &apos;Q3&apos;:[4,1,4,5,6]&#125;)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: data</span><br><span class=\"line\">Out[90]:</span><br><span class=\"line\">   Q1  Q2  Q3</span><br><span class=\"line\">0   1   2   4</span><br><span class=\"line\">1   3   3   1</span><br><span class=\"line\">2   4   4   4</span><br><span class=\"line\">3   4   2   5</span><br><span class=\"line\">4   5   1   6</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: result = data.apply(pd.value_counts).fillna(0)</span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: result</span><br><span class=\"line\">Out[92]:</span><br><span class=\"line\">    Q1   Q2   Q3</span><br><span class=\"line\">1  1.0  1.0  1.0</span><br><span class=\"line\">2  0.0  2.0  0.0</span><br><span class=\"line\">3  1.0  1.0  0.0</span><br><span class=\"line\">4  2.0  1.0  2.0</span><br><span class=\"line\">5  1.0  0.0  1.0</span><br><span class=\"line\">6  0.0  0.0  1.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"处理缺失数据\"><a href=\"#处理缺失数据\" class=\"headerlink\" title=\"处理缺失数据\"></a>处理缺失数据</h2><p>缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理</p>\n<ul>\n<li>NA处理方法<br>|  方法   |                                        说明                                         |<br>|:——-:|:———————————————————————————–:|<br>| dropna  |    根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度     |<br>| fillna  |                   用指定值或插值方法(如ffill或bfill)填充缺失数据                    |<br>| isnull  | 返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样 |<br>| notnull |                                   isnull的否定式                                    |</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [99]: obj = Series([1,np.nan,2,np.nan,4])</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: obj.isnull()</span><br><span class=\"line\">Out[100]:</span><br><span class=\"line\">0    False</span><br><span class=\"line\">1     True</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3     True</span><br><span class=\"line\">4    False</span><br><span class=\"line\">dtype: bool</span><br><span class=\"line\"></span><br><span class=\"line\">In [101]: obj[0]=None</span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: obj.isnull()</span><br><span class=\"line\">Out[102]:</span><br><span class=\"line\">0     True</span><br><span class=\"line\">1     True</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3     True</span><br><span class=\"line\">4    False</span><br><span class=\"line\">dtype: bool</span><br></pre></td></tr></table></figure>\n<h3 id=\"滤除缺失数据\"><a href=\"#滤除缺失数据\" class=\"headerlink\" title=\"滤除缺失数据\"></a>滤除缺失数据</h3><p>对于Series，<code>dropna</code>返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: obj</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">0    NaN</span><br><span class=\"line\">1    NaN</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: obj.dropna()</span><br><span class=\"line\">Out[105]:</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: obj[obj.notnull()]</span><br><span class=\"line\">Out[106]:</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame对象，<code>dropna</code>默认丢弃任何含有缺失值的行，传入<code>how=&#39;all&#39;</code>将只丢弃全为NA的那些行，要丢弃列需要传入<code>axis=1</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [108]: data = DataFrame([[1,4,5],[1,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,2,3]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: data</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">2  NaN  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: data.dropna()</span><br><span class=\"line\">Out[110]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: data.dropna(how=&apos;all&apos;)</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [112]: data[3]=np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: data</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">     0    1    2   3</span><br><span class=\"line\">0  1.0  4.0  5.0 NaN</span><br><span class=\"line\">1  1.0  NaN  NaN NaN</span><br><span class=\"line\">2  NaN  NaN  NaN NaN</span><br><span class=\"line\">3  NaN  2.0  3.0 NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: data.dropna(axis=1,how=&apos;all&apos;)</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">2  NaN  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br></pre></td></tr></table></figure></p>\n<p><code>thresh</code>参数移除非NA个数小于设定值的行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [123]: df = DataFrame(np.random.randn(7,3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [124]: df.loc[:3,1] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [125]: df.loc[:2,2] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [126]: df.dropna(thresh=2)</span><br><span class=\"line\">Out[126]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">3  0.620445       NaN -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"填充缺失数据\"><a href=\"#填充缺失数据\" class=\"headerlink\" title=\"填充缺失数据\"></a>填充缺失数据</h3><p><code>fillna</code>方法是填充缺失数据的主要函数。通过一个常数调用<code>fillna</code>将会将缺失值替换为那个常数值；通过字典调用<code>fillna</code>可以实现对不同的列填充不同的值；<code>fillna</code>默认会返回新对象，通过设置<code>inplace=True</code>可以对现有对象进行就地修改，对<code>reindex</code>有效的插值方法也可用于<code>fillna</code>:</p>\n<ul>\n<li>fillna函数的参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">用于填充缺失值的标量值或字典对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">插值方式。如果函数调用时未指定其他参数的话，默认为“ffill”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">axis</td>\n<td style=\"text-align:center\">待填充的轴，默认axis=0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inplace</td>\n<td style=\"text-align:center\">修改调用者对象而不产生副本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">(对于前向和后向填充)可以连续填充的最大数量</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [127]: df</span><br><span class=\"line\">Out[127]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799       NaN       NaN</span><br><span class=\"line\">1  0.728953       NaN       NaN</span><br><span class=\"line\">2  0.573023       NaN       NaN</span><br><span class=\"line\">3  0.620445       NaN -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: df.fillna(0)</span><br><span class=\"line\">Out[128]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.000000  0.000000</span><br><span class=\"line\">1  0.728953  0.000000  0.000000</span><br><span class=\"line\">2  0.573023  0.000000  0.000000</span><br><span class=\"line\">3  0.620445  0.000000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [129]: df.fillna(&#123;1:0.5, 3:-1&#125;)</span><br><span class=\"line\">Out[129]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.500000       NaN</span><br><span class=\"line\">1  0.728953  0.500000       NaN</span><br><span class=\"line\">2  0.573023  0.500000       NaN</span><br><span class=\"line\">3  0.620445  0.500000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [130]: _  = df.fillna(0,inplace=True)</span><br><span class=\"line\"></span><br><span class=\"line\">In [131]: df</span><br><span class=\"line\">Out[131]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.000000  0.000000</span><br><span class=\"line\">1  0.728953  0.000000  0.000000</span><br><span class=\"line\">2  0.573023  0.000000  0.000000</span><br><span class=\"line\">3  0.620445  0.000000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: df = DataFrame(np.random.randn(7,3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: df.loc[3:,1] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [140]: df.loc[2:,2] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [141]: df</span><br><span class=\"line\">Out[141]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -1.741073 -0.993316 -1.030055</span><br><span class=\"line\">1  0.139948 -1.446029  0.797856</span><br><span class=\"line\">2 -0.373251  0.505183       NaN</span><br><span class=\"line\">3  1.179879       NaN       NaN</span><br><span class=\"line\">4  0.764752       NaN       NaN</span><br><span class=\"line\">5  1.405856       NaN       NaN</span><br><span class=\"line\">6 -1.053222       NaN       NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [142]: df.fillna(method=&apos;ffill&apos;)</span><br><span class=\"line\">Out[142]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -1.741073 -0.993316 -1.030055</span><br><span class=\"line\">1  0.139948 -1.446029  0.797856</span><br><span class=\"line\">2 -0.373251  0.505183  0.797856</span><br><span class=\"line\">3  1.179879  0.505183  0.797856</span><br><span class=\"line\">4  0.764752  0.505183  0.797856</span><br><span class=\"line\">5  1.405856  0.505183  0.797856</span><br><span class=\"line\">6 -1.053222  0.505183  0.797856</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"汇总和计算描述统计\"><a href=\"#汇总和计算描述统计\" class=\"headerlink\" title=\"汇总和计算描述统计\"></a>汇总和计算描述统计</h2><p>pandas对象拥有一组常用的数学和统计方法。她们大部分属于约简和汇总统计，用于从Series中提取单个值(如sum或mean)或从DataFrame的行或列中提取一个Series，他们都是基于没有缺失数据的假设构建的。</p>\n<ul>\n<li><p>约简方法的选项<br>|  选项  |                          说明                           |<br>|:——:|:——————————————————-:|<br>|  axis  |            约简的轴。DataFrame的行用0，列用1            |<br>| skipna |                排除缺失值，默认值为True                 |<br>| level  | 如果轴是层次化索引的(即MultiIndex)，则根据level分组约简 |</p>\n</li>\n<li><p>描述和汇总统计</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:center\">非NA值的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describe</td>\n<td style=\"text-align:center\">针对Series或各DataFrame列计算汇总统计</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min、max</td>\n<td style=\"text-align:center\">计算最小值和最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">argmin、argmax</td>\n<td style=\"text-align:center\">计算能够获取到最小值和最大值的索引位置(整数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">idxmin、idmax</td>\n<td style=\"text-align:center\">计算能够获取到最小值和最大值的索引值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">quantile</td>\n<td style=\"text-align:center\">计算样本的分位数(0到1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sum</td>\n<td style=\"text-align:center\">值的总和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mean</td>\n<td style=\"text-align:center\">值的平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">median</td>\n<td style=\"text-align:center\">指的算术中位数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mad</td>\n<td style=\"text-align:center\">根据平均值计算平均绝对离差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td style=\"text-align:center\">样本值的方差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">std</td>\n<td style=\"text-align:center\">样本值的标准差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">skew</td>\n<td style=\"text-align:center\">样本值的偏度(三阶矩)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">kurt</td>\n<td style=\"text-align:center\">样本值的峰度(四阶矩)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumsum</td>\n<td style=\"text-align:center\">样本值的累计和</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cummin、cummax</td>\n<td style=\"text-align:center\">样本值的累计最小值和累计最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cumprod</td>\n<td style=\"text-align:center\">样本值的累计积</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">diff</td>\n<td style=\"text-align:center\">计算一阶差分(对时间序列有用)_</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pct_change</td>\n<td style=\"text-align:center\">计算百分数变化</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [33]: df = DataFrame([[1,np.nan],[2,3],[np.nan,np.nan],[4,5]],</span><br><span class=\"line\">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;one&apos;,&apos;two&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [34]: df</span><br><span class=\"line\">Out[34]:</span><br><span class=\"line\">   one  two</span><br><span class=\"line\">a  1.0  NaN</span><br><span class=\"line\">b  2.0  3.0</span><br><span class=\"line\">c  NaN  NaN</span><br><span class=\"line\">d  4.0  5.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [35]: df.sum()</span><br><span class=\"line\">Out[35]:</span><br><span class=\"line\">one    7.0</span><br><span class=\"line\">two    8.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [36]: df.sum(axis=1)</span><br><span class=\"line\">Out[36]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    5.0</span><br><span class=\"line\">c    NaN</span><br><span class=\"line\">d    9.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [37]: df.mean(axis=1,skipna=False)</span><br><span class=\"line\">Out[37]:</span><br><span class=\"line\">a    NaN</span><br><span class=\"line\">b    2.5</span><br><span class=\"line\">c    NaN</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [38]: df.idxmax()</span><br><span class=\"line\">Out[38]:</span><br><span class=\"line\">one    d</span><br><span class=\"line\">two    d</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">In [39]: df.cumsum()</span><br><span class=\"line\">Out[39]:</span><br><span class=\"line\">   one  two</span><br><span class=\"line\">a  1.0  NaN</span><br><span class=\"line\">b  3.0  3.0</span><br><span class=\"line\">c  NaN  NaN</span><br><span class=\"line\">d  7.0  8.0</span><br></pre></td></tr></table></figure>\n<p><code>describe</code>用于一次性产生多个汇总统计，对于非数值类型会产生另外一种汇总统计：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [40]: df.describe()</span><br><span class=\"line\">Out[40]:</span><br><span class=\"line\">            one       two</span><br><span class=\"line\">count  3.000000  2.000000</span><br><span class=\"line\">mean   2.333333  4.000000</span><br><span class=\"line\">std    1.527525  1.414214</span><br><span class=\"line\">min    1.000000  3.000000</span><br><span class=\"line\">25%    1.500000  3.500000</span><br><span class=\"line\">50%    2.000000  4.000000</span><br><span class=\"line\">75%    3.000000  4.500000</span><br><span class=\"line\">max    4.000000  5.000000</span><br><span class=\"line\"></span><br><span class=\"line\">In [41]: obj =Series(list(&apos;aabc&apos;)*4)</span><br><span class=\"line\"></span><br><span class=\"line\">In [42]: obj.describe()</span><br><span class=\"line\">Out[42]:</span><br><span class=\"line\">count     16</span><br><span class=\"line\">unique     3</span><br><span class=\"line\">top        a</span><br><span class=\"line\">freq       8</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相关系数和协方差\"><a href=\"#相关系数和协方差\" class=\"headerlink\" title=\"相关系数和协方差\"></a>相关系数和协方差</h3><p>Series的<code>corr</code>方法用于计算两个Series中重叠的、非NAN的、按索引对齐的相关系数；使用<code>cov</code>计算协方差：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [46]: obj = Series([1,2,3,4],index=list(&apos;abcd&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [47]: obj2 = Series([1,np.nan,5,6,7],index=list(&apos;acdse&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [48]: obj.corr(obj2)</span><br><span class=\"line\">Out[48]: 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: obj.cov(obj2)</span><br><span class=\"line\">Out[49]: 6.0</span><br></pre></td></tr></table></figure></p>\n<p>DataFrame的<code>corr</code>和<code>cov</code>方法将以DataFrame的形式返回完整的相关系数或协方差矩阵：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [60]: df = DataFrame(np.arange(16).reshape(4,4),</span><br><span class=\"line\">    ...:                 index=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [61]: df2 = DataFrame(np.arange(25).reshape(5,5),</span><br><span class=\"line\">    ...:                 index=list(&apos;abcde&apos;),</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;,&apos;col5&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [62]: df</span><br><span class=\"line\">Out[62]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [63]: df2</span><br><span class=\"line\">Out[63]:</span><br><span class=\"line\">   col1  col2  col3  col4  col5</span><br><span class=\"line\">a     0     1     2     3     4</span><br><span class=\"line\">b     5     6     7     8     9</span><br><span class=\"line\">c    10    11    12    13    14</span><br><span class=\"line\">d    15    16    17    18    19</span><br><span class=\"line\">e    20    21    22    23    24</span><br><span class=\"line\"></span><br><span class=\"line\">In [64]: df.corr()</span><br><span class=\"line\">Out[64]:</span><br><span class=\"line\">      col1  col2  col3  col4</span><br><span class=\"line\">col1   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col2   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col3   1.0   1.0   1.0   1.0</span><br><span class=\"line\">col4   1.0   1.0   1.0   1.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [65]: df.cov()</span><br><span class=\"line\">Out[65]:</span><br><span class=\"line\">           col1       col2       col3       col4</span><br><span class=\"line\">col1  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col2  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col3  26.666667  26.666667  26.666667  26.666667</span><br><span class=\"line\">col4  26.666667  26.666667  26.666667  26.666667</span><br></pre></td></tr></table></figure></p>\n<p>利用DataFrame的<code>corrwith</code>方法可以计算其列或行跟另一个Series或DataFrame之间的相关系数；传入一个Series将会返回一个相关系数值Series，传入一个DataFrame则会计算按列名配对的相关系数(传入axis=1按行计算)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [66]: df.corrwith(df2)</span><br><span class=\"line\">Out[66]:</span><br><span class=\"line\">col1    1.0</span><br><span class=\"line\">col2    1.0</span><br><span class=\"line\">col3    1.0</span><br><span class=\"line\">col4    1.0</span><br><span class=\"line\">col5    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: df.corrwith(df2.col1)</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">col1    1.0</span><br><span class=\"line\">col2    1.0</span><br><span class=\"line\">col3    1.0</span><br><span class=\"line\">col4    1.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>###唯一值、值计数以及成员资格</p>\n<ul>\n<li>唯一值、值计数、成员资格方法<br>|     方法     |                             说明                             |<br>|:————:|:————————————————————:|<br>|     isin     | 计算一个表示“Series各值是否包含于传入的值序列中”的布尔型数组 |<br>|    unique    |           计算Series中的唯一值数组，按发现顺序返回           |<br>| value_counts | 返回一个Series，其索引为唯一值，其值为频率，按计数值降序排列 |</li>\n</ul>\n<p><code>unique</code>可以从Series中获取唯一值数组，返回的唯一值是未排序的，可以对结果进行排序(<code>unique().sort()</code>)。<code>value_counts</code>用于计算一个Series中各值出现的频率，结果Series是按值频率降序排列的。<code>value_counts</code>是一个顶级pandas方法，可以用于任何数组或序列；<code>isin</code>用于判断矢量化集合的成员资格，可用于选取Series中或DataFrame列中数据的子集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [78]: obj = Series(list(&apos;abbddc&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [79]: sor  = obj.unique()</span><br><span class=\"line\"></span><br><span class=\"line\">In [80]: sor</span><br><span class=\"line\">Out[80]: array([&apos;a&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;], dtype=object)</span><br><span class=\"line\"></span><br><span class=\"line\">In [81]: sor.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: sor</span><br><span class=\"line\">Out[82]: array([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=object)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: obj.value_counts()</span><br><span class=\"line\">Out[83]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">d    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">a    1</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: pd.value_counts(obj.values, sort=False)</span><br><span class=\"line\">Out[84]:</span><br><span class=\"line\">d    2</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [85]: mask = obj.isin([&apos;a&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [86]: mask</span><br><span class=\"line\">Out[86]:</span><br><span class=\"line\">0     True</span><br><span class=\"line\">1    False</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3    False</span><br><span class=\"line\">4    False</span><br><span class=\"line\">5     True</span><br><span class=\"line\">dtype: bool</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: obj[mask]</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">0    a</span><br><span class=\"line\">5    c</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure></p>\n<p>可以将<code>pandas.value_counts</code>传递给DataFrame的<code>aplly</code>函数得到DataFrame中多个相关列的柱状图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [89]: data = DataFrame(&#123;&apos;Q1&apos;:[1,3,4,4,5],</span><br><span class=\"line\">    ...:                    &apos;Q2&apos;:[2,3,4,2,1],</span><br><span class=\"line\">    ...:                     &apos;Q3&apos;:[4,1,4,5,6]&#125;)</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: data</span><br><span class=\"line\">Out[90]:</span><br><span class=\"line\">   Q1  Q2  Q3</span><br><span class=\"line\">0   1   2   4</span><br><span class=\"line\">1   3   3   1</span><br><span class=\"line\">2   4   4   4</span><br><span class=\"line\">3   4   2   5</span><br><span class=\"line\">4   5   1   6</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: result = data.apply(pd.value_counts).fillna(0)</span><br><span class=\"line\"></span><br><span class=\"line\">In [92]: result</span><br><span class=\"line\">Out[92]:</span><br><span class=\"line\">    Q1   Q2   Q3</span><br><span class=\"line\">1  1.0  1.0  1.0</span><br><span class=\"line\">2  0.0  2.0  0.0</span><br><span class=\"line\">3  1.0  1.0  0.0</span><br><span class=\"line\">4  2.0  1.0  2.0</span><br><span class=\"line\">5  1.0  0.0  1.0</span><br><span class=\"line\">6  0.0  0.0  1.0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"处理缺失数据\"><a href=\"#处理缺失数据\" class=\"headerlink\" title=\"处理缺失数据\"></a>处理缺失数据</h2><p>缺失数据在大部分数据分析应用中都很常见。pandas使用浮点值NaN(Not a Number)表示浮点和非浮点数组中的缺失数据，它只是一个便于检测的标记。Python内置的None值也会被当做NA处理</p>\n<ul>\n<li>NA处理方法<br>|  方法   |                                        说明                                         |<br>|:——-:|:———————————————————————————–:|<br>| dropna  |    根据各标签中是否存在缺失数据对轴标签进行过滤，可通过阈值调节对缺失值的容忍度     |<br>| fillna  |                   用指定值或插值方法(如ffill或bfill)填充缺失数据                    |<br>| isnull  | 返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样 |<br>| notnull |                                   isnull的否定式                                    |</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [99]: obj = Series([1,np.nan,2,np.nan,4])</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: obj.isnull()</span><br><span class=\"line\">Out[100]:</span><br><span class=\"line\">0    False</span><br><span class=\"line\">1     True</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3     True</span><br><span class=\"line\">4    False</span><br><span class=\"line\">dtype: bool</span><br><span class=\"line\"></span><br><span class=\"line\">In [101]: obj[0]=None</span><br><span class=\"line\"></span><br><span class=\"line\">In [102]: obj.isnull()</span><br><span class=\"line\">Out[102]:</span><br><span class=\"line\">0     True</span><br><span class=\"line\">1     True</span><br><span class=\"line\">2    False</span><br><span class=\"line\">3     True</span><br><span class=\"line\">4    False</span><br><span class=\"line\">dtype: bool</span><br></pre></td></tr></table></figure>\n<h3 id=\"滤除缺失数据\"><a href=\"#滤除缺失数据\" class=\"headerlink\" title=\"滤除缺失数据\"></a>滤除缺失数据</h3><p>对于Series，<code>dropna</code>返回一个仅含有非空数据和索引值的Series(通过布尔型索引达到一样的效果)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [104]: obj</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">0    NaN</span><br><span class=\"line\">1    NaN</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [105]: obj.dropna()</span><br><span class=\"line\">Out[105]:</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: obj[obj.notnull()]</span><br><span class=\"line\">Out[106]:</span><br><span class=\"line\">2    2.0</span><br><span class=\"line\">4    4.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame对象，<code>dropna</code>默认丢弃任何含有缺失值的行，传入<code>how=&#39;all&#39;</code>将只丢弃全为NA的那些行，要丢弃列需要传入<code>axis=1</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [108]: data = DataFrame([[1,4,5],[1,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,2,3]])</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: data</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">2  NaN  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [110]: data.dropna()</span><br><span class=\"line\">Out[110]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [111]: data.dropna(how=&apos;all&apos;)</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [112]: data[3]=np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: data</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">     0    1    2   3</span><br><span class=\"line\">0  1.0  4.0  5.0 NaN</span><br><span class=\"line\">1  1.0  NaN  NaN NaN</span><br><span class=\"line\">2  NaN  NaN  NaN NaN</span><br><span class=\"line\">3  NaN  2.0  3.0 NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: data.dropna(axis=1,how=&apos;all&apos;)</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">     0    1    2</span><br><span class=\"line\">0  1.0  4.0  5.0</span><br><span class=\"line\">1  1.0  NaN  NaN</span><br><span class=\"line\">2  NaN  NaN  NaN</span><br><span class=\"line\">3  NaN  2.0  3.0</span><br></pre></td></tr></table></figure></p>\n<p><code>thresh</code>参数移除非NA个数小于设定值的行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [123]: df = DataFrame(np.random.randn(7,3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [124]: df.loc[:3,1] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [125]: df.loc[:2,2] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [126]: df.dropna(thresh=2)</span><br><span class=\"line\">Out[126]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">3  0.620445       NaN -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"填充缺失数据\"><a href=\"#填充缺失数据\" class=\"headerlink\" title=\"填充缺失数据\"></a>填充缺失数据</h3><p><code>fillna</code>方法是填充缺失数据的主要函数。通过一个常数调用<code>fillna</code>将会将缺失值替换为那个常数值；通过字典调用<code>fillna</code>可以实现对不同的列填充不同的值；<code>fillna</code>默认会返回新对象，通过设置<code>inplace=True</code>可以对现有对象进行就地修改，对<code>reindex</code>有效的插值方法也可用于<code>fillna</code>:</p>\n<ul>\n<li>fillna函数的参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">用于填充缺失值的标量值或字典对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">插值方式。如果函数调用时未指定其他参数的话，默认为“ffill”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">axis</td>\n<td style=\"text-align:center\">待填充的轴，默认axis=0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inplace</td>\n<td style=\"text-align:center\">修改调用者对象而不产生副本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">(对于前向和后向填充)可以连续填充的最大数量</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [127]: df</span><br><span class=\"line\">Out[127]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799       NaN       NaN</span><br><span class=\"line\">1  0.728953       NaN       NaN</span><br><span class=\"line\">2  0.573023       NaN       NaN</span><br><span class=\"line\">3  0.620445       NaN -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [128]: df.fillna(0)</span><br><span class=\"line\">Out[128]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.000000  0.000000</span><br><span class=\"line\">1  0.728953  0.000000  0.000000</span><br><span class=\"line\">2  0.573023  0.000000  0.000000</span><br><span class=\"line\">3  0.620445  0.000000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [129]: df.fillna(&#123;1:0.5, 3:-1&#125;)</span><br><span class=\"line\">Out[129]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.500000       NaN</span><br><span class=\"line\">1  0.728953  0.500000       NaN</span><br><span class=\"line\">2  0.573023  0.500000       NaN</span><br><span class=\"line\">3  0.620445  0.500000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [130]: _  = df.fillna(0,inplace=True)</span><br><span class=\"line\"></span><br><span class=\"line\">In [131]: df</span><br><span class=\"line\">Out[131]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -0.293799  0.000000  0.000000</span><br><span class=\"line\">1  0.728953  0.000000  0.000000</span><br><span class=\"line\">2  0.573023  0.000000  0.000000</span><br><span class=\"line\">3  0.620445  0.000000 -0.379638</span><br><span class=\"line\">4 -0.642811  0.033634  0.700009</span><br><span class=\"line\">5  0.510774  1.458027  1.247687</span><br><span class=\"line\">6  0.614596 -1.986715 -0.378179</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: df = DataFrame(np.random.randn(7,3))</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: df.loc[3:,1] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [140]: df.loc[2:,2] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">In [141]: df</span><br><span class=\"line\">Out[141]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -1.741073 -0.993316 -1.030055</span><br><span class=\"line\">1  0.139948 -1.446029  0.797856</span><br><span class=\"line\">2 -0.373251  0.505183       NaN</span><br><span class=\"line\">3  1.179879       NaN       NaN</span><br><span class=\"line\">4  0.764752       NaN       NaN</span><br><span class=\"line\">5  1.405856       NaN       NaN</span><br><span class=\"line\">6 -1.053222       NaN       NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [142]: df.fillna(method=&apos;ffill&apos;)</span><br><span class=\"line\">Out[142]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">0 -1.741073 -0.993316 -1.030055</span><br><span class=\"line\">1  0.139948 -1.446029  0.797856</span><br><span class=\"line\">2 -0.373251  0.505183  0.797856</span><br><span class=\"line\">3  1.179879  0.505183  0.797856</span><br><span class=\"line\">4  0.764752  0.505183  0.797856</span><br><span class=\"line\">5  1.405856  0.505183  0.797856</span><br><span class=\"line\">6 -1.053222  0.505183  0.797856</span><br></pre></td></tr></table></figure>\n"},{"title":"pandas入门(二)","date":"2018-03-19T08:51:47.000Z","copyright":true,"description":"主要记录操作Series和DataFrame中的数据的基本手段。后面将更深入地挖掘pandas在数据分析和处理方面的功能","_content":"## 基本功能\n### 重新索引\n\n* reindex的(插值)method选项\n\n|      参数       |        说明        |\n|:---------------:|:------------------:|\n|   fffill或pad   | 前向填充(或搬运)值 |\n| bfill或backfill | 后向填充(或搬运)值 |\n\n* reindex函数的参数\n\n|    参数    |                                                       说明                                                       |\n|:----------:|:----------------------------------------------------------------------------------------------------------------:|\n|   index    | 用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样 |\n|   method   |                                                  插值(填充)方式                                                  |\n| fill_value |                                 再重新索引的过程中，需要引入缺失值时使用的替代值                                 |\n|   limit    |                                           前向或后向填充时的最大填充量                                           |\n|   level    |                               在MultiIndex的指定级别上匹配简单索引，否则选取其子集                               |\n|    copy    | 默认为True，无论如何都复制；如果为False，则新旧相等就不复制                                                                                                                |\n\npandas对象的`reindex`方法用于创建一个适应新索引的新对象，`reindex`将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。`method`选项可以在重新索引时做一些插值处理：\n```\nIn [86]: obj = Series([1,2,3,4],index=['a','b','c','d'])\n\nIn [87]: obj\nOut[87]:\na    1\nb    2\nc    3\nd    4\ndtype: int64\n\nIn [88]: obj2 = obj.reindex(['q','w','e','r'])\n\nIn [89]: obj2\nOut[89]:\nq   NaN\nw   NaN\ne   NaN\nr   NaN\ndtype: float64\n\nIn [90]: obj2 = obj.reindex(['a','b','c','d','e'])\n\nIn [91]: obj2\nOut[91]:\na    1.0\nb    2.0\nc    3.0\nd    4.0\ne    NaN\ndtype: float64\n\nIn [94]: obj2 = obj.reindex(['a','b','c','d','e'],fill_value=0)\n\nIn [95]: obj2\nOut[95]:\na    1\nb    2\nc    3\nd    4\ne    0\ndtype: int64\n\nIn [98]: obj3 = obj.reindex(['a','b','e','f','c','d'],method='ffill')\n\nIn [99]: obj3\nOut[99]:\na    1\nb    2\ne    4\nf    4\nc    3\nd    4\ndtype: int64\n```\n\n对于DataFrame,`reindex`可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用`columns`关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):\n```\nIn [105]: frame = DataFrame(np.arange(9).reshape((3,3)),index=['a','b','c'],columns=['col1','col2','col3'])\n\nIn [106]: frame2 = frame.reindex(['a','b','c','d'])\n\nIn [107]: frame2\nOut[107]:\n   col1  col2  col3\na   0.0   1.0   2.0\nb   3.0   4.0   5.0\nc   6.0   7.0   8.0\nd   NaN   NaN   NaN\n\nIn [108]: frame.reindex(columns=['col_a','col1','col2','col3'])\nOut[108]:\n   col_a  col1  col2  col3\na    NaN     0     1     2\nb    NaN     3     4     5\nc    NaN     6     7     8\n\nIn [109]: frame.reindex(index=['a','b','c','d'],method='ffill',columns=['col_a','col1','col2','col3'])\nOut[109]:\n   col_a  col1  col2  col3\na      2     0     1     2\nb      5     3     4     5\nc      8     6     7     8\nd      8     6     7     8\n```\n利用ix的标签索引功能重新索引：\n```\nIn [111]: frame.ix[['a','b','c','d'],['col_a','col1','col2','col3']]\nOut[111]:\n   col_a  col1  col2  col3\na    NaN   0.0   1.0   2.0\nb    NaN   3.0   4.0   5.0\nc    NaN   6.0   7.0   8.0\nd    NaN   NaN   NaN   NaN\n```\n### 丢弃指定轴上的项\n使用`drop`方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:\n```\nIn [112]: obj = Series([1,2,3,4],index=['a','b','c','d'])\n\nIn [113]: obj.drop('a')\nOut[113]:\nb    2\nc    3\nd    4\ndtype: int64\n\nIn [114]: obj.drop(['a','b'])\nOut[114]:\nc    3\nd    4\ndtype: int64\n\nIn [115]: frame = DataFrame(np.arange(9).reshape((3,3)),index=['a','b','c'],columns=['col1','col2','col3'])\n\nIn [116]: frame.drop(['a','b'])\nOut[116]:\n   col1  col2  col3\nc     6     7     8\n\nIn [117]: frame.drop(['col1','col2'],axis=1)\nOut[117]:\n   col3\na     2\nb     5\nc     8\n```\n\n### 索引、选取和过滤\nSeries索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 **末端时包含的(封闭)**：\n```\nIn [3]: obj = Series(np.arange(4), index=['a','b','c','d'])\n\nIn [4]: obj\nOut[4]:\na    0\nb    1\nc    2\nd    3\ndtype: int64\n\nIn [5]: obj['a']\nOut[5]: 0\n\nIn [6]: obj[2:4]\nOut[6]:\nc    2\nd    3\ndtype: int64\n\nIn [7]: obj['c':'d']\nOut[7]:\nc    2\nd    3\ndtype: int64\n\nIn [8]: obj[['a','d']]\nOut[8]:\na    0\nd    3\ndtype: int64\n\nIn [9]: obj['b':'c']=5\n\nIn [10]: obj\nOut[10]:\na    0\nb    5\nc    5\nd    3\ndtype: int64\n```\n\n对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：\n```\nIn [15]: data = DataFrame(np.arange(16).reshape(4,4),\n    ...:                 index=['a','b','c','d'],\n    ...:                 columns=['col1','col2','col3','col4'])\n    ...:\n\nIn [16]: data\nOut[16]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [17]: data['col1']\nOut[17]:\na     0\nb     4\nc     8\nd    12\nName: col1, dtype: int64\n\nIn [18]: data[['col1','col4']]\nOut[18]:\n   col1  col4\na     0     3\nb     4     7\nc     8    11\nd    12    15\n\nIn [19]: data[:2]\nOut[19]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\n\nIn [20]: data[data['col3']>5]\nOut[20]:\n   col1  col2  col3  col4\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [21]: data<5\nOut[21]:\n    col1   col2   col3   col4\na   True   True   True   True\nb   True  False  False  False\nc  False  False  False  False\nd  False  False  False  False\n\nIn [22]: data[data<5] = -5\n\nIn [23]: data\nOut[23]:\n   col1  col2  col3  col4\na    -5    -5    -5    -5\nb    -5     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n```\n为了在DataFrame的行上进行标签索引，可以通过`loc`进行：\n```\nIn [48]: data.loc['a',['col1','col2']]\nOut[48]:\ncol1   -5\ncol2   -5\nName: a, dtype: int64\n\nIn [49]: data.loc[['a','d'],['col1','col3']]\nOut[49]:\n   col1  col3\na    -5    -5\nd    12    14\n\nIn [50]: data.loc[data.col3>5,:'col3']\nOut[50]:\n   col1  col2  col3\nb    -5     5     6\nc     8     9    10\nd    12    13    14\n```\n\n### 算术运算和数据对齐\npandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:\n```\nIn [55]: s1 = Series(np.arange(3),index=['a','b','c'])\n\nIn [56]: s2 = Series(np.arange(3,9),index=['a','b','c','d','e','f'])\n\nIn [57]: s1\nOut[57]:\na    0\nb    1\nc    2\ndtype: int64\n\nIn [58]: s2\nOut[58]:\na    3\nb    4\nc    5\nd    6\ne    7\nf    8\ndtype: int64\n\nIn [59]: s1+s2\nOut[59]:\na    3.0\nb    5.0\nc    7.0\nd    NaN\ne    NaN\nf    NaN\ndtype: float64\n```\n对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：\n```\nIn [65]: df1 = DataFrame(np.arange(9).reshape(3,3),columns=list('abc'),\n    ...:                 index=['row1','row2','row3'])\n    ...:\n\nIn [66]: df2 = DataFrame(np.arange(16).reshape(4,4),columns=list('abcd'),\n    ...:                 index=['row1','row2','row3','row4'])\n    ...:\n\nIn [67]: df1\nOut[67]:\n      a  b  c\nrow1  0  1  2\nrow2  3  4  5\nrow3  6  7  8\n\nIn [68]: df2\nOut[68]:\n       a   b   c   d\nrow1   0   1   2   3\nrow2   4   5   6   7\nrow3   8   9  10  11\nrow4  12  13  14  15\n\nIn [69]: df1+df2\nOut[69]:\n         a     b     c   d\nrow1   0.0   2.0   4.0 NaN\nrow2   7.0   9.0  11.0 NaN\nrow3  14.0  16.0  18.0 NaN\nrow4   NaN   NaN   NaN NaN\n```\n#### 在算术方法中填充值\n* 灵活的算术方法\n\n| 方法 |        说明       |\n| :--: | :---------------: |\n| add  | 用于加法(+)的方法 |\n| sub  | 用于减法(-)的方法 |\n| div  | 用于除法(/)的方法 |\n| mul  | 用于乘法(*)的方法                  |\n\n对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：\n```\nIn [76]: df2.add(df1,fill_value=0)\nOut[76]:\n         a     b     c     d\nrow1   0.0   2.0   4.0   3.0\nrow2   7.0   9.0  11.0   7.0\nrow3  14.0  16.0  18.0  11.0\nrow4  12.0  13.0  14.0  15.0\n\nIn [77]: df1.reindex(columns=df2.columns,fill_value=0)\nOut[77]:\n      a  b  c  d\nrow1  0  1  2  0\nrow2  3  4  5  0\nrow3  6  7  8  0\n```\n\n#### DataFrame和Series之间的运算\n默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：\n```\nIn [94]: s1 = df2.loc['row1']\n\nIn [95]: df2\nOut[95]:\n       a   b   c   d\nrow1   0   1   2   3\nrow2   4   5   6   7\nrow3   8   9  10  11\nrow4  12  13  14  15\n\nIn [96]: s1\nOut[96]:\na    0\nb    1\nc    2\nd    3\nName: row1, dtype: int64\n\nIn [97]: df2-s1\nOut[97]:\n       a   b   c   d\nrow1   0   0   0   0\nrow2   4   4   4   4\nrow3   8   8   8   8\nrow4  12  12  12  12\n\nIn [98]: s2 = Series(range(3),index=list('abf'))\n\nIn [99]: df2-s2\nOut[99]:\n         a     b   c   d   f\nrow1   0.0   0.0 NaN NaN NaN\nrow2   4.0   4.0 NaN NaN NaN\nrow3   8.0   8.0 NaN NaN NaN\nrow4  12.0  12.0 NaN NaN NaN\n\nIn [100]: s3  = df2['a']\n\nOut[101]:\n      a  b  c  d\nrow1  0  1  2  3\nrow2  0  1  2  3\nrow3  0  1  2  3\nrow4  0  1  2  3\n```\n\n### 函数应用和映射\nNumPy的[ufuncs](http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0)(元素级数组方法)也可用于操作pandas对象:\n```\nIn [102]: frame = DataFrame(np.random.randn(4,3),columns=list('abc'),\n     ...:                   index=['row1','row2','row3','row4'])\n     ...:\n\nIn [103]: frame\nOut[103]:\n             a         b         c\nrow1  0.755289  0.886977 -0.984527\nrow2  0.460170 -0.514393  0.180462\nrow3  0.828386 -0.545317 -1.176786\nrow4  0.860822 -1.659938  0.952070\n\nIn [104]: np.abs(frame)\nOut[104]:\n             a         b         c\nrow1  0.755289  0.886977  0.984527\nrow2  0.460170  0.514393  0.180462\nrow3  0.828386  0.545317  1.176786\nrow4  0.860822  1.659938  0.952070\n\n```\n\n`apply`方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用`apply`方法；除标量外，传递给`apply`的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用`applymap`得到frame中各个浮点值的格式化字符串:\n```\nIn [112]: f = lambda x:x.max() -x.min()\n\nIn [113]: frame.apply(f)\nOut[113]:\na    0.400653\nb    2.546915\nc    2.128856\ndtype: float64\n\nIn [114]: def f(x):\n     ...:     return Series([x.min(),x.max()],index=['min','max'])\n     ...:\n\nIn [115]: frame.apply(f)\nOut[115]:\n            a         b         c\nmin  0.460170 -1.659938 -1.176786\nmax  0.860822  0.886977  0.952070\n\nIn [116]: format = lambda x: '%.2f' % x\n\nIn [117]: frame.applymap(format)\nOut[117]:\n         a      b      c\nrow1  0.76   0.89  -0.98\nrow2  0.46  -0.51   0.18\nrow3  0.83  -0.55  -1.18\nrow4  0.86  -1.66   0.95\n\nIn [118]: frame['a'].map(format)\nOut[118]:\nrow1    0.76\nrow2    0.46\nrow3    0.83\nrow4    0.86\nName: a, dtype: object\n```\n### 排序和排名\n#### 排序\n使用`sort_index`方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置`ascending=False`来降序排序：\n```\nIn [134]: obj = Series(range(4), index=list('dabc'))\n\nIn [135]: obj.sort_index()\nOut[135]:\na    1\nb    2\nc    3\nd    0\ndtype: int64\n\nIn [136]: frame = DataFrame(np.arange(8).reshape((2,4)),index=['col2','col1'],\n     ...:                    columns=list('badc'))\n     ...:\n\nIn [137]: frame.sort_index()\nOut[137]:\n      b  a  d  c\ncol1  4  5  6  7\ncol2  0  1  2  3\n\nIn [138]: frame.sort_index(axis=1)\nOut[138]:\n      a  b  c  d\ncol2  1  0  3  2\ncol1  5  4  7  6\n\nIn [139]: frame.sort_index(axis=1, ascending=False)\nOut[139]:\n      d  c  b  a\ncol2  2  3  0  1\ncol1  6  7  4  5\n```\n`sort_values`方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：\n```\nIn [144]: obj.sort_values()\nOut[144]:\n4   -3.0\n5    2.0\n0    4.0\n2    7.0\n1    NaN\n3    NaN\ndtype: float64\n```\n在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：\n```\nIn [150]: frame  = DataFrame({'b':[2,5,0,1],'a':[0,1,0,1]})\n\nIn [151]: frame\nOut[151]:\n   a  b\n0  0  2\n1  1  5\n2  0  0\n3  1  1\n\nIn [152]: frame.sort_values(by='b')\nOut[152]:\n   a  b\n2  0  0\n3  1  1\n0  0  2\n1  1  5\n\nIn [153]: frame.sort_values(by=['a','b'])\nOut[153]:\n   a  b\n2  0  0\n0  0  2\n3  1  1\n1  1  5\n```\n#### 排名\n排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；`rank`是通过“为各组分配一个平均排名”的方式破坏平级关系[^1]。\n* 排名用于破坏平级关系的method的选项\n\n|   method  |                   说明                   |\n| :-------: | :--------------------------------------: |\n| 'average' | 默认：在相等分组中，为各个值分配平均排名 |\n|   'min'   |          使用整个分组的最小排名          |\n|   'max'   |          使用整个分组的最大排名          |\n|  'first'  | 按值在原始数据中的出现顺序分配排名                                         |\n\n按降序进行排名使用`ascending=False`，其他的相似:\n```\nIn [9]: obj = Series([7,6,7,5,4,4,3])\n\nIn [10]: obj.rank()\nOut[10]:\n0    6.5\n1    5.0\n2    6.5\n3    4.0\n4    2.5\n5    2.5\n6    1.0\ndtype: float64\n\nIn [11]: obj.rank(method='min')\nOut[11]:\n0    6.0\n1    5.0\n2    6.0\n3    4.0\n4    2.0\n5    2.0\n6    1.0\ndtype: float64\n\nIn [12]: obj.rank(method='max')\nOut[12]:\n0    7.0\n1    5.0\n2    7.0\n3    4.0\n4    3.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [13]: obj.rank(method='first')\nOut[13]:\n0    6.0\n1    5.0\n2    7.0\n3    4.0\n4    2.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [9]: obj = Series([7,6,7,5,4,4,3])\n\nIn [10]: obj.rank()\nOut[10]:\n0    6.5\n1    5.0\n2    6.5\n3    4.0\n4    2.5\n5    2.5\n6    1.0\ndtype: float64\n\nIn [11]: obj.rank(method='min')\nOut[11]:\n0    6.0\n1    5.0\n2    6.0\n3    4.0\n4    2.0\n5    2.0\n6    1.0\ndtype: float64\n\nIn [12]: obj.rank(method='max')\nOut[12]:\n0    7.0\n1    5.0\n2    7.0\n3    4.0\n4    3.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [13]: obj.rank(method='first')\nOut[13]:\n0    6.0\n1    5.0\n2    7.0\n3    4.0\n4    2.0\n5    3.0\n6    1.0\ndtype: float64\n```\n\nDataFrame可以在行或列上计算排名:\n```\nIn [15]: frame = DataFrame({'b':[1,3,-1],'a':[2,-1,-2],'c':[1,2,3]})\n\nIn [16]: frame\nOut[16]:\n   a  b  c\n0  2  1  1\n1 -1  3  2\n2 -2 -1  3\n\nIn [17]: frame.rank(axis=0)\nOut[17]:\n     a    b    c\n0  3.0  2.0  1.0\n1  2.0  3.0  2.0\n2  1.0  1.0  3.0\n\nIn [18]: frame.rank(axis=1)\nOut[18]:\n     a    b    c\n0  3.0  1.5  1.5\n1  1.0  3.0  2.0\n2  1.0  2.0  3.0\n\n```\n\n### 带有重复值的轴索引\n带有重复索引值的Series和DataFrame可以使用`is_unique`属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：\n```\nIn [19]: obj = Series(range(5),index=list('abbvd'))\n\nIn [20]: obj\nOut[20]:\na    0\nb    1\nb    2\nv    3\nd    4\ndtype: int32\n\nIn [21]: obj.index.is_unique\nOut[21]: False\n\nIn [22]: obj['a']\nOut[22]: 0\n\nIn [23]: obj['b']\nOut[23]:\nb    1\nb    2\ndtype: int32\n\nIn [24]: df = DataFrame(np.random.randn(4,3),index=['a','a','b','c'])\n\nIn [26]: df\nOut[26]:\n          0         1         2\na  2.139973  0.102242  0.366141\na -0.999559  0.324575 -0.808672\nb  1.121435  1.508694  1.151597\nc  0.610592  1.623871 -1.331131\n\nIn [27]: df.loc['c']\nOut[27]:\n0    0.610592\n1    1.623871\n2   -1.331131\nName: c, dtype: float64\n\nIn [28]: df.loc['a']\nOut[28]:\n          0         1         2\na  2.139973  0.102242  0.366141\na -0.999559  0.324575 -0.808672\n```\n[^1]: 破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。\n","source":"_posts/pandas入门-二.md","raw":"---\ntitle: pandas入门(二)\ndate: 2018-03-19 16:51:47\ncategories: true\ncopyright: true\ntags:\n    - pandas\n    - 数据分析\ndescription: 主要记录操作Series和DataFrame中的数据的基本手段。后面将更深入地挖掘pandas在数据分析和处理方面的功能\n---\n## 基本功能\n### 重新索引\n\n* reindex的(插值)method选项\n\n|      参数       |        说明        |\n|:---------------:|:------------------:|\n|   fffill或pad   | 前向填充(或搬运)值 |\n| bfill或backfill | 后向填充(或搬运)值 |\n\n* reindex函数的参数\n\n|    参数    |                                                       说明                                                       |\n|:----------:|:----------------------------------------------------------------------------------------------------------------:|\n|   index    | 用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样 |\n|   method   |                                                  插值(填充)方式                                                  |\n| fill_value |                                 再重新索引的过程中，需要引入缺失值时使用的替代值                                 |\n|   limit    |                                           前向或后向填充时的最大填充量                                           |\n|   level    |                               在MultiIndex的指定级别上匹配简单索引，否则选取其子集                               |\n|    copy    | 默认为True，无论如何都复制；如果为False，则新旧相等就不复制                                                                                                                |\n\npandas对象的`reindex`方法用于创建一个适应新索引的新对象，`reindex`将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。`method`选项可以在重新索引时做一些插值处理：\n```\nIn [86]: obj = Series([1,2,3,4],index=['a','b','c','d'])\n\nIn [87]: obj\nOut[87]:\na    1\nb    2\nc    3\nd    4\ndtype: int64\n\nIn [88]: obj2 = obj.reindex(['q','w','e','r'])\n\nIn [89]: obj2\nOut[89]:\nq   NaN\nw   NaN\ne   NaN\nr   NaN\ndtype: float64\n\nIn [90]: obj2 = obj.reindex(['a','b','c','d','e'])\n\nIn [91]: obj2\nOut[91]:\na    1.0\nb    2.0\nc    3.0\nd    4.0\ne    NaN\ndtype: float64\n\nIn [94]: obj2 = obj.reindex(['a','b','c','d','e'],fill_value=0)\n\nIn [95]: obj2\nOut[95]:\na    1\nb    2\nc    3\nd    4\ne    0\ndtype: int64\n\nIn [98]: obj3 = obj.reindex(['a','b','e','f','c','d'],method='ffill')\n\nIn [99]: obj3\nOut[99]:\na    1\nb    2\ne    4\nf    4\nc    3\nd    4\ndtype: int64\n```\n\n对于DataFrame,`reindex`可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用`columns`关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):\n```\nIn [105]: frame = DataFrame(np.arange(9).reshape((3,3)),index=['a','b','c'],columns=['col1','col2','col3'])\n\nIn [106]: frame2 = frame.reindex(['a','b','c','d'])\n\nIn [107]: frame2\nOut[107]:\n   col1  col2  col3\na   0.0   1.0   2.0\nb   3.0   4.0   5.0\nc   6.0   7.0   8.0\nd   NaN   NaN   NaN\n\nIn [108]: frame.reindex(columns=['col_a','col1','col2','col3'])\nOut[108]:\n   col_a  col1  col2  col3\na    NaN     0     1     2\nb    NaN     3     4     5\nc    NaN     6     7     8\n\nIn [109]: frame.reindex(index=['a','b','c','d'],method='ffill',columns=['col_a','col1','col2','col3'])\nOut[109]:\n   col_a  col1  col2  col3\na      2     0     1     2\nb      5     3     4     5\nc      8     6     7     8\nd      8     6     7     8\n```\n利用ix的标签索引功能重新索引：\n```\nIn [111]: frame.ix[['a','b','c','d'],['col_a','col1','col2','col3']]\nOut[111]:\n   col_a  col1  col2  col3\na    NaN   0.0   1.0   2.0\nb    NaN   3.0   4.0   5.0\nc    NaN   6.0   7.0   8.0\nd    NaN   NaN   NaN   NaN\n```\n### 丢弃指定轴上的项\n使用`drop`方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:\n```\nIn [112]: obj = Series([1,2,3,4],index=['a','b','c','d'])\n\nIn [113]: obj.drop('a')\nOut[113]:\nb    2\nc    3\nd    4\ndtype: int64\n\nIn [114]: obj.drop(['a','b'])\nOut[114]:\nc    3\nd    4\ndtype: int64\n\nIn [115]: frame = DataFrame(np.arange(9).reshape((3,3)),index=['a','b','c'],columns=['col1','col2','col3'])\n\nIn [116]: frame.drop(['a','b'])\nOut[116]:\n   col1  col2  col3\nc     6     7     8\n\nIn [117]: frame.drop(['col1','col2'],axis=1)\nOut[117]:\n   col3\na     2\nb     5\nc     8\n```\n\n### 索引、选取和过滤\nSeries索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 **末端时包含的(封闭)**：\n```\nIn [3]: obj = Series(np.arange(4), index=['a','b','c','d'])\n\nIn [4]: obj\nOut[4]:\na    0\nb    1\nc    2\nd    3\ndtype: int64\n\nIn [5]: obj['a']\nOut[5]: 0\n\nIn [6]: obj[2:4]\nOut[6]:\nc    2\nd    3\ndtype: int64\n\nIn [7]: obj['c':'d']\nOut[7]:\nc    2\nd    3\ndtype: int64\n\nIn [8]: obj[['a','d']]\nOut[8]:\na    0\nd    3\ndtype: int64\n\nIn [9]: obj['b':'c']=5\n\nIn [10]: obj\nOut[10]:\na    0\nb    5\nc    5\nd    3\ndtype: int64\n```\n\n对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：\n```\nIn [15]: data = DataFrame(np.arange(16).reshape(4,4),\n    ...:                 index=['a','b','c','d'],\n    ...:                 columns=['col1','col2','col3','col4'])\n    ...:\n\nIn [16]: data\nOut[16]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [17]: data['col1']\nOut[17]:\na     0\nb     4\nc     8\nd    12\nName: col1, dtype: int64\n\nIn [18]: data[['col1','col4']]\nOut[18]:\n   col1  col4\na     0     3\nb     4     7\nc     8    11\nd    12    15\n\nIn [19]: data[:2]\nOut[19]:\n   col1  col2  col3  col4\na     0     1     2     3\nb     4     5     6     7\n\nIn [20]: data[data['col3']>5]\nOut[20]:\n   col1  col2  col3  col4\nb     4     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n\nIn [21]: data<5\nOut[21]:\n    col1   col2   col3   col4\na   True   True   True   True\nb   True  False  False  False\nc  False  False  False  False\nd  False  False  False  False\n\nIn [22]: data[data<5] = -5\n\nIn [23]: data\nOut[23]:\n   col1  col2  col3  col4\na    -5    -5    -5    -5\nb    -5     5     6     7\nc     8     9    10    11\nd    12    13    14    15\n```\n为了在DataFrame的行上进行标签索引，可以通过`loc`进行：\n```\nIn [48]: data.loc['a',['col1','col2']]\nOut[48]:\ncol1   -5\ncol2   -5\nName: a, dtype: int64\n\nIn [49]: data.loc[['a','d'],['col1','col3']]\nOut[49]:\n   col1  col3\na    -5    -5\nd    12    14\n\nIn [50]: data.loc[data.col3>5,:'col3']\nOut[50]:\n   col1  col2  col3\nb    -5     5     6\nc     8     9    10\nd    12    13    14\n```\n\n### 算术运算和数据对齐\npandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:\n```\nIn [55]: s1 = Series(np.arange(3),index=['a','b','c'])\n\nIn [56]: s2 = Series(np.arange(3,9),index=['a','b','c','d','e','f'])\n\nIn [57]: s1\nOut[57]:\na    0\nb    1\nc    2\ndtype: int64\n\nIn [58]: s2\nOut[58]:\na    3\nb    4\nc    5\nd    6\ne    7\nf    8\ndtype: int64\n\nIn [59]: s1+s2\nOut[59]:\na    3.0\nb    5.0\nc    7.0\nd    NaN\ne    NaN\nf    NaN\ndtype: float64\n```\n对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：\n```\nIn [65]: df1 = DataFrame(np.arange(9).reshape(3,3),columns=list('abc'),\n    ...:                 index=['row1','row2','row3'])\n    ...:\n\nIn [66]: df2 = DataFrame(np.arange(16).reshape(4,4),columns=list('abcd'),\n    ...:                 index=['row1','row2','row3','row4'])\n    ...:\n\nIn [67]: df1\nOut[67]:\n      a  b  c\nrow1  0  1  2\nrow2  3  4  5\nrow3  6  7  8\n\nIn [68]: df2\nOut[68]:\n       a   b   c   d\nrow1   0   1   2   3\nrow2   4   5   6   7\nrow3   8   9  10  11\nrow4  12  13  14  15\n\nIn [69]: df1+df2\nOut[69]:\n         a     b     c   d\nrow1   0.0   2.0   4.0 NaN\nrow2   7.0   9.0  11.0 NaN\nrow3  14.0  16.0  18.0 NaN\nrow4   NaN   NaN   NaN NaN\n```\n#### 在算术方法中填充值\n* 灵活的算术方法\n\n| 方法 |        说明       |\n| :--: | :---------------: |\n| add  | 用于加法(+)的方法 |\n| sub  | 用于减法(-)的方法 |\n| div  | 用于除法(/)的方法 |\n| mul  | 用于乘法(*)的方法                  |\n\n对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：\n```\nIn [76]: df2.add(df1,fill_value=0)\nOut[76]:\n         a     b     c     d\nrow1   0.0   2.0   4.0   3.0\nrow2   7.0   9.0  11.0   7.0\nrow3  14.0  16.0  18.0  11.0\nrow4  12.0  13.0  14.0  15.0\n\nIn [77]: df1.reindex(columns=df2.columns,fill_value=0)\nOut[77]:\n      a  b  c  d\nrow1  0  1  2  0\nrow2  3  4  5  0\nrow3  6  7  8  0\n```\n\n#### DataFrame和Series之间的运算\n默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：\n```\nIn [94]: s1 = df2.loc['row1']\n\nIn [95]: df2\nOut[95]:\n       a   b   c   d\nrow1   0   1   2   3\nrow2   4   5   6   7\nrow3   8   9  10  11\nrow4  12  13  14  15\n\nIn [96]: s1\nOut[96]:\na    0\nb    1\nc    2\nd    3\nName: row1, dtype: int64\n\nIn [97]: df2-s1\nOut[97]:\n       a   b   c   d\nrow1   0   0   0   0\nrow2   4   4   4   4\nrow3   8   8   8   8\nrow4  12  12  12  12\n\nIn [98]: s2 = Series(range(3),index=list('abf'))\n\nIn [99]: df2-s2\nOut[99]:\n         a     b   c   d   f\nrow1   0.0   0.0 NaN NaN NaN\nrow2   4.0   4.0 NaN NaN NaN\nrow3   8.0   8.0 NaN NaN NaN\nrow4  12.0  12.0 NaN NaN NaN\n\nIn [100]: s3  = df2['a']\n\nOut[101]:\n      a  b  c  d\nrow1  0  1  2  3\nrow2  0  1  2  3\nrow3  0  1  2  3\nrow4  0  1  2  3\n```\n\n### 函数应用和映射\nNumPy的[ufuncs](http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0)(元素级数组方法)也可用于操作pandas对象:\n```\nIn [102]: frame = DataFrame(np.random.randn(4,3),columns=list('abc'),\n     ...:                   index=['row1','row2','row3','row4'])\n     ...:\n\nIn [103]: frame\nOut[103]:\n             a         b         c\nrow1  0.755289  0.886977 -0.984527\nrow2  0.460170 -0.514393  0.180462\nrow3  0.828386 -0.545317 -1.176786\nrow4  0.860822 -1.659938  0.952070\n\nIn [104]: np.abs(frame)\nOut[104]:\n             a         b         c\nrow1  0.755289  0.886977  0.984527\nrow2  0.460170  0.514393  0.180462\nrow3  0.828386  0.545317  1.176786\nrow4  0.860822  1.659938  0.952070\n\n```\n\n`apply`方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用`apply`方法；除标量外，传递给`apply`的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用`applymap`得到frame中各个浮点值的格式化字符串:\n```\nIn [112]: f = lambda x:x.max() -x.min()\n\nIn [113]: frame.apply(f)\nOut[113]:\na    0.400653\nb    2.546915\nc    2.128856\ndtype: float64\n\nIn [114]: def f(x):\n     ...:     return Series([x.min(),x.max()],index=['min','max'])\n     ...:\n\nIn [115]: frame.apply(f)\nOut[115]:\n            a         b         c\nmin  0.460170 -1.659938 -1.176786\nmax  0.860822  0.886977  0.952070\n\nIn [116]: format = lambda x: '%.2f' % x\n\nIn [117]: frame.applymap(format)\nOut[117]:\n         a      b      c\nrow1  0.76   0.89  -0.98\nrow2  0.46  -0.51   0.18\nrow3  0.83  -0.55  -1.18\nrow4  0.86  -1.66   0.95\n\nIn [118]: frame['a'].map(format)\nOut[118]:\nrow1    0.76\nrow2    0.46\nrow3    0.83\nrow4    0.86\nName: a, dtype: object\n```\n### 排序和排名\n#### 排序\n使用`sort_index`方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置`ascending=False`来降序排序：\n```\nIn [134]: obj = Series(range(4), index=list('dabc'))\n\nIn [135]: obj.sort_index()\nOut[135]:\na    1\nb    2\nc    3\nd    0\ndtype: int64\n\nIn [136]: frame = DataFrame(np.arange(8).reshape((2,4)),index=['col2','col1'],\n     ...:                    columns=list('badc'))\n     ...:\n\nIn [137]: frame.sort_index()\nOut[137]:\n      b  a  d  c\ncol1  4  5  6  7\ncol2  0  1  2  3\n\nIn [138]: frame.sort_index(axis=1)\nOut[138]:\n      a  b  c  d\ncol2  1  0  3  2\ncol1  5  4  7  6\n\nIn [139]: frame.sort_index(axis=1, ascending=False)\nOut[139]:\n      d  c  b  a\ncol2  2  3  0  1\ncol1  6  7  4  5\n```\n`sort_values`方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：\n```\nIn [144]: obj.sort_values()\nOut[144]:\n4   -3.0\n5    2.0\n0    4.0\n2    7.0\n1    NaN\n3    NaN\ndtype: float64\n```\n在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：\n```\nIn [150]: frame  = DataFrame({'b':[2,5,0,1],'a':[0,1,0,1]})\n\nIn [151]: frame\nOut[151]:\n   a  b\n0  0  2\n1  1  5\n2  0  0\n3  1  1\n\nIn [152]: frame.sort_values(by='b')\nOut[152]:\n   a  b\n2  0  0\n3  1  1\n0  0  2\n1  1  5\n\nIn [153]: frame.sort_values(by=['a','b'])\nOut[153]:\n   a  b\n2  0  0\n0  0  2\n3  1  1\n1  1  5\n```\n#### 排名\n排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；`rank`是通过“为各组分配一个平均排名”的方式破坏平级关系[^1]。\n* 排名用于破坏平级关系的method的选项\n\n|   method  |                   说明                   |\n| :-------: | :--------------------------------------: |\n| 'average' | 默认：在相等分组中，为各个值分配平均排名 |\n|   'min'   |          使用整个分组的最小排名          |\n|   'max'   |          使用整个分组的最大排名          |\n|  'first'  | 按值在原始数据中的出现顺序分配排名                                         |\n\n按降序进行排名使用`ascending=False`，其他的相似:\n```\nIn [9]: obj = Series([7,6,7,5,4,4,3])\n\nIn [10]: obj.rank()\nOut[10]:\n0    6.5\n1    5.0\n2    6.5\n3    4.0\n4    2.5\n5    2.5\n6    1.0\ndtype: float64\n\nIn [11]: obj.rank(method='min')\nOut[11]:\n0    6.0\n1    5.0\n2    6.0\n3    4.0\n4    2.0\n5    2.0\n6    1.0\ndtype: float64\n\nIn [12]: obj.rank(method='max')\nOut[12]:\n0    7.0\n1    5.0\n2    7.0\n3    4.0\n4    3.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [13]: obj.rank(method='first')\nOut[13]:\n0    6.0\n1    5.0\n2    7.0\n3    4.0\n4    2.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [9]: obj = Series([7,6,7,5,4,4,3])\n\nIn [10]: obj.rank()\nOut[10]:\n0    6.5\n1    5.0\n2    6.5\n3    4.0\n4    2.5\n5    2.5\n6    1.0\ndtype: float64\n\nIn [11]: obj.rank(method='min')\nOut[11]:\n0    6.0\n1    5.0\n2    6.0\n3    4.0\n4    2.0\n5    2.0\n6    1.0\ndtype: float64\n\nIn [12]: obj.rank(method='max')\nOut[12]:\n0    7.0\n1    5.0\n2    7.0\n3    4.0\n4    3.0\n5    3.0\n6    1.0\ndtype: float64\n\nIn [13]: obj.rank(method='first')\nOut[13]:\n0    6.0\n1    5.0\n2    7.0\n3    4.0\n4    2.0\n5    3.0\n6    1.0\ndtype: float64\n```\n\nDataFrame可以在行或列上计算排名:\n```\nIn [15]: frame = DataFrame({'b':[1,3,-1],'a':[2,-1,-2],'c':[1,2,3]})\n\nIn [16]: frame\nOut[16]:\n   a  b  c\n0  2  1  1\n1 -1  3  2\n2 -2 -1  3\n\nIn [17]: frame.rank(axis=0)\nOut[17]:\n     a    b    c\n0  3.0  2.0  1.0\n1  2.0  3.0  2.0\n2  1.0  1.0  3.0\n\nIn [18]: frame.rank(axis=1)\nOut[18]:\n     a    b    c\n0  3.0  1.5  1.5\n1  1.0  3.0  2.0\n2  1.0  2.0  3.0\n\n```\n\n### 带有重复值的轴索引\n带有重复索引值的Series和DataFrame可以使用`is_unique`属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：\n```\nIn [19]: obj = Series(range(5),index=list('abbvd'))\n\nIn [20]: obj\nOut[20]:\na    0\nb    1\nb    2\nv    3\nd    4\ndtype: int32\n\nIn [21]: obj.index.is_unique\nOut[21]: False\n\nIn [22]: obj['a']\nOut[22]: 0\n\nIn [23]: obj['b']\nOut[23]:\nb    1\nb    2\ndtype: int32\n\nIn [24]: df = DataFrame(np.random.randn(4,3),index=['a','a','b','c'])\n\nIn [26]: df\nOut[26]:\n          0         1         2\na  2.139973  0.102242  0.366141\na -0.999559  0.324575 -0.808672\nb  1.121435  1.508694  1.151597\nc  0.610592  1.623871 -1.331131\n\nIn [27]: df.loc['c']\nOut[27]:\n0    0.610592\n1    1.623871\n2   -1.331131\nName: c, dtype: float64\n\nIn [28]: df.loc['a']\nOut[28]:\n          0         1         2\na  2.139973  0.102242  0.366141\na -0.999559  0.324575 -0.808672\n```\n[^1]: 破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。\n","slug":"pandas入门-二","published":1,"updated":"2018-03-20T01:27:59.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw55001etwn9wm8dyg8k","content":"<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"重新索引\"><a href=\"#重新索引\" class=\"headerlink\" title=\"重新索引\"></a>重新索引</h3><ul>\n<li>reindex的(插值)method选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">fffill或pad</td>\n<td style=\"text-align:center\">前向填充(或搬运)值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bfill或backfill</td>\n<td style=\"text-align:center\">后向填充(或搬运)值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>reindex函数的参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">插值(填充)方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fill_value</td>\n<td style=\"text-align:center\">再重新索引的过程中，需要引入缺失值时使用的替代值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">前向或后向填充时的最大填充量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">level</td>\n<td style=\"text-align:center\">在MultiIndex的指定级别上匹配简单索引，否则选取其子集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">默认为True，无论如何都复制；如果为False，则新旧相等就不复制</td>\n</tr>\n</tbody>\n</table>\n<p>pandas对象的<code>reindex</code>方法用于创建一个适应新索引的新对象，<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。<code>method</code>选项可以在重新索引时做一些插值处理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [86]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: obj</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: obj2 = obj.reindex([&apos;q&apos;,&apos;w&apos;,&apos;e&apos;,&apos;r&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [89]: obj2</span><br><span class=\"line\">Out[89]:</span><br><span class=\"line\">q   NaN</span><br><span class=\"line\">w   NaN</span><br><span class=\"line\">e   NaN</span><br><span class=\"line\">r   NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: obj2</span><br><span class=\"line\">Out[91]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    4.0</span><br><span class=\"line\">e    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [94]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;],fill_value=0)</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: obj2</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">e    0</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: obj3 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;e&apos;,&apos;f&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: obj3</span><br><span class=\"line\">Out[99]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">e    4</span><br><span class=\"line\">f    4</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame,<code>reindex</code>可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用<code>columns</code>关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [105]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: frame2 = frame.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [107]: frame2</span><br><span class=\"line\">Out[107]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">a   0.0   1.0   2.0</span><br><span class=\"line\">b   3.0   4.0   5.0</span><br><span class=\"line\">c   6.0   7.0   8.0</span><br><span class=\"line\">d   NaN   NaN   NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: frame.reindex(columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\">Out[108]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a    NaN     0     1     2</span><br><span class=\"line\">b    NaN     3     4     5</span><br><span class=\"line\">c    NaN     6     7     8</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: frame.reindex(index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;,columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a      2     0     1     2</span><br><span class=\"line\">b      5     3     4     5</span><br><span class=\"line\">c      8     6     7     8</span><br><span class=\"line\">d      8     6     7     8</span><br></pre></td></tr></table></figure></p>\n<p>利用ix的标签索引功能重新索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [111]: frame.ix[[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;]]</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a    NaN   0.0   1.0   2.0</span><br><span class=\"line\">b    NaN   3.0   4.0   5.0</span><br><span class=\"line\">c    NaN   6.0   7.0   8.0</span><br><span class=\"line\">d    NaN   NaN   NaN   NaN</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"丢弃指定轴上的项\"><a href=\"#丢弃指定轴上的项\" class=\"headerlink\" title=\"丢弃指定轴上的项\"></a>丢弃指定轴上的项</h3><p>使用<code>drop</code>方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: obj.drop(&apos;a&apos;)</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: obj.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: frame.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[116]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">c     6     7     8</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: frame.drop([&apos;col1&apos;,&apos;col2&apos;],axis=1)</span><br><span class=\"line\">Out[117]:</span><br><span class=\"line\">   col3</span><br><span class=\"line\">a     2</span><br><span class=\"line\">b     5</span><br><span class=\"line\">c     8</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引、选取和过滤\"><a href=\"#索引、选取和过滤\" class=\"headerlink\" title=\"索引、选取和过滤\"></a>索引、选取和过滤</h3><p>Series索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 <strong>末端时包含的(封闭)</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: obj = Series(np.arange(4), index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: obj</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: obj[&apos;a&apos;]</span><br><span class=\"line\">Out[5]: 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: obj[2:4]</span><br><span class=\"line\">Out[6]:</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: obj[&apos;c&apos;:&apos;d&apos;]</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: obj[[&apos;a&apos;,&apos;d&apos;]]</span><br><span class=\"line\">Out[8]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: obj[&apos;b&apos;:&apos;c&apos;]=5</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    5</span><br><span class=\"line\">c    5</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: data = DataFrame(np.arange(16).reshape(4,4),</span><br><span class=\"line\">    ...:                 index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: data</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: data[&apos;col1&apos;]</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">a     0</span><br><span class=\"line\">b     4</span><br><span class=\"line\">c     8</span><br><span class=\"line\">d    12</span><br><span class=\"line\">Name: col1, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: data[[&apos;col1&apos;,&apos;col4&apos;]]</span><br><span class=\"line\">Out[18]:</span><br><span class=\"line\">   col1  col4</span><br><span class=\"line\">a     0     3</span><br><span class=\"line\">b     4     7</span><br><span class=\"line\">c     8    11</span><br><span class=\"line\">d    12    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: data[:2]</span><br><span class=\"line\">Out[19]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: data[data[&apos;col3&apos;]&gt;5]</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: data&lt;5</span><br><span class=\"line\">Out[21]:</span><br><span class=\"line\">    col1   col2   col3   col4</span><br><span class=\"line\">a   True   True   True   True</span><br><span class=\"line\">b   True  False  False  False</span><br><span class=\"line\">c  False  False  False  False</span><br><span class=\"line\">d  False  False  False  False</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: data[data&lt;5] = -5</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: data</span><br><span class=\"line\">Out[23]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a    -5    -5    -5    -5</span><br><span class=\"line\">b    -5     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br></pre></td></tr></table></figure></p>\n<p>为了在DataFrame的行上进行标签索引，可以通过<code>loc</code>进行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [48]: data.loc[&apos;a&apos;,[&apos;col1&apos;,&apos;col2&apos;]]</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">col1   -5</span><br><span class=\"line\">col2   -5</span><br><span class=\"line\">Name: a, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: data.loc[[&apos;a&apos;,&apos;d&apos;],[&apos;col1&apos;,&apos;col3&apos;]]</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">   col1  col3</span><br><span class=\"line\">a    -5    -5</span><br><span class=\"line\">d    12    14</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: data.loc[data.col3&gt;5,:&apos;col3&apos;]</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">b    -5     5     6</span><br><span class=\"line\">c     8     9    10</span><br><span class=\"line\">d    12    13    14</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"算术运算和数据对齐\"><a href=\"#算术运算和数据对齐\" class=\"headerlink\" title=\"算术运算和数据对齐\"></a>算术运算和数据对齐</h3><p>pandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [55]: s1 = Series(np.arange(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: s2 = Series(np.arange(3,9),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: s1</span><br><span class=\"line\">Out[57]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: s2</span><br><span class=\"line\">Out[58]:</span><br><span class=\"line\">a    3</span><br><span class=\"line\">b    4</span><br><span class=\"line\">c    5</span><br><span class=\"line\">d    6</span><br><span class=\"line\">e    7</span><br><span class=\"line\">f    8</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: s1+s2</span><br><span class=\"line\">Out[59]:</span><br><span class=\"line\">a    3.0</span><br><span class=\"line\">b    5.0</span><br><span class=\"line\">c    7.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">e    NaN</span><br><span class=\"line\">f    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [65]: df1 = DataFrame(np.arange(9).reshape(3,3),columns=list(&apos;abc&apos;),</span><br><span class=\"line\">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [66]: df2 = DataFrame(np.arange(16).reshape(4,4),columns=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: df1</span><br><span class=\"line\">Out[67]:</span><br><span class=\"line\">      a  b  c</span><br><span class=\"line\">row1  0  1  2</span><br><span class=\"line\">row2  3  4  5</span><br><span class=\"line\">row3  6  7  8</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: df2</span><br><span class=\"line\">Out[68]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   1   2   3</span><br><span class=\"line\">row2   4   5   6   7</span><br><span class=\"line\">row3   8   9  10  11</span><br><span class=\"line\">row4  12  13  14  15</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: df1+df2</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">         a     b     c   d</span><br><span class=\"line\">row1   0.0   2.0   4.0 NaN</span><br><span class=\"line\">row2   7.0   9.0  11.0 NaN</span><br><span class=\"line\">row3  14.0  16.0  18.0 NaN</span><br><span class=\"line\">row4   NaN   NaN   NaN NaN</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在算术方法中填充值\"><a href=\"#在算术方法中填充值\" class=\"headerlink\" title=\"在算术方法中填充值\"></a>在算术方法中填充值</h4><ul>\n<li>灵活的算术方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\">用于加法(+)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub</td>\n<td style=\"text-align:center\">用于减法(-)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div</td>\n<td style=\"text-align:center\">用于除法(/)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mul</td>\n<td style=\"text-align:center\">用于乘法(*)的方法</td>\n</tr>\n</tbody>\n</table>\n<p>对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [76]: df2.add(df1,fill_value=0)</span><br><span class=\"line\">Out[76]:</span><br><span class=\"line\">         a     b     c     d</span><br><span class=\"line\">row1   0.0   2.0   4.0   3.0</span><br><span class=\"line\">row2   7.0   9.0  11.0   7.0</span><br><span class=\"line\">row3  14.0  16.0  18.0  11.0</span><br><span class=\"line\">row4  12.0  13.0  14.0  15.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: df1.reindex(columns=df2.columns,fill_value=0)</span><br><span class=\"line\">Out[77]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">row1  0  1  2  0</span><br><span class=\"line\">row2  3  4  5  0</span><br><span class=\"line\">row3  6  7  8  0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DataFrame和Series之间的运算\"><a href=\"#DataFrame和Series之间的运算\" class=\"headerlink\" title=\"DataFrame和Series之间的运算\"></a>DataFrame和Series之间的运算</h4><p>默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [94]: s1 = df2.loc[&apos;row1&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: df2</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   1   2   3</span><br><span class=\"line\">row2   4   5   6   7</span><br><span class=\"line\">row3   8   9  10  11</span><br><span class=\"line\">row4  12  13  14  15</span><br><span class=\"line\"></span><br><span class=\"line\">In [96]: s1</span><br><span class=\"line\">Out[96]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">Name: row1, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: df2-s1</span><br><span class=\"line\">Out[97]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   0   0   0</span><br><span class=\"line\">row2   4   4   4   4</span><br><span class=\"line\">row3   8   8   8   8</span><br><span class=\"line\">row4  12  12  12  12</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: s2 = Series(range(3),index=list(&apos;abf&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: df2-s2</span><br><span class=\"line\">Out[99]:</span><br><span class=\"line\">         a     b   c   d   f</span><br><span class=\"line\">row1   0.0   0.0 NaN NaN NaN</span><br><span class=\"line\">row2   4.0   4.0 NaN NaN NaN</span><br><span class=\"line\">row3   8.0   8.0 NaN NaN NaN</span><br><span class=\"line\">row4  12.0  12.0 NaN NaN NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: s3  = df2[&apos;a&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">Out[101]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">row1  0  1  2  3</span><br><span class=\"line\">row2  0  1  2  3</span><br><span class=\"line\">row3  0  1  2  3</span><br><span class=\"line\">row4  0  1  2  3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数应用和映射\"><a href=\"#函数应用和映射\" class=\"headerlink\" title=\"函数应用和映射\"></a>函数应用和映射</h3><p>NumPy的<a href=\"http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0\">ufuncs</a>(元素级数组方法)也可用于操作pandas对象:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [102]: frame = DataFrame(np.random.randn(4,3),columns=list(&apos;abc&apos;),</span><br><span class=\"line\">     ...:                   index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [103]: frame</span><br><span class=\"line\">Out[103]:</span><br><span class=\"line\">             a         b         c</span><br><span class=\"line\">row1  0.755289  0.886977 -0.984527</span><br><span class=\"line\">row2  0.460170 -0.514393  0.180462</span><br><span class=\"line\">row3  0.828386 -0.545317 -1.176786</span><br><span class=\"line\">row4  0.860822 -1.659938  0.952070</span><br><span class=\"line\"></span><br><span class=\"line\">In [104]: np.abs(frame)</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">             a         b         c</span><br><span class=\"line\">row1  0.755289  0.886977  0.984527</span><br><span class=\"line\">row2  0.460170  0.514393  0.180462</span><br><span class=\"line\">row3  0.828386  0.545317  1.176786</span><br><span class=\"line\">row4  0.860822  1.659938  0.952070</span><br></pre></td></tr></table></figure></p>\n<p><code>apply</code>方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用<code>apply</code>方法；除标量外，传递给<code>apply</code>的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用<code>applymap</code>得到frame中各个浮点值的格式化字符串:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: f = lambda x:x.max() -x.min()</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: frame.apply(f)</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">a    0.400653</span><br><span class=\"line\">b    2.546915</span><br><span class=\"line\">c    2.128856</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: def f(x):</span><br><span class=\"line\">     ...:     return Series([x.min(),x.max()],index=[&apos;min&apos;,&apos;max&apos;])</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: frame.apply(f)</span><br><span class=\"line\">Out[115]:</span><br><span class=\"line\">            a         b         c</span><br><span class=\"line\">min  0.460170 -1.659938 -1.176786</span><br><span class=\"line\">max  0.860822  0.886977  0.952070</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: format = lambda x: &apos;%.2f&apos; % x</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: frame.applymap(format)</span><br><span class=\"line\">Out[117]:</span><br><span class=\"line\">         a      b      c</span><br><span class=\"line\">row1  0.76   0.89  -0.98</span><br><span class=\"line\">row2  0.46  -0.51   0.18</span><br><span class=\"line\">row3  0.83  -0.55  -1.18</span><br><span class=\"line\">row4  0.86  -1.66   0.95</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: frame[&apos;a&apos;].map(format)</span><br><span class=\"line\">Out[118]:</span><br><span class=\"line\">row1    0.76</span><br><span class=\"line\">row2    0.46</span><br><span class=\"line\">row3    0.83</span><br><span class=\"line\">row4    0.86</span><br><span class=\"line\">Name: a, dtype: object</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"排序和排名\"><a href=\"#排序和排名\" class=\"headerlink\" title=\"排序和排名\"></a>排序和排名</h3><h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>使用<code>sort_index</code>方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置<code>ascending=False</code>来降序排序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [134]: obj = Series(range(4), index=list(&apos;dabc&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [135]: obj.sort_index()</span><br><span class=\"line\">Out[135]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    0</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [136]: frame = DataFrame(np.arange(8).reshape((2,4)),index=[&apos;col2&apos;,&apos;col1&apos;],</span><br><span class=\"line\">     ...:                    columns=list(&apos;badc&apos;))</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [137]: frame.sort_index()</span><br><span class=\"line\">Out[137]:</span><br><span class=\"line\">      b  a  d  c</span><br><span class=\"line\">col1  4  5  6  7</span><br><span class=\"line\">col2  0  1  2  3</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: frame.sort_index(axis=1)</span><br><span class=\"line\">Out[138]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">col2  1  0  3  2</span><br><span class=\"line\">col1  5  4  7  6</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: frame.sort_index(axis=1, ascending=False)</span><br><span class=\"line\">Out[139]:</span><br><span class=\"line\">      d  c  b  a</span><br><span class=\"line\">col2  2  3  0  1</span><br><span class=\"line\">col1  6  7  4  5</span><br></pre></td></tr></table></figure></p>\n<p><code>sort_values</code>方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [144]: obj.sort_values()</span><br><span class=\"line\">Out[144]:</span><br><span class=\"line\">4   -3.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">0    4.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">1    NaN</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [150]: frame  = DataFrame(&#123;&apos;b&apos;:[2,5,0,1],&apos;a&apos;:[0,1,0,1]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [151]: frame</span><br><span class=\"line\">Out[151]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">1  1  5</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\"></span><br><span class=\"line\">In [152]: frame.sort_values(by=&apos;b&apos;)</span><br><span class=\"line\">Out[152]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">1  1  5</span><br><span class=\"line\"></span><br><span class=\"line\">In [153]: frame.sort_values(by=[&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[153]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\">1  1  5</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h4><p>排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；<code>rank</code>是通过“为各组分配一个平均排名”的方式破坏平级关系<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。</p>\n<ul>\n<li>排名用于破坏平级关系的method的选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">method</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘average’</td>\n<td style=\"text-align:center\">默认：在相等分组中，为各个值分配平均排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘min’</td>\n<td style=\"text-align:center\">使用整个分组的最小排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘max’</td>\n<td style=\"text-align:center\">使用整个分组的最大排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘first’</td>\n<td style=\"text-align:center\">按值在原始数据中的出现顺序分配排名</td>\n</tr>\n</tbody>\n</table>\n<p>按降序进行排名使用<code>ascending=False</code>，其他的相似:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj.rank()</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">0    6.5</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.5</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.5</span><br><span class=\"line\">5    2.5</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class=\"line\">Out[12]:</span><br><span class=\"line\">0    7.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    3.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj.rank()</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">0    6.5</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.5</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.5</span><br><span class=\"line\">5    2.5</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class=\"line\">Out[12]:</span><br><span class=\"line\">0    7.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    3.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>DataFrame可以在行或列上计算排名:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: frame = DataFrame(&#123;&apos;b&apos;:[1,3,-1],&apos;a&apos;:[2,-1,-2],&apos;c&apos;:[1,2,3]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: frame</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">   a  b  c</span><br><span class=\"line\">0  2  1  1</span><br><span class=\"line\">1 -1  3  2</span><br><span class=\"line\">2 -2 -1  3</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: frame.rank(axis=0)</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">     a    b    c</span><br><span class=\"line\">0  3.0  2.0  1.0</span><br><span class=\"line\">1  2.0  3.0  2.0</span><br><span class=\"line\">2  1.0  1.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: frame.rank(axis=1)</span><br><span class=\"line\">Out[18]:</span><br><span class=\"line\">     a    b    c</span><br><span class=\"line\">0  3.0  1.5  1.5</span><br><span class=\"line\">1  1.0  3.0  2.0</span><br><span class=\"line\">2  1.0  2.0  3.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"带有重复值的轴索引\"><a href=\"#带有重复值的轴索引\" class=\"headerlink\" title=\"带有重复值的轴索引\"></a>带有重复值的轴索引</h3><p>带有重复索引值的Series和DataFrame可以使用<code>is_unique</code>属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: obj = Series(range(5),index=list(&apos;abbvd&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: obj</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">v    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: obj.index.is_unique</span><br><span class=\"line\">Out[21]: False</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: obj[&apos;a&apos;]</span><br><span class=\"line\">Out[22]: 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: obj[&apos;b&apos;]</span><br><span class=\"line\">Out[23]:</span><br><span class=\"line\">b    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: df = DataFrame(np.random.randn(4,3),index=[&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: df</span><br><span class=\"line\">Out[26]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">a  2.139973  0.102242  0.366141</span><br><span class=\"line\">a -0.999559  0.324575 -0.808672</span><br><span class=\"line\">b  1.121435  1.508694  1.151597</span><br><span class=\"line\">c  0.610592  1.623871 -1.331131</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: df.loc[&apos;c&apos;]</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">0    0.610592</span><br><span class=\"line\">1    1.623871</span><br><span class=\"line\">2   -1.331131</span><br><span class=\"line\">Name: c, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: df.loc[&apos;a&apos;]</span><br><span class=\"line\">Out[28]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">a  2.139973  0.102242  0.366141</span><br><span class=\"line\">a -0.999559  0.324575 -0.808672</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"重新索引\"><a href=\"#重新索引\" class=\"headerlink\" title=\"重新索引\"></a>重新索引</h3><ul>\n<li>reindex的(插值)method选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">fffill或pad</td>\n<td style=\"text-align:center\">前向填充(或搬运)值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bfill或backfill</td>\n<td style=\"text-align:center\">后向填充(或搬运)值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>reindex函数的参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">用作索引的新序列。既可以是Index实例，也可以是其他序列型的Python数据结构。Index会被完全使用，就像没有任何复制一样</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method</td>\n<td style=\"text-align:center\">插值(填充)方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fill_value</td>\n<td style=\"text-align:center\">再重新索引的过程中，需要引入缺失值时使用的替代值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">前向或后向填充时的最大填充量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">level</td>\n<td style=\"text-align:center\">在MultiIndex的指定级别上匹配简单索引，否则选取其子集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">默认为True，无论如何都复制；如果为False，则新旧相等就不复制</td>\n</tr>\n</tbody>\n</table>\n<p>pandas对象的<code>reindex</code>方法用于创建一个适应新索引的新对象，<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值。<code>method</code>选项可以在重新索引时做一些插值处理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [86]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [87]: obj</span><br><span class=\"line\">Out[87]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [88]: obj2 = obj.reindex([&apos;q&apos;,&apos;w&apos;,&apos;e&apos;,&apos;r&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [89]: obj2</span><br><span class=\"line\">Out[89]:</span><br><span class=\"line\">q   NaN</span><br><span class=\"line\">w   NaN</span><br><span class=\"line\">e   NaN</span><br><span class=\"line\">r   NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [90]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [91]: obj2</span><br><span class=\"line\">Out[91]:</span><br><span class=\"line\">a    1.0</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    3.0</span><br><span class=\"line\">d    4.0</span><br><span class=\"line\">e    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [94]: obj2 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;],fill_value=0)</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: obj2</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">e    0</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: obj3 = obj.reindex([&apos;a&apos;,&apos;b&apos;,&apos;e&apos;,&apos;f&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: obj3</span><br><span class=\"line\">Out[99]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">e    4</span><br><span class=\"line\">f    4</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame,<code>reindex</code>可以修改(行)索引、列、或两个都修改。如果仅传入一个序列，则会重新索引行，使用<code>columns</code>关键字可以重新索引列,也可以同时对行和列进行重新索引，但插值只能按行应用(即轴0):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [105]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [106]: frame2 = frame.reindex([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [107]: frame2</span><br><span class=\"line\">Out[107]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">a   0.0   1.0   2.0</span><br><span class=\"line\">b   3.0   4.0   5.0</span><br><span class=\"line\">c   6.0   7.0   8.0</span><br><span class=\"line\">d   NaN   NaN   NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [108]: frame.reindex(columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\">Out[108]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a    NaN     0     1     2</span><br><span class=\"line\">b    NaN     3     4     5</span><br><span class=\"line\">c    NaN     6     7     8</span><br><span class=\"line\"></span><br><span class=\"line\">In [109]: frame.reindex(index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],method=&apos;ffill&apos;,columns=[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\">Out[109]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a      2     0     1     2</span><br><span class=\"line\">b      5     3     4     5</span><br><span class=\"line\">c      8     6     7     8</span><br><span class=\"line\">d      8     6     7     8</span><br></pre></td></tr></table></figure></p>\n<p>利用ix的标签索引功能重新索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [111]: frame.ix[[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],[&apos;col_a&apos;,&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;]]</span><br><span class=\"line\">Out[111]:</span><br><span class=\"line\">   col_a  col1  col2  col3</span><br><span class=\"line\">a    NaN   0.0   1.0   2.0</span><br><span class=\"line\">b    NaN   3.0   4.0   5.0</span><br><span class=\"line\">c    NaN   6.0   7.0   8.0</span><br><span class=\"line\">d    NaN   NaN   NaN   NaN</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"丢弃指定轴上的项\"><a href=\"#丢弃指定轴上的项\" class=\"headerlink\" title=\"丢弃指定轴上的项\"></a>丢弃指定轴上的项</h3><p>使用<code>drop</code>方法删除指定轴上的项，只需要传入一个索引数组或列表，对于DataFrame可以传入指定的轴(axis)来进行删除,返回的都是删除轴之后的新对象:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: obj = Series([1,2,3,4],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: obj.drop(&apos;a&apos;)</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: obj.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[114]:</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: frame = DataFrame(np.arange(9).reshape((3,3)),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;],columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: frame.drop([&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[116]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">c     6     7     8</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: frame.drop([&apos;col1&apos;,&apos;col2&apos;],axis=1)</span><br><span class=\"line\">Out[117]:</span><br><span class=\"line\">   col3</span><br><span class=\"line\">a     2</span><br><span class=\"line\">b     5</span><br><span class=\"line\">c     8</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"索引、选取和过滤\"><a href=\"#索引、选取和过滤\" class=\"headerlink\" title=\"索引、选取和过滤\"></a>索引、选取和过滤</h3><p>Series索引(obj[……])的工作方式类似于NumPy数组的索引，并且可以使用非整数；而利用切片运算其 <strong>末端时包含的(封闭)</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [3]: obj = Series(np.arange(4), index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [4]: obj</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [5]: obj[&apos;a&apos;]</span><br><span class=\"line\">Out[5]: 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [6]: obj[2:4]</span><br><span class=\"line\">Out[6]:</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [7]: obj[&apos;c&apos;:&apos;d&apos;]</span><br><span class=\"line\">Out[7]:</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [8]: obj[[&apos;a&apos;,&apos;d&apos;]]</span><br><span class=\"line\">Out[8]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: obj[&apos;b&apos;:&apos;c&apos;]=5</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    5</span><br><span class=\"line\">c    5</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure></p>\n<p>对DataFrame进行索引是获取一个或多个列，可以通过切片或布尔型数组选取行，也可以使用布尔型DataFrame进行索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: data = DataFrame(np.arange(16).reshape(4,4),</span><br><span class=\"line\">    ...:                 index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;],</span><br><span class=\"line\">    ...:                 columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: data</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: data[&apos;col1&apos;]</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">a     0</span><br><span class=\"line\">b     4</span><br><span class=\"line\">c     8</span><br><span class=\"line\">d    12</span><br><span class=\"line\">Name: col1, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: data[[&apos;col1&apos;,&apos;col4&apos;]]</span><br><span class=\"line\">Out[18]:</span><br><span class=\"line\">   col1  col4</span><br><span class=\"line\">a     0     3</span><br><span class=\"line\">b     4     7</span><br><span class=\"line\">c     8    11</span><br><span class=\"line\">d    12    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [19]: data[:2]</span><br><span class=\"line\">Out[19]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a     0     1     2     3</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: data[data[&apos;col3&apos;]&gt;5]</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">b     4     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: data&lt;5</span><br><span class=\"line\">Out[21]:</span><br><span class=\"line\">    col1   col2   col3   col4</span><br><span class=\"line\">a   True   True   True   True</span><br><span class=\"line\">b   True  False  False  False</span><br><span class=\"line\">c  False  False  False  False</span><br><span class=\"line\">d  False  False  False  False</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: data[data&lt;5] = -5</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: data</span><br><span class=\"line\">Out[23]:</span><br><span class=\"line\">   col1  col2  col3  col4</span><br><span class=\"line\">a    -5    -5    -5    -5</span><br><span class=\"line\">b    -5     5     6     7</span><br><span class=\"line\">c     8     9    10    11</span><br><span class=\"line\">d    12    13    14    15</span><br></pre></td></tr></table></figure></p>\n<p>为了在DataFrame的行上进行标签索引，可以通过<code>loc</code>进行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [48]: data.loc[&apos;a&apos;,[&apos;col1&apos;,&apos;col2&apos;]]</span><br><span class=\"line\">Out[48]:</span><br><span class=\"line\">col1   -5</span><br><span class=\"line\">col2   -5</span><br><span class=\"line\">Name: a, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [49]: data.loc[[&apos;a&apos;,&apos;d&apos;],[&apos;col1&apos;,&apos;col3&apos;]]</span><br><span class=\"line\">Out[49]:</span><br><span class=\"line\">   col1  col3</span><br><span class=\"line\">a    -5    -5</span><br><span class=\"line\">d    12    14</span><br><span class=\"line\"></span><br><span class=\"line\">In [50]: data.loc[data.col3&gt;5,:&apos;col3&apos;]</span><br><span class=\"line\">Out[50]:</span><br><span class=\"line\">   col1  col2  col3</span><br><span class=\"line\">b    -5     5     6</span><br><span class=\"line\">c     8     9    10</span><br><span class=\"line\">d    12    13    14</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"算术运算和数据对齐\"><a href=\"#算术运算和数据对齐\" class=\"headerlink\" title=\"算术运算和数据对齐\"></a>算术运算和数据对齐</h3><p>pandas可以对不同索引的对象进行算数运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是对该索引对的并集，自动的数据对齐操作在不重叠的索引处引入NA值，缺失值会在算术运算过程中传播:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [55]: s1 = Series(np.arange(3),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [56]: s2 = Series(np.arange(3,9),index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [57]: s1</span><br><span class=\"line\">Out[57]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [58]: s2</span><br><span class=\"line\">Out[58]:</span><br><span class=\"line\">a    3</span><br><span class=\"line\">b    4</span><br><span class=\"line\">c    5</span><br><span class=\"line\">d    6</span><br><span class=\"line\">e    7</span><br><span class=\"line\">f    8</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [59]: s1+s2</span><br><span class=\"line\">Out[59]:</span><br><span class=\"line\">a    3.0</span><br><span class=\"line\">b    5.0</span><br><span class=\"line\">c    7.0</span><br><span class=\"line\">d    NaN</span><br><span class=\"line\">e    NaN</span><br><span class=\"line\">f    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>对于DataFrame，对齐操作会同时发生在行和列上，它们相加后会返回一个新的DataFrame，其索引和列为原来两个DataFrame的并集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [65]: df1 = DataFrame(np.arange(9).reshape(3,3),columns=list(&apos;abc&apos;),</span><br><span class=\"line\">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [66]: df2 = DataFrame(np.arange(16).reshape(4,4),columns=list(&apos;abcd&apos;),</span><br><span class=\"line\">    ...:                 index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class=\"line\">    ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [67]: df1</span><br><span class=\"line\">Out[67]:</span><br><span class=\"line\">      a  b  c</span><br><span class=\"line\">row1  0  1  2</span><br><span class=\"line\">row2  3  4  5</span><br><span class=\"line\">row3  6  7  8</span><br><span class=\"line\"></span><br><span class=\"line\">In [68]: df2</span><br><span class=\"line\">Out[68]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   1   2   3</span><br><span class=\"line\">row2   4   5   6   7</span><br><span class=\"line\">row3   8   9  10  11</span><br><span class=\"line\">row4  12  13  14  15</span><br><span class=\"line\"></span><br><span class=\"line\">In [69]: df1+df2</span><br><span class=\"line\">Out[69]:</span><br><span class=\"line\">         a     b     c   d</span><br><span class=\"line\">row1   0.0   2.0   4.0 NaN</span><br><span class=\"line\">row2   7.0   9.0  11.0 NaN</span><br><span class=\"line\">row3  14.0  16.0  18.0 NaN</span><br><span class=\"line\">row4   NaN   NaN   NaN NaN</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在算术方法中填充值\"><a href=\"#在算术方法中填充值\" class=\"headerlink\" title=\"在算术方法中填充值\"></a>在算术方法中填充值</h4><ul>\n<li>灵活的算术方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\">用于加法(+)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub</td>\n<td style=\"text-align:center\">用于减法(-)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div</td>\n<td style=\"text-align:center\">用于除法(/)的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mul</td>\n<td style=\"text-align:center\">用于乘法(*)的方法</td>\n</tr>\n</tbody>\n</table>\n<p>对于不同索引的对戏那个进行算术运算时，当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值,在对Series或DataFrame重新索引时也可以指定一个填充值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [76]: df2.add(df1,fill_value=0)</span><br><span class=\"line\">Out[76]:</span><br><span class=\"line\">         a     b     c     d</span><br><span class=\"line\">row1   0.0   2.0   4.0   3.0</span><br><span class=\"line\">row2   7.0   9.0  11.0   7.0</span><br><span class=\"line\">row3  14.0  16.0  18.0  11.0</span><br><span class=\"line\">row4  12.0  13.0  14.0  15.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [77]: df1.reindex(columns=df2.columns,fill_value=0)</span><br><span class=\"line\">Out[77]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">row1  0  1  2  0</span><br><span class=\"line\">row2  3  4  5  0</span><br><span class=\"line\">row3  6  7  8  0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DataFrame和Series之间的运算\"><a href=\"#DataFrame和Series之间的运算\" class=\"headerlink\" title=\"DataFrame和Series之间的运算\"></a>DataFrame和Series之间的运算</h4><p>默认情况下DataFrame和Series之间的算术运算会讲Series的索引匹配到DataFrame的列，然后沿着行一直向下广播；如果某个索引值在DataFrame的列货Series的索引中找不到，则参与运算的两个对象就会被重新索引译形成并集；如果希望匹配行且在列上广播则必须使用算术运算方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [94]: s1 = df2.loc[&apos;row1&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">In [95]: df2</span><br><span class=\"line\">Out[95]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   1   2   3</span><br><span class=\"line\">row2   4   5   6   7</span><br><span class=\"line\">row3   8   9  10  11</span><br><span class=\"line\">row4  12  13  14  15</span><br><span class=\"line\"></span><br><span class=\"line\">In [96]: s1</span><br><span class=\"line\">Out[96]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    3</span><br><span class=\"line\">Name: row1, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [97]: df2-s1</span><br><span class=\"line\">Out[97]:</span><br><span class=\"line\">       a   b   c   d</span><br><span class=\"line\">row1   0   0   0   0</span><br><span class=\"line\">row2   4   4   4   4</span><br><span class=\"line\">row3   8   8   8   8</span><br><span class=\"line\">row4  12  12  12  12</span><br><span class=\"line\"></span><br><span class=\"line\">In [98]: s2 = Series(range(3),index=list(&apos;abf&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [99]: df2-s2</span><br><span class=\"line\">Out[99]:</span><br><span class=\"line\">         a     b   c   d   f</span><br><span class=\"line\">row1   0.0   0.0 NaN NaN NaN</span><br><span class=\"line\">row2   4.0   4.0 NaN NaN NaN</span><br><span class=\"line\">row3   8.0   8.0 NaN NaN NaN</span><br><span class=\"line\">row4  12.0  12.0 NaN NaN NaN</span><br><span class=\"line\"></span><br><span class=\"line\">In [100]: s3  = df2[&apos;a&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">Out[101]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">row1  0  1  2  3</span><br><span class=\"line\">row2  0  1  2  3</span><br><span class=\"line\">row3  0  1  2  3</span><br><span class=\"line\">row4  0  1  2  3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数应用和映射\"><a href=\"#函数应用和映射\" class=\"headerlink\" title=\"函数应用和映射\"></a>函数应用和映射</h3><p>NumPy的<a href=\"http://coldjune.com/2018/03/17/numpy%E5%9F%BA%E7%A1%80-%E4%BA%8C/#%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0\">ufuncs</a>(元素级数组方法)也可用于操作pandas对象:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [102]: frame = DataFrame(np.random.randn(4,3),columns=list(&apos;abc&apos;),</span><br><span class=\"line\">     ...:                   index=[&apos;row1&apos;,&apos;row2&apos;,&apos;row3&apos;,&apos;row4&apos;])</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [103]: frame</span><br><span class=\"line\">Out[103]:</span><br><span class=\"line\">             a         b         c</span><br><span class=\"line\">row1  0.755289  0.886977 -0.984527</span><br><span class=\"line\">row2  0.460170 -0.514393  0.180462</span><br><span class=\"line\">row3  0.828386 -0.545317 -1.176786</span><br><span class=\"line\">row4  0.860822 -1.659938  0.952070</span><br><span class=\"line\"></span><br><span class=\"line\">In [104]: np.abs(frame)</span><br><span class=\"line\">Out[104]:</span><br><span class=\"line\">             a         b         c</span><br><span class=\"line\">row1  0.755289  0.886977  0.984527</span><br><span class=\"line\">row2  0.460170  0.514393  0.180462</span><br><span class=\"line\">row3  0.828386  0.545317  1.176786</span><br><span class=\"line\">row4  0.860822  1.659938  0.952070</span><br></pre></td></tr></table></figure></p>\n<p><code>apply</code>方法可以将函数应用到各列或行所形成的一维数组上，许多常见的数组统计功能都被实现成DataFrame方法(如sum和mean)，因此无需使用<code>apply</code>方法；除标量外，传递给<code>apply</code>的函数还可以返回多个值组成的Series；元素级的Python函数也是可以使用的，可以使用<code>applymap</code>得到frame中各个浮点值的格式化字符串:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [112]: f = lambda x:x.max() -x.min()</span><br><span class=\"line\"></span><br><span class=\"line\">In [113]: frame.apply(f)</span><br><span class=\"line\">Out[113]:</span><br><span class=\"line\">a    0.400653</span><br><span class=\"line\">b    2.546915</span><br><span class=\"line\">c    2.128856</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [114]: def f(x):</span><br><span class=\"line\">     ...:     return Series([x.min(),x.max()],index=[&apos;min&apos;,&apos;max&apos;])</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [115]: frame.apply(f)</span><br><span class=\"line\">Out[115]:</span><br><span class=\"line\">            a         b         c</span><br><span class=\"line\">min  0.460170 -1.659938 -1.176786</span><br><span class=\"line\">max  0.860822  0.886977  0.952070</span><br><span class=\"line\"></span><br><span class=\"line\">In [116]: format = lambda x: &apos;%.2f&apos; % x</span><br><span class=\"line\"></span><br><span class=\"line\">In [117]: frame.applymap(format)</span><br><span class=\"line\">Out[117]:</span><br><span class=\"line\">         a      b      c</span><br><span class=\"line\">row1  0.76   0.89  -0.98</span><br><span class=\"line\">row2  0.46  -0.51   0.18</span><br><span class=\"line\">row3  0.83  -0.55  -1.18</span><br><span class=\"line\">row4  0.86  -1.66   0.95</span><br><span class=\"line\"></span><br><span class=\"line\">In [118]: frame[&apos;a&apos;].map(format)</span><br><span class=\"line\">Out[118]:</span><br><span class=\"line\">row1    0.76</span><br><span class=\"line\">row2    0.46</span><br><span class=\"line\">row3    0.83</span><br><span class=\"line\">row4    0.86</span><br><span class=\"line\">Name: a, dtype: object</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"排序和排名\"><a href=\"#排序和排名\" class=\"headerlink\" title=\"排序和排名\"></a>排序和排名</h3><h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>使用<code>sort_index</code>方法对行或列索引进行排序(按字典顺序)，它将返回一个已排序的对象；对于DataFrame则可以根据任意一个轴上的索引进行排序；数据默认时按升序进行排序的，可以设置<code>ascending=False</code>来降序排序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [134]: obj = Series(range(4), index=list(&apos;dabc&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [135]: obj.sort_index()</span><br><span class=\"line\">Out[135]:</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    0</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [136]: frame = DataFrame(np.arange(8).reshape((2,4)),index=[&apos;col2&apos;,&apos;col1&apos;],</span><br><span class=\"line\">     ...:                    columns=list(&apos;badc&apos;))</span><br><span class=\"line\">     ...:</span><br><span class=\"line\"></span><br><span class=\"line\">In [137]: frame.sort_index()</span><br><span class=\"line\">Out[137]:</span><br><span class=\"line\">      b  a  d  c</span><br><span class=\"line\">col1  4  5  6  7</span><br><span class=\"line\">col2  0  1  2  3</span><br><span class=\"line\"></span><br><span class=\"line\">In [138]: frame.sort_index(axis=1)</span><br><span class=\"line\">Out[138]:</span><br><span class=\"line\">      a  b  c  d</span><br><span class=\"line\">col2  1  0  3  2</span><br><span class=\"line\">col1  5  4  7  6</span><br><span class=\"line\"></span><br><span class=\"line\">In [139]: frame.sort_index(axis=1, ascending=False)</span><br><span class=\"line\">Out[139]:</span><br><span class=\"line\">      d  c  b  a</span><br><span class=\"line\">col2  2  3  0  1</span><br><span class=\"line\">col1  6  7  4  5</span><br></pre></td></tr></table></figure></p>\n<p><code>sort_values</code>方法用于按值进行排序，在排序时，任何的缺失值默认都会放到Series的末尾：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [144]: obj.sort_values()</span><br><span class=\"line\">Out[144]:</span><br><span class=\"line\">4   -3.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">0    4.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">1    NaN</span><br><span class=\"line\">3    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>在DataFrame中，可以将一个或多个列的名字传递给by选项来根据一个或多个列中的值进行排序，要根据多个列进行排序，可以传入名称的列表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [150]: frame  = DataFrame(&#123;&apos;b&apos;:[2,5,0,1],&apos;a&apos;:[0,1,0,1]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [151]: frame</span><br><span class=\"line\">Out[151]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">1  1  5</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\"></span><br><span class=\"line\">In [152]: frame.sort_values(by=&apos;b&apos;)</span><br><span class=\"line\">Out[152]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">1  1  5</span><br><span class=\"line\"></span><br><span class=\"line\">In [153]: frame.sort_values(by=[&apos;a&apos;,&apos;b&apos;])</span><br><span class=\"line\">Out[153]:</span><br><span class=\"line\">   a  b</span><br><span class=\"line\">2  0  0</span><br><span class=\"line\">0  0  2</span><br><span class=\"line\">3  1  1</span><br><span class=\"line\">1  1  5</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h4><p>排名会增设一个排名值(从1开始，一直到数组中有效的数据的数量)，它可以根据某种规则破坏平级关系；<code>rank</code>是通过“为各组分配一个平均排名”的方式破坏平级关系<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。</p>\n<ul>\n<li>排名用于破坏平级关系的method的选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">method</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘average’</td>\n<td style=\"text-align:center\">默认：在相等分组中，为各个值分配平均排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘min’</td>\n<td style=\"text-align:center\">使用整个分组的最小排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘max’</td>\n<td style=\"text-align:center\">使用整个分组的最大排名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘first’</td>\n<td style=\"text-align:center\">按值在原始数据中的出现顺序分配排名</td>\n</tr>\n</tbody>\n</table>\n<p>按降序进行排名使用<code>ascending=False</code>，其他的相似:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj.rank()</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">0    6.5</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.5</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.5</span><br><span class=\"line\">5    2.5</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class=\"line\">Out[12]:</span><br><span class=\"line\">0    7.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    3.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [9]: obj = Series([7,6,7,5,4,4,3])</span><br><span class=\"line\"></span><br><span class=\"line\">In [10]: obj.rank()</span><br><span class=\"line\">Out[10]:</span><br><span class=\"line\">0    6.5</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.5</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.5</span><br><span class=\"line\">5    2.5</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [11]: obj.rank(method=&apos;min&apos;)</span><br><span class=\"line\">Out[11]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    6.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    2.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [12]: obj.rank(method=&apos;max&apos;)</span><br><span class=\"line\">Out[12]:</span><br><span class=\"line\">0    7.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    3.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: obj.rank(method=&apos;first&apos;)</span><br><span class=\"line\">Out[13]:</span><br><span class=\"line\">0    6.0</span><br><span class=\"line\">1    5.0</span><br><span class=\"line\">2    7.0</span><br><span class=\"line\">3    4.0</span><br><span class=\"line\">4    2.0</span><br><span class=\"line\">5    3.0</span><br><span class=\"line\">6    1.0</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure></p>\n<p>DataFrame可以在行或列上计算排名:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [15]: frame = DataFrame(&#123;&apos;b&apos;:[1,3,-1],&apos;a&apos;:[2,-1,-2],&apos;c&apos;:[1,2,3]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [16]: frame</span><br><span class=\"line\">Out[16]:</span><br><span class=\"line\">   a  b  c</span><br><span class=\"line\">0  2  1  1</span><br><span class=\"line\">1 -1  3  2</span><br><span class=\"line\">2 -2 -1  3</span><br><span class=\"line\"></span><br><span class=\"line\">In [17]: frame.rank(axis=0)</span><br><span class=\"line\">Out[17]:</span><br><span class=\"line\">     a    b    c</span><br><span class=\"line\">0  3.0  2.0  1.0</span><br><span class=\"line\">1  2.0  3.0  2.0</span><br><span class=\"line\">2  1.0  1.0  3.0</span><br><span class=\"line\"></span><br><span class=\"line\">In [18]: frame.rank(axis=1)</span><br><span class=\"line\">Out[18]:</span><br><span class=\"line\">     a    b    c</span><br><span class=\"line\">0  3.0  1.5  1.5</span><br><span class=\"line\">1  1.0  3.0  2.0</span><br><span class=\"line\">2  1.0  2.0  3.0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"带有重复值的轴索引\"><a href=\"#带有重复值的轴索引\" class=\"headerlink\" title=\"带有重复值的轴索引\"></a>带有重复值的轴索引</h3><p>带有重复索引值的Series和DataFrame可以使用<code>is_unique</code>属性确认它是否唯一；对于带有重复值的索引，如果某个值对应多个值，则会返回一个Series(或DataFrame)；而对应单个值则返回一个标量(Series)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [19]: obj = Series(range(5),index=list(&apos;abbvd&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">In [20]: obj</span><br><span class=\"line\">Out[20]:</span><br><span class=\"line\">a    0</span><br><span class=\"line\">b    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">v    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">In [21]: obj.index.is_unique</span><br><span class=\"line\">Out[21]: False</span><br><span class=\"line\"></span><br><span class=\"line\">In [22]: obj[&apos;a&apos;]</span><br><span class=\"line\">Out[22]: 0</span><br><span class=\"line\"></span><br><span class=\"line\">In [23]: obj[&apos;b&apos;]</span><br><span class=\"line\">Out[23]:</span><br><span class=\"line\">b    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">In [24]: df = DataFrame(np.random.randn(4,3),index=[&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">In [26]: df</span><br><span class=\"line\">Out[26]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">a  2.139973  0.102242  0.366141</span><br><span class=\"line\">a -0.999559  0.324575 -0.808672</span><br><span class=\"line\">b  1.121435  1.508694  1.151597</span><br><span class=\"line\">c  0.610592  1.623871 -1.331131</span><br><span class=\"line\"></span><br><span class=\"line\">In [27]: df.loc[&apos;c&apos;]</span><br><span class=\"line\">Out[27]:</span><br><span class=\"line\">0    0.610592</span><br><span class=\"line\">1    1.623871</span><br><span class=\"line\">2   -1.331131</span><br><span class=\"line\">Name: c, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">In [28]: df.loc[&apos;a&apos;]</span><br><span class=\"line\">Out[28]:</span><br><span class=\"line\">          0         1         2</span><br><span class=\"line\">a  2.139973  0.102242  0.366141</span><br><span class=\"line\">a -0.999559  0.324575 -0.808672</span><br></pre></td></tr></table></figure></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">破坏平级关系是指在两个相同的数之间确认先后顺序。使用average表示如果在数组中7排在第五位和第六位，则其排名为5.5。min则为min(5,6)为5；max则为max(5,6)为7；first则表示在原数据中先出现排序靠前，紧邻的+1，依次递增。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"全双工聊天室","date":"2018-03-04T06:33:16.000Z","copyright":true,"description":null,"_content":"在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。\n<!--More-->\n## 设计思路\n- GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类\n- 客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容\n- 编程线程的通用类，使所有线程的实现都通过该类，便于统一管理\n- 完成客户端和服务器端的代码并进行整合调试\n\n## 实现代码\n\n### GUI的基类\n>chat_base.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport tkinter as tk\n\n\nclass ChatWindowBase(object):\n    # 窗口的基类，创建通用的窗口布局\n    def __init__(self):\n        # 初始化方法\n        # 创建tkinter.TK()顶层窗口\n        # 所有主要控件都是构建在顶层窗口对象之上\n        # 通过tkinter.TK()创建\n        self.top = tk.Tk()\n        # 在顶层窗口上添加Label控件\n        self.label = tk.Label(self.top, text='聊天室')\n        # 通过Packer来管理和显示控件\n        # 调用pack()方法显示布局\n        self.label.pack()\n\n        # 通过Frame控件创建子容器，用于存放其他控件\n        # 该对象将作为单个子对象代替父对象\n        self.chatfm = tk.Frame(self.top)\n        # Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表\n        self.chatsb = tk.Scrollbar(self.chatfm)\n        # 将Scrollbar放置在子容器的右侧，并且是针对y轴\n        self.chatsb.pack(side='right', fill='y')\n        # 在子容器中创建高为15宽为50的Listbox\n        # 将Listbox和Scrollbar关联起来\n        # 显示列表\n        # 显示子容器\n        # 控件的显示应该内部控件先显示，再显示外部控件\n        self.chats = tk.Listbox(self.chatfm, height=15,\n                                width=50, yscrollcommand=self.chatsb.set)\n        self.chatsb.config(command=self.chats.yview())\n        self.chats.pack(side='left', fill='both')\n        self.chatfm.pack()\n\n        # 创建发送消息的子容器\n        self.sendfm = tk.Frame(self.top, width=50)\n        # 创建输入框\n        # 绑定回车键，并且绑定send方法\n        # 绑定一个方法是指在触发一个事件时会去调用的方法\n        self.chatn = tk.Entry(self.sendfm, width=40)\n        self.chatn.bind('<Return>', self.send)\n        self.chatn.pack(side='left')\n        # 添加按钮控件、绑定方法\n        self.sendchat = tk.Button(self.sendfm, text='发送', command=self.send)\n        self.sendchat.pack(side='right', fill='both')\n        self.sendfm.pack()\n\n    def send(self, ev=None):\n        # 创建发送消息的方法\n        # 空实现是为了继承时扩展\n        pass\n\n    def receive(self):\n        # 创建接受消息的方法\n        # 空实现是为了继承时扩展\n        pass\n```\n\n### 线程的通用类\n> chat_thread.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\n\n\nclass ChatThread(threading.Thread):\n    # 继承自threading.Thread，用于创建聊天室的通用线程\n    def __init__(self, func, args):\n        # func: 方法\n        # args：方法所需要的参数\n        threading.Thread.__init__(self)\n        self.func = func\n        self.args = args\n\n    def run(self):\n        # 实现run方法，将参数传给相应的方法\n        self.func(*self.args)\n\n```\n\n### 服务端\n>chat_s.py\n\n```Python\n#!/usr/bin/python3\n#  -*- coding:UTF-8 -*-\n\nfrom chat_base import ChatWindowBase\nfrom chat_thread import ChatThread\nfrom socket import *\nfrom time import ctime\nimport tkinter\n\nHOST = ''\nPORT = 12345\nADDR = (HOST, PORT)\n\nBUFSIZ = 1024\n\n\nclass ChatS(ChatWindowBase):\n    # 服务器的实现类，继承自ChatWindowBase\n    def __init__(self):\n        # 调用父类的__init__()方法\n        super(ChatS, self).__init__()\n        self.label.configure(text='服务器')\n        # 设置属性\n        # 用于保存客户端链接对象\n        # 用于保存客户端链接地址\n        self.send_sock = None\n        self.addr = ''\n        # 在服务器窗口创建时调用\n        self.receive()\n\n    def send(self, ev=None):\n        # 获取输入框信息\n        message = self.chatn.get()\n        # 启动线程\n        ChatThread(self.send_s, (message,)).start()\n        # 将输入框信息按照格式显示在Listbox\n        self.chats.insert('end', '[%s]:to %s\\n' % (ctime(), self.addr))\n        self.chats.insert('end', '%s' % message)\n        # 删除输入框内容\n        self.chatn.delete(first=0, last=len(message)+1)\n\n    def receive(self):\n        # 创建socket链接\n        # 绑定地址\n        # 设置监听\n        # 阻塞直到有链接调用，然后保存链接的客户端对象和地址\n        sock = socket(AF_INET, SOCK_STREAM)\n        sock.bind(ADDR)\n        sock.listen(5)\n        cli_sock, addr = sock.accept()\n        self.addr = addr\n        self.send_sock = cli_sock\n        print('addr', addr)\n        # 有链接接入时在Listbox中显示消息\n        self.chats.insert('end', '%s 上线' % str(addr))\n        # 更新顶层窗口\n        self.top.update()\n        # 启动接受消息的线程\n        ChatThread(self.receive_s, (cli_sock, addr)).start()\n\n    def send_s(self, message):\n        # 向客户端发送消息\n        self.send_sock.send(bytes(message, 'utf-8'))\n\n    def receive_s(self, cli_sock, addr):\n        # 接受消息\n        # cli_sock: 客户端sock\n        # addr: 客户端地址\n        while True:\n            # 进入无限循环接受消息，并在Listbox显示消息\n            receiveData = cli_sock.recv(BUFSIZ)\n            print('接受到消息', receiveData.decode('utf-8'))\n            self.chats.insert('end', '[%s]:from %s' % (ctime(), addr))\n            self.chats.insert('end', '%s' % receiveData.decode('utf-8'))\n            self.top.update()\n\n\ndef main():\n    # 创建服务器窗口\n    s = ChatS()\n    # 调用mainloop()运行整个GUI\n    tkinter.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 客户端\n> chat_c.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom chat_base import ChatWindowBase\nfrom chat_thread import ChatThread\nfrom socket import *\nfrom time import ctime\nimport tkinter\n\nHOST = '127.0.0.1'\nPORT = 12345\nADDR = (HOST, PORT)\nBUFSIZ = 1024\n\n\nclass ChatC(ChatWindowBase):\n    # 客户端的实现类，继承子ChatWindowBase方法\n    def __init__(self):\n        # 初始化方法\n        # 在子类中必须调用父类的__init__()方法\n        super(ChatC, self).__init__()\n        # 设置label的标题\n        self.label.configure(text='客户端')\n        # 设置属性，用于保存sock对象用于发送和接受消息\n        self.sock = None\n        # 在创建窗口时链接服务器，\n        # 客户端需要比服务器后创建\n        # 否则链接会创建失败\n        self.receive()\n\n    def send(self, ev=None):\n        # 继承自父类，为控件调用的方法\n        # 获取输入框的值\n        message = self.chatn.get()\n        # 创建发送消息的线程\n        # 将方法和方法需要的参数用作线程初始化，并启动线程\n        ChatThread(self.send_c, (message,)).start()\n        # 在Listbox中按格式显示消息\n        self.chats.insert('end', '[%s]:to %s' % (ctime(), ADDR))\n        self.chats.insert('end', '%s' % message)\n        # 删除输入框中的消息\n        self.chatn.delete(first=0, last=len(message)+1)\n        # 通过更新顶层窗口显示消息\n        self.top.update()\n\n    def receive(self):\n        # 继承自父类\n        # 创建socket链接\n        self.sock = socket(AF_INET, SOCK_STREAM)\n        self.sock.connect(ADDR)\n        # 启动线程\n        # 将方法和方法需要的参数用作线程初始化，并启动线程\n        ChatThread(self.receive_c, (self.sock,)).start()\n\n    def send_c(self, message):\n        # 调用sock的send方法，向服务器发送消息\n        self.sock.send(bytes(message, 'utf-8'))\n\n    def receive_c(self, sock):\n        # 接受服务器数据的方法\n        while True:\n            # 进入循环，等待服务器发送的消息\n            data = sock.recv(BUFSIZ)\n            # 将消息按照格式显示到Listbox中\n            self.chats.insert('end', '[%s]:from %s' % (ctime(), ADDR))\n            self.chats.insert('end', '%s' % data.decode('utf-8'))\n            # 更新控件\n            self.top.update()\n\n\ndef main():\n    # 实例化客户端窗口\n    c = ChatC()\n    # 调用mainloop方法运行整个GUI\n    tkinter.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n[源代码](https://github.com/coldJune/Python/tree/master/chat)","source":"_posts/全双工聊天室.md","raw":"---\ntitle: 全双工聊天室\ndate: 2018-03-04 14:33:16\ncategories: Python\ncopyright: true\ntags:\n    - Python\n    - 多线程\n    - GUI\n    - 网络编程\ndescription:\n---\n在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。\n<!--More-->\n## 设计思路\n- GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类\n- 客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容\n- 编程线程的通用类，使所有线程的实现都通过该类，便于统一管理\n- 完成客户端和服务器端的代码并进行整合调试\n\n## 实现代码\n\n### GUI的基类\n>chat_base.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport tkinter as tk\n\n\nclass ChatWindowBase(object):\n    # 窗口的基类，创建通用的窗口布局\n    def __init__(self):\n        # 初始化方法\n        # 创建tkinter.TK()顶层窗口\n        # 所有主要控件都是构建在顶层窗口对象之上\n        # 通过tkinter.TK()创建\n        self.top = tk.Tk()\n        # 在顶层窗口上添加Label控件\n        self.label = tk.Label(self.top, text='聊天室')\n        # 通过Packer来管理和显示控件\n        # 调用pack()方法显示布局\n        self.label.pack()\n\n        # 通过Frame控件创建子容器，用于存放其他控件\n        # 该对象将作为单个子对象代替父对象\n        self.chatfm = tk.Frame(self.top)\n        # Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表\n        self.chatsb = tk.Scrollbar(self.chatfm)\n        # 将Scrollbar放置在子容器的右侧，并且是针对y轴\n        self.chatsb.pack(side='right', fill='y')\n        # 在子容器中创建高为15宽为50的Listbox\n        # 将Listbox和Scrollbar关联起来\n        # 显示列表\n        # 显示子容器\n        # 控件的显示应该内部控件先显示，再显示外部控件\n        self.chats = tk.Listbox(self.chatfm, height=15,\n                                width=50, yscrollcommand=self.chatsb.set)\n        self.chatsb.config(command=self.chats.yview())\n        self.chats.pack(side='left', fill='both')\n        self.chatfm.pack()\n\n        # 创建发送消息的子容器\n        self.sendfm = tk.Frame(self.top, width=50)\n        # 创建输入框\n        # 绑定回车键，并且绑定send方法\n        # 绑定一个方法是指在触发一个事件时会去调用的方法\n        self.chatn = tk.Entry(self.sendfm, width=40)\n        self.chatn.bind('<Return>', self.send)\n        self.chatn.pack(side='left')\n        # 添加按钮控件、绑定方法\n        self.sendchat = tk.Button(self.sendfm, text='发送', command=self.send)\n        self.sendchat.pack(side='right', fill='both')\n        self.sendfm.pack()\n\n    def send(self, ev=None):\n        # 创建发送消息的方法\n        # 空实现是为了继承时扩展\n        pass\n\n    def receive(self):\n        # 创建接受消息的方法\n        # 空实现是为了继承时扩展\n        pass\n```\n\n### 线程的通用类\n> chat_thread.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nimport threading\n\n\nclass ChatThread(threading.Thread):\n    # 继承自threading.Thread，用于创建聊天室的通用线程\n    def __init__(self, func, args):\n        # func: 方法\n        # args：方法所需要的参数\n        threading.Thread.__init__(self)\n        self.func = func\n        self.args = args\n\n    def run(self):\n        # 实现run方法，将参数传给相应的方法\n        self.func(*self.args)\n\n```\n\n### 服务端\n>chat_s.py\n\n```Python\n#!/usr/bin/python3\n#  -*- coding:UTF-8 -*-\n\nfrom chat_base import ChatWindowBase\nfrom chat_thread import ChatThread\nfrom socket import *\nfrom time import ctime\nimport tkinter\n\nHOST = ''\nPORT = 12345\nADDR = (HOST, PORT)\n\nBUFSIZ = 1024\n\n\nclass ChatS(ChatWindowBase):\n    # 服务器的实现类，继承自ChatWindowBase\n    def __init__(self):\n        # 调用父类的__init__()方法\n        super(ChatS, self).__init__()\n        self.label.configure(text='服务器')\n        # 设置属性\n        # 用于保存客户端链接对象\n        # 用于保存客户端链接地址\n        self.send_sock = None\n        self.addr = ''\n        # 在服务器窗口创建时调用\n        self.receive()\n\n    def send(self, ev=None):\n        # 获取输入框信息\n        message = self.chatn.get()\n        # 启动线程\n        ChatThread(self.send_s, (message,)).start()\n        # 将输入框信息按照格式显示在Listbox\n        self.chats.insert('end', '[%s]:to %s\\n' % (ctime(), self.addr))\n        self.chats.insert('end', '%s' % message)\n        # 删除输入框内容\n        self.chatn.delete(first=0, last=len(message)+1)\n\n    def receive(self):\n        # 创建socket链接\n        # 绑定地址\n        # 设置监听\n        # 阻塞直到有链接调用，然后保存链接的客户端对象和地址\n        sock = socket(AF_INET, SOCK_STREAM)\n        sock.bind(ADDR)\n        sock.listen(5)\n        cli_sock, addr = sock.accept()\n        self.addr = addr\n        self.send_sock = cli_sock\n        print('addr', addr)\n        # 有链接接入时在Listbox中显示消息\n        self.chats.insert('end', '%s 上线' % str(addr))\n        # 更新顶层窗口\n        self.top.update()\n        # 启动接受消息的线程\n        ChatThread(self.receive_s, (cli_sock, addr)).start()\n\n    def send_s(self, message):\n        # 向客户端发送消息\n        self.send_sock.send(bytes(message, 'utf-8'))\n\n    def receive_s(self, cli_sock, addr):\n        # 接受消息\n        # cli_sock: 客户端sock\n        # addr: 客户端地址\n        while True:\n            # 进入无限循环接受消息，并在Listbox显示消息\n            receiveData = cli_sock.recv(BUFSIZ)\n            print('接受到消息', receiveData.decode('utf-8'))\n            self.chats.insert('end', '[%s]:from %s' % (ctime(), addr))\n            self.chats.insert('end', '%s' % receiveData.decode('utf-8'))\n            self.top.update()\n\n\ndef main():\n    # 创建服务器窗口\n    s = ChatS()\n    # 调用mainloop()运行整个GUI\n    tkinter.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 客户端\n> chat_c.py\n\n```Python\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nfrom chat_base import ChatWindowBase\nfrom chat_thread import ChatThread\nfrom socket import *\nfrom time import ctime\nimport tkinter\n\nHOST = '127.0.0.1'\nPORT = 12345\nADDR = (HOST, PORT)\nBUFSIZ = 1024\n\n\nclass ChatC(ChatWindowBase):\n    # 客户端的实现类，继承子ChatWindowBase方法\n    def __init__(self):\n        # 初始化方法\n        # 在子类中必须调用父类的__init__()方法\n        super(ChatC, self).__init__()\n        # 设置label的标题\n        self.label.configure(text='客户端')\n        # 设置属性，用于保存sock对象用于发送和接受消息\n        self.sock = None\n        # 在创建窗口时链接服务器，\n        # 客户端需要比服务器后创建\n        # 否则链接会创建失败\n        self.receive()\n\n    def send(self, ev=None):\n        # 继承自父类，为控件调用的方法\n        # 获取输入框的值\n        message = self.chatn.get()\n        # 创建发送消息的线程\n        # 将方法和方法需要的参数用作线程初始化，并启动线程\n        ChatThread(self.send_c, (message,)).start()\n        # 在Listbox中按格式显示消息\n        self.chats.insert('end', '[%s]:to %s' % (ctime(), ADDR))\n        self.chats.insert('end', '%s' % message)\n        # 删除输入框中的消息\n        self.chatn.delete(first=0, last=len(message)+1)\n        # 通过更新顶层窗口显示消息\n        self.top.update()\n\n    def receive(self):\n        # 继承自父类\n        # 创建socket链接\n        self.sock = socket(AF_INET, SOCK_STREAM)\n        self.sock.connect(ADDR)\n        # 启动线程\n        # 将方法和方法需要的参数用作线程初始化，并启动线程\n        ChatThread(self.receive_c, (self.sock,)).start()\n\n    def send_c(self, message):\n        # 调用sock的send方法，向服务器发送消息\n        self.sock.send(bytes(message, 'utf-8'))\n\n    def receive_c(self, sock):\n        # 接受服务器数据的方法\n        while True:\n            # 进入循环，等待服务器发送的消息\n            data = sock.recv(BUFSIZ)\n            # 将消息按照格式显示到Listbox中\n            self.chats.insert('end', '[%s]:from %s' % (ctime(), ADDR))\n            self.chats.insert('end', '%s' % data.decode('utf-8'))\n            # 更新控件\n            self.top.update()\n\n\ndef main():\n    # 实例化客户端窗口\n    c = ChatC()\n    # 调用mainloop方法运行整个GUI\n    tkinter.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n[源代码](https://github.com/coldJune/Python/tree/master/chat)","slug":"全双工聊天室","published":1,"updated":"2018-03-06T00:31:21.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjezchw5l001itwn9zskse194","content":"<p>在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。<br><a id=\"more\"></a></p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><ul>\n<li>GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类</li>\n<li>客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容</li>\n<li>编程线程的通用类，使所有线程的实现都通过该类，便于统一管理</li>\n<li>完成客户端和服务器端的代码并进行整合调试</li>\n</ul>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><h3 id=\"GUI的基类\"><a href=\"#GUI的基类\" class=\"headerlink\" title=\"GUI的基类\"></a>GUI的基类</h3><blockquote>\n<p>chat_base.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatWindowBase</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 窗口的基类，创建通用的窗口布局</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建tkinter.TK()顶层窗口</span></span><br><span class=\"line\">        <span class=\"comment\"># 所有主要控件都是构建在顶层窗口对象之上</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过tkinter.TK()创建</span></span><br><span class=\"line\">        self.top = tk.Tk()</span><br><span class=\"line\">        <span class=\"comment\"># 在顶层窗口上添加Label控件</span></span><br><span class=\"line\">        self.label = tk.Label(self.top, text=<span class=\"string\">'聊天室'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 通过Packer来管理和显示控件</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用pack()方法显示布局</span></span><br><span class=\"line\">        self.label.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 通过Frame控件创建子容器，用于存放其他控件</span></span><br><span class=\"line\">        <span class=\"comment\"># 该对象将作为单个子对象代替父对象</span></span><br><span class=\"line\">        self.chatfm = tk.Frame(self.top)</span><br><span class=\"line\">        <span class=\"comment\"># Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表</span></span><br><span class=\"line\">        self.chatsb = tk.Scrollbar(self.chatfm)</span><br><span class=\"line\">        <span class=\"comment\"># 将Scrollbar放置在子容器的右侧，并且是针对y轴</span></span><br><span class=\"line\">        self.chatsb.pack(side=<span class=\"string\">'right'</span>, fill=<span class=\"string\">'y'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 在子容器中创建高为15宽为50的Listbox</span></span><br><span class=\"line\">        <span class=\"comment\"># 将Listbox和Scrollbar关联起来</span></span><br><span class=\"line\">        <span class=\"comment\"># 显示列表</span></span><br><span class=\"line\">        <span class=\"comment\"># 显示子容器</span></span><br><span class=\"line\">        <span class=\"comment\"># 控件的显示应该内部控件先显示，再显示外部控件</span></span><br><span class=\"line\">        self.chats = tk.Listbox(self.chatfm, height=<span class=\"number\">15</span>,</span><br><span class=\"line\">                                width=<span class=\"number\">50</span>, yscrollcommand=self.chatsb.set)</span><br><span class=\"line\">        self.chatsb.config(command=self.chats.yview())</span><br><span class=\"line\">        self.chats.pack(side=<span class=\"string\">'left'</span>, fill=<span class=\"string\">'both'</span>)</span><br><span class=\"line\">        self.chatfm.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的子容器</span></span><br><span class=\"line\">        self.sendfm = tk.Frame(self.top, width=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 创建输入框</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定回车键，并且绑定send方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定一个方法是指在触发一个事件时会去调用的方法</span></span><br><span class=\"line\">        self.chatn = tk.Entry(self.sendfm, width=<span class=\"number\">40</span>)</span><br><span class=\"line\">        self.chatn.bind(<span class=\"string\">'&lt;Return&gt;'</span>, self.send)</span><br><span class=\"line\">        self.chatn.pack(side=<span class=\"string\">'left'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 添加按钮控件、绑定方法</span></span><br><span class=\"line\">        self.sendchat = tk.Button(self.sendfm, text=<span class=\"string\">'发送'</span>, command=self.send)</span><br><span class=\"line\">        self.sendchat.pack(side=<span class=\"string\">'right'</span>, fill=<span class=\"string\">'both'</span>)</span><br><span class=\"line\">        self.sendfm.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 空实现是为了继承时扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建接受消息的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 空实现是为了继承时扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"线程的通用类\"><a href=\"#线程的通用类\" class=\"headerlink\" title=\"线程的通用类\"></a>线程的通用类</h3><blockquote>\n<p>chat_thread.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承自threading.Thread，用于创建聊天室的通用线程</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># func: 方法</span></span><br><span class=\"line\">        <span class=\"comment\"># args：方法所需要的参数</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 实现run方法，将参数传给相应的方法</span></span><br><span class=\"line\">        self.func(*self.args)</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><blockquote>\n<p>chat_s.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#  -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_base <span class=\"keyword\">import</span> ChatWindowBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_thread <span class=\"keyword\">import</span> ChatThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">BUFSIZ = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatS</span><span class=\"params\">(ChatWindowBase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 服务器的实现类，继承自ChatWindowBase</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的__init__()方法</span></span><br><span class=\"line\">        super(ChatS, self).__init__()</span><br><span class=\"line\">        self.label.configure(text=<span class=\"string\">'服务器'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置属性</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于保存客户端链接对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于保存客户端链接地址</span></span><br><span class=\"line\">        self.send_sock = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.addr = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"comment\"># 在服务器窗口创建时调用</span></span><br><span class=\"line\">        self.receive()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取输入框信息</span></span><br><span class=\"line\">        message = self.chatn.get()</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        ChatThread(self.send_s, (message,)).start()</span><br><span class=\"line\">        <span class=\"comment\"># 将输入框信息按照格式显示在Listbox</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:to %s\\n'</span> % (ctime(), self.addr))</span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % message)</span><br><span class=\"line\">        <span class=\"comment\"># 删除输入框内容</span></span><br><span class=\"line\">        self.chatn.delete(first=<span class=\"number\">0</span>, last=len(message)+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建socket链接</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定地址</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">        <span class=\"comment\"># 阻塞直到有链接调用，然后保存链接的客户端对象和地址</span></span><br><span class=\"line\">        sock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">        sock.bind(ADDR)</span><br><span class=\"line\">        sock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        cli_sock, addr = sock.accept()</span><br><span class=\"line\">        self.addr = addr</span><br><span class=\"line\">        self.send_sock = cli_sock</span><br><span class=\"line\">        print(<span class=\"string\">'addr'</span>, addr)</span><br><span class=\"line\">        <span class=\"comment\"># 有链接接入时在Listbox中显示消息</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s 上线'</span> % str(addr))</span><br><span class=\"line\">        <span class=\"comment\"># 更新顶层窗口</span></span><br><span class=\"line\">        self.top.update()</span><br><span class=\"line\">        <span class=\"comment\"># 启动接受消息的线程</span></span><br><span class=\"line\">        ChatThread(self.receive_s, (cli_sock, addr)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_s</span><span class=\"params\">(self, message)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 向客户端发送消息</span></span><br><span class=\"line\">        self.send_sock.send(bytes(message, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive_s</span><span class=\"params\">(self, cli_sock, addr)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 接受消息</span></span><br><span class=\"line\">        <span class=\"comment\"># cli_sock: 客户端sock</span></span><br><span class=\"line\">        <span class=\"comment\"># addr: 客户端地址</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 进入无限循环接受消息，并在Listbox显示消息</span></span><br><span class=\"line\">            receiveData = cli_sock.recv(BUFSIZ)</span><br><span class=\"line\">            print(<span class=\"string\">'接受到消息'</span>, receiveData.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:from %s'</span> % (ctime(), addr))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % receiveData.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建服务器窗口</span></span><br><span class=\"line\">    s = ChatS()</span><br><span class=\"line\">    <span class=\"comment\"># 调用mainloop()运行整个GUI</span></span><br><span class=\"line\">    tkinter.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><blockquote>\n<p>chat_c.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_base <span class=\"keyword\">import</span> ChatWindowBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_thread <span class=\"keyword\">import</span> ChatThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\">BUFSIZ = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatC</span><span class=\"params\">(ChatWindowBase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 客户端的实现类，继承子ChatWindowBase方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 在子类中必须调用父类的__init__()方法</span></span><br><span class=\"line\">        super(ChatC, self).__init__()</span><br><span class=\"line\">        <span class=\"comment\"># 设置label的标题</span></span><br><span class=\"line\">        self.label.configure(text=<span class=\"string\">'客户端'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置属性，用于保存sock对象用于发送和接受消息</span></span><br><span class=\"line\">        self.sock = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 在创建窗口时链接服务器，</span></span><br><span class=\"line\">        <span class=\"comment\"># 客户端需要比服务器后创建</span></span><br><span class=\"line\">        <span class=\"comment\"># 否则链接会创建失败</span></span><br><span class=\"line\">        self.receive()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 继承自父类，为控件调用的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取输入框的值</span></span><br><span class=\"line\">        message = self.chatn.get()</span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的线程</span></span><br><span class=\"line\">        <span class=\"comment\"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class=\"line\">        ChatThread(self.send_c, (message,)).start()</span><br><span class=\"line\">        <span class=\"comment\"># 在Listbox中按格式显示消息</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:to %s'</span> % (ctime(), ADDR))</span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % message)</span><br><span class=\"line\">        <span class=\"comment\"># 删除输入框中的消息</span></span><br><span class=\"line\">        self.chatn.delete(first=<span class=\"number\">0</span>, last=len(message)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 通过更新顶层窗口显示消息</span></span><br><span class=\"line\">        self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 继承自父类</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建socket链接</span></span><br><span class=\"line\">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">        self.sock.connect(ADDR)</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        <span class=\"comment\"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class=\"line\">        ChatThread(self.receive_c, (self.sock,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_c</span><span class=\"params\">(self, message)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用sock的send方法，向服务器发送消息</span></span><br><span class=\"line\">        self.sock.send(bytes(message, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive_c</span><span class=\"params\">(self, sock)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 接受服务器数据的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 进入循环，等待服务器发送的消息</span></span><br><span class=\"line\">            data = sock.recv(BUFSIZ)</span><br><span class=\"line\">            <span class=\"comment\"># 将消息按照格式显示到Listbox中</span></span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:from %s'</span> % (ctime(), ADDR))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 更新控件</span></span><br><span class=\"line\">            self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 实例化客户端窗口</span></span><br><span class=\"line\">    c = ChatC()</span><br><span class=\"line\">    <span class=\"comment\"># 调用mainloop方法运行整个GUI</span></span><br><span class=\"line\">    tkinter.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/chat\" target=\"_blank\" rel=\"noopener\">源代码</a></p>\n","site":{"data":{}},"excerpt":"<p>在前面的学习中，学习了正则表达式、多线程、网络编程、数据库等相关知识点。这里结合多线程、网络编程、GUI等相关内容实现了一个全双工的聊天室。<br>","more":"</p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><ul>\n<li>GUI部分框架的搭建，并编写通用部分代码，完成显示部分的基类</li>\n<li>客户端和服务器对GUI基类进行扩展，用于显示各自特有的内容</li>\n<li>编程线程的通用类，使所有线程的实现都通过该类，便于统一管理</li>\n<li>完成客户端和服务器端的代码并进行整合调试</li>\n</ul>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><h3 id=\"GUI的基类\"><a href=\"#GUI的基类\" class=\"headerlink\" title=\"GUI的基类\"></a>GUI的基类</h3><blockquote>\n<p>chat_base.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatWindowBase</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 窗口的基类，创建通用的窗口布局</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建tkinter.TK()顶层窗口</span></span><br><span class=\"line\">        <span class=\"comment\"># 所有主要控件都是构建在顶层窗口对象之上</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过tkinter.TK()创建</span></span><br><span class=\"line\">        self.top = tk.Tk()</span><br><span class=\"line\">        <span class=\"comment\"># 在顶层窗口上添加Label控件</span></span><br><span class=\"line\">        self.label = tk.Label(self.top, text=<span class=\"string\">'聊天室'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 通过Packer来管理和显示控件</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用pack()方法显示布局</span></span><br><span class=\"line\">        self.label.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 通过Frame控件创建子容器，用于存放其他控件</span></span><br><span class=\"line\">        <span class=\"comment\"># 该对象将作为单个子对象代替父对象</span></span><br><span class=\"line\">        self.chatfm = tk.Frame(self.top)</span><br><span class=\"line\">        <span class=\"comment\"># Scrollbar可以让显示的数据在超过Listbox的大小时能够移动列表</span></span><br><span class=\"line\">        self.chatsb = tk.Scrollbar(self.chatfm)</span><br><span class=\"line\">        <span class=\"comment\"># 将Scrollbar放置在子容器的右侧，并且是针对y轴</span></span><br><span class=\"line\">        self.chatsb.pack(side=<span class=\"string\">'right'</span>, fill=<span class=\"string\">'y'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 在子容器中创建高为15宽为50的Listbox</span></span><br><span class=\"line\">        <span class=\"comment\"># 将Listbox和Scrollbar关联起来</span></span><br><span class=\"line\">        <span class=\"comment\"># 显示列表</span></span><br><span class=\"line\">        <span class=\"comment\"># 显示子容器</span></span><br><span class=\"line\">        <span class=\"comment\"># 控件的显示应该内部控件先显示，再显示外部控件</span></span><br><span class=\"line\">        self.chats = tk.Listbox(self.chatfm, height=<span class=\"number\">15</span>,</span><br><span class=\"line\">                                width=<span class=\"number\">50</span>, yscrollcommand=self.chatsb.set)</span><br><span class=\"line\">        self.chatsb.config(command=self.chats.yview())</span><br><span class=\"line\">        self.chats.pack(side=<span class=\"string\">'left'</span>, fill=<span class=\"string\">'both'</span>)</span><br><span class=\"line\">        self.chatfm.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的子容器</span></span><br><span class=\"line\">        self.sendfm = tk.Frame(self.top, width=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 创建输入框</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定回车键，并且绑定send方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定一个方法是指在触发一个事件时会去调用的方法</span></span><br><span class=\"line\">        self.chatn = tk.Entry(self.sendfm, width=<span class=\"number\">40</span>)</span><br><span class=\"line\">        self.chatn.bind(<span class=\"string\">'&lt;Return&gt;'</span>, self.send)</span><br><span class=\"line\">        self.chatn.pack(side=<span class=\"string\">'left'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 添加按钮控件、绑定方法</span></span><br><span class=\"line\">        self.sendchat = tk.Button(self.sendfm, text=<span class=\"string\">'发送'</span>, command=self.send)</span><br><span class=\"line\">        self.sendchat.pack(side=<span class=\"string\">'right'</span>, fill=<span class=\"string\">'both'</span>)</span><br><span class=\"line\">        self.sendfm.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 空实现是为了继承时扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建接受消息的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 空实现是为了继承时扩展</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"线程的通用类\"><a href=\"#线程的通用类\" class=\"headerlink\" title=\"线程的通用类\"></a>线程的通用类</h3><blockquote>\n<p>chat_thread.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 继承自threading.Thread，用于创建聊天室的通用线程</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, args)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># func: 方法</span></span><br><span class=\"line\">        <span class=\"comment\"># args：方法所需要的参数</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 实现run方法，将参数传给相应的方法</span></span><br><span class=\"line\">        self.func(*self.args)</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><blockquote>\n<p>chat_s.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#  -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_base <span class=\"keyword\">import</span> ChatWindowBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_thread <span class=\"keyword\">import</span> ChatThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">''</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\"></span><br><span class=\"line\">BUFSIZ = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatS</span><span class=\"params\">(ChatWindowBase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 服务器的实现类，继承自ChatWindowBase</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的__init__()方法</span></span><br><span class=\"line\">        super(ChatS, self).__init__()</span><br><span class=\"line\">        self.label.configure(text=<span class=\"string\">'服务器'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置属性</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于保存客户端链接对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于保存客户端链接地址</span></span><br><span class=\"line\">        self.send_sock = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.addr = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"comment\"># 在服务器窗口创建时调用</span></span><br><span class=\"line\">        self.receive()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取输入框信息</span></span><br><span class=\"line\">        message = self.chatn.get()</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        ChatThread(self.send_s, (message,)).start()</span><br><span class=\"line\">        <span class=\"comment\"># 将输入框信息按照格式显示在Listbox</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:to %s\\n'</span> % (ctime(), self.addr))</span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % message)</span><br><span class=\"line\">        <span class=\"comment\"># 删除输入框内容</span></span><br><span class=\"line\">        self.chatn.delete(first=<span class=\"number\">0</span>, last=len(message)+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建socket链接</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定地址</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">        <span class=\"comment\"># 阻塞直到有链接调用，然后保存链接的客户端对象和地址</span></span><br><span class=\"line\">        sock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">        sock.bind(ADDR)</span><br><span class=\"line\">        sock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        cli_sock, addr = sock.accept()</span><br><span class=\"line\">        self.addr = addr</span><br><span class=\"line\">        self.send_sock = cli_sock</span><br><span class=\"line\">        print(<span class=\"string\">'addr'</span>, addr)</span><br><span class=\"line\">        <span class=\"comment\"># 有链接接入时在Listbox中显示消息</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s 上线'</span> % str(addr))</span><br><span class=\"line\">        <span class=\"comment\"># 更新顶层窗口</span></span><br><span class=\"line\">        self.top.update()</span><br><span class=\"line\">        <span class=\"comment\"># 启动接受消息的线程</span></span><br><span class=\"line\">        ChatThread(self.receive_s, (cli_sock, addr)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_s</span><span class=\"params\">(self, message)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 向客户端发送消息</span></span><br><span class=\"line\">        self.send_sock.send(bytes(message, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive_s</span><span class=\"params\">(self, cli_sock, addr)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 接受消息</span></span><br><span class=\"line\">        <span class=\"comment\"># cli_sock: 客户端sock</span></span><br><span class=\"line\">        <span class=\"comment\"># addr: 客户端地址</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 进入无限循环接受消息，并在Listbox显示消息</span></span><br><span class=\"line\">            receiveData = cli_sock.recv(BUFSIZ)</span><br><span class=\"line\">            print(<span class=\"string\">'接受到消息'</span>, receiveData.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:from %s'</span> % (ctime(), addr))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % receiveData.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建服务器窗口</span></span><br><span class=\"line\">    s = ChatS()</span><br><span class=\"line\">    <span class=\"comment\"># 调用mainloop()运行整个GUI</span></span><br><span class=\"line\">    tkinter.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><blockquote>\n<p>chat_c.py</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_base <span class=\"keyword\">import</span> ChatWindowBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> chat_thread <span class=\"keyword\">import</span> ChatThread</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'127.0.0.1'</span></span><br><span class=\"line\">PORT = <span class=\"number\">12345</span></span><br><span class=\"line\">ADDR = (HOST, PORT)</span><br><span class=\"line\">BUFSIZ = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatC</span><span class=\"params\">(ChatWindowBase)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 客户端的实现类，继承子ChatWindowBase方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 在子类中必须调用父类的__init__()方法</span></span><br><span class=\"line\">        super(ChatC, self).__init__()</span><br><span class=\"line\">        <span class=\"comment\"># 设置label的标题</span></span><br><span class=\"line\">        self.label.configure(text=<span class=\"string\">'客户端'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置属性，用于保存sock对象用于发送和接受消息</span></span><br><span class=\"line\">        self.sock = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 在创建窗口时链接服务器，</span></span><br><span class=\"line\">        <span class=\"comment\"># 客户端需要比服务器后创建</span></span><br><span class=\"line\">        <span class=\"comment\"># 否则链接会创建失败</span></span><br><span class=\"line\">        self.receive()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, ev=None)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 继承自父类，为控件调用的方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取输入框的值</span></span><br><span class=\"line\">        message = self.chatn.get()</span><br><span class=\"line\">        <span class=\"comment\"># 创建发送消息的线程</span></span><br><span class=\"line\">        <span class=\"comment\"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class=\"line\">        ChatThread(self.send_c, (message,)).start()</span><br><span class=\"line\">        <span class=\"comment\"># 在Listbox中按格式显示消息</span></span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:to %s'</span> % (ctime(), ADDR))</span><br><span class=\"line\">        self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % message)</span><br><span class=\"line\">        <span class=\"comment\"># 删除输入框中的消息</span></span><br><span class=\"line\">        self.chatn.delete(first=<span class=\"number\">0</span>, last=len(message)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 通过更新顶层窗口显示消息</span></span><br><span class=\"line\">        self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 继承自父类</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建socket链接</span></span><br><span class=\"line\">        self.sock = socket(AF_INET, SOCK_STREAM)</span><br><span class=\"line\">        self.sock.connect(ADDR)</span><br><span class=\"line\">        <span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">        <span class=\"comment\"># 将方法和方法需要的参数用作线程初始化，并启动线程</span></span><br><span class=\"line\">        ChatThread(self.receive_c, (self.sock,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_c</span><span class=\"params\">(self, message)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用sock的send方法，向服务器发送消息</span></span><br><span class=\"line\">        self.sock.send(bytes(message, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">receive_c</span><span class=\"params\">(self, sock)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 接受服务器数据的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 进入循环，等待服务器发送的消息</span></span><br><span class=\"line\">            data = sock.recv(BUFSIZ)</span><br><span class=\"line\">            <span class=\"comment\"># 将消息按照格式显示到Listbox中</span></span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'[%s]:from %s'</span> % (ctime(), ADDR))</span><br><span class=\"line\">            self.chats.insert(<span class=\"string\">'end'</span>, <span class=\"string\">'%s'</span> % data.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 更新控件</span></span><br><span class=\"line\">            self.top.update()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 实例化客户端窗口</span></span><br><span class=\"line\">    c = ChatC()</span><br><span class=\"line\">    <span class=\"comment\"># 调用mainloop方法运行整个GUI</span></span><br><span class=\"line\">    tkinter.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/coldJune/Python/tree/master/chat\" target=\"_blank\" rel=\"noopener\">源代码</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjezchw3z0007twn97qw9jgdd","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw4f000dtwn98t53t78s"},{"post_id":"cjezchw3b0000twn931fi1pxt","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw4f000gtwn9gbm75hpo"},{"post_id":"cjezchw3z0008twn9g0a77uxk","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw4f000itwn9kldbhx70"},{"post_id":"cjezchw3z000btwn9havj1o7j","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw4f000ltwn9xxlhb5bc"},{"post_id":"cjezchw3z0006twn9e9su8cu5","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw4f000otwn98zb049a1"},{"post_id":"cjezchw3z000ctwn9564bqjx7","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw4w000stwn9g8oj5ub9"},{"post_id":"cjezchw4f000ftwn9aj850hnj","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw50000vtwn9y3bnv65l"},{"post_id":"cjezchw4f000htwn9al0ws0d2","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw51000xtwn9vwyyrt44"},{"post_id":"cjezchw4f000ktwn9cu8gkity","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw540011twn9q5wkkyu5"},{"post_id":"cjezchw4f000ntwn9a39s8p5f","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw550014twn9y0jl1kmw"},{"post_id":"cjezchw4f000rtwn90iaff7y5","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw550017twn93nygfzcq"},{"post_id":"cjezchw4y000utwn96jefmw2c","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw550019twn924pin9bj"},{"post_id":"cjezchw50000wtwn990p98o8c","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw55001ctwn9yq1nc1ta"},{"post_id":"cjezchw520010twn95sfughkh","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw55001ftwn9k2z4gw6n"},{"post_id":"cjezchw550013twn9wi6eb8qa","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw5l001jtwn9etso3a5c"},{"post_id":"cjezchw550016twn9paje48y7","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw5l001ktwn9mx6s4eji"},{"post_id":"cjezchw550018twn968j4bwq5","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw5l001mtwn9qkc3grpt"},{"post_id":"cjezchw55001btwn93npr8gsx","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw5l001otwn99egdhacf"},{"post_id":"cjezchw55001etwn9wm8dyg8k","category_id":"cjezchw3z0009twn94ncnsk9p","_id":"cjezchw5l001rtwn9iahh4eg7"},{"post_id":"cjezchw5l001itwn9zskse194","category_id":"cjezchw3j0004twn9nzrp4cva","_id":"cjezchw5l001stwn9cer5bshu"}],"PostTag":[{"post_id":"cjezchw3b0000twn931fi1pxt","tag_id":"cjezchw3z0005twn9ekeksyqt","_id":"cjezchw4f000mtwn9lx6nfp02"},{"post_id":"cjezchw3b0000twn931fi1pxt","tag_id":"cjezchw3z000atwn9b0heep76","_id":"cjezchw4f000ptwn9q5r6tqdz"},{"post_id":"cjezchw3b0000twn931fi1pxt","tag_id":"cjezchw4f000etwn9bx1ux19k","_id":"cjezchw4x000ttwn99ckkkjzx"},{"post_id":"cjezchw3z0006twn9e9su8cu5","tag_id":"cjezchw4f000jtwn9dchomya4","_id":"cjezchw52000ztwn9jl4cpacr"},{"post_id":"cjezchw3z0006twn9e9su8cu5","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw550012twn9uzld7c9e"},{"post_id":"cjezchw3z0007twn97qw9jgdd","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw55001dtwn9jded5drj"},{"post_id":"cjezchw3z0007twn97qw9jgdd","tag_id":"cjezchw550015twn9msf9lrmb","_id":"cjezchw55001gtwn9cw3qrtyc"},{"post_id":"cjezchw3z0008twn9g0a77uxk","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw5l001ntwn9k92w9v27"},{"post_id":"cjezchw3z0008twn9g0a77uxk","tag_id":"cjezchw55001htwn9j9eyavc9","_id":"cjezchw5l001ptwn9vg9cnkin"},{"post_id":"cjezchw3z000btwn9havj1o7j","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw5l001utwn9cz08m7nd"},{"post_id":"cjezchw3z000btwn9havj1o7j","tag_id":"cjezchw550015twn9msf9lrmb","_id":"cjezchw5l001vtwn95dra2w9v"},{"post_id":"cjezchw3z000ctwn9564bqjx7","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw5l001ytwn9fa7f8tk7"},{"post_id":"cjezchw3z000ctwn9564bqjx7","tag_id":"cjezchw5l001wtwn9j82lmo63","_id":"cjezchw5l001ztwn979r0nbb2"},{"post_id":"cjezchw4f000ftwn9aj850hnj","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw5l0022twn9hdjwdp2q"},{"post_id":"cjezchw4f000ftwn9aj850hnj","tag_id":"cjezchw5l0020twn94gvwvqpz","_id":"cjezchw600023twn9box9btcw"},{"post_id":"cjezchw4f000htwn9al0ws0d2","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw600026twn9e8pyxwpw"},{"post_id":"cjezchw4f000htwn9al0ws0d2","tag_id":"cjezchw600024twn9eu6acmxt","_id":"cjezchw600027twn9tdl310sr"},{"post_id":"cjezchw4f000ktwn9cu8gkity","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw60002atwn9tga753hz"},{"post_id":"cjezchw4f000ktwn9cu8gkity","tag_id":"cjezchw600024twn9eu6acmxt","_id":"cjezchw60002btwn99ei1ex1f"},{"post_id":"cjezchw4f000ntwn9a39s8p5f","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw60002etwn9ycbvc7lp"},{"post_id":"cjezchw4f000ntwn9a39s8p5f","tag_id":"cjezchw600024twn9eu6acmxt","_id":"cjezchw60002ftwn9g7wf1jqi"},{"post_id":"cjezchw4f000rtwn90iaff7y5","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw60002itwn9py1efs8g"},{"post_id":"cjezchw4f000rtwn90iaff7y5","tag_id":"cjezchw60002gtwn9sy4az2kx","_id":"cjezchw60002jtwn9bn1m9m6i"},{"post_id":"cjezchw4y000utwn96jefmw2c","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw60002mtwn9v6x5j5sg"},{"post_id":"cjezchw4y000utwn96jefmw2c","tag_id":"cjezchw60002gtwn9sy4az2kx","_id":"cjezchw60002ntwn9o36mxds1"},{"post_id":"cjezchw50000wtwn990p98o8c","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw60002qtwn94ll4r2ny"},{"post_id":"cjezchw50000wtwn990p98o8c","tag_id":"cjezchw5l001wtwn9j82lmo63","_id":"cjezchw60002rtwn908pkuv20"},{"post_id":"cjezchw520010twn95sfughkh","tag_id":"cjezchw60002ptwn9509tt5u5","_id":"cjezchw60002ttwn940rv5i6b"},{"post_id":"cjezchw520010twn95sfughkh","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw60002utwn9ogx7vg48"},{"post_id":"cjezchw550013twn9wi6eb8qa","tag_id":"cjezchw60002stwn9cimu2d3w","_id":"cjezchw6g002xtwn9ksziz5lu"},{"post_id":"cjezchw550013twn9wi6eb8qa","tag_id":"cjezchw60002vtwn94edi0p97","_id":"cjezchw6g002ytwn9z6rgbv6z"},{"post_id":"cjezchw550016twn9paje48y7","tag_id":"cjezchw60002ptwn9509tt5u5","_id":"cjezchw6i0030twn9rrocj9o2"},{"post_id":"cjezchw550016twn9paje48y7","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw6i0031twn9b8vscxvf"},{"post_id":"cjezchw550018twn968j4bwq5","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw6j0033twn96ivmypm3"},{"post_id":"cjezchw550018twn968j4bwq5","tag_id":"cjezchw6h002ztwn9elq29hlh","_id":"cjezchw6j0034twn9khnkviy7"},{"post_id":"cjezchw55001btwn93npr8gsx","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw6k0036twn9xpwr9qha"},{"post_id":"cjezchw55001btwn93npr8gsx","tag_id":"cjezchw6h002ztwn9elq29hlh","_id":"cjezchw6k0037twn9wj07z1zd"},{"post_id":"cjezchw55001etwn9wm8dyg8k","tag_id":"cjezchw6h002ztwn9elq29hlh","_id":"cjezchw6l0039twn9en1vwo7n"},{"post_id":"cjezchw55001etwn9wm8dyg8k","tag_id":"cjezchw4f000qtwn99imshgtk","_id":"cjezchw6l003atwn95mlrl12i"},{"post_id":"cjezchw5l001itwn9zskse194","tag_id":"cjezchw52000ytwn9eqtyivkr","_id":"cjezchw6l003ctwn9rgujt203"},{"post_id":"cjezchw5l001itwn9zskse194","tag_id":"cjezchw550015twn9msf9lrmb","_id":"cjezchw6l003dtwn9ydq4jcxc"},{"post_id":"cjezchw5l001itwn9zskse194","tag_id":"cjezchw6k0038twn9fezck9oa","_id":"cjezchw6l003etwn9vjhxba47"},{"post_id":"cjezchw5l001itwn9zskse194","tag_id":"cjezchw60002gtwn9sy4az2kx","_id":"cjezchw6m003ftwn9jyzxsqxh"}],"Tag":[{"name":"Web编程","_id":"cjezchw3z0005twn9ekeksyqt"},{"name":"CGI","_id":"cjezchw3z000atwn9b0heep76"},{"name":"WSGI","_id":"cjezchw4f000etwn9bx1ux19k"},{"name":"IPython","_id":"cjezchw4f000jtwn9dchomya4"},{"name":"数据分析","_id":"cjezchw4f000qtwn99imshgtk"},{"name":"Python","_id":"cjezchw52000ytwn9eqtyivkr"},{"name":"多线程","_id":"cjezchw550015twn9msf9lrmb"},{"name":"Web客户端和服务器","_id":"cjezchw55001htwn9j9eyavc9"},{"name":"数据库编程","_id":"cjezchw5l001wtwn9j82lmo63"},{"name":"文本处理","_id":"cjezchw5l0020twn94gvwvqpz"},{"name":"正则表达式","_id":"cjezchw600024twn9eu6acmxt"},{"name":"网络编程","_id":"cjezchw60002gtwn9sy4az2kx"},{"name":"NumPy","_id":"cjezchw60002ptwn9509tt5u5"},{"name":"Web框架","_id":"cjezchw60002stwn9cimu2d3w"},{"name":"Django","_id":"cjezchw60002vtwn94edi0p97"},{"name":"pandas","_id":"cjezchw6h002ztwn9elq29hlh"},{"name":"GUI","_id":"cjezchw6k0038twn9fezck9oa"}]}}